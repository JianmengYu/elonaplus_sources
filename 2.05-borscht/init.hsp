#defcfunc hantozen str hantozen_arg1, var hantozen_arg2, int hantozen_arg3
	return LCMapStringA(GetUserDefaultLCID(), 8388608, hantozen_arg1, -1, hantozen_arg2, hantozen_arg3)

#defcfunc zentohan str zentohan_arg1, var zentohan_arg2, int zentohan_arg3
	return LCMapStringA(GetUserDefaultLCID(), 4194304, zentohan_arg1, -1, zentohan_arg2, zentohan_arg3)
	goto *label_0009

#deffunc tmset
	timeBeginPeriod 1
	return

#deffunc tmend
	timeEndPeriod 1
	return

*label_0009
	goto *label_0016

#defcfunc lang str lang_jp, str lang_en
	if ( jp ) {
		return lang_jp
	}
	else {
		return lang_en
	}

#defcfunc cnvrank int cnvrank_rank
	if ( jp ) {
		return "" + cnvrank_rank
	}
	if ( cnvrank_rank \ 10 == 1 ) {
		if ( cnvrank_rank != 11 ) {
			return "" + cnvrank_rank + "st"
		}
	}
	if ( cnvrank_rank \ 10 == 2 ) {
		if ( cnvrank_rank != 12 ) {
			return "" + cnvrank_rank + "nd"
		}
	}
	if ( cnvrank_rank \ 10 == 3 ) {
		if ( cnvrank_rank != 13 ) {
			return "" + cnvrank_rank + "rd"
		}
	}
	return "" + cnvrank_rank + "th"

#defcfunc cnvtalk str cnvtalk_str
	return "\"" + cnvtalk_str + "\" "

#defcfunc cnvarticle str cnvarticle_str
	if ( jp ) {
		return cnvarticle_str
	}
	return "[" + cnvarticle_str + "]"

#defcfunc cnvitemname int cnvitemname_itemid
	if ( cnvitemname_itemid == ITEM_ID_WILD_FLOWER ) {
		return iknownnameref(cnvitemname_itemid)
	}
	if ( jp ) {
		return ioriginalnameref(cnvitemname_itemid)
	}
	if ( ioriginalnameref2(cnvitemname_itemid) == "" ) {
		return ioriginalnameref(cnvitemname_itemid)
	}
	return ioriginalnameref2(cnvitemname_itemid) + " of " + ioriginalnameref(cnvitemname_itemid)

#defcfunc cnven str cnven_str
	if ( jp ) {
		return cnven_str
	}
	locvar_cnven_s = cnven_str
	locvar_cnven_p = peek(locvar_cnven_s, 0)
	if ( locvar_cnven_p == 42 ) {
		locvar_cnven_p = peek(locvar_cnven_s, 1)
		if ( locvar_cnven_p >= 97 ) {
			if ( locvar_cnven_p <= 122 ) {
				poke locvar_cnven_s, 1, locvar_cnven_p - 32
			}
		}
	}
	else {
		if ( locvar_cnven_p >= 97 ) {
			if ( locvar_cnven_p <= 122 ) {
				poke locvar_cnven_s, 0, locvar_cnven_p - 32
			}
		}
	}
	return locvar_cnven_s

*label_0016
	goto *label_0019

#defcfunc cbit int cbit_bit, int cbit_charid
	HMMBITCHECK cdata(STARTING_CDATA_CHARA_BIT + cbit_bit / 32, cbit_charid), cbit_bit \ 32
	return stat

#deffunc cbitmod int cbitmod_bit, int cbitmod_charid, int cbitmod_seton
	if ( cbitmod_seton == FALSE ) {
		HMMBITOFF cdata(STARTING_CDATA_CHARA_BIT + cbitmod_bit / 32, cbitmod_charid), cbitmod_bit \ 32
		return
	}
	HMMBITON cdata(STARTING_CDATA_CHARA_BIT + cbitmod_bit / 32, cbitmod_charid), cbitmod_bit \ 32
	return
	return

*label_0019
	goto *label_0021

#defcfunc refchara int refchara_dbid, int refchara_dbspec, int refchara_charid
	dbmode = DBMODE_REF_SPEC
	dbid = refchara_dbid
	dbspec = refchara_dbspec
	gosub *db_creature
	if ( refchara_charid == 0 ) {
		return stat
	}
	else {
		return refstr
	}

*label_0021
	goto *label_0023

#defcfunc refclass int refclass_dbid, int refclass_dbspec
	dbmode = DBMODE_REF_SPEC
	dbidn = cdatan(CDATAN_CLASS, refclass_dbid)
	dbspec = refclass_dbspec
	gosub *db_class
	return stat

*label_0023
	goto *label_0025

#defcfunc refrace str refrace_dbidn, int refrace_dbspec
	dbmode = DBMODE_REF_SPEC
	dbidn = refrace_dbidn
	dbspec = refrace_dbspec
	gosub *db_race
	return stat

*label_0025
	goto *rank_init

#defcfunc ranktitle int ranktitle_rank
	locvar_ranktitle_p = gdata(ranktitle_rank + 120) / 100
	if ( locvar_ranktitle_p == 1 ) {
		return rankn(0, ranktitle_rank)
	}
	if ( locvar_ranktitle_p <= 5 ) {
		return rankn(1, ranktitle_rank)
	}
	if ( locvar_ranktitle_p <= 10 ) {
		return rankn(2, ranktitle_rank)
	}
	if ( locvar_ranktitle_p <= 80 ) {
		return rankn(locvar_ranktitle_p / 15 + 3, ranktitle_rank)
	}
	return rankn(9, ranktitle_rank)

*rank_init
	sdim rankn, 30, 11, 9
	if ( jp ) {
		rankn(0, 0) = "アリーナのチャンピオン", "アリーナの超エリート闘士", "アリーナのスター闘士", "アリーナのエリート闘士", "アリーナの熟練闘士", "アリーナの中堅闘士", "アリーナの期待の星", "アリーナのダークホース", "アリーナの下級闘士", "アリーナの無名の闘士", "アリーナ"
		rankn(0, 1) = "全てのペットの王", "超エリートペット使い", "ペットの王子", "ペットの憧れの的", "ペット使いのエリート", "名の知れたペット使い", "ペットの母", "なかなかのペット使い", "駆け出しのペット使い", "無名のペット使い", "ペットアリーナ"
		rankn(0, 2) = "ネフィアを統べる者", "迷宮の覇者", "ダンジョンの主", "高名な探検者", "子供達の憧れの的", "ダンジョン案内人", "名の知れた遺跡荒らし", "探検者", "ちんけな遺跡荒らし", "観光客", "クローラー"
		rankn(0, 3) = "ティリス最大の博物館", "超有名な博物館", "大人気の博物館", "有名な博物館", "来客の絶えない博物館", "ちょっと人気のある博物館", "名の知れた博物館", "まあまあの博物館", "来客の少ない博物館", "無名の博物館", "博物館"
		rankn(0, 4) = "イルヴァの楽園", "超セレブな家", "世界有数の家", "とても住みたくなる家", "主婦の憧れの家", "ちょっと人目をひく家", "まあまあの家", "少しみすぼらしい家", "貧困にあえぐ家", "乞食の家", "ホーム"
		rankn(0, 5) = "イルヴァ最大の店", "王様が来る店", "大繁盛している店", "セレブが来る店", "来客の絶えない店", "マダムの来る店", "リピーターのいる店", "人が増えてきた売店", "ほとんど売れない売店", "無名の売店", "店"
		rankn(0, 6) = "ボス", "王様のアドバイザー", "エリートコンサルター", "ご意見番", "有権者の鑑", "マダム好みの有権者", "名の知れた有権者", "普通の有権者", "無関心な有権者", "ぎりぎり有権者", "コミュニティ"
		rankn(0, 8) = "次代ギルドマスター", "ギルドマスターの右腕", "ギルドの重役", "ギルドの重役候補", "アダプト", "エキスパート", "ジャーニーマン", "ギルドの正式メンバー", "ギルドのメンバー候補", "見習い", "ギルド"
	}
	else {
		rankn(0, 0) = "Arena champion", "Super elite gladiator", "Star gladiator", "Elite gladiator", "Veteran gladiator", "Popular gladiator", "New hope", "Darkhorse", "Low class fighter", "Unknown fighter", "Arena"
		rankn(0, 1) = "King of tamer", "Super elite tamer", "Prince of animals", "Chief of animals", "Elite tamer", "Notorious tamer", "New hope", "Average tamer", "Petty tamer", "Unknown tamer", "Pet Arena"
		rankn(0, 2) = "King of Nefia", "Champion of labyrinth", "Dungeon master", "Famous adventurer", "Children's star", "Guide of Nefia", "Notorious tomb robber", "Tomb robber", "Famous tourist", "Tourist", "Crawler"
		rankn(0, 3) = "Tyris' greatest museum", "Royal museum", "Great museum", "Top museum", "Great museum", "Good museum", "Average museum", "Small museum", "Unknown museum", "Unknown Ruin", "Museum"
		rankn(0, 4) = "Heaven of Tyris", "Royal mansion", "Celebrity mansion", "Dream mansion", "Cozy mansion", "Attractive house", "Average house", "Poor house", "Peasant's shack", "Beggar's shack", "Home"
		rankn(0, 5) = "Tyris' greatest mall", "Royal mall", "Prosperous mall", "Celebrity shop", "Prosperous shop", "Popular shop", "Average shop", "Small shop", "Souvenir shop ", "Unknown shop", "Shop"
		rankn(0, 6) = "Boss", "King's advisor", "Elite consultant", "Famous consultant", "Model voter", "Nice voter", "Infamous voter", "Average voter", "Indifferent voter", "Almost voter", "Community"
		rankn(0, 8) = "Next master", "Master", "Adept", "Expert", "Journeyman", "Senior", "Apprentice", "Official member", "Candidate", "Thug", "Guild"
	}
	dim ranknorma, 9
	ranknorma(RANK_ARENA) = 20
	ranknorma(RANK_PET_ARENA) = 60
	ranknorma(RANK_CRAWLER) = 45
	ranknorma(RANK_VOTE) = 30
	return
	goto *politics_init

#defcfunc guildname
	locvar_guildname_s = lang("なし", "None")
	if ( gdata(GDATA_FLAG_GUILD_MAGE) != 0 ) {
		locvar_guildname_s = lang("魔術士ギルド", "Mages Guild")
	}
	if ( gdata(GDATA_FLAG_GUILD_FIGHTER) != 0 ) {
		locvar_guildname_s = lang("戦士ギルド", "Fighters Guild")
	}
	if ( gdata(GDATA_FLAG_GUILD_THIEF) != 0 ) {
		locvar_guildname_s = lang("盗賊ギルド", "Thieves Guild")
	}
	return locvar_guildname_s

*politics_init
	sdim popostname, 20, 7
	popostname(1) = lang("市長", "mayor")
	popostname(2) = lang("村長", "chief")
	popostname(3) = lang("司祭", "priest")
	popostname(4) = lang("守衛長", "guard master")
	popostname(5) = lang("徴税官", "tax master")
	popostname(6) = lang("建設主任", "head architect")
	dim pochart, 10, 10, 10
	pochart(0, 0, 0) = 2
	pochart(0, 1, 0) = 3, 4
	pochart(0, 2, 0) = 5, 6
	dim podata, 300, 20
	return

*building_init
	dim bddata, 40, 20, 10
	dim bdref, 10, 7
	sdim bdrefn, 20, 7
	bdref(0, 1) = 0, 1500
	bdref(0, 2) = 1, 2500
	bdref(0, 3) = 2, 2500
	bdref(0, 4) = 3, 2500
	bdref(0, 5) = 4, 2500
	bdref(0, 6) = 5, 2500
	bdrefn(1) = lang("炭鉱", "Mine")
	bdrefn(2) = lang("畑", "Crop")
	bdrefn(3) = lang("アトリエ", "Art Atelier")
	bdrefn(4) = lang("寺院", "Temple")
	bdrefn(5) = lang("盗賊の隠れ家", "Smuggler's Hideout")
	bdrefn(6) = lang("灯台", "Light House")
	return

*bRefDefine
	dim bdataref, 7, 67
	sdim buffname, 20, 67
	sdim bufftxt, 30, 2, 67
	sdim buffdesc, 200
	bdataref(BDATAREF_BUFF_TYPE, BUFF_HOLY_SHIELD) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_HOLY_SHIELD) = lang("聖なる盾", "Holy Shield")
	bufftxt(0, BUFF_HOLY_SHIELD) = lang("は光り輝いた。", "begin"), " to shine."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_GEM_POWER) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_GEM_POWER) = lang("守護石", "Gem Power")
	bufftxt(0, BUFF_GEM_POWER) = lang("は宝石の輝きを纏った。", "wear"), " the glow of gem."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_MIST_OF_SILENCE) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_MIST_OF_SILENCE) = lang("沈黙の霧", "Mist of Silence")
	bufftxt(0, BUFF_MIST_OF_SILENCE) = lang("はぼやけた霧に覆われた。", "get"), " surrounded by hazy mist."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_REGENERATION) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_REGENERATION) = lang("リジェネレーション", "Regeneration")
	bufftxt(0, BUFF_REGENERATION) = lang("の代謝が活性化した。", "start"), " to regenerate."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_ATTRIBUTE_SHIELD) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_ATTRIBUTE_SHIELD) = lang("属性保護", "Attribution Shield")
	bufftxt(0, BUFF_ATTRIBUTE_SHIELD) = lang("は属性への耐性を得た。", "obtain"), " resistance to attribution."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_SPEED) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_SPEED) = lang("加速", "Speed")
	bufftxt(0, BUFF_SPEED) = lang("は機敏になった。", "speed"), " up."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_SLOW) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_SLOW) = lang("鈍足", "Slow")
	bufftxt(0, BUFF_SLOW) = lang("は鈍重になった。", "slow"), " down."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_HERO) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_HERO) = lang("英雄", "Hero")
	bufftxt(0, BUFF_HERO) = lang("の士気が向上した。", "feel"), " heroic."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_SHOOTING_MODE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_SHOOTING_MODE) = lang("シューティングモード", "Shooting Mode")
	bufftxt(0, BUFF_SHOOTING_MODE) = lang("は姿勢を固定した。", "shift"), " to shooting mode."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_OVERLIMIT_THROW) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_OVERLIMIT_THROW) = lang("一投入魂", "OverLimit-Throw")
	bufftxt(0, BUFF_OVERLIMIT_THROW) = lang("は投擲に魂を込めた。", "pour"), " mana into throwing."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_DATA_SCAN) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_DATA_SCAN) = lang("データスキャン", "Data scan")
	bufftxt(0, BUFF_DATA_SCAN) = lang("はスキャンモードに移行した。", "shift"), " to the scanning mode."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_DISINFECTION) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_DISINFECTION) = lang("ディスインフェクション", "Disinfection")
	bufftxt(0, BUFF_DISINFECTION) = lang("は汚染から守られた。", "get"), " protection from pollution."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_RESOLUTION_HAND) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_RESOLUTION_HAND) = lang("錬成掌", "Resolution Hand")
	bufftxt(0, BUFF_RESOLUTION_HAND) = lang("の手が光りだした。", "shine"), " hands."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_ABYSS_IN_THE_EYE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_ABYSS_IN_THE_EYE) = lang("瞳の奥の深淵", "Abyss in the eye")
	bufftxt(0, BUFF_ABYSS_IN_THE_EYE) = lang("の眼に深みが増した。", "represent"), " the abyss in own eye."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_BLACK_MIRROR) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_BLACK_MIRROR) = lang("黒曜鏡", "Black Mirror")
	bufftxt(0, BUFF_BLACK_MIRROR) = lang("はあなたの力を写し取った。", "copy"), " your power."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_HYPER_DASH) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_HYPER_DASH) = lang("烈走破", "Hyper Dash")
	bufftxt(0, BUFF_HYPER_DASH) = lang("は脚に力を込めた。", "put"), " power on the legs."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_GRAVITY_ACCEL) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_GRAVITY_ACCEL) = lang("重力偏向", "Gravity Accel")
	bufftxt(0, BUFF_GRAVITY_ACCEL) = lang("の重力の向きが変わった。", "accel"), " by gravity."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_CONCENTRATION) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_CONCENTRATION) = lang("集中", "Concentration")
	bufftxt(0, BUFF_CONCENTRATION) = lang("の集中力が向上した。", "feel"), " concentration."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_MIST_OF_FRAILNESS) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_MIST_OF_FRAILNESS) = lang("脆弱の霧", "Mist of Frailness")
	bufftxt(0, BUFF_MIST_OF_FRAILNESS) = lang("は脆くなった。", "feel"), " weak."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_CURSE_OF_HUNGER) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_CURSE_OF_HUNGER) = lang("飢餓の呪い", "Curse of Hunger")
	bufftxt(0, BUFF_CURSE_OF_HUNGER) = lang("はお腹が減りやすくなった。", "feel"), " hungry."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_ELEMENT_SCAR) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_ELEMENT_SCAR) = lang("元素の傷跡", "Element Scar")
	bufftxt(0, BUFF_ELEMENT_SCAR) = lang("は元素への耐性を失った。", "lose"), " resistance to element."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_HOLY_VEIL) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_HOLY_VEIL) = lang("ホーリーヴェイル", "Holy Veil")
	bufftxt(0, BUFF_HOLY_VEIL) = lang("は聖なる衣に保護された。", "receive"), " holy protection."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_NIGHTMARE) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_NIGHTMARE) = lang("ナイトメア", "Nightmare")
	bufftxt(0, BUFF_NIGHTMARE) = lang("は悪夢に襲われた。", "start"), " to suffer."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_DIVINE_WISDOM) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_DIVINE_WISDOM) = lang("知者の加護", "Divine Wisdom")
	bufftxt(0, BUFF_DIVINE_WISDOM) = lang("の思考は冴え渡った。", "start"), " to think clearly."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_PUNISHMENT) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_PUNISHMENT) = lang("天罰", "Punishment")
	bufftxt(0, BUFF_PUNISHMENT) = lang("は雷に打たれた！", "incur"), " the wrath of God."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_LULWYS_TRICK) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_LULWYS_TRICK) = lang("ルルウィの憑依", "Lulwy's Trick")
	bufftxt(0, BUFF_LULWYS_TRICK) = lang("にルルウィが乗り移った。", "repeat"), "the name of Lulwy."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_INCOGNITO) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_INCOGNITO) = lang("インコグニート", "Incognito")
	bufftxt(0, BUFF_INCOGNITO) = lang("は別人になりすました。", "start"), " to disguise."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_DEATH_WORD) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_DEATH_WORD) = lang("死の宣告", "Death Word")
	bufftxt(0, BUFF_DEATH_WORD) = lang("は死の宣告を受けた！", "receive"), " death verdict."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_BOOST) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_BOOST) = lang("ブースト", "Boost")
	bufftxt(0, BUFF_BOOST) = lang("はブーストした！", "gain"), " massive power."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_CONTINGENCY) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_CONTINGENCY) = lang("契約", "Contingency")
	bufftxt(0, BUFF_CONTINGENCY) = lang("は死神と契約した。", "feel"), " up contracts with the Reaper."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_UNLUCKY) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_UNLUCKY) = lang("不幸", "Unlucky")
	bufftxt(0, BUFF_UNLUCKY) = lang("に不幸な日が訪れた！", "feel"), " very unlucky today..."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_MELANCHOLY) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_MELANCHOLY) = lang("鬱", "Melancholy")
	bufftxt(0, BUFF_MELANCHOLY) = lang("は鬱になった。", "became"), " melancholy."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_DISTRACTED) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_DISTRACTED) = lang("散漫", "Distracted")
	bufftxt(0, BUFF_DISTRACTED) = lang("は気が散り始めた。", "feel"), " distracted."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_LUCK) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_LUCK) = lang("幸運", "Luck")
	bufftxt(0, BUFF_LUCK) = lang("に幸運な日が訪れた！", "feel"), " very lucky today!"
	bdataref(BDATAREF_BUFF_TYPE, BUFF_LIFE_TASTING) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_LIFE_TASTING) = lang("人生の含味", "Life Tasting")
	bufftxt(0, BUFF_LIFE_TASTING) = lang("はスキルの成長期に突入した。", "enters"), " a period of rapid skill growth."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_GROW_STRENGTH) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_STRENGTH) = lang("筋力の成長", "Grow Strength")
	bufftxt(0, BUFF_GROW_STRENGTH) = lang("は筋力の成長期に突入した。", "enters"), " a period of rapid STR growth."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_GROW_CONSTITUTION) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_CONSTITUTION) = lang("耐久の成長", "Grow Endurance")
	bufftxt(0, BUFF_GROW_CONSTITUTION) = lang("は耐久の成長期に突入した。", "enters"), " a period of rapid END growth."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_GROW_DEXTERITY) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_DEXTERITY) = lang("器用の成長", "Grow Dexterity")
	bufftxt(0, BUFF_GROW_DEXTERITY) = lang("は器用の成長期に突入した。", "enters"), " a period of rapid DEX growth."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_GROW_PERCEPTION) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_PERCEPTION) = lang("感覚の成長", "Grow Perception")
	bufftxt(0, BUFF_GROW_PERCEPTION) = lang("は感覚の成長期に突入した。", "enters"), " a period of rapid PER growth."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_GROW_LEARNING) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_LEARNING) = lang("習得の成長", "Grow Learning")
	bufftxt(0, BUFF_GROW_LEARNING) = lang("は習得の成長期に突入した。", "enters"), " a period of rapid LER growth."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_GROW_WILL) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_WILL) = lang("意志の成長", "Grow Will")
	bufftxt(0, BUFF_GROW_WILL) = lang("は意志の成長期に突入した。", "enters"), " a period of rapid WIL growth."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_GROW_MAGIC) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_MAGIC) = lang("魔力の成長", "Grow Magic")
	bufftxt(0, BUFF_GROW_MAGIC) = lang("は魔力の成長期に突入した。", "enters"), " a period of rapid MAG growth."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_GROW_CHARISMA) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_CHARISMA) = lang("魅力の成長", "Grow Charisma")
	bufftxt(0, BUFF_GROW_CHARISMA) = lang("は魅力の成長期に突入した。", "enters"), " a period of rapid CHR growth."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_GROW_SPEED) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_SPEED) = lang("速度の成長", "Grow Speed")
	bufftxt(0, BUFF_GROW_SPEED) = lang("は速度の成長期に突入した。", "enters"), " a period of rapid SPD growth."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_CLEAR_MIND) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_CLEAR_MIND) = lang("明鏡止水", "ClearMind")
	bufftxt(0, BUFF_CLEAR_MIND) = lang("は己の心を研ぎ澄ました…。", "sharpen"), " the minds of self..."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_SUPER_REGEN) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_SUPER_REGEN) = lang("超再生", "Super Regene")
	bufftxt(0, BUFF_SUPER_REGEN) = lang("の体は超再生を始めた。", "'s body"), " regenerate fast."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_FEATHER) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FEATHER) = lang("フェザー", "Feather")
	bufftxt(0, BUFF_FEATHER) = lang("の体が羽のように軽くなった。", "'s body"), " change light as a feather."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_CHARGE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_CHARGE) = lang("チャージ", "Charge")
	bufftxt(0, BUFF_CHARGE) = lang("の力が最大限に達した。", "charged"), " power."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_EMERGENCY_EVASION) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_EMERGENCY_EVASION) = lang("緊急回避", "Emergency Evasion")
	bufftxt(0, BUFF_EMERGENCY_EVASION) = lang("は装備の力を引き出した。", "bring out"), " the power of equipments."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_MAGIC_EQUIP) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_MAGIC_EQUIP) = lang("魔装", "Magic Equip")
	bufftxt(0, BUFF_MAGIC_EQUIP) = lang("は装備の力を引き出した。", "bring out"), " the power of equipments."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_SUPER_ARMOR) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_SUPER_ARMOR) = lang("超重装", "Super Armor")
	bufftxt(0, BUFF_SUPER_ARMOR) = lang("は装備の力を引き出した。", "bring out"), " the power of equipments."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_SHIELD_PARRY) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_SHIELD_PARRY) = lang("シールドパリィ", "Shield Parry")
	bufftxt(0, BUFF_SHIELD_PARRY) = lang("は盾の力を引き出した。", "bring out"), " the power of shield."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_JYUSOU_GOUSHIN) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_JYUSOU_GOUSHIN) = lang("呪装豪身", "Jyusou Goushin")
	bufftxt(0, BUFF_JYUSOU_GOUSHIN) = lang("は呪いの力を引き出した。", "bring out"), " the power of curse."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_HARMONIC_ASSAULT) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_HARMONIC_ASSAULT) = lang("ハーモニックアサルト", "Harmonic Assault")
	bufftxt(0, BUFF_HARMONIC_ASSAULT) = lang("は言葉の力を引き出した。", "bring out"), " the power of voice."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_KILLING_DANCE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_KILLING_DANCE) = lang("死神の舞踏", "Killing Dance")
	bufftxt(0, BUFF_KILLING_DANCE) = lang("は戦闘動作を最適化した。", "optimized"), " the killing pattern."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_ATTRIBUTE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_ATTRIBUTE) = lang("アトリビウト", "Attribute")
	bufftxt(0, BUFF_ATTRIBUTE) = lang("は己の属性を纏った。", "taken into"), " the body attributes."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_AUTO_GUARD) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_AUTO_GUARD) = lang("絶対防衛", "AutoGuard")
	bufftxt(0, BUFF_AUTO_GUARD) = lang("は仲間を庇う体勢に入った。", "joined"), "  the posture that protect ally."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_POWER_ITEM) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_POWER_ITEM) = lang("パワーアイテム", "Power Item")
	bufftxt(0, BUFF_POWER_ITEM) = lang("はアイテムの力を引き出した。", "bring out"), " the power of Items."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_RUN_WILDLY) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_RUN_WILDLY) = lang("暴走", "Run Wildly")
	bufftxt(0, BUFF_RUN_WILDLY) = lang("は暴走を始めた。", "began to"), "  uncontrollable."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_RETENTION) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_RETENTION) = lang("空間掌握", "Retention")
	bufftxt(0, BUFF_RETENTION) = lang("は周囲の空間を掌握した。", "stabilize"), " the space around."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_TAG_FORCE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_TAG_FORCE) = lang("タッグフォース", "Form Shift")
	bufftxt(0, BUFF_TAG_FORCE) = lang("は結束した。", "shine"), " with the tag partner."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_FORM_SHIFT_ALPHA) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FORM_SHIFT_ALPHA) = lang("フォルムシフト", "Form Shift")
	bufftxt(0, BUFF_FORM_SHIFT_ALPHA) = lang("に変化した。", "change"), " the form."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_FORM_SHIFT_BETA) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FORM_SHIFT_BETA) = lang("フォルムシフト", "Form Shift")
	bufftxt(0, BUFF_FORM_SHIFT_BETA) = lang("に変化した。", "change"), " the form."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_FORM_SHIFT_GAMMA) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FORM_SHIFT_GAMMA) = lang("フォルムシフト", "Form Shift")
	bufftxt(0, BUFF_FORM_SHIFT_GAMMA) = lang("に変化した。", "change"), " the form."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_FORM_SHIFT_DELTA) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FORM_SHIFT_DELTA) = lang("フォルムシフト", "Form Shift")
	bufftxt(0, BUFF_FORM_SHIFT_DELTA) = lang("に変化した。", "change"), " the form."
	bdataref(BDATAREF_BUFF_TYPE, BUFF_FORM_SHIFT_OMEGA) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FORM_SHIFT_OMEGA) = lang("ファイナルシフト", "Final Form Shift")
	bufftxt(0, BUFF_FORM_SHIFT_OMEGA) = lang("に変化した。", "change"), " the form."
	return
	goto *sRefDefine

#deffunc calcbuff int calcbuff_charid, int calcbuff_buffid, int calcbuff_power
	if ( calcbuff_buffid >= BUFF_GROW_STRENGTH & calcbuff_buffid <= BUFF_GROW_SPEED ) {
		dur = 10 + calcbuff_power / 10
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang(skillname(calcbuff_buffid - 20 + 10) + "の成長率を" + locvar_calcbuff_p + "%上昇", "Increases the growth rate " + skillname(calcbuff_buffid - 20 + 10) + " by " + locvar_calcbuff_p + "")
				return
			}
		}
		cdata(STARTING_CDATA_FOOD_EXP + (calcbuff_buffid - 20 + 10) - 10, calcbuff_charid) = locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_LIFE_TASTING ) {
		dur = 10 + calcbuff_power / 10
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("全スキルの成長率を" + locvar_calcbuff_p + "%上昇", "Increases the growth rate skills by " + locvar_calcbuff_p + "")
				return
			}
		}
		cdata(STARTING_CDATA_FOOD_EXP + 19 - 10, calcbuff_charid) = locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_HOLY_SHIELD ) {
		dur = 20 + calcbuff_power / 15
		locvar_calcbuff_p = limit(25 + calcbuff_power / 8, 1, 1000)
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("PVを10%と" + locvar_calcbuff_p + "上昇/盾20%上昇/耐恐怖", "Increases PV by 10% and " + locvar_calcbuff_p + "/RES+ fear")
				return
			}
		}
		if ( cdata(CDATA_PV, calcbuff_charid) >= 10 ) {
			cdata(CDATA_PV, calcbuff_charid) += cdata(CDATA_PV, calcbuff_charid) / 10
		}
		cdata(CDATA_PV, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_FEAR, calcbuff_charid) = 0
		sdata(SKILL_NORMAL_SHIELD, calcbuff_charid) = sdata(SKILL_NORMAL_SHIELD, calcbuff_charid) * 12 / 10
		return
	}
	if ( calcbuff_buffid == BUFF_MIST_OF_SILENCE ) {
		dur = 5 + calcbuff_power / 40
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("魔法の使用を禁止", "Inhibits casting")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_REGENERATION ) {
		dur = limit(10 + calcbuff_power / 10, 11, 200)
		locvar_calcbuff_p = 30 + calcbuff_power / 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("体力、スタミナの回復強化/震え耐性", "Enhances regeneration/RES+ chills")
				return
			}
		}
		sdata(SKILL_NORMAL_HEALING, calcbuff_charid) += locvar_calcbuff_p / 2
		return
	}
	if ( calcbuff_buffid == BUFF_SUPER_REGEN ) {
		dur = 5
		locvar_calcbuff_p = 2000
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("体力の超回復", "Enhances regeneration hard")
				return
			}
		}
		sdata(SKILL_NORMAL_HEALING, calcbuff_charid) += locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_ATTRIBUTE_SHIELD ) {
		dur = 10 + calcbuff_power / 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("火冷雷闇幻毒獄音神混耐性の獲得", "RES+ fire,cold,lightning,mind,nerve,nether,poison,sound,chaos,darkness")
				return
			}
		}
		sdata(SKILL_RES_FIRE, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_COLD, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_LIGHTNING, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_NERVE, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_MIND, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_NETHER, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_POISON, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_SOUND, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_CHAOS, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_DARKNESS, calcbuff_charid) += 80 + calcbuff_power / 20
		return
	}
	if ( calcbuff_buffid == BUFF_FORM_SHIFT_ALPHA ) {
		dur = 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("筋力・感覚の上昇/魔法反射", "Increases STR,PER,ReflectMagic")
				return
			}
		}
		sdata(SKILL_ATTR_STR, calcbuff_charid) = sdata(SKILL_ATTR_STR, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_PER, calcbuff_charid) = sdata(SKILL_ATTR_PER, calcbuff_charid) * 12 / 10 + 5
		cdata(CDATA_REFLECT_MAGIC, calcbuff_charid) += 40
		cdata(CDATA_SHIFT_FORM, calcbuff_charid) = SHIFT_FORM_ALPHA
	}
	if ( calcbuff_buffid == BUFF_FORM_SHIFT_BETA ) {
		dur = 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("器用・魔力・魔法耐性の上昇", "Increases DEX,MAG,resistance to magic")
				return
			}
		}
		sdata(SKILL_ATTR_DEX, calcbuff_charid) = sdata(SKILL_ATTR_DEX, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_MAG, calcbuff_charid) = sdata(SKILL_ATTR_MAG, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_RES_MAGIC, calcbuff_charid) += 120
		cdata(CDATA_SHIFT_FORM, calcbuff_charid) = SHIFT_FORM_BETA
	}
	if ( calcbuff_buffid == BUFF_FORM_SHIFT_GAMMA ) {
		dur = 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("速度・DVの上昇/部位減速無視", "Increases speed/complicated body invalid")
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) = sdata(SKILL_ATTR_SPD, calcbuff_charid) * 12 / 10 + 50
		if ( cdata(CDATA_DV, calcbuff_charid) > 0 ) {
			cdata(CDATA_DV, calcbuff_charid) = cdata(CDATA_DV, calcbuff_charid) * 12 / 10
		}
		cdata(CDATA_DV, calcbuff_charid) += 50
		cdata(CDATA_SHIFT_FORM, calcbuff_charid) = SHIFT_FORM_GAMMA
	}
	if ( calcbuff_buffid == BUFF_FORM_SHIFT_DELTA ) {
		dur = 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("耐久・PV・回復効果の上昇/ダメージ無効率上昇", "Increases PV,heal magic/ImmuneDamage plus")
				return
			}
		}
		sdata(SKILL_ATTR_CON, calcbuff_charid) = sdata(SKILL_ATTR_CON, calcbuff_charid) * 12 / 10 + 5
		if ( cdata(CDATA_PV, calcbuff_charid) > 0 ) {
			cdata(CDATA_PV, calcbuff_charid) = cdata(CDATA_PV, calcbuff_charid) * 12 / 10
		}
		cdata(CDATA_PV, calcbuff_charid) += 50
		cdata(CDATA_IMMUNE_DAMAGE, calcbuff_charid) += 20
		cdata(CDATA_SHIFT_FORM, calcbuff_charid) = SHIFT_FORM_DELTA
	}
	if ( calcbuff_buffid == BUFF_FORM_SHIFT_OMEGA ) {
		dur = 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("能力と魔法耐性の上昇/HPMP消耗/ゲージ逓減オフ", "HPMP consumption/gauge diminishing invalid")
				return
			}
		}
		sdata(SKILL_ATTR_STR, calcbuff_charid) = sdata(SKILL_ATTR_STR, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_CON, calcbuff_charid) = sdata(SKILL_ATTR_CON, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_DEX, calcbuff_charid) = sdata(SKILL_ATTR_DEX, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_PER, calcbuff_charid) = sdata(SKILL_ATTR_PER, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_MAG, calcbuff_charid) = sdata(SKILL_ATTR_MAG, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_SPD, calcbuff_charid) = sdata(SKILL_ATTR_SPD, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_RES_MAGIC, calcbuff_charid) += 120
		cdata(CDATA_SHIFT_FORM, calcbuff_charid) = SHIFT_FORM_OMEGA
	}
	if ( calcbuff_buffid == BUFF_HYPER_DASH ) {
		dur = 30
		locvar_calcbuff_p = 5 + calcbuff_power / 30
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("押しのけ移動しつつ乗馬依存ダメージ", "Run through and riding attack")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_GRAVITY_ACCEL ) {
		locvar_calcbuff_p = calcbuff_power
		if ( locvar_calcbuff_p > 200 ) {
			locvar_calcbuff_p = 200
		}
		dur = 8 + calcbuff_power / 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("通常攻撃＋10％と通常防御＋5％と" + locvar_calcbuff_p + "の加速", "Increases attack by 10% /Increases defense by 5% /Increases speed by " + locvar_calcbuff_p)
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_SPEED ) {
		locvar_calcbuff_p = 50 + calcbuff_power / 10
		if ( locvar_calcbuff_p > 800 ) {
			locvar_calcbuff_p = 800
		}
		dur = 8 + calcbuff_power / 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("" + locvar_calcbuff_p + "の加速", "Increases speed by " + locvar_calcbuff_p)
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_SLOW ) {
		locvar_calcbuff_p = 20 + calcbuff_power / 5
		dur = 8 + calcbuff_power / 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("" + locvar_calcbuff_p + "の鈍足", "Decreases speed by " + locvar_calcbuff_p)
				return
			}
		}
		if ( locvar_calcbuff_p > sdata(SKILL_ATTR_SPD, calcbuff_charid) / 2 ) {
			locvar_calcbuff_p = sdata(SKILL_ATTR_SPD, calcbuff_charid) / 2
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) -= locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_HERO ) {
		dur = 20 + calcbuff_power / 10
		locvar_calcbuff_p = 5 + calcbuff_power / 30
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("筋力・器用を10%と" + locvar_calcbuff_p + "上昇/耐恐怖/耐混乱", "Increases STR,DEX by 10% and " + locvar_calcbuff_p + "/RES+ fear,confusion")
				return
			}
		}
		if ( sdata(SKILL_ATTR_STR, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_STR, calcbuff_charid) += sdata(SKILL_ATTR_STR, calcbuff_charid) / 10
		}
		if ( sdata(SKILL_ATTR_DEX, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_DEX, calcbuff_charid) += sdata(SKILL_ATTR_DEX, calcbuff_charid) / 10
		}
		sdata(SKILL_ATTR_STR, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_DEX, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_FEAR, calcbuff_charid) = 0
		cdata(CDATA_CONDITION_CONFUSE, calcbuff_charid) = 0
		return
	}
	if ( calcbuff_buffid == BUFF_JYUSOU_GOUSHIN ) {
		dur = 66
		locvar_calcbuff_p = limit(66 + calcbuff_power / 30, 66, 666)
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("筋力耐久器用感覚意志魔力速度を" + locvar_calcbuff_p + "上昇/耐恐怖/魔法耐性上昇", "Increases STR,DEX by 10% and " + locvar_calcbuff_p + "/RES+ fear,confusion")
				return
			}
		}
		sdata(SKILL_ATTR_STR, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_CON, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_DEX, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_PER, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_WIL, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_MAG, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_FEAR, calcbuff_charid) = 0
		sdata(SKILL_RES_MAGIC, calcbuff_charid) += 80 + calcbuff_power / 20
		return
	}
	if ( calcbuff_buffid == BUFF_SHOOTING_MODE ) {
		dur = 25
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("装備スキルで射撃力上昇/命中率上昇/不動", "Enhance shooting by equipped skill/Immobility")
				return
			}
		}
		cdata(CDATA_CONDITION_BIND, calcbuff_charid) += 25
		return
	}
	if ( calcbuff_buffid == BUFF_DATA_SCAN ) {
		dur = 20
		locvar_calcbuff_p = 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("分析率を上げやすくするが毎ターン微疲労", "To help raise the analysis rate/fatigue every turn/SP expend")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_OVERLIMIT_THROW ) {
		dur = 25
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("瞑想依存で通常投擲強化/MP消費", "Throwing reinforced with meditation/MP expend")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_DISINFECTION ) {
		dur = 25
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("能力低下効果を一部無効化/耐毒", "Partially invalidate reduction effect/RES+ poison")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_GEM_POWER ) {
		dur = 20 + calcbuff_power / 10
		locvar_calcbuff_p = 5 + calcbuff_power / 30
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("耐久・魅力を10%と" + locvar_calcbuff_p + "上昇/耐麻痺/耐盲目", "Increases END,CHR by 10% and " + locvar_calcbuff_p + "/RES+ paralyze,blind")
				return
			}
		}
		if ( sdata(SKILL_ATTR_CON, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_CON, calcbuff_charid) += sdata(SKILL_ATTR_CON, calcbuff_charid) / 10
		}
		if ( sdata(SKILL_ATTR_CHA, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_CHA, calcbuff_charid) += sdata(SKILL_ATTR_CHA, calcbuff_charid) / 10
		}
		sdata(SKILL_ATTR_CON, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_CHA, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_PARALYZE, calcbuff_charid) = 0
		cdata(CDATA_CONDITION_BLIND, calcbuff_charid) = 0
		return
	}
	if ( calcbuff_buffid == BUFF_BLACK_MIRROR ) {
		dur = 200 + calcbuff_power / 10
		locvar_calcbuff_p = 5 + calcbuff_power / 30
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("能力の平均化", "Averaging")
				return
			}
		}
		sdata(SKILL_ATTR_STR, calcbuff_charid) = (sdata(SKILL_ATTR_STR, CHARA_PLAYER) + sdata(SKILL_ATTR_STR, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_CON, calcbuff_charid) = (sdata(SKILL_ATTR_CON, CHARA_PLAYER) + sdata(SKILL_ATTR_CON, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_DEX, calcbuff_charid) = (sdata(SKILL_ATTR_DEX, CHARA_PLAYER) + sdata(SKILL_ATTR_DEX, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_PER, calcbuff_charid) = (sdata(SKILL_ATTR_PER, CHARA_PLAYER) + sdata(SKILL_ATTR_PER, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_LER, calcbuff_charid) = (sdata(SKILL_ATTR_LER, CHARA_PLAYER) + sdata(SKILL_ATTR_LER, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_WIL, calcbuff_charid) = (sdata(SKILL_ATTR_WIL, CHARA_PLAYER) + sdata(SKILL_ATTR_WIL, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_MAG, calcbuff_charid) = (sdata(SKILL_ATTR_MAG, CHARA_PLAYER) + sdata(SKILL_ATTR_MAG, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_CHA, calcbuff_charid) = (sdata(SKILL_ATTR_CHA, CHARA_PLAYER) + sdata(SKILL_ATTR_CHA, calcbuff_charid)) / 2
		return
	}
	if ( calcbuff_buffid == BUFF_CONCENTRATION ) {
		dur = 20 + calcbuff_power / 10
		locvar_calcbuff_p = 5 + calcbuff_power / 30
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("感覚・意志を10%と" + locvar_calcbuff_p + "上昇/耐睡眠/耐混乱", "Increases PER,WIL by 10% and " + locvar_calcbuff_p + "/RES+ sleep,confusion")
				return
			}
		}
		if ( sdata(SKILL_ATTR_PER, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_PER, calcbuff_charid) += sdata(SKILL_ATTR_PER, calcbuff_charid) / 10
		}
		if ( sdata(SKILL_ATTR_WIL, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_WIL, calcbuff_charid) += sdata(SKILL_ATTR_WIL, calcbuff_charid) / 10
		}
		sdata(SKILL_ATTR_PER, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_WIL, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_SLEEP, calcbuff_charid) = 0
		cdata(CDATA_CONDITION_CONFUSE, calcbuff_charid) = 0
		return
	}
	if ( calcbuff_buffid == BUFF_DISTRACTED ) {
		dur = 200
		locvar_calcbuff_p = 200
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("感覚・意志が20％減少/詠唱成功率3％減少", "Decreases PER,WIL,LER by 20%,decreases casting chance by 3%")
				return
			}
		}
		if ( sdata(SKILL_ATTR_PER, calcbuff_charid) >= 1 ) {
			sdata(SKILL_ATTR_PER, calcbuff_charid) = sdata(SKILL_ATTR_PER, calcbuff_charid) * 4 / 5
		}
		if ( sdata(SKILL_ATTR_WIL, calcbuff_charid) >= 1 ) {
			sdata(SKILL_ATTR_WIL, calcbuff_charid) = sdata(SKILL_ATTR_WIL, calcbuff_charid) * 4 / 5
		}
		return
	}
	if ( calcbuff_buffid == BUFF_MELANCHOLY ) {
		dur = 200
		locvar_calcbuff_p = 200
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("10％の確率で行動ターン放棄/パワーゲージ逓減", "Skip turn with 10% chance,Power gauge diminishing")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_CURSE_OF_HUNGER ) {
		dur = 100
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("ターンごとの飢えと渇きが激しくなる", "Increase hunger and thirst")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_MIST_OF_FRAILNESS ) {
		locvar_calcbuff_p = 30 + calcbuff_power / 10, 5 + calcbuff_power / 15
		locvar_calcbuff_p2 = limit(20 + calcbuff_power / 70, 20, 300)
		dur = 6 + calcbuff_power / 10
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("PVを半減しさらに" + locvar_calcbuff_p2 + "減少", "Halves PV and decreases " + locvar_calcbuff_p + " ")
				return
			}
		}
		if ( cdata(CDATA_PV, calcbuff_charid) > 0 ) {
			cdata(CDATA_PV, calcbuff_charid) = cdata(CDATA_PV, calcbuff_charid) / 2
		}
		cdata(CDATA_PV, calcbuff_charid) -= locvar_calcbuff_p2
		return
	}
	if ( calcbuff_buffid == BUFF_ELEMENT_SCAR ) {
		dur = 20 + calcbuff_power / 5
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("火炎冷気電撃耐性減少/自然回復阻害", "RES- fire,cold,lightning,and stop regeneration")
				return
			}
		}
		sdata(SKILL_RES_FIRE, calcbuff_charid) = limit(sdata(SKILL_RES_FIRE, calcbuff_charid) + limit((-50) - calcbuff_power / 15, -150, -80), sdata(SKILL_RES_FIRE, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_COLD, calcbuff_charid) = limit(sdata(SKILL_RES_COLD, calcbuff_charid) + limit((-50) - calcbuff_power / 15, -150, -80), sdata(SKILL_RES_COLD, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_LIGHTNING, calcbuff_charid) = limit(sdata(SKILL_RES_LIGHTNING, calcbuff_charid) + limit((-50) - calcbuff_power / 15, -150, -80), sdata(SKILL_RES_LIGHTNING, calcbuff_charid) > 0, 9999)
		return
	}
	if ( calcbuff_buffid == BUFF_HOLY_VEIL ) {
		locvar_calcbuff_p = 50 + calcbuff_power / 3 * 2
		dur = 15 + calcbuff_power / 5
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("ﾊﾟﾜｰ" + locvar_calcbuff_p + "の呪い(hex)への抵抗/怯み耐性", "grants hex protection(power:" + locvar_calcbuff_p + ")/RES+ wince")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_NIGHTMARE ) {
		dur = 4 + calcbuff_power / 15
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("闇幻毒獄音神混耐性の減少", "RES- mind,nerve,nether,poison,sound,chaos,darkness")
				return
			}
		}
		sdata(SKILL_RES_NERVE, calcbuff_charid) = limit(sdata(SKILL_RES_NERVE, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_NERVE, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_MIND, calcbuff_charid) = limit(sdata(SKILL_RES_MIND, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_MIND, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_NETHER, calcbuff_charid) = limit(sdata(SKILL_RES_NETHER, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_NETHER, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_POISON, calcbuff_charid) = limit(sdata(SKILL_RES_POISON, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_POISON, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_SOUND, calcbuff_charid) = limit(sdata(SKILL_RES_SOUND, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_SOUND, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_CHAOS, calcbuff_charid) = limit(sdata(SKILL_RES_CHAOS, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_CHAOS, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_DARKNESS, calcbuff_charid) = limit(sdata(SKILL_RES_DARKNESS, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_DARKNESS, calcbuff_charid) > 0, 9999)
		return
	}
	if ( calcbuff_buffid == BUFF_DIVINE_WISDOM ) {
		dur = 20 + calcbuff_power / 10
		locvar_calcbuff_p = 10 + calcbuff_power / 40, 3 + calcbuff_power / 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("習得・魔力を10%と" + locvar_calcbuff_p + "上昇/読書を10%と" + locvar_calcbuff_p(1) + "上昇", "Increases LER,MAG by 10% and " + locvar_calcbuff_p + ", literacy skill by 10% and " + locvar_calcbuff_p(1))
				return
			}
		}
		if ( sdata(SKILL_ATTR_LER, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_LER, calcbuff_charid) += sdata(SKILL_ATTR_LER, calcbuff_charid) / 10
		}
		if ( sdata(SKILL_ATTR_MAG, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_MAG, calcbuff_charid) += sdata(SKILL_ATTR_MAG, calcbuff_charid) / 10
		}
		if ( sdata(SKILL_NORMAL_LITERACY, calcbuff_charid) >= 10 ) {
			sdata(SKILL_NORMAL_LITERACY, calcbuff_charid) += sdata(SKILL_NORMAL_LITERACY, calcbuff_charid) / 10
		}
		sdata(SKILL_ATTR_LER, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_MAG, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_NORMAL_LITERACY, calcbuff_charid) += locvar_calcbuff_p(1)
		return
	}
	if ( calcbuff_buffid == BUFF_PUNISHMENT ) {
		locvar_calcbuff_p = 20
		dur = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("DV・PV・速度を20%減少", "Decreases speed,PV,DV by 20%")
				return
			}
		}
		if ( cdata(CDATA_PV, calcbuff_charid) > 1 ) {
			cdata(CDATA_PV, calcbuff_charid) -= cdata(CDATA_PV, calcbuff_charid) / 5
		}
		if ( cdata(CDATA_DV, calcbuff_charid) > 1 ) {
			cdata(CDATA_DV, calcbuff_charid) -= cdata(CDATA_DV, calcbuff_charid) / 5
		}
		if ( sdata(SKILL_ATTR_SPD, calcbuff_charid) > 1 ) {
			sdata(SKILL_ATTR_SPD, calcbuff_charid) -= sdata(SKILL_ATTR_SPD, calcbuff_charid) / 5
		}
		return
	}
	if ( calcbuff_buffid == BUFF_LULWYS_TRICK ) {
		locvar_calcbuff_p = 150
		dur = 15
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("現在の速度の20%＋" + locvar_calcbuff_p + "の加速", "Increases speed")
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p + sdata(SKILL_ATTR_SPD, calcbuff_charid) / 5
		return
	}
	if ( calcbuff_buffid == BUFF_INCOGNITO ) {
		dur = 4 + calcbuff_power / 40
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("変装", "Grants new identify")
				return
			}
		}
		cbitmod CHARA_BIT_INCOGNITO, calcbuff_charid, TRUE
		return
	}
	if ( calcbuff_buffid == BUFF_DEATH_WORD ) {
		dur = 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("呪いが完了したときに9999のダメージを受ける", "Guaranteed death when the hex ends")
				return
			}
		}
		cbitmod CHARA_BIT_DEATH_COUNT, calcbuff_charid, TRUE
		return
	}
	if ( calcbuff_buffid == BUFF_BOOST ) {
		locvar_calcbuff_p = limit(120 + calcbuff_power / 20, 120, 150)
		dur = limit(10 + calcbuff_power / 20, 10, 30)
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("" + locvar_calcbuff_p + "の加速と能力のアップ", "Increases speed by " + locvar_calcbuff_p + "/Boosts physical attributes")
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_STR, calcbuff_charid) = sdata(SKILL_ATTR_STR, calcbuff_charid) * locvar_calcbuff_p / 100 + 10
		sdata(SKILL_ATTR_PER, calcbuff_charid) = sdata(SKILL_ATTR_PER, calcbuff_charid) * locvar_calcbuff_p / 100 + 10
		sdata(SKILL_ATTR_MAG, calcbuff_charid) = sdata(SKILL_ATTR_MAG, calcbuff_charid) * locvar_calcbuff_p / 100 + 10
		return
	}
	if ( calcbuff_buffid == BUFF_HARMONIC_ASSAULT ) {
		dur = 50
		locvar_calcbuff_p = 50
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("交渉系技能に分析スキルで連携・中断耐性", "Cooperation, interruption resistance of negotiate abilities")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_CONTINGENCY ) {
		dur = 66
		locvar_calcbuff_p = limit(25 + calcbuff_power / 17, 25, 80)
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("致命傷を負ったとき" + locvar_calcbuff_p + "%の確率で一度だけダメージを0にする", "" + locvar_calcbuff_p + "% chances taking a lethal damage heals you instead")
				return
			}
		}
		cbitmod CHARA_BIT_CONTINGENCY, calcbuff_charid, TRUE
		return
	}
	if ( calcbuff_buffid == BUFF_CLEAR_MIND ) {
		dur = 10
		locvar_calcbuff_p = 5
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("能力のアップ", "Increases WIL,PER")
				return
			}
		}
		sdata(SKILL_ATTR_WIL, calcbuff_charid) = sdata(SKILL_ATTR_WIL, calcbuff_charid) * 130 / 100 + 10
		sdata(SKILL_ATTR_PER, calcbuff_charid) = sdata(SKILL_ATTR_PER, calcbuff_charid) * 130 / 100 + 10
		sdata(SKILL_NORMAL_EVASION, calcbuff_charid) = sdata(SKILL_NORMAL_EVASION, calcbuff_charid) * 120 / 100 + 25
		sdata(SKILL_NORMAL_GREATER_EVASION, calcbuff_charid) = sdata(SKILL_NORMAL_GREATER_EVASION, calcbuff_charid) * 120 / 100 + 25
		sdata(SKILL_WEAPON_MARTIAL_ARTS, calcbuff_charid) = sdata(SKILL_WEAPON_MARTIAL_ARTS, calcbuff_charid) * 110 / 100 + 5
		return
	}
	if ( calcbuff_buffid == BUFF_RESOLUTION_HAND ) {
		dur = 40
		locvar_calcbuff_p = 5
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("魔力上昇/手系攻撃に錬金術ダメージ追加", "Increases MAG,Add alchemy damage to Hand-skills")
				return
			}
		}
		sdata(SKILL_ATTR_MAG, calcbuff_charid) = sdata(SKILL_ATTR_MAG, calcbuff_charid) * 120 / 100 + 5
		return
	}
	if ( calcbuff_buffid == BUFF_ABYSS_IN_THE_EYE ) {
		dur = 40
		locvar_calcbuff_p = 5
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("心眼上昇/眼差し系にゲージ、HP、MPの吸収追加", "Enhance Eye of Mind,Add absorption to Eye-skills")
				return
			}
		}
		sdata(SKILL_NORMAL_EYE_OF_MIND, calcbuff_charid) = sdata(SKILL_NORMAL_EYE_OF_MIND, calcbuff_charid) * 120 / 100 + 10
		return
	}
	if ( calcbuff_buffid == BUFF_RUN_WILDLY ) {
		dur = 30
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("能力の変動/耐恐怖", "Increases STR,SPD")
				return
			}
		}
		sdata(SKILL_ATTR_LER, calcbuff_charid) = limit(sdata(SKILL_ATTR_LER, calcbuff_charid) - locvar_calcbuff_p / 6, 5, 5000)
		sdata(SKILL_ATTR_STR, calcbuff_charid) += locvar_calcbuff_p / 6 + 1
		sdata(SKILL_ATTR_DEX, calcbuff_charid) = limit(sdata(SKILL_ATTR_DEX, calcbuff_charid) - locvar_calcbuff_p / 6, 5, 5000)
		sdata(SKILL_ATTR_PER, calcbuff_charid) += locvar_calcbuff_p / 6 + 1
		sdata(SKILL_ATTR_WIL, calcbuff_charid) = limit(sdata(SKILL_ATTR_WIL, calcbuff_charid) - locvar_calcbuff_p / 6, 5, 5000)
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p / 6 + 1
		return
	}
	if ( calcbuff_buffid == BUFF_LUCK ) {
		locvar_calcbuff_p = calcbuff_power
		dur = 777
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("" + locvar_calcbuff_p + "の幸運の上昇", "Increase luck by " + locvar_calcbuff_p + ".")
				return
			}
		}
		sdata(SKILL_ATTR_LUC, calcbuff_charid) += locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_UNLUCKY ) {
		locvar_calcbuff_p = 666
		dur = 6666
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("666の幸運の低下", "decrease luck by 666")
				return
			}
		}
		sdata(SKILL_ATTR_LUC, calcbuff_charid) -= 666
		return
	}
	if ( calcbuff_buffid == BUFF_FEATHER ) {
		dur = 20 + calcbuff_power / 15
		locvar_calcbuff_p = limit(25 + calcbuff_power / 8, 1, 1000)
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("DVを10%と" + locvar_calcbuff_p + "上昇/軽装備20%上昇/耐重力/浮遊", "Increases DV by 10% and " + locvar_calcbuff_p + "/float,release from Gravity")
				return
			}
		}
		if ( cdata(CDATA_DV, calcbuff_charid) >= 10 ) {
			cdata(CDATA_DV, calcbuff_charid) += cdata(CDATA_DV, calcbuff_charid) / 10
		}
		cdata(CDATA_DV, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_GRAVITY, calcbuff_charid) = 0
		cbitmod CHARA_BIT_FLOAT, calcbuff_charid, TRUE
		sdata(SKILL_NORMAL_LIGHT_ARMOR, calcbuff_charid) = sdata(SKILL_NORMAL_LIGHT_ARMOR, calcbuff_charid) * 12 / 10
		return
	}
	if ( calcbuff_buffid == BUFF_CHARGE ) {
		dur = 5
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("一度だけ通常攻撃/魔法/放射技能での攻撃力上昇", "Once enlarge attack power ten times")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_EMERGENCY_EVASION ) {
		dur = 15
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("軽装備時、クリティカル発生を無効化/通常ダメージ小軽減", "You evade critical attack during you wear light equipments")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_MAGIC_EQUIP ) {
		dur = 15
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("中装備時、魔法威力上昇/魔法属性ダメージ小軽減", "Increases magic power during you wear medium equipments")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_SUPER_ARMOR ) {
		dur = 20
		locvar_calcbuff_p = 30
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("重装備時、通常大ダメージ軽減/重量命中ペナルティ無効/耐朦朧", "Decrease damage during you wear heavy equipments")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_SHIELD_PARRY ) {
		dur = 40
		locvar_calcbuff_p = 40
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("手に装備した盾で攻撃を弾き転倒させる", "Parry and overturn the attacker during you equipped shield")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_KILLING_DANCE ) {
		dur = 13
		locvar_calcbuff_p = 13
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("回避成功時反撃/戦術見切り依存の回避スキル上昇", "Increases Evasion, and add　counterattack")
				return
			}
		}
		sdata(SKILL_NORMAL_EVASION, calcbuff_charid) += (sdata(SKILL_NORMAL_TACTICS, calcbuff_charid) + sdata(SKILL_NORMAL_GREATER_EVASION, calcbuff_charid) + 2) / 2
		return
	}
	if ( calcbuff_buffid == BUFF_ATTRIBUTE ) {
		dur = 30
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("最も耐性が高い属性を格闘に付加", "Add attribute to martial")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_POWER_ITEM ) {
		dur = 30
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("特定スキル上昇/一部アイテム使用時ゲージ増加", "Increases MagicDevice,Throw,Alchemy")
				return
			}
		}
		sdata(SKILL_NORMAL_MAGIC_DEVICE, calcbuff_charid) = (sdata(SKILL_NORMAL_MAGIC_DEVICE, calcbuff_charid) + 1) * 110 / 100 + 10
		sdata(SKILL_WEAPON_THROWING, calcbuff_charid) = (sdata(SKILL_WEAPON_THROWING, calcbuff_charid) + 1) * 110 / 100 + 10
		sdata(SKILL_NORMAL_ALCHEMY, calcbuff_charid) = (sdata(SKILL_NORMAL_ALCHEMY, calcbuff_charid) + 1) * 110 / 100 + 10
		sdata(SKILL_NORMAL_LITERACY, calcbuff_charid) = (sdata(SKILL_NORMAL_LITERACY, calcbuff_charid) + 1) * 110 / 100 + 10
		return
	}
	if ( calcbuff_buffid == BUFF_AUTO_GUARD ) {
		dur = 50
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("仲間が受けるダメージを肩代わりする", "Take over the damage to ally")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_RETENTION ) {
		locvar_calcbuff_p = calcbuff_power
		dur = 50
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("テレポート妨害/速度上昇/耐狂気", "Prevent teleport/Increases speed/RES+ insane")
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += sdata(SKILL_ATTR_SPD, calcbuff_charid) / 8
		return
	}
	if ( calcbuff_buffid == BUFF_TAG_FORCE ) {
		locvar_calcbuff_p = calcbuff_power
		dur = 50
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("スキル値上昇/耐洗脳", "Increases skill level/RES+ brainwash")
				return
			}
		}
		sdata(SKILL_NORMAL_TACTICS, calcbuff_charid) = (sdata(SKILL_NORMAL_TACTICS, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_NORMAL_MARKSMAN, calcbuff_charid) = (sdata(SKILL_NORMAL_MARKSMAN, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_NORMAL_EYE_OF_MIND, calcbuff_charid) = (sdata(SKILL_NORMAL_EYE_OF_MIND, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_NORMAL_MAGIC_DEVICE, calcbuff_charid) = (sdata(SKILL_NORMAL_MAGIC_DEVICE, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_NORMAL_CASTING, calcbuff_charid) = (sdata(SKILL_NORMAL_CASTING, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_NORMAL_CONTROL_MAGIC, calcbuff_charid) = (sdata(SKILL_NORMAL_CONTROL_MAGIC, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_ACTIVE_RIDING, calcbuff_charid) = (sdata(SKILL_ACTIVE_RIDING, calcbuff_charid) + 1) * 130 / 100 + 5
		return
	}
	return

*sRefDefine
	dim sdataref, 7, 832
	sdim skillname, 16, 832
	sdim skilldesc, 40, 832
	sdim skillencdesc, 40, 600
	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_LIFE) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_LIFE) = lang("生命力", "Life")
	skilldesc(SKILL_ATTR_LIFE) = lang("", "")
	if ( 2 < 600 ) {
		skillencdesc(SKILL_ATTR_LIFE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_MANA) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_MANA) = lang("マナ", "Mana")
	skilldesc(SKILL_ATTR_MANA) = lang("", "")
	if ( 3 < 600 ) {
		skillencdesc(SKILL_ATTR_MANA) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_STR) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_STR) = lang("筋力", "Strength")
	skilldesc(SKILL_ATTR_STR) = lang("", "")
	if ( 10 < 600 ) {
		skillencdesc(SKILL_ATTR_STR) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_CON) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_CON) = lang("耐久", "Constitution")
	skilldesc(SKILL_ATTR_CON) = lang("", "")
	if ( 11 < 600 ) {
		skillencdesc(SKILL_ATTR_CON) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_DEX) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_DEX) = lang("器用", "Dexterity")
	skilldesc(SKILL_ATTR_DEX) = lang("", "")
	if ( 12 < 600 ) {
		skillencdesc(SKILL_ATTR_DEX) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_PER) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_PER) = lang("感覚", "Perception")
	skilldesc(SKILL_ATTR_PER) = lang("", "")
	if ( 13 < 600 ) {
		skillencdesc(SKILL_ATTR_PER) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_LER) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_LER) = lang("習得", "Learning")
	skilldesc(SKILL_ATTR_LER) = lang("", "")
	if ( 14 < 600 ) {
		skillencdesc(SKILL_ATTR_LER) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_WIL) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_WIL) = lang("意志", "Will")
	skilldesc(SKILL_ATTR_WIL) = lang("", "")
	if ( 15 < 600 ) {
		skillencdesc(SKILL_ATTR_WIL) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_MAG) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_MAG) = lang("魔力", "Magic")
	skilldesc(SKILL_ATTR_MAG) = lang("", "")
	if ( 16 < 600 ) {
		skillencdesc(SKILL_ATTR_MAG) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_CHA) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_CHA) = lang("魅力", "Charisma")
	skilldesc(SKILL_ATTR_CHA) = lang("", "")
	if ( 17 < 600 ) {
		skillencdesc(SKILL_ATTR_CHA) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_SPD) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_SPD) = lang("速度", "Speed")
	skilldesc(SKILL_ATTR_SPD) = lang("", "")
	if ( 18 < 600 ) {
		skillencdesc(SKILL_ATTR_SPD) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_LUC) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_LUC) = lang("運勢", "Luck")
	skilldesc(SKILL_ATTR_LUC) = lang("", "")
	if ( 19 < 600 ) {
		skillencdesc(SKILL_ATTR_LUC) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_LONGSWORD) = SKILL_ATTR_STR, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_LONGSWORD) = lang("長剣", "Long Sword")
	skilldesc(SKILL_WEAPON_LONGSWORD) = lang("刃渡りの長い剣を扱う技術", "Indicates your skill with long swords.")
	if ( 100 < 600 ) {
		skillencdesc(SKILL_WEAPON_LONGSWORD) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_SHORTSWORD) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_SHORTSWORD) = lang("短剣", "Short Sword")
	skilldesc(SKILL_WEAPON_SHORTSWORD) = lang("刃渡りの短い剣を扱う技術", "Indicates your skill with short swords.")
	if ( 101 < 600 ) {
		skillencdesc(SKILL_WEAPON_SHORTSWORD) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_AXE) = SKILL_ATTR_STR, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_AXE) = lang("斧", "Axe")
	skilldesc(SKILL_WEAPON_AXE) = lang("斧を扱う技術", "Indicates your skill with axes.")
	if ( 102 < 600 ) {
		skillencdesc(SKILL_WEAPON_AXE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_BLUNT) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_BLUNT) = lang("鈍器", "Blunt")
	skilldesc(SKILL_WEAPON_BLUNT) = lang("鈍器を扱う技術", "Indicates your skill with blunt weapons.")
	if ( 103 < 600 ) {
		skillencdesc(SKILL_WEAPON_BLUNT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_POLEARM) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_POLEARM) = lang("槍", "Polearm")
	skilldesc(SKILL_WEAPON_POLEARM) = lang("槍を扱う技術", "Indicates your skill with polearms.")
	if ( 104 < 600 ) {
		skillencdesc(SKILL_WEAPON_POLEARM) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_STAVE) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_STAVE) = lang("杖", "Stave")
	skilldesc(SKILL_WEAPON_STAVE) = lang("杖を扱う技術", "Indicates your skill with staves.")
	if ( 105 < 600 ) {
		skillencdesc(SKILL_WEAPON_STAVE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_SCYTHE) = SKILL_ATTR_STR, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_SCYTHE) = lang("鎌", "Scythe")
	skilldesc(SKILL_WEAPON_SCYTHE) = lang("鎌を扱う技術", "Indicates your skill with sycthes.")
	if ( 107 < 600 ) {
		skillencdesc(SKILL_WEAPON_SCYTHE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_BOW) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_BOW) = lang("弓", "Bow")
	skilldesc(SKILL_WEAPON_BOW) = lang("弓を扱う技術", "Indicates your skill with bows.")
	if ( 108 < 600 ) {
		skillencdesc(SKILL_WEAPON_BOW) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_CROSSBOW) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_CROSSBOW) = lang("クロスボウ", "Crossbow")
	skilldesc(SKILL_WEAPON_CROSSBOW) = lang("クロスボウを扱う技術", "Indicates your skill with cross bows")
	if ( 109 < 600 ) {
		skillencdesc(SKILL_WEAPON_CROSSBOW) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_FIREARM) = SKILL_ATTR_PER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_FIREARM) = lang("銃器", "Firearm")
	skilldesc(SKILL_WEAPON_FIREARM) = lang("遠隔機装を扱う技術", "Indicates your skill with firearms.")
	if ( 110 < 600 ) {
		skillencdesc(SKILL_WEAPON_FIREARM) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_THROWING) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_THROWING) = lang("投擲", "Throwing")
	skilldesc(SKILL_WEAPON_THROWING) = lang("投擲道具を扱う技術", "Indicates your skill with throwing objects.")
	if ( 111 < 600 ) {
		skillencdesc(SKILL_WEAPON_THROWING) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_MARTIAL_ARTS) = SKILL_ATTR_STR, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_MARTIAL_ARTS) = lang("格闘", "Martial Arts")
	skilldesc(SKILL_WEAPON_MARTIAL_ARTS) = lang("格闘の技術", "Indicates your skill fighting unarmed.")
	if ( 106 < 600 ) {
		skillencdesc(SKILL_WEAPON_MARTIAL_ARTS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_SHIELD) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_SHIELD) = lang("盾", "Shield")
	skilldesc(SKILL_NORMAL_SHIELD) = lang("盾を扱う技術", "Increases the effectivness of using shields.")
	if ( 168 < 600 ) {
		skillencdesc(SKILL_NORMAL_SHIELD) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_EVASION) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_EVASION) = lang("回避", "Evasion")
	skilldesc(SKILL_NORMAL_EVASION) = lang("攻撃を回避する", "Increases your chance of evading enemy attacks.")
	if ( 173 < 600 ) {
		skillencdesc(SKILL_NORMAL_EVASION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_DUAL_WIELD) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_DUAL_WIELD) = lang("二刀流", "Dual Wield")
	skilldesc(SKILL_NORMAL_DUAL_WIELD) = lang("複数の武器を扱う技術", "Used when wielding two weapoms at the same time.")
	if ( 166 < 600 ) {
		skillencdesc(SKILL_NORMAL_DUAL_WIELD) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_TWO_HAND) = SKILL_ATTR_STR, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_TWO_HAND) = lang("両手持ち", "Two Hand")
	skilldesc(SKILL_NORMAL_TWO_HAND) = lang("両手で武器を扱う技術", "Used when wielding a weapon with both hands.")
	if ( 167 < 600 ) {
		skillencdesc(SKILL_NORMAL_TWO_HAND) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_RES_FIRE) = SKILL_NONE, SKILL_TYPE_SP, 0, 1, 0
	skillname(SKILL_RES_FIRE) = lang("火炎", "fire")
	skilldesc(SKILL_RES_FIRE) = lang("熱や炎への耐性", "Resistance to fire.")
	if ( 50 < 600 ) {
		skillencdesc(SKILL_RES_FIRE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_RES_COLD) = SKILL_NONE, SKILL_TYPE_SP, 0, 1, 0
	skillname(SKILL_RES_COLD) = lang("冷気", "cold")
	skilldesc(SKILL_RES_COLD) = lang("冷気や氷への耐性", "Resistance to cold.")
	if ( 51 < 600 ) {
		skillencdesc(SKILL_RES_COLD) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_RES_LIGHTNING) = SKILL_NONE, SKILL_TYPE_SP, 0, 1, 0
	skillname(SKILL_RES_LIGHTNING) = lang("電撃", "lightning")
	skilldesc(SKILL_RES_LIGHTNING) = lang("雷や電気への耐性", "Resistance to lightning.")
	if ( 52 < 600 ) {
		skillencdesc(SKILL_RES_LIGHTNING) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_RES_DARKNESS) = SKILL_NONE, SKILL_TYPE_SP, 0, 2, 0
	skillname(SKILL_RES_DARKNESS) = lang("暗黒", "darkness")
	skilldesc(SKILL_RES_DARKNESS) = lang("暗黒や盲目への耐性", "Resistance to darkness.")
	if ( 53 < 600 ) {
		skillencdesc(SKILL_RES_DARKNESS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_RES_MIND) = SKILL_NONE, SKILL_TYPE_SP, 0, 2, 0
	skillname(SKILL_RES_MIND) = lang("幻惑", "mind")
	skilldesc(SKILL_RES_MIND) = lang("精神攻撃への抵抗力", "Resistance to mind.")
	if ( 54 < 600 ) {
		skillencdesc(SKILL_RES_MIND) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_RES_NETHER) = SKILL_NONE, SKILL_TYPE_SP, 0, 4, 0
	skillname(SKILL_RES_NETHER) = lang("地獄", "nether")
	skilldesc(SKILL_RES_NETHER) = lang("生命吸収への抵抗力", "Resistance to nether.")
	if ( 56 < 600 ) {
		skillencdesc(SKILL_RES_NETHER) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_RES_POISON) = SKILL_NONE, SKILL_TYPE_SP, 0, 3, 0
	skillname(SKILL_RES_POISON) = lang("毒", "poison")
	skilldesc(SKILL_RES_POISON) = lang("毒への耐性", "Resistance to poison.")
	if ( 55 < 600 ) {
		skillencdesc(SKILL_RES_POISON) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_RES_SOUND) = SKILL_NONE, SKILL_TYPE_SP, 0, 3, 0
	skillname(SKILL_RES_SOUND) = lang("音", "sound")
	skilldesc(SKILL_RES_SOUND) = lang("音波や轟音への耐性", "Resistance to sound.")
	if ( 57 < 600 ) {
		skillencdesc(SKILL_RES_SOUND) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_RES_CHAOS) = SKILL_NONE, SKILL_TYPE_SP, 0, 4, 0
	skillname(SKILL_RES_CHAOS) = lang("混沌", "chaos")
	skilldesc(SKILL_RES_CHAOS) = lang("混沌の効果への耐性", "Resistance to chaos.")
	if ( 59 < 600 ) {
		skillencdesc(SKILL_RES_CHAOS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_RES_NERVE) = SKILL_NONE, SKILL_TYPE_SP, 0, 3, 0
	skillname(SKILL_RES_NERVE) = lang("神経", "nerve")
	skilldesc(SKILL_RES_NERVE) = lang("睡眠や麻痺への耐性", "Resistance to nerve.")
	if ( 58 < 600 ) {
		skillencdesc(SKILL_RES_NERVE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_RES_MAGIC) = SKILL_NONE, SKILL_TYPE_SP, 0, 5, 0
	skillname(SKILL_RES_MAGIC) = lang("魔法", "magic")
	skilldesc(SKILL_RES_MAGIC) = lang("魔法攻撃への耐性", "Resistance to magic.")
	if ( 60 < 600 ) {
		skillencdesc(SKILL_RES_MAGIC) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_RESDMG_CUT) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_RESDMG_CUT) = lang("出血", "cut")
	skilldesc(SKILL_RESDMG_CUT) = lang("切り傷への耐性", "Resistance to cut.")
	if ( 61 < 600 ) {
		skillencdesc(SKILL_RESDMG_CUT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_WEIGHT_LIFTING) = SKILL_ATTR_STR, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_WEIGHT_LIFTING) = lang("重量挙げ", "Weight Lifting")
	skilldesc(SKILL_NORMAL_WEIGHT_LIFTING) = lang("重い荷物を持ち運ぶことを可能にする", "Allows you to carry more stuff.")
	if ( 153 < 600 ) {
		skillencdesc(SKILL_NORMAL_WEIGHT_LIFTING) = lang("より重い物の運搬を可能にする", "makes you better at weight lifting.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_TACTICS) = SKILL_ATTR_STR, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_TACTICS) = lang("戦術", "Tactics")
	skilldesc(SKILL_NORMAL_TACTICS) = lang("近接攻撃の威力をあげる", "Increases melee damage.")
	if ( 152 < 600 ) {
		skillencdesc(SKILL_NORMAL_TACTICS) = lang("戦術の理解を深める", "makes you a better tactician.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_MARKSMAN) = SKILL_ATTR_PER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_MARKSMAN) = lang("射撃", "Marksman")
	skilldesc(SKILL_NORMAL_MARKSMAN) = lang("射撃の威力をあげる", "Increases shooting damage.")
	if ( 189 < 600 ) {
		skillencdesc(SKILL_NORMAL_MARKSMAN) = lang("射撃の理解を深める", "makes you a better marksman.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_HEALING) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_HEALING) = lang("治癒", "Healing")
	skilldesc(SKILL_NORMAL_HEALING) = lang("怪我を自然に治癒する", "Gradually heals your wounds.")
	if ( 154 < 600 ) {
		skillencdesc(SKILL_NORMAL_HEALING) = lang("体力回復を強化する", "enhances your body metabolism.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_MINING) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_MINING) = lang("採掘", "Mining")
	skilldesc(SKILL_NORMAL_MINING) = lang("壁を掘る効率をあげる", "Shows how good of a miner you are.")
	if ( 163 < 600 ) {
		skillencdesc(SKILL_NORMAL_MINING) = lang("採掘能力を強化する", "enhances your mining skill.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_CARPENTRY) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_CARPENTRY) = lang("工作", "Carpentry")
	skilldesc(SKILL_NORMAL_CARPENTRY) = lang("物を加工し、アイテムを作り出す", "Skill to cut trees and manufcture products.")
	if ( 176 < 600 ) {
		skillencdesc(SKILL_NORMAL_CARPENTRY) = lang("工作の腕をあげる", "makes you a better carpenter.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_HEAVY_ARMOR) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_HEAVY_ARMOR) = lang("重装備", "Heavy Armor")
	skilldesc(SKILL_NORMAL_HEAVY_ARMOR) = lang("重い装備を扱う技術", "Skill to effectively act while wearing heavy armor.")
	if ( 169 < 600 ) {
		skillencdesc(SKILL_NORMAL_HEAVY_ARMOR) = lang("重装備の技術を上昇させる", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_MEDIUM_ARMOR) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_MEDIUM_ARMOR) = lang("中装備", "Medium Armor")
	skilldesc(SKILL_NORMAL_MEDIUM_ARMOR) = lang("普通の装備を扱う技術", "Skill to effectively act while wearing medium armor.")
	if ( 170 < 600 ) {
		skillencdesc(SKILL_NORMAL_MEDIUM_ARMOR) = lang("中装備の技術を上昇させる", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_LIGHT_ARMOR) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_LIGHT_ARMOR) = lang("軽装備", "Light Armor")
	skilldesc(SKILL_NORMAL_LIGHT_ARMOR) = lang("軽い装備を扱う技術", "Skill to effectively act while wearing light armor.")
	if ( 171 < 600 ) {
		skillencdesc(SKILL_NORMAL_LIGHT_ARMOR) = lang("軽装備の技術を上昇させる", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_LOCK_PICKING) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_LOCK_PICKING) = lang("鍵開け", "Lock Picking")
	skilldesc(SKILL_NORMAL_LOCK_PICKING) = lang("鍵を開ける", "Allows you to pick more difficult locks.")
	if ( 158 < 600 ) {
		skillencdesc(SKILL_NORMAL_LOCK_PICKING) = lang("鍵開けの能力を強化する", "grants you the trick of lock picking.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_DISARM_TRAP) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_DISARM_TRAP) = lang("罠の知識", "Disarm Trap")
	skilldesc(SKILL_NORMAL_DISARM_TRAP) = lang("罠の設置・解体能力を強化する", "Allows you to disarm harder traps.")
	if ( 175 < 600 ) {
		skillencdesc(SKILL_NORMAL_DISARM_TRAP) = lang("罠の知識を深める", "grants you the trick of disarming traps.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_TAILORING) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_TAILORING) = lang("裁縫", "Tailoring")
	skilldesc(SKILL_NORMAL_TAILORING) = lang("革や蔓を用い、アイテムを作り出す", "Skill to sew materials and manufucture products.")
	if ( 177 < 600 ) {
		skillencdesc(SKILL_NORMAL_TAILORING) = lang("裁縫の腕をあげる", "makes you a better tailor.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_JEWELER) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_JEWELER) = lang("宝石細工", "Jeweler")
	skilldesc(SKILL_NORMAL_JEWELER) = lang("宝石を加工し、アイテムを作り出す", "Skill to process jewels and manufucture products.")
	if ( 179 < 600 ) {
		skillencdesc(SKILL_NORMAL_JEWELER) = lang("宝石細工の腕をあげる", "makes you a better jeweler.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_ACTIVE_PICKPOCKET) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 20, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_ACTIVE_PICKPOCKET) = lang("窃盗", "Pickpocket")
	skilldesc(SKILL_ACTIVE_PICKPOCKET) = lang("貴重な物品を盗む", "Shows how good of a thief you are.")
	if ( 300 < 600 ) {
		skillencdesc(SKILL_ACTIVE_PICKPOCKET) = lang("窃盗の腕をあげる", "grants you the trick of pickpocketing.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_SWIMMING) = SKILL_ATTR_SPD, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_SWIMMING) = lang("着衣水泳", "Swimming")
	skilldesc(SKILL_NORMAL_SWIMMING) = lang("濡れた状態で素早く行動する/水中適応", "Allows you to move fast when wetting.")
	if ( 190 < 600 ) {
		skillencdesc(SKILL_NORMAL_SWIMMING) = lang("泳ぎの技術をあげる", "makes you better swimmer.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_STEALTH) = SKILL_ATTR_PER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_STEALTH) = lang("隠密", "Stealth")
	skilldesc(SKILL_NORMAL_STEALTH) = lang("周囲に気づかれず行動する", "Allows you to move quietly.")
	if ( 157 < 600 ) {
		skillencdesc(SKILL_NORMAL_STEALTH) = lang("隠密能力を強化する", "strengthens your ability to hide.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_DETECTION) = SKILL_ATTR_PER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_DETECTION) = lang("探知", "Detection")
	skilldesc(SKILL_NORMAL_DETECTION) = lang("隠された場所や罠を見つける", "It is used to search hidden locations and traps.")
	if ( 159 < 600 ) {
		skillencdesc(SKILL_NORMAL_DETECTION) = lang("探知能力を強化する", "strengthens your ability to detect objects.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_SENSE_QUALITY) = SKILL_ATTR_PER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_SENSE_QUALITY) = lang("分析", "Analysis")
	skilldesc(SKILL_NORMAL_SENSE_QUALITY) = lang("物の種類や敵の攻撃パターンを感じ取る", "Allows you to feel the object-types and attack-patterns.")
	if ( 162 < 600 ) {
		skillencdesc(SKILL_NORMAL_SENSE_QUALITY) = lang("分析能力を高める", "improve your analytical ability.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_EYE_OF_MIND) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_EYE_OF_MIND) = lang("心眼", "Eye of Mind")
	skilldesc(SKILL_NORMAL_EYE_OF_MIND) = lang("クリティカル率を高める", "Increases your chance to deliver critical hits.")
	if ( 186 < 600 ) {
		skillencdesc(SKILL_NORMAL_EYE_OF_MIND) = lang("心眼の技術を上昇させる", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_FISHING) = SKILL_ATTR_PER, SKILL_TYPE_SP, 5, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_NORMAL_FISHING) = lang("釣り", "Fishing")
	skilldesc(SKILL_NORMAL_FISHING) = lang("釣りを可能にする", "Displays your fishing skill.")
	if ( 185 < 600 ) {
		skillencdesc(SKILL_NORMAL_FISHING) = lang("釣りの腕をあげる", "makes you better fisher.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_GREATER_EVASION) = SKILL_ATTR_PER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_GREATER_EVASION) = lang("見切り", "Greater Evasion")
	skilldesc(SKILL_NORMAL_GREATER_EVASION) = lang("不正確な攻撃を確実に避ける", "Makes you able to evade inaccurate attacks.")
	if ( 187 < 600 ) {
		skillencdesc(SKILL_NORMAL_GREATER_EVASION) = lang("見切りの腕をあげる", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_ANATOMY) = SKILL_ATTR_LER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_ANATOMY) = lang("解剖学", "Anatomy")
	skilldesc(SKILL_NORMAL_ANATOMY) = lang("死体を残しやすくする", "Gives you a better chance of finding dead bodies.")
	if ( 161 < 600 ) {
		skillencdesc(SKILL_NORMAL_ANATOMY) = lang("死体を残しやすくする", "grants you knowledge of anatomy.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_LITERACY) = SKILL_ATTR_LER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_LITERACY) = lang("読書", "Literacy")
	skilldesc(SKILL_NORMAL_LITERACY) = lang("難解な本の解読を可能にする", "Allows you to read difficult books.")
	if ( 150 < 600 ) {
		skillencdesc(SKILL_NORMAL_LITERACY) = lang("本の理解を深める", "makes you literate.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_MEMORIZATION) = SKILL_ATTR_LER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_MEMORIZATION) = lang("暗記", "Memorization")
	skilldesc(SKILL_NORMAL_MEMORIZATION) = lang("書物の知識や攻撃の分析結果を記憶する", "Memorize knowledge of books and analysis results.")
	if ( 165 < 600 ) {
		skillencdesc(SKILL_NORMAL_MEMORIZATION) = lang("知識の忘却を防ぐ", "enhances your memory.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_ALCHEMY) = SKILL_ATTR_LER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_ALCHEMY) = lang("錬金術", "Alchemy")
	skilldesc(SKILL_NORMAL_ALCHEMY) = lang("様々な材料を調合し、アイテムを作り出す", "Enables you to perform alchemy.")
	if ( 178 < 600 ) {
		skillencdesc(SKILL_NORMAL_ALCHEMY) = lang("錬金の腕をあげる", "grants you knowledge of alchemy.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_GARDENING) = SKILL_ATTR_LER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_GARDENING) = lang("栽培", "Gardening")
	skilldesc(SKILL_NORMAL_GARDENING) = lang("植物を育て、採取する", "Skill to plant seeds and gather harvests.")
	if ( 180 < 600 ) {
		skillencdesc(SKILL_NORMAL_GARDENING) = lang("栽培の腕をあげる", "grants you knowledge of gardening.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_GENE_ENGINEER) = SKILL_ATTR_LER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_GENE_ENGINEER) = lang("生化学", "Gene engineer")
	skilldesc(SKILL_NORMAL_GENE_ENGINEER) = lang("能力複合の知識を高める", "Allows you to control genes.")
	if ( 151 < 600 ) {
		skillencdesc(SKILL_NORMAL_GENE_ENGINEER) = lang("生化学の知識を深める", "makes you a better gene engineer.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_COOKING) = SKILL_ATTR_LER, SKILL_TYPE_SP, 15, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_NORMAL_COOKING) = lang("料理", "Cooking")
	skilldesc(SKILL_NORMAL_COOKING) = lang("料理の腕を上げる", "Improves your cooking skill.")
	if ( 184 < 600 ) {
		skillencdesc(SKILL_NORMAL_COOKING) = lang("料理の腕を上げる", "enhances your cooking skill.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_MEDITATION) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_MEDITATION) = lang("瞑想", "Meditation")
	skilldesc(SKILL_NORMAL_MEDITATION) = lang("消耗したマナを回復させる", "Gradually restores your magic points.")
	if ( 155 < 600 ) {
		skillencdesc(SKILL_NORMAL_MEDITATION) = lang("マナ回復を強化する", "enhances your meditation.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_MAGIC_DEVICE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_MAGIC_DEVICE) = lang("魔道具", "Magic Device")
	skilldesc(SKILL_NORMAL_MAGIC_DEVICE) = lang("魔道具を効果的に扱う", "Improves effectiveness of magic devices.")
	if ( 174 < 600 ) {
		skillencdesc(SKILL_NORMAL_MAGIC_DEVICE) = lang("魔道具の効果をあげる", "enhances power of magical devices.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_CASTING) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_CASTING) = lang("詠唱", "Casting")
	skilldesc(SKILL_NORMAL_CASTING) = lang("魔法詠唱の成功率をあげる", "Reduces the chance of casting failure.")
	if ( 172 < 600 ) {
		skillencdesc(SKILL_NORMAL_CASTING) = lang("より高度な詠唱を可能にさせる", "enhances your casting ability.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_CONTROL_MAGIC) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_CONTROL_MAGIC) = lang("魔力制御", "Control Magic")
	skilldesc(SKILL_NORMAL_CONTROL_MAGIC) = lang("魔法による味方のまきこみを軽減する", "Prevents your allies to get hit by your spells.")
	if ( 188 < 600 ) {
		skillencdesc(SKILL_NORMAL_CONTROL_MAGIC) = lang("より高度な魔力制御を可能にさせる", "enhances your ability to control magics.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_MAGIC_CAPACITY) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_MAGIC_CAPACITY) = lang("魔力の限界", "Magic Capacity")
	skilldesc(SKILL_NORMAL_MAGIC_CAPACITY) = lang("自分や杖から多くの魔力を引き出す", "Bring out a lot of power from yourself and rods.")
	if ( 164 < 600 ) {
		skillencdesc(SKILL_NORMAL_MAGIC_CAPACITY) = lang("魔力の限界の理解を深める", "strengthens various magic capacity.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_FAITH) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_FAITH) = lang("信仰", "Faith")
	skilldesc(SKILL_NORMAL_FAITH) = lang("神との距離を近める", "Gets you closer to god.")
	if ( 181 < 600 ) {
		skillencdesc(SKILL_NORMAL_FAITH) = lang("信仰を深める", "makes you pious.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_TRAVELING) = SKILL_ATTR_SPD, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_TRAVELING) = lang("旅歩き", "Traveling")
	skilldesc(SKILL_NORMAL_TRAVELING) = lang("旅の進行を早め経験を深める", "Allows you to receive more EXP from traveling.")
	if ( 182 < 600 ) {
		skillencdesc(SKILL_NORMAL_TRAVELING) = lang("旅の熟練をあげる", "makes you a better traveler.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_ACTIVE_RIDING) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 20, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_ACTIVE_RIDING) = lang("乗馬", "Riding")
	skilldesc(SKILL_ACTIVE_RIDING) = lang("上手に乗りこなす", "Allows you to ride creatures.")
	if ( 301 < 600 ) {
		skillencdesc(SKILL_ACTIVE_RIDING) = lang("乗馬の腕をあげる", "enhances your ability to ride.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_NEGOTIATION) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_NEGOTIATION) = lang("交渉", "Negotiation")
	skilldesc(SKILL_NORMAL_NEGOTIATION) = lang("交渉や商談を有利に進める", "Convinces someone to give you better deals.")
	if ( 156 < 600 ) {
		skillencdesc(SKILL_NORMAL_NEGOTIATION) = lang("交渉を有利に進めさせる", "grants you knowledge of negotiation.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_INVESTING) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_INVESTING) = lang("投資", "Investing")
	skilldesc(SKILL_NORMAL_INVESTING) = lang("効果的に投資を行う", "Lowers the money needed to invest in shops.")
	if ( 160 < 600 ) {
		skillencdesc(SKILL_NORMAL_INVESTING) = lang("より安い価格での投資を可能にする", "grants you knowledge of investing.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_PERFORMER) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 25, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_NORMAL_PERFORMER) = lang("演奏", "Performer")
	skilldesc(SKILL_NORMAL_PERFORMER) = lang("質の高い演奏を可能にする", "Shows how good of a performer you are.")
	if ( 183 < 600 ) {
		skillencdesc(SKILL_NORMAL_PERFORMER) = lang("演奏の質をあげる", "makes your performance better.")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_HEAL_LIGHT) = SKILL_ATTR_WIL, SKILL_TYPE_HEAL, 6, TARGET_TYPE_SELF, 80
	skillname(SKILL_SPELL_HEAL_LIGHT) = lang("軽傷治癒", "Heal Light")
	skilldesc(SKILL_SPELL_HEAL_LIGHT) = lang("体力回復", "Heal self")
	if ( 400 < 600 ) {
		skillencdesc(SKILL_SPELL_HEAL_LIGHT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_HEAL_CRITICAL) = SKILL_ATTR_WIL, SKILL_TYPE_HEAL, 15, TARGET_TYPE_SELF, 350
	skillname(SKILL_SPELL_HEAL_CRITICAL) = lang("致命傷治癒", "Heal Critical")
	skilldesc(SKILL_SPELL_HEAL_CRITICAL) = lang("体力回復", "Heal self")
	if ( 401 < 600 ) {
		skillencdesc(SKILL_SPELL_HEAL_CRITICAL) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_CURE_OF_ERIS) = SKILL_ATTR_WIL, SKILL_TYPE_HEAL, 35, TARGET_TYPE_SELF, 800
	skillname(SKILL_SPELL_CURE_OF_ERIS) = lang("エリスの癒し", "Cure of Eris")
	skilldesc(SKILL_SPELL_CURE_OF_ERIS) = lang("体力回復", "Heal self")
	if ( 402 < 600 ) {
		skillencdesc(SKILL_SPELL_CURE_OF_ERIS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_CURE_OF_JURE) = SKILL_ATTR_WIL, SKILL_TYPE_HEAL, 80, TARGET_TYPE_SELF, 1300
	skillname(SKILL_SPELL_CURE_OF_JURE) = lang("ジュアの癒し", "Cure of Jua")
	skilldesc(SKILL_SPELL_CURE_OF_JURE) = lang("体力回復", "Heal self")
	if ( 403 < 600 ) {
		skillencdesc(SKILL_SPELL_CURE_OF_JURE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_HEALING_TOUCH) = SKILL_ATTR_WIL, SKILL_TYPE_HEAL, 20, TARGET_TYPE_DIRECTION, 400
	skillname(SKILL_SPELL_HEALING_TOUCH) = lang("癒しの手", "Healing Touch")
	skilldesc(SKILL_SPELL_HEALING_TOUCH) = lang("体力回復", "Heal target")
	if ( 405 < 600 ) {
		skillencdesc(SKILL_SPELL_HEALING_TOUCH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_HOLY_LIGHT) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 15, TARGET_TYPE_SELF, 400
	skillname(SKILL_SPELL_HOLY_LIGHT) = lang("清浄なる光", "Holy Light")
	skilldesc(SKILL_SPELL_HOLY_LIGHT) = lang("1つの呪い(hex)除去", "Remove one hex")
	if ( 406 < 600 ) {
		skillencdesc(SKILL_SPELL_HOLY_LIGHT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_VANQUISH_HEX) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 35, TARGET_TYPE_DIRECTION, 850
	skillname(SKILL_SPELL_VANQUISH_HEX) = lang("全浄化", "Vanquish Hex")
	skilldesc(SKILL_SPELL_VANQUISH_HEX) = lang("全ての呪い(hex)除去", "Remove all hexes")
	if ( 407 < 600 ) {
		skillencdesc(SKILL_SPELL_VANQUISH_HEX) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_TELEPORT_OTHER) = SKILL_ATTR_MAG, SKILL_TYPE_TELEPORT, 10, TARGET_TYPE_DIRECTION, 200
	skillname(SKILL_SPELL_TELEPORT_OTHER) = lang("テレポートアザー", "Teleport Other")
	skilldesc(SKILL_SPELL_TELEPORT_OTHER) = lang("対象を瞬間移動させる", "Teleport target")
	if ( 409 < 600 ) {
		skillencdesc(SKILL_SPELL_TELEPORT_OTHER) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_TELEPORT) = SKILL_ATTR_MAG, SKILL_TYPE_TELEPORT, 10, TARGET_TYPE_SELF_ONLY, 400
	skillname(SKILL_SPELL_TELEPORT) = lang("テレポート", "Teleport")
	skilldesc(SKILL_SPELL_TELEPORT) = lang("瞬間移動", "Teleport self")
	if ( 408 < 600 ) {
		skillencdesc(SKILL_SPELL_TELEPORT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_SHORT_TELEPORT) = SKILL_ATTR_MAG, SKILL_TYPE_TELEPORT, 8, TARGET_TYPE_SELF_ONLY, 120
	skillname(SKILL_SPELL_SHORT_TELEPORT) = lang("ショートテレポート", "Short Teleport")
	skilldesc(SKILL_SPELL_SHORT_TELEPORT) = lang("近くへの瞬間移動", "Teleport self")
	if ( 410 < 600 ) {
		skillencdesc(SKILL_SPELL_SHORT_TELEPORT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_IDENTIFY) = SKILL_ATTR_PER, SKILL_TYPE_SP, 28, TARGET_TYPE_SELF_ONLY, 800
	skillname(SKILL_SPELL_IDENTIFY) = lang("鑑定", "Identify")
	skilldesc(SKILL_SPELL_IDENTIFY) = lang("アイテム鑑定", "Identify one item")
	if ( 411 < 600 ) {
		skillencdesc(SKILL_SPELL_IDENTIFY) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_UNCURSE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 35, TARGET_TYPE_SELF, 700
	skillname(SKILL_SPELL_UNCURSE) = lang("解呪", "Uncurse")
	skilldesc(SKILL_SPELL_UNCURSE) = lang("アイテム解呪", "Uncurse items")
	if ( 412 < 600 ) {
		skillencdesc(SKILL_SPELL_UNCURSE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_ORACLE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 150, TARGET_TYPE_SELF, 1500
	skillname(SKILL_SPELL_ORACLE) = lang("神託", "Oracle")
	skilldesc(SKILL_SPELL_ORACLE) = lang("アーティファクト感知", "Reveal artifacts")
	if ( 413 < 600 ) {
		skillencdesc(SKILL_SPELL_ORACLE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MAGIC_DART) = SKILL_ATTR_MAG, SKILL_TYPE_ARROW, 5, 2000 + 6, 110
	skillname(SKILL_SPELL_MAGIC_DART) = lang("魔法の矢", "Magic Dart")
	skilldesc(SKILL_SPELL_MAGIC_DART) = lang("魔法属性の矢", "Target(Magic)")
	if ( 414 < 600 ) {
		skillencdesc(SKILL_SPELL_MAGIC_DART) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_NETHER_ARROW) = SKILL_ATTR_MAG, SKILL_TYPE_ARROW, 8, 2000 + 6, 400
	skillname(SKILL_SPELL_NETHER_ARROW) = lang("地獄の吐息", "Nether Arrow")
	skilldesc(SKILL_SPELL_NETHER_ARROW) = lang("地獄の矢", "Target(Nether)")
	if ( 415 < 600 ) {
		skillencdesc(SKILL_SPELL_NETHER_ARROW) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_CHAOS_EYE) = SKILL_ATTR_MAG, SKILL_TYPE_ARROW, 10, 2000 + 6, 650
	skillname(SKILL_SPELL_CHAOS_EYE) = lang("混沌の瞳", "Chaos eye")
	skilldesc(SKILL_SPELL_CHAOS_EYE) = lang("混沌の矢", "Target(Chaos)")
	if ( 417 < 600 ) {
		skillencdesc(SKILL_SPELL_CHAOS_EYE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_NERVE_ARROW) = SKILL_ATTR_MAG, SKILL_TYPE_ARROW, 10, 2000 + 6, 400
	skillname(SKILL_SPELL_NERVE_ARROW) = lang("麻痺の矢", "Nerve Arrow")
	skilldesc(SKILL_SPELL_NERVE_ARROW) = lang("神経の矢", "Target(Nerve)")
	if ( 416 < 600 ) {
		skillencdesc(SKILL_SPELL_NERVE_ARROW) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_DARK_EYE) = SKILL_ATTR_MAG, SKILL_TYPE_ARROW, 10, 2000 + 6, 200
	skillname(SKILL_SPELL_DARK_EYE) = lang("暗黒の矢", "Dark eye")
	skilldesc(SKILL_SPELL_DARK_EYE) = lang("暗黒の矢", "Target(Darkness)")
	if ( 418 < 600 ) {
		skillencdesc(SKILL_SPELL_DARK_EYE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_CRYSTAL_SPEAR) = SKILL_ATTR_MAG, SKILL_TYPE_BOLT, 20, 9000 + 6, 950
	skillname(SKILL_SPELL_CRYSTAL_SPEAR) = lang("魔力の集積", "Crystal Spear")
	skilldesc(SKILL_SPELL_CRYSTAL_SPEAR) = lang("魔法属性のボルト", "Line(Magic)")
	if ( 459 < 600 ) {
		skillencdesc(SKILL_SPELL_CRYSTAL_SPEAR) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_ICE_BOLT) = SKILL_ATTR_MAG, SKILL_TYPE_BOLT, 10, 9000 + 6, 220
	skillname(SKILL_SPELL_ICE_BOLT) = lang("アイスボルト", "Ice Bolt")
	skilldesc(SKILL_SPELL_ICE_BOLT) = lang("氷のボルト", "Line(Cold)")
	if ( 419 < 600 ) {
		skillencdesc(SKILL_SPELL_ICE_BOLT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_FIRE_BOLT) = SKILL_ATTR_MAG, SKILL_TYPE_BOLT, 10, 9000 + 6, 220
	skillname(SKILL_SPELL_FIRE_BOLT) = lang("ファイアボルト", "Fire Bolt")
	skilldesc(SKILL_SPELL_FIRE_BOLT) = lang("火炎のボルト", "Line(Fire)")
	if ( 420 < 600 ) {
		skillencdesc(SKILL_SPELL_FIRE_BOLT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_LIGHTNING_BOLT) = SKILL_ATTR_MAG, SKILL_TYPE_BOLT, 10, 9000 + 6, 220
	skillname(SKILL_SPELL_LIGHTNING_BOLT) = lang("ライトニングボルト", "Lightning Bolt")
	skilldesc(SKILL_SPELL_LIGHTNING_BOLT) = lang("雷のボルト", "Line(Lightning)")
	if ( 421 < 600 ) {
		skillencdesc(SKILL_SPELL_LIGHTNING_BOLT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_DARKNESS_BOLT) = SKILL_ATTR_MAG, SKILL_TYPE_BOLT, 12, 9000 + 6, 350
	skillname(SKILL_SPELL_DARKNESS_BOLT) = lang("ダークネスボルト", "Darkness Bolt")
	skilldesc(SKILL_SPELL_DARKNESS_BOLT) = lang("暗黒のボルト", "Line(Darkness)")
	if ( 422 < 600 ) {
		skillencdesc(SKILL_SPELL_DARKNESS_BOLT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MIND_BOLT) = SKILL_ATTR_MAG, SKILL_TYPE_BOLT, 12, 9000 + 6, 350
	skillname(SKILL_SPELL_MIND_BOLT) = lang("マインドボルト", "Mind Bolt")
	skilldesc(SKILL_SPELL_MIND_BOLT) = lang("幻惑のボルト", "Line(Mind)")
	if ( 423 < 600 ) {
		skillencdesc(SKILL_SPELL_MIND_BOLT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_WATER_BOLT) = SKILL_ATTR_MAG, SKILL_TYPE_BOLT, 12, 9000 + 6, 350
	skillname(SKILL_SPELL_WATER_BOLT) = lang("ハイドロボルト", "Water Bolt")
	skilldesc(SKILL_SPELL_WATER_BOLT) = lang("水のボルト", "Line(water)")
	if ( 475 < 600 ) {
		skillencdesc(SKILL_SPELL_WATER_BOLT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUICIDE_ATTACK) = SKILL_ATTR_CON, SKILL_TYPE_BALL, 16, TARGET_TYPE_DIRECTION, 450
	skillname(SKILL_SPACT_SUICIDE_ATTACK) = lang("自爆", "Suicide Attack")
	skilldesc(SKILL_SPACT_SUICIDE_ATTACK) = lang("自爆の球", "Suicide")
	if ( 644 < 600 ) {
		skillencdesc(SKILL_SPACT_SUICIDE_ATTACK) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_ICE_BALL) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 16, 3000 + 2, 450
	skillname(SKILL_SPELL_ICE_BALL) = lang("氷結の波動", "Ice Ball")
	skilldesc(SKILL_SPELL_ICE_BALL) = lang("範囲攻撃・氷", "Surround(Cold)")
	if ( 431 < 600 ) {
		skillencdesc(SKILL_SPELL_ICE_BALL) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_FIRE_BALL) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 16, 3000 + 2, 450
	skillname(SKILL_SPELL_FIRE_BALL) = lang("灼熱の嵐", "Fire Ball")
	skilldesc(SKILL_SPELL_FIRE_BALL) = lang("範囲攻撃・炎", "Surround(Fire)")
	if ( 432 < 600 ) {
		skillencdesc(SKILL_SPELL_FIRE_BALL) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_CHAOS_BALL) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 20, 3000 + 2, 1000
	skillname(SKILL_SPELL_CHAOS_BALL) = lang("混沌の渦", "Chaos Ball")
	skilldesc(SKILL_SPELL_CHAOS_BALL) = lang("範囲攻撃・混沌", "Surround(Chaos)")
	if ( 433 < 600 ) {
		skillencdesc(SKILL_SPELL_CHAOS_BALL) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_RAGING_ROAR) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 18, 3000 + 2, 700
	skillname(SKILL_SPELL_RAGING_ROAR) = lang("轟音の波動", "Raging Roar")
	skilldesc(SKILL_SPELL_RAGING_ROAR) = lang("範囲攻撃・轟音", "Surround(Sound)")
	if ( 434 < 600 ) {
		skillencdesc(SKILL_SPELL_RAGING_ROAR) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MAGIC_STORM) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 40, 3000 + 2, 1400
	skillname(SKILL_SPELL_MAGIC_STORM) = lang("魔力の嵐", "Magic Storm")
	skilldesc(SKILL_SPELL_MAGIC_STORM) = lang("範囲攻撃・魔法", "Surround(Magic)")
	if ( 460 < 600 ) {
		skillencdesc(SKILL_SPELL_MAGIC_STORM) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_ECLIPSE) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 40, 3000 + 2, 1200
	skillname(SKILL_SPELL_ECLIPSE) = lang("月蝕の檻", "Eclipse")
	skilldesc(SKILL_SPELL_ECLIPSE) = lang("範囲攻撃・暗黒", "Surround(Darkness)")
	if ( 469 < 600 ) {
		skillencdesc(SKILL_SPELL_ECLIPSE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_THUNDER_VORTEX) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 20, 3000 + 2, 1000
	skillname(SKILL_SPELL_THUNDER_VORTEX) = lang("雷霆の渦", "Thunder vortex")
	skilldesc(SKILL_SPELL_THUNDER_VORTEX) = lang("範囲攻撃・電撃", "Surround(Lightning)")
	if ( 470 < 600 ) {
		skillencdesc(SKILL_SPELL_THUNDER_VORTEX) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_NETHER_WAVE) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 30, 3000 + 2, 1000
	skillname(SKILL_SPELL_NETHER_WAVE) = lang("冥王の咆哮", "Nether Wave")
	skilldesc(SKILL_SPELL_NETHER_WAVE) = lang("範囲攻撃・地獄", "Surround(Nether)")
	if ( 471 < 600 ) {
		skillencdesc(SKILL_SPELL_NETHER_WAVE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_POISON_STORM) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 25, 3000 + 2, 450
	skillname(SKILL_SPELL_POISON_STORM) = lang("猛毒の嵐", "Poison Storm")
	skilldesc(SKILL_SPELL_POISON_STORM) = lang("範囲攻撃・毒", "Surround(Poison)")
	if ( 473 < 600 ) {
		skillencdesc(SKILL_SPELL_POISON_STORM) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_BUBBLE_STORM) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 35, 3000 + 2, 800
	skillname(SKILL_SPELL_BUBBLE_STORM) = lang("泡沫の嵐", "Bubble Storm")
	skilldesc(SKILL_SPELL_BUBBLE_STORM) = lang("範囲攻撃・無属性/濡れ", "Surround(water)")
	if ( 476 < 600 ) {
		skillencdesc(SKILL_SPELL_BUBBLE_STORM) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_HEALING_RAIN) = SKILL_ATTR_WIL, SKILL_TYPE_BALL, 38, 3000 + 2, 500
	skillname(SKILL_SPELL_HEALING_RAIN) = lang("治癒の雨", "Healing Rain")
	skilldesc(SKILL_SPELL_HEALING_RAIN) = lang("体力回復の球", "Heal area")
	if ( 404 < 600 ) {
		skillencdesc(SKILL_SPELL_HEALING_RAIN) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_RAIN_OF_SANITY) = SKILL_ATTR_WIL, SKILL_TYPE_BALL, 50, 3000 + 2, 500
	skillname(SKILL_SPACT_RAIN_OF_SANITY) = lang("狂気治癒の雨", "Rain of sanity")
	skilldesc(SKILL_SPACT_RAIN_OF_SANITY) = lang("狂気回復の球", "Cure insane area")
	if ( 637 < 600 ) {
		skillencdesc(SKILL_SPACT_RAIN_OF_SANITY) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_GRAVITY) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 24, 3000 + 2, 750
	skillname(SKILL_SPELL_GRAVITY) = lang("グラビティ", "Gravity")
	skilldesc(SKILL_SPELL_GRAVITY) = lang("重力の発生", "Create gravity")
	if ( 466 < 600 ) {
		skillencdesc(SKILL_SPELL_GRAVITY) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_SUMMON_MONSTERS) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 15, 2000 + 6, 200
	skillname(SKILL_SPELL_SUMMON_MONSTERS) = lang("モンスター召喚", "Summon Monsters")
	skilldesc(SKILL_SPELL_SUMMON_MONSTERS) = lang("モンスターを召喚する", "Summon hostile creatures")
	if ( 424 < 600 ) {
		skillencdesc(SKILL_SPELL_SUMMON_MONSTERS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_SUMMON_WILD) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 15, 2000 + 6, 200
	skillname(SKILL_SPELL_SUMMON_WILD) = lang("野生召喚", "Summon Wild")
	skilldesc(SKILL_SPELL_SUMMON_WILD) = lang("野生の生き物を召喚する", "Summon wild creatures")
	if ( 425 < 600 ) {
		skillencdesc(SKILL_SPELL_SUMMON_WILD) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUMMON_FIRE) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 15, 2000 + 6, 200
	skillname(SKILL_SPACT_SUMMON_FIRE) = lang("炎召喚", "Summon Fire")
	skilldesc(SKILL_SPACT_SUMMON_FIRE) = lang("炎の生き物を召喚する", "Summon fire creatures")
	if ( 642 < 600 ) {
		skillencdesc(SKILL_SPACT_SUMMON_FIRE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUMMON_PAWN) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 15, 2000 + 6, 200
	skillname(SKILL_SPACT_SUMMON_PAWN) = lang("駒召喚", "Summon Pawn")
	skilldesc(SKILL_SPACT_SUMMON_PAWN) = lang("駒を召喚する", "Summon pieces")
	if ( 641 < 600 ) {
		skillencdesc(SKILL_SPACT_SUMMON_PAWN) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUMMON_CATS) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 15, 2000 + 6, 200
	skillname(SKILL_SPACT_SUMMON_CATS) = lang("猫召喚", "Summon Cats")
	skilldesc(SKILL_SPACT_SUMMON_CATS) = lang("猫を召喚する", "Summon cats")
	if ( 639 < 600 ) {
		skillencdesc(SKILL_SPACT_SUMMON_CATS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUMMON_YEEK) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 15, 2000 + 6, 200
	skillname(SKILL_SPACT_SUMMON_YEEK) = lang("イーク召喚", "Summon Yeek")
	skilldesc(SKILL_SPACT_SUMMON_YEEK) = lang("イークを召喚する", "Summon Yeeks")
	if ( 640 < 600 ) {
		skillencdesc(SKILL_SPACT_SUMMON_YEEK) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUMMON_SISTER) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 15, 2000 + 6, 200
	skillname(SKILL_SPACT_SUMMON_SISTER) = lang("妹召喚", "")
	skilldesc(SKILL_SPACT_SUMMON_SISTER) = lang("妹を召喚する", "")
	if ( 643 < 600 ) {
		skillencdesc(SKILL_SPACT_SUMMON_SISTER) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_SUMMON_SPIRIT) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 30, 2000 + 6, 200
	skillname(SKILL_SPELL_SUMMON_SPIRIT) = lang("精霊召喚", "Summon spirit")
	skilldesc(SKILL_SPELL_SUMMON_SPIRIT) = lang("精霊を召喚する", "Summon spirit")
	if ( 467 < 600 ) {
		skillencdesc(SKILL_SPELL_SUMMON_SPIRIT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_DOMINATE) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 125, 2000 + 6, 2000
	skillname(SKILL_SPELL_DOMINATE) = lang("支配", "Dominate")
	skilldesc(SKILL_SPELL_DOMINATE) = lang("対象を支配/仲間にできない対象には麻痺", "Dominate target")
	if ( 435 < 600 ) {
		skillencdesc(SKILL_SPELL_DOMINATE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_WEB) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 10, TARGET_TYPE_LOCATION, 150
	skillname(SKILL_SPELL_WEB) = lang("蜘蛛の巣", "Web")
	skilldesc(SKILL_SPELL_WEB) = lang("蜘蛛の巣発生", "Create webs")
	if ( 436 < 600 ) {
		skillencdesc(SKILL_SPELL_WEB) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MIST_OF_DARKNESS) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 12, TARGET_TYPE_SELF, 320
	skillname(SKILL_SPELL_MIST_OF_DARKNESS) = lang("闇の霧", "Mist of Darkness")
	skilldesc(SKILL_SPELL_MIST_OF_DARKNESS) = lang("濃い霧の発生", "Create mist")
	if ( 437 < 600 ) {
		skillencdesc(SKILL_SPELL_MIST_OF_DARKNESS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MIST_OF_DAZZLING) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 12, 2000 + 6, 320
	skillname(SKILL_SPELL_MIST_OF_DAZZLING) = lang("光の霧", "Mist of Dazzling")
	skilldesc(SKILL_SPELL_MIST_OF_DAZZLING) = lang("眩い霧の発生", "Create mist")
	if ( 472 < 600 ) {
		skillencdesc(SKILL_SPELL_MIST_OF_DAZZLING) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_WALL_CREATION) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 20, TARGET_TYPE_LOCATION, 250
	skillname(SKILL_SPELL_WALL_CREATION) = lang("壁生成", "Wall Creation")
	skilldesc(SKILL_SPELL_WALL_CREATION) = lang("壁の生成", "Create walls")
	if ( 438 < 600 ) {
		skillencdesc(SKILL_SPELL_WALL_CREATION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_DOOR_CREATION) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 15, TARGET_TYPE_LOCATION, 200
	skillname(SKILL_SPELL_DOOR_CREATION) = lang("ドア生成", "Door Creation")
	skilldesc(SKILL_SPELL_DOOR_CREATION) = lang("ドアの生成", "Create doors")
	if ( 457 < 600 ) {
		skillencdesc(SKILL_SPELL_DOOR_CREATION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_ACID_GROUND) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 18, TARGET_TYPE_LOCATION, 480
	skillname(SKILL_SPELL_ACID_GROUND) = lang("酸の海", "Acid Ground")
	skilldesc(SKILL_SPELL_ACID_GROUND) = lang("酸の発生", "Create acid grounds")
	if ( 455 < 600 ) {
		skillencdesc(SKILL_SPELL_ACID_GROUND) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ETHER_GROUND) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 18, TARGET_TYPE_LOCATION, 480
	skillname(SKILL_SPACT_ETHER_GROUND) = lang("エーテルの海", "Ether Ground")
	skilldesc(SKILL_SPACT_ETHER_GROUND) = lang("エーテルの発生", "Create ether grounds")
	if ( 634 < 600 ) {
		skillencdesc(SKILL_SPACT_ETHER_GROUND) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_FIRE_WALL) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 24, TARGET_TYPE_LOCATION, 640
	skillname(SKILL_SPELL_FIRE_WALL) = lang("炎の壁", "Fire Wall")
	skilldesc(SKILL_SPELL_FIRE_WALL) = lang("火柱の発生", "Create fire grounds")
	if ( 456 < 600 ) {
		skillencdesc(SKILL_SPELL_FIRE_WALL) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CURSE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 10, 2000 + 4, 100
	skillname(SKILL_SPACT_CURSE) = lang("呪いの言葉", "Curse")
	skilldesc(SKILL_SPACT_CURSE) = lang("呪いをかける", "Curse target")
	if ( 645 < 600 ) {
		skillencdesc(SKILL_SPACT_CURSE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_RETURN) = SKILL_ATTR_PER, SKILL_TYPE_SP, 28, TARGET_TYPE_SELF_ONLY, 550
	skillname(SKILL_SPELL_RETURN) = lang("帰還", "Return")
	skilldesc(SKILL_SPELL_RETURN) = lang("特定の場所への帰還", "Return")
	if ( 428 < 600 ) {
		skillencdesc(SKILL_SPELL_RETURN) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_4DIM_POCKET) = SKILL_ATTR_PER, SKILL_TYPE_SP, 60, TARGET_TYPE_SELF_ONLY, 750
	skillname(SKILL_SPELL_4DIM_POCKET) = lang("四次元ポケット", "4-Dimensional Pocket")
	skilldesc(SKILL_SPELL_4DIM_POCKET) = lang("四次元のポケットを召喚", "Summon 4-Dimensional Pocket")
	if ( 463 < 600 ) {
		skillencdesc(SKILL_SPELL_4DIM_POCKET) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MAGIC_MAP) = SKILL_ATTR_PER, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF_ONLY, 450
	skillname(SKILL_SPELL_MAGIC_MAP) = lang("魔法の地図", "Magic Map")
	skilldesc(SKILL_SPELL_MAGIC_MAP) = lang("周囲の地形感知", "Reveal surround map")
	if ( 429 < 600 ) {
		skillencdesc(SKILL_SPELL_MAGIC_MAP) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_WIZARDS_HARVEST) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 45, TARGET_TYPE_SELF_ONLY, 350
	skillname(SKILL_SPELL_WIZARDS_HARVEST) = lang("魔術士の収穫", "Wizard's Harvest")
	skilldesc(SKILL_SPELL_WIZARDS_HARVEST) = lang("ランダムな収穫", "Random harvest")
	if ( 464 < 600 ) {
		skillencdesc(SKILL_SPELL_WIZARDS_HARVEST) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_SENSE_OBJECT) = SKILL_ATTR_PER, SKILL_TYPE_SP, 22, TARGET_TYPE_SELF_ONLY, 250
	skillname(SKILL_SPELL_SENSE_OBJECT) = lang("物質感知", "Sense Object")
	skilldesc(SKILL_SPELL_SENSE_OBJECT) = lang("周囲の物質感知", "Reveal nearby objects")
	if ( 430 < 600 ) {
		skillencdesc(SKILL_SPELL_SENSE_OBJECT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_RESTORE_BODY) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 18, TARGET_TYPE_SELF, 250
	skillname(SKILL_SPELL_RESTORE_BODY) = lang("肉体復活", "Restore Body")
	skilldesc(SKILL_SPELL_RESTORE_BODY) = lang("肉体の弱体化を治療/スタミナ微回復", "Restore phisical")
	if ( 439 < 600 ) {
		skillencdesc(SKILL_SPELL_RESTORE_BODY) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_RESTORE_SPIRIT) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 18, TARGET_TYPE_SELF, 250
	skillname(SKILL_SPELL_RESTORE_SPIRIT) = lang("精神復活", "Restore Spirit")
	skilldesc(SKILL_SPELL_RESTORE_SPIRIT) = lang("精神の弱体化を治療/パワーゲージ微増", "Restore mind")
	if ( 440 < 600 ) {
		skillencdesc(SKILL_SPELL_RESTORE_SPIRIT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_RESURRECTION) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 60, TARGET_TYPE_SELF_ONLY, 1650
	skillname(SKILL_SPELL_RESURRECTION) = lang("復活", "Resurrection")
	skilldesc(SKILL_SPELL_RESURRECTION) = lang("死者の蘇生", "Resurrect dead")
	if ( 461 < 600 ) {
		skillencdesc(SKILL_SPELL_RESURRECTION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_WISH) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 580, TARGET_TYPE_SELF_ONLY, 5250
	skillname(SKILL_SPELL_WISH) = lang("願い", "Wish")
	skilldesc(SKILL_SPELL_WISH) = lang("願いの効果", "Wish")
	if ( 441 < 600 ) {
		skillencdesc(SKILL_SPELL_WISH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_METEOR) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 220, TARGET_TYPE_SELF_ONLY, 1450
	skillname(SKILL_SPELL_METEOR) = lang("メテオ", "Meteor")
	skilldesc(SKILL_SPELL_METEOR) = lang("全域攻撃", "Massive Attack")
	if ( 465 < 600 ) {
		skillencdesc(SKILL_SPELL_METEOR) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MUTATION) = SKILL_ATTR_PER, SKILL_TYPE_SP, 21, TARGET_TYPE_SELF, 2250
	skillname(SKILL_SPELL_MUTATION) = lang("自己の変容", "Mutation")
	skilldesc(SKILL_SPELL_MUTATION) = lang("違う自分になる", "Mutate self")
	if ( 454 < 600 ) {
		skillencdesc(SKILL_SPELL_MUTATION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_HOLY_SHIELD) = SKILL_ATTR_WIL, 1000 + 1, 8, TARGET_TYPE_SELF, 150
	skillname(SKILL_SPELL_HOLY_SHIELD) = lang("聖なる盾", "Holy Shield")
	skilldesc(SKILL_SPELL_HOLY_SHIELD) = lang("防御力強化", "")
	if ( 442 < 600 ) {
		skillencdesc(SKILL_SPELL_HOLY_SHIELD) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MIST_OF_SILENCE) = SKILL_ATTR_PER, 1000 + 2, 24, 2000 + 6, 620
	skillname(SKILL_SPELL_MIST_OF_SILENCE) = lang("沈黙の霧", "Mist of Silence")
	skilldesc(SKILL_SPELL_MIST_OF_SILENCE) = lang("魔法使用不可", "")
	if ( 443 < 600 ) {
		skillencdesc(SKILL_SPELL_MIST_OF_SILENCE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_REGENERATION) = SKILL_ATTR_WIL, 1000 + 3, 16, TARGET_TYPE_SELF, 400
	skillname(SKILL_SPELL_REGENERATION) = lang("リジェネレーション", "Regeneration")
	skilldesc(SKILL_SPELL_REGENERATION) = lang("", "")
	if ( 444 < 600 ) {
		skillencdesc(SKILL_SPELL_REGENERATION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_ATTRIBUTE_SHIELD) = SKILL_ATTR_WIL, 1000 + 4, 14, TARGET_TYPE_SELF, 350
	skillname(SKILL_SPELL_ATTRIBUTE_SHIELD) = lang("属性保護", "Attribution Shield")
	skilldesc(SKILL_SPELL_ATTRIBUTE_SHIELD) = lang("", "")
	if ( 445 < 600 ) {
		skillencdesc(SKILL_SPELL_ATTRIBUTE_SHIELD) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_SPEED) = SKILL_ATTR_WIL, 1000 + 5, 28, TARGET_TYPE_SELF, 1050
	skillname(SKILL_SPELL_SPEED) = lang("加速", "Speed")
	skilldesc(SKILL_SPELL_SPEED) = lang("", "")
	if ( 446 < 600 ) {
		skillencdesc(SKILL_SPELL_SPEED) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_SLOW) = SKILL_ATTR_MAG, 1000 + 6, 10, 2000 + 6, 450
	skillname(SKILL_SPELL_SLOW) = lang("鈍足", "Slow")
	skilldesc(SKILL_SPELL_SLOW) = lang("", "")
	if ( 447 < 600 ) {
		skillencdesc(SKILL_SPELL_SLOW) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_HERO) = SKILL_ATTR_WIL, 1000 + 7, 12, TARGET_TYPE_SELF, 80
	skillname(SKILL_SPELL_HERO) = lang("英雄", "Hero")
	skilldesc(SKILL_SPELL_HERO) = lang("", "")
	if ( 448 < 600 ) {
		skillencdesc(SKILL_SPELL_HERO) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MIST_OF_FRAILNESS) = SKILL_ATTR_MAG, 1000 + 8, 8, 2000 + 6, 300
	skillname(SKILL_SPELL_MIST_OF_FRAILNESS) = lang("脆弱の霧", "Mist of frailness")
	skilldesc(SKILL_SPELL_MIST_OF_FRAILNESS) = lang("", "")
	if ( 449 < 600 ) {
		skillencdesc(SKILL_SPELL_MIST_OF_FRAILNESS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_ELEMENT_SCAR) = SKILL_ATTR_MAG, 1000 + 9, 15, 2000 + 6, 600
	skillname(SKILL_SPELL_ELEMENT_SCAR) = lang("元素の傷跡", "Element Scar")
	skilldesc(SKILL_SPELL_ELEMENT_SCAR) = lang("", "")
	if ( 450 < 600 ) {
		skillencdesc(SKILL_SPELL_ELEMENT_SCAR) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_HOLY_VEIL) = SKILL_ATTR_WIL, 1000 + 10, 20, TARGET_TYPE_SELF_ONLY, 900
	skillname(SKILL_SPELL_HOLY_VEIL) = lang("ホーリーヴェイル", "Holy Veil")
	skilldesc(SKILL_SPELL_HOLY_VEIL) = lang("", "")
	if ( 451 < 600 ) {
		skillencdesc(SKILL_SPELL_HOLY_VEIL) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_NIGHTMARE) = SKILL_ATTR_PER, 1000 + 11, 15, 2000 + 6, 500
	skillname(SKILL_SPELL_NIGHTMARE) = lang("ナイトメア", "Nightmare")
	skilldesc(SKILL_SPELL_NIGHTMARE) = lang("", "")
	if ( 452 < 600 ) {
		skillencdesc(SKILL_SPELL_NIGHTMARE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_DIVINE_WISDOM) = SKILL_ATTR_LER, 1000 + 12, 22, TARGET_TYPE_SELF_ONLY, 350
	skillname(SKILL_SPELL_DIVINE_WISDOM) = lang("知者の加護", "Divine Wisdom")
	skilldesc(SKILL_SPELL_DIVINE_WISDOM) = lang("", "")
	if ( 453 < 600 ) {
		skillencdesc(SKILL_SPELL_DIVINE_WISDOM) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_INCOGNITO) = SKILL_ATTR_PER, 1000 + 15, 38, TARGET_TYPE_SELF_ONLY, 250
	skillname(SKILL_SPELL_INCOGNITO) = lang("インコグニート", "Incognito")
	skilldesc(SKILL_SPELL_INCOGNITO) = lang("", "")
	if ( 458 < 600 ) {
		skillencdesc(SKILL_SPELL_INCOGNITO) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_CONTINGENCY) = SKILL_ATTR_WIL, 1000 + 18, 25, TARGET_TYPE_SELF, 1250
	skillname(SKILL_SPELL_CONTINGENCY) = lang("契約", "Contingency")
	skilldesc(SKILL_SPELL_CONTINGENCY) = lang("", "")
	if ( 462 < 600 ) {
		skillencdesc(SKILL_SPELL_CONTINGENCY) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_FEATHER) = SKILL_ATTR_DEX, 1000 + 31, 8, TARGET_TYPE_SELF, 150
	skillname(SKILL_SPELL_FEATHER) = lang("フェザー", "Feather")
	skilldesc(SKILL_SPELL_FEATHER) = lang("回避力強化・浮遊", "")
	if ( 468 < 600 ) {
		skillencdesc(SKILL_SPELL_FEATHER) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_CONCENTRATION) = SKILL_ATTR_PER, 1000 + 43, 12, TARGET_TYPE_SELF, 100
	skillname(SKILL_SPELL_CONCENTRATION) = lang("集中", "Concentration")
	skilldesc(SKILL_SPELL_CONCENTRATION) = lang("", "")
	if ( 474 < 600 ) {
		skillencdesc(SKILL_SPELL_CONCENTRATION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_GEM_POWER) = SKILL_ATTR_CON, 1000 + 55, 12, TARGET_TYPE_SELF, 120
	skillname(SKILL_SPELL_GEM_POWER) = lang("守護石", "Gem Power")
	skilldesc(SKILL_SPELL_GEM_POWER) = lang("", "")
	if ( 477 < 600 ) {
		skillencdesc(SKILL_SPELL_GEM_POWER) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BOOST) = SKILL_ATTR_WIL, 1000 + 17, 50, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_BOOST) = lang("ブースト", "Boost")
	skilldesc(SKILL_SPACT_BOOST) = lang("", "")
	if ( 647 < 600 ) {
		skillencdesc(SKILL_SPACT_BOOST) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DEATH_WORD) = SKILL_ATTR_WIL, 1000 + 16, 15, 2000 + 6, 500
	skillname(SKILL_SPACT_DEATH_WORD) = lang("死の宣告", "Death Word")
	skilldesc(SKILL_SPACT_DEATH_WORD) = lang("", "")
	if ( 646 < 600 ) {
		skillencdesc(SKILL_SPACT_DEATH_WORD) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PUNISHMENT) = SKILL_ATTR_WIL, 1000 + 13, 15, 2000 + 6, 500
	skillname(SKILL_SPACT_PUNISHMENT) = lang("神罰", "Punishment")
	skilldesc(SKILL_SPACT_PUNISHMENT) = lang("", "")
	if ( 622 < 600 ) {
		skillencdesc(SKILL_SPACT_PUNISHMENT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_LULWYS_TRICK) = SKILL_ATTR_DEX, 1000 + 14, 20, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_LULWYS_TRICK) = lang("ルルウィの憑依", "Lulwy's Trick")
	skilldesc(SKILL_SPACT_LULWYS_TRICK) = lang("", "")
	if ( 625 < 600 ) {
		skillencdesc(SKILL_SPACT_LULWYS_TRICK) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_HARVEST_MANA) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 15, TARGET_TYPE_SELF_ONLY, 700
	skillname(SKILL_SPACT_HARVEST_MANA) = lang("マナ回復", "Harvest Mana")
	skilldesc(SKILL_SPACT_HARVEST_MANA) = lang("マナ回復", "Restore MP")
	if ( 621 < 600 ) {
		skillencdesc(SKILL_SPACT_HARVEST_MANA) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DRAIN_BLOOD) = SKILL_ATTR_DEX, SKILL_TYPE_HAND, 7, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_DRAIN_BLOOD) = lang("吸血の牙", "Drain Blood")
	skilldesc(SKILL_SPACT_DRAIN_BLOOD) = lang("体力・sp吸収", "Drain HP")
	if ( 601 < 600 ) {
		skillencdesc(SKILL_SPACT_DRAIN_BLOOD) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_VORACITY_FANG) = SKILL_ATTR_STR, SKILL_TYPE_HAND, 12, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_VORACITY_FANG) = lang("貪食の牙", "Voracity Fang")
	skilldesc(SKILL_SPACT_VORACITY_FANG) = lang("体力吸収・満腹時無効", "Drain HP")
	if ( 748 < 600 ) {
		skillencdesc(SKILL_SPACT_VORACITY_FANG) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MEMORY_POISON) = SKILL_ATTR_CON, SKILL_TYPE_HAND, 150, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_MEMORY_POISON) = lang("侵食の毒牙", "Memory Poison")
	skilldesc(SKILL_SPACT_MEMORY_POISON) = lang("毒属性/能力一時減少", "Decrease ability temporarily")
	if ( 758 < 600 ) {
		skillencdesc(SKILL_SPACT_MEMORY_POISON) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DATA_DELETE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 1, 2000 + 2, 0
	skillname(SKILL_SPACT_DATA_DELETE) = lang("メモリーデリート", "Data Delete")
	skilldesc(SKILL_SPACT_DATA_DELETE) = lang("能力を一部抹消/ゲージ100％消費", "Delete skill and power")
	if ( 809 < 600 ) {
		skillencdesc(SKILL_SPACT_DATA_DELETE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MP_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_SP, 25, 9000 + 6, 0
	skillname(SKILL_SPACT_MP_BREATH) = lang("破壊の奔流", "MP Breath")
	skilldesc(SKILL_SPACT_MP_BREATH) = lang("MP25％消費/放射攻撃", "MP Breath")
	if ( 763 < 600 ) {
		skillencdesc(SKILL_SPACT_MP_BREATH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_POWER_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, 9000 + 6, 0
	skillname(SKILL_SPACT_POWER_BREATH) = lang("エネルギー放射", "Power Breath")
	skilldesc(SKILL_SPACT_POWER_BREATH) = lang("魔法属性の放射攻撃", "Breath")
	if ( 612 < 600 ) {
		skillencdesc(SKILL_SPACT_POWER_BREATH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_FIRE_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, 9000 + 6, 0
	skillname(SKILL_SPACT_FIRE_BREATH) = lang("火炎放射", "Fire Breath")
	skilldesc(SKILL_SPACT_FIRE_BREATH) = lang("炎属性の放射攻撃", "Breath(Fire)")
	if ( 602 < 600 ) {
		skillencdesc(SKILL_SPACT_FIRE_BREATH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_COLD_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, 9000 + 6, 0
	skillname(SKILL_SPACT_COLD_BREATH) = lang("冷気放射", "Cold Breath")
	skilldesc(SKILL_SPACT_COLD_BREATH) = lang("冷気属性の放射攻撃", "Breath(Cold)")
	if ( 603 < 600 ) {
		skillencdesc(SKILL_SPACT_COLD_BREATH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_LIGHTNING_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, 9000 + 6, 0
	skillname(SKILL_SPACT_LIGHTNING_BREATH) = lang("電撃放射", "Lightning Breath")
	skilldesc(SKILL_SPACT_LIGHTNING_BREATH) = lang("電撃属性の放射攻撃", "Breath(Lightning)")
	if ( 604 < 600 ) {
		skillencdesc(SKILL_SPACT_LIGHTNING_BREATH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CHAOS_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, 9000 + 6, 0
	skillname(SKILL_SPACT_CHAOS_BREATH) = lang("混沌放射", "Chaos Breath")
	skilldesc(SKILL_SPACT_CHAOS_BREATH) = lang("混沌属性の放射攻撃", "Breath(Chaos)")
	if ( 606 < 600 ) {
		skillencdesc(SKILL_SPACT_CHAOS_BREATH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_POISON_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, 9000 + 6, 0
	skillname(SKILL_SPACT_POISON_BREATH) = lang("猛毒放射", "Poison Breath")
	skilldesc(SKILL_SPACT_POISON_BREATH) = lang("毒属性の放射攻撃", "Breath(Poison)")
	if ( 610 < 600 ) {
		skillencdesc(SKILL_SPACT_POISON_BREATH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_NETHER_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, 9000 + 6, 0
	skillname(SKILL_SPACT_NETHER_BREATH) = lang("冥気放射", "Nether Breath")
	skilldesc(SKILL_SPACT_NETHER_BREATH) = lang("地獄属性の放射攻撃", "Breath(Nether)")
	if ( 608 < 600 ) {
		skillencdesc(SKILL_SPACT_NETHER_BREATH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SOUND_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, 9000 + 6, 0
	skillname(SKILL_SPACT_SOUND_BREATH) = lang("轟音放射", "Sound Breath")
	skilldesc(SKILL_SPACT_SOUND_BREATH) = lang("音属性の放射攻撃", "Breath(Sound)")
	if ( 607 < 600 ) {
		skillencdesc(SKILL_SPACT_SOUND_BREATH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DARKNESS_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, 9000 + 6, 0
	skillname(SKILL_SPACT_DARKNESS_BREATH) = lang("暗黒放射", "Darkness Breath")
	skilldesc(SKILL_SPACT_DARKNESS_BREATH) = lang("暗黒属性の放射攻撃", "Breath(Darkness)")
	if ( 605 < 600 ) {
		skillencdesc(SKILL_SPACT_DARKNESS_BREATH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MIND_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, 9000 + 6, 0
	skillname(SKILL_SPACT_MIND_BREATH) = lang("幻影放射", "Mind Breath")
	skilldesc(SKILL_SPACT_MIND_BREATH) = lang("幻惑属性の放射攻撃", "Breath(Mind)")
	if ( 611 < 600 ) {
		skillencdesc(SKILL_SPACT_MIND_BREATH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_NERVE_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, 9000 + 6, 0
	skillname(SKILL_SPACT_NERVE_BREATH) = lang("神経波放射", "Nerve Breath")
	skilldesc(SKILL_SPACT_NERVE_BREATH) = lang("神経属性の放射攻撃", "Breath(Nerve)")
	if ( 609 < 600 ) {
		skillencdesc(SKILL_SPACT_NERVE_BREATH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_HOUZANHA) = SKILL_ATTR_CON, SKILL_TYPE_SP, 32, 3000 + 2, 0
	skillname(SKILL_SPACT_HOUZANHA) = lang("土竜乱舞", "Houzanha")
	skilldesc(SKILL_SPACT_HOUZANHA) = lang("広域地形破壊", "field break")
	if ( 666 < 600 ) {
		skillencdesc(SKILL_SPACT_HOUZANHA) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SHADOW_STEP) = SKILL_ATTR_WIL, SKILL_TYPE_TELEPORT, 27, 2000 + 6, 0
	skillname(SKILL_SPACT_SHADOW_STEP) = lang("シャドウステップ", "Shadow Step")
	skilldesc(SKILL_SPACT_SHADOW_STEP) = lang("対象へ突撃＋通常近接攻撃", "Teleport to target")
	if ( 619 < 600 ) {
		skillencdesc(SKILL_SPACT_SHADOW_STEP) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CURTAIN_OF_SMOKE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 31, TARGET_TYPE_SELF, 0
	skillname(SKILL_SPACT_CURTAIN_OF_SMOKE) = lang("黒煙のトバリ", "Curtain of Smoke")
	skilldesc(SKILL_SPACT_CURTAIN_OF_SMOKE) = lang("視界を狭める煙の発生", "Create smoke")
	if ( 789 < 600 ) {
		skillencdesc(SKILL_SPACT_CURTAIN_OF_SMOKE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DIMENSIONAL_MOVE) = SKILL_ATTR_WIL, SKILL_TYPE_TELEPORT, 15, TARGET_TYPE_SELF, 0
	skillname(SKILL_SPACT_DIMENSIONAL_MOVE) = lang("空間歪曲", "Dimensional Move")
	skilldesc(SKILL_SPACT_DIMENSIONAL_MOVE) = lang("近くへの瞬間移動", "Teleport self")
	if ( 627 < 600 ) {
		skillencdesc(SKILL_SPACT_DIMENSIONAL_MOVE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DRAW_SHADOW) = SKILL_ATTR_WIL, SKILL_TYPE_TELEPORT, 10, 6000 + 6, 0
	skillname(SKILL_SPACT_DRAW_SHADOW) = lang("異次元の手", "Draw Shadow")
	skilldesc(SKILL_SPACT_DRAW_SHADOW) = lang("対象を引き寄せ", "Draw target")
	if ( 620 < 600 ) {
		skillencdesc(SKILL_SPACT_DRAW_SHADOW) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MULTIPLE_GATHER) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF, 0
	skillname(SKILL_SPACT_MULTIPLE_GATHER) = lang("強制集合", "Multiple Gather")
	skilldesc(SKILL_SPACT_MULTIPLE_GATHER) = lang("複数の対象を引き寄せ", "Draw targets")
	if ( 752 < 600 ) {
		skillencdesc(SKILL_SPACT_MULTIPLE_GATHER) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PRAYER_OF_JURE) = SKILL_ATTR_WIL, SKILL_TYPE_HEAL, 30, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_PRAYER_OF_JURE) = lang("ジュアの祈り", "Prayer of Jure")
	skilldesc(SKILL_SPACT_PRAYER_OF_JURE) = lang("体力回復", "Heal HP self")
	if ( 623 < 600 ) {
		skillencdesc(SKILL_SPACT_PRAYER_OF_JURE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ABSORB_MAGIC) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 25, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_ABSORB_MAGIC) = lang("魔力の吸収", "Absorb Magic")
	skilldesc(SKILL_SPACT_ABSORB_MAGIC) = lang("マナ回復", "Heal MP")
	if ( 624 < 600 ) {
		skillencdesc(SKILL_SPACT_ABSORB_MAGIC) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_RAMPAGE) = SKILL_ATTR_PER, SKILL_TYPE_SP, 28, 3000 + 6, 0
	skillname(SKILL_SPACT_RAMPAGE) = lang("ランページ", "rampage")
	skilldesc(SKILL_SPACT_RAMPAGE) = lang("視界内の仲間狂暴化", "Increase damage ")
	if ( 669 < 600 ) {
		skillencdesc(SKILL_SPACT_RAMPAGE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PREGNANT) = SKILL_ATTR_PER, SKILL_TYPE_SP, 15, 2000 + 1, 0
	skillname(SKILL_SPACT_PREGNANT) = lang("妊娠", "Pregnant")
	skilldesc(SKILL_SPACT_PREGNANT) = lang("対象妊娠", "Pregnant target")
	if ( 654 < 600 ) {
		skillencdesc(SKILL_SPACT_PREGNANT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TOUCH_OF_WEAKNESS) = SKILL_ATTR_MAG, SKILL_TYPE_HAND, 5, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_TOUCH_OF_WEAKNESS) = lang("弱体化の手", "Touch of Weakness")
	skilldesc(SKILL_SPACT_TOUCH_OF_WEAKNESS) = lang("弱体化", "Weaken target")
	if ( 613 < 600 ) {
		skillencdesc(SKILL_SPACT_TOUCH_OF_WEAKNESS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TOUCH_OF_HUNGER) = SKILL_ATTR_MAG, SKILL_TYPE_HAND, 5, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_TOUCH_OF_HUNGER) = lang("飢餓の手", "Touch of Hunger")
	skilldesc(SKILL_SPACT_TOUCH_OF_HUNGER) = lang("飢餓攻撃", "Starve target")
	if ( 614 < 600 ) {
		skillencdesc(SKILL_SPACT_TOUCH_OF_HUNGER) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TOUCH_OF_POISON) = SKILL_ATTR_DEX, SKILL_TYPE_HAND, 5, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_TOUCH_OF_POISON) = lang("毒の手", "Touch of Poison")
	skilldesc(SKILL_SPACT_TOUCH_OF_POISON) = lang("毒攻撃", "Poison target")
	if ( 615 < 600 ) {
		skillencdesc(SKILL_SPACT_TOUCH_OF_POISON) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TOUCH_OF_NERVE) = SKILL_ATTR_DEX, SKILL_TYPE_HAND, 5, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_TOUCH_OF_NERVE) = lang("麻痺の手", "Touch of Nerve")
	skilldesc(SKILL_SPACT_TOUCH_OF_NERVE) = lang("神経攻撃", "Paralyze target")
	if ( 616 < 600 ) {
		skillencdesc(SKILL_SPACT_TOUCH_OF_NERVE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TOUCH_OF_FEAR) = SKILL_ATTR_WIL, SKILL_TYPE_HAND, 5, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_TOUCH_OF_FEAR) = lang("恐怖の手", "Touch of Fear")
	skilldesc(SKILL_SPACT_TOUCH_OF_FEAR) = lang("無属性攻撃", "Fear target")
	if ( 617 < 600 ) {
		skillencdesc(SKILL_SPACT_TOUCH_OF_FEAR) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TOUCH_OF_SLEEP) = SKILL_ATTR_WIL, SKILL_TYPE_HAND, 5, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_TOUCH_OF_SLEEP) = lang("眠りの手", "Touch of Sleep")
	skilldesc(SKILL_SPACT_TOUCH_OF_SLEEP) = lang("精神攻撃", "Sleep target")
	if ( 618 < 600 ) {
		skillencdesc(SKILL_SPACT_TOUCH_OF_SLEEP) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DISPATCH_FLYING_BEAST) = SKILL_ATTR_DEX, SKILL_TYPE_TELEPORT, 5, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_DISPATCH_FLYING_BEAST) = lang("飛獣送り", "Send throw")
	skilldesc(SKILL_SPACT_DISPATCH_FLYING_BEAST) = lang("対象の適正距離へ送る/Chain切り", "Send chara and chain cut")
	if ( 810 < 600 ) {
		skillencdesc(SKILL_SPACT_DISPATCH_FLYING_BEAST) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_RESOLUTION_HAND) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 15, 3000 + 6, 500
	skillname(SKILL_SPACT_RESOLUTION_HAND) = lang("錬成掌", "Resolution Hand")
	skilldesc(SKILL_SPACT_RESOLUTION_HAND) = lang("手系技能に追加ダメージ", "Touch and damage")
	if ( 774 < 600 ) {
		skillencdesc(SKILL_SPACT_RESOLUTION_HAND) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_RUBBING) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 2, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_RUBBING) = lang("愛撫の手", "Rubbing")
	skilldesc(SKILL_SPACT_RUBBING) = lang("撫でまわす", "Rub npc")
	if ( 701 < 600 ) {
		skillencdesc(SKILL_SPACT_RUBBING) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BLADE_STRINGS) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 10, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_BLADE_STRINGS) = lang("ブレードストリングス", "Blade Strings")
	skilldesc(SKILL_SPACT_BLADE_STRINGS) = lang("戦術器用依存攻撃/トラップ設置", "Cutting attack/Trap installation")
	if ( 769 < 600 ) {
		skillencdesc(SKILL_SPACT_BLADE_STRINGS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DANCING_WIRE) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 18, 6000 + 6, 0
	skillname(SKILL_SPACT_DANCING_WIRE) = lang("踊る鋼線", "Dancing Wire")
	skilldesc(SKILL_SPACT_DANCING_WIRE) = lang("対象を束縛し引き寄せ", "Draw target/Binding target")
	if ( 770 < 600 ) {
		skillencdesc(SKILL_SPACT_DANCING_WIRE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_THREAD_OF_INNERVATION) = SKILL_ATTR_PER, SKILL_TYPE_SP, 14, 2000 + 4, 0
	skillname(SKILL_SPACT_THREAD_OF_INNERVATION) = lang("神経支配の糸", "Thread of Innervation")
	skilldesc(SKILL_SPACT_THREAD_OF_INNERVATION) = lang("生化学感覚依存攻撃/瀕死なら人形化", "Nerve attack/Change doll")
	if ( 806 < 600 ) {
		skillencdesc(SKILL_SPACT_THREAD_OF_INNERVATION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TICKLING_HELL) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 8, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_TICKLING_HELL) = lang("くすぐり天地獄", "Tickling Hell")
	skilldesc(SKILL_SPACT_TICKLING_HELL) = lang("束縛/条件次第でSPやゲージ減少", "Hold enemy/Tickling")
	if ( 831 < 600 ) {
		skillencdesc(SKILL_SPACT_TICKLING_HELL) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SQUEEZE) = SKILL_ATTR_STR, SKILL_TYPE_SP, 10, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_SQUEEZE) = lang("スクイーズ", "Squeeze")
	skilldesc(SKILL_SPACT_SQUEEZE) = lang("不仲締め上げ/友好抱擁/家畜搾乳", "Hold enemy/Hug friend/milking livestock")
	if ( 710 < 600 ) {
		skillencdesc(SKILL_SPACT_SQUEEZE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MELT_CLINCH) = SKILL_ATTR_STR, SKILL_TYPE_SP, 25, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_MELT_CLINCH) = lang("溶解クリンチ", "Melt Clinch")
	skilldesc(SKILL_SPACT_MELT_CLINCH) = lang("酸攻撃と萎縮/両者束縛", "Acid attack/daunted/bind")
	if ( 792 < 600 ) {
		skillencdesc(SKILL_SPACT_MELT_CLINCH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BEWITCH) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 10, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_BEWITCH) = lang("悩殺攻撃", "Bewitch")
	skilldesc(SKILL_SPACT_BEWITCH) = lang("成功すると金を巻き上げ動きを止める", "Stop movement of opponent")
	if ( 739 < 600 ) {
		skillencdesc(SKILL_SPACT_BEWITCH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MARKING) = SKILL_ATTR_CON, SKILL_TYPE_SP, 10, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_MARKING) = lang("マーキング", "Marking")
	skilldesc(SKILL_SPACT_MARKING) = lang("体内の水分を使いマーキングする", "Marking with moisture in the body")
	if ( 807 < 600 ) {
		skillencdesc(SKILL_SPACT_MARKING) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_FASCINATION_DANCE) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 21, 3000 + 6, 500
	skillname(SKILL_SPACT_FASCINATION_DANCE) = lang("魅了の舞", "Fascination Dance")
	skilldesc(SKILL_SPACT_FASCINATION_DANCE) = lang("確率で視界内の敵を麻痺・疲労", "Stop movement of enemies")
	if ( 767 < 600 ) {
		skillencdesc(SKILL_SPACT_FASCINATION_DANCE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PURGE) = SKILL_ATTR_SPD, SKILL_TYPE_SP, 1, 3000 + 6, 500
	skillname(SKILL_SPACT_PURGE) = lang("*Purge*", "<Purge>")
	skilldesc(SKILL_SPACT_PURGE) = lang("視界内の敵瀕死化/Purgeモード専用", "Enemies dying / Purge mode only")
	if ( 803 < 600 ) {
		skillencdesc(SKILL_SPACT_PURGE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DISTURBANCE) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 10, 2000 + 7, 0
	skillname(SKILL_SPACT_DISTURBANCE) = lang("撹乱", "Disturbance")
	skilldesc(SKILL_SPACT_DISTURBANCE) = lang("互いのゲージを減らす", "decrease gauge")
	if ( 711 < 600 ) {
		skillencdesc(SKILL_SPACT_DISTURBANCE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_INTENSIVE_POWER) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF, 0
	skillname(SKILL_SPACT_INTENSIVE_POWER) = lang("力の集約", "Collected Power")
	skilldesc(SKILL_SPACT_INTENSIVE_POWER) = lang("HPMP回復・ゲージ上昇", "Increase gauge")
	if ( 732 < 600 ) {
		skillencdesc(SKILL_SPACT_INTENSIVE_POWER) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_FORMLESS_FETTER) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 27, TARGET_TYPE_SELF, 0
	skillname(SKILL_SPACT_FORMLESS_FETTER) = lang("無形の枷", "Formless Fetter")
	skilldesc(SKILL_SPACT_FORMLESS_FETTER) = lang("マップエフェクト上の敵を攻撃束縛", "Bind on map effects")
	if ( 793 < 600 ) {
		skillencdesc(SKILL_SPACT_FORMLESS_FETTER) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SPACE_RETENTION) = SKILL_ATTR_CON, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF, 0
	skillname(SKILL_SPACT_SPACE_RETENTION) = lang("空間掌握", "Space retention")
	skilldesc(SKILL_SPACT_SPACE_RETENTION) = lang("周囲のテレポート発動を防ぐ", "Prevent teleport")
	if ( 733 < 600 ) {
		skillencdesc(SKILL_SPACT_SPACE_RETENTION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUSPICIOUS_HAND) = SKILL_ATTR_DEX, SKILL_TYPE_TELEPORT, 10, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_SUSPICIOUS_HAND) = lang("スリの指", "Suspicious Hand")
	skilldesc(SKILL_SPACT_SUSPICIOUS_HAND) = lang("盗み", "Steal from target")
	if ( 635 < 600 ) {
		skillencdesc(SKILL_SPACT_SUSPICIOUS_HAND) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SCAVENGE) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 10, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_SCAVENGE) = lang("食い漁り", "Scavenge")
	skilldesc(SKILL_SPACT_SCAVENGE) = lang("盗んで食べる", "Steal food")
	if ( 651 < 600 ) {
		skillencdesc(SKILL_SPACT_SCAVENGE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MATERIALIZE) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 40, 2000 + 7, 0
	skillname(SKILL_SPACT_MATERIALIZE) = lang("マテリアライズ", "Materialise")
	skilldesc(SKILL_SPACT_MATERIALIZE) = lang("対象が瀕死ならマテリアル化", "Kill target")
	if ( 775 < 600 ) {
		skillencdesc(SKILL_SPACT_MATERIALIZE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DECAPITATION) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, 2000 + 1, 0
	skillname(SKILL_SPACT_DECAPITATION) = lang("首狩り攻撃", "Decapitation")
	skilldesc(SKILL_SPACT_DECAPITATION) = lang("器用依存攻撃/対象が瀕死なら即死", "Attack and kill target")
	if ( 658 < 600 ) {
		skillencdesc(SKILL_SPACT_DECAPITATION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DECAPITATION2) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, 2000 + 1, 0
	skillname(SKILL_SPACT_DECAPITATION2) = lang("首狩り", "Decapitation")
	skilldesc(SKILL_SPACT_DECAPITATION2) = lang("対象が瀕死なら即死", "Kill target")
	if ( 812 < 600 ) {
		skillencdesc(SKILL_SPACT_DECAPITATION2) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_FLASH_OF_SWIFTNESS) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_FLASH_OF_SWIFTNESS) = lang("神速の一閃", "Issen")
	skilldesc(SKILL_SPACT_FLASH_OF_SWIFTNESS) = lang("敵ゲージ半減/ゲージ100％消費", "Rapid Slash")
	if ( 702 < 600 ) {
		skillencdesc(SKILL_SPACT_FLASH_OF_SWIFTNESS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_UNDERHAND_DROP) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_UNDERHAND_DROP) = lang("逆手落とし", "Underhand Drop")
	skilldesc(SKILL_SPACT_UNDERHAND_DROP) = lang("恐怖させる刺突/ゲージ100％消費", "Piercing fear")
	if ( 703 < 600 ) {
		skillencdesc(SKILL_SPACT_UNDERHAND_DROP) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BISECTION) = SKILL_ATTR_STR, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_BISECTION) = lang("大烈断", "Bisection")
	skilldesc(SKILL_SPACT_BISECTION) = lang("出血させる切断/ゲージ100％消費", "Brute force")
	if ( 704 < 600 ) {
		skillencdesc(SKILL_SPACT_BISECTION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PULVERIZATION) = SKILL_ATTR_STR, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_PULVERIZATION) = lang("砦崩し", "Pulverization")
	skilldesc(SKILL_SPACT_PULVERIZATION) = lang("防御一時的に下げる/ゲージ100％消費", "Defense break")
	if ( 705 < 600 ) {
		skillencdesc(SKILL_SPACT_PULVERIZATION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PENETRATION) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_PENETRATION) = lang("朧突き", "Penetration")
	skilldesc(SKILL_SPACT_PENETRATION) = lang("朦朧とさせる刺突/ゲージ100％消費", "Thrust dim")
	if ( 706 < 600 ) {
		skillencdesc(SKILL_SPACT_PENETRATION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DANCE_OF_BLOW) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_DANCE_OF_BLOW) = lang("怒涛の連撃", "Dance of blow")
	skilldesc(SKILL_SPACT_DANCE_OF_BLOW) = lang("回避一時的に下げる/ゲージ100％消費", "Reduce avoidance")
	if ( 707 < 600 ) {
		skillencdesc(SKILL_SPACT_DANCE_OF_BLOW) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EXPLOSION) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_EXPLOSION) = lang("魂の一撃", "Explosion")
	skilldesc(SKILL_SPACT_EXPLOSION) = lang("消費後15％回復/ゲージ100％消費", "Braze Fighting spirit")
	if ( 708 < 600 ) {
		skillencdesc(SKILL_SPACT_EXPLOSION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DIFFUSION_WAVE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 30, 2000 + 15, 0
	skillname(SKILL_SPACT_DIFFUSION_WAVE) = lang("魔儀迦", "Diffusion Wave")
	skilldesc(SKILL_SPACT_DIFFUSION_WAVE) = lang("HPMP回復長射程攻撃/ゲージ100％消費", "Attack and heal")
	if ( 718 < 600 ) {
		skillencdesc(SKILL_SPACT_DIFFUSION_WAVE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MANA_SLASH) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_MANA_SLASH) = lang("魔刃狩り", "Mana slash")
	skilldesc(SKILL_SPACT_MANA_SLASH) = lang("敵のMPにもダメージ/ゲージ100％消費", "Kill target")
	if ( 731 < 600 ) {
		skillencdesc(SKILL_SPACT_MANA_SLASH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SHIELD_STRIKE) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_SHIELD_STRIKE) = lang("盾殴り", "Mana slash")
	skilldesc(SKILL_SPACT_SHIELD_STRIKE) = lang("衝撃で敵を朦朧麻痺/ゲージ100％消費", "Kill target")
	if ( 749 < 600 ) {
		skillencdesc(SKILL_SPACT_SHIELD_STRIKE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PIERCING_ZERO_SHOOT) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 30, 2000 + 10, 0
	skillname(SKILL_SPACT_PIERCING_ZERO_SHOOT) = lang("零の間撃・突型", "Zero shoot2")
	skilldesc(SKILL_SPACT_PIERCING_ZERO_SHOOT) = lang("近いほど貫通率上昇/ゲージ100％消費", "Hitting the target")
	if ( 717 < 600 ) {
		skillencdesc(SKILL_SPACT_PIERCING_ZERO_SHOOT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_IMPACT_GUNFIRE) = SKILL_ATTR_PER, SKILL_TYPE_SP, 30, 2000 + 10, 0
	skillname(SKILL_SPACT_IMPACT_GUNFIRE) = lang("重衝撃断動弾", "Impact Gunfire")
	skilldesc(SKILL_SPACT_IMPACT_GUNFIRE) = lang("衝撃で敵転倒/ゲージ100％消費", "Invert target")
	if ( 796 < 600 ) {
		skillencdesc(SKILL_SPACT_IMPACT_GUNFIRE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ONE_POINT_SHOOT) = SKILL_ATTR_PER, SKILL_TYPE_SP, 30, 2000 + 10, 0
	skillname(SKILL_SPACT_ONE_POINT_SHOOT) = lang("壱点連弾銃", "One Point Shoot")
	skilldesc(SKILL_SPACT_ONE_POINT_SHOOT) = lang("防御一時的に下げる/ゲージ100％消費", "Defense break")
	if ( 797 < 600 ) {
		skillencdesc(SKILL_SPACT_ONE_POINT_SHOOT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CRITICAL_PARTICLE_CANNON) = SKILL_ATTR_PER, SKILL_TYPE_SP, 30, 2000 + 10, 0
	skillname(SKILL_SPACT_CRITICAL_PARTICLE_CANNON) = lang("臨界粒子砲", "Critical Particle Cannon")
	skilldesc(SKILL_SPACT_CRITICAL_PARTICLE_CANNON) = lang("閃光で敵盲目/ゲージ100％消費", "hitting the target")
	if ( 798 < 600 ) {
		skillencdesc(SKILL_SPACT_CRITICAL_PARTICLE_CANNON) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_HELM_SMASHER) = SKILL_ATTR_PER, SKILL_TYPE_SP, 30, 2000 + 10, 0
	skillname(SKILL_SPACT_HELM_SMASHER) = lang("兜裂き", "Helm Smasher")
	skilldesc(SKILL_SPACT_HELM_SMASHER) = lang("衝撃で敵麻痺/ゲージ100％消費", "Paralyze target")
	if ( 799 < 600 ) {
		skillencdesc(SKILL_SPACT_HELM_SMASHER) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ARROW_RAIN) = SKILL_ATTR_PER, SKILL_TYPE_SP, 30, 2000 + 10, 0
	skillname(SKILL_SPACT_ARROW_RAIN) = lang("浴びせ滝矢射", "Arrow Rain")
	skilldesc(SKILL_SPACT_ARROW_RAIN) = lang("回避一時的に下げる/ゲージ100％消費", "Reduce avoidance")
	if ( 800 < 600 ) {
		skillencdesc(SKILL_SPACT_ARROW_RAIN) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ACID_HURRICANE) = SKILL_ATTR_CON, SKILL_TYPE_SP, 5, 2000 + 10, 0
	skillname(SKILL_SPACT_ACID_HURRICANE) = lang("腐食の烈風", "Acid Hurricane")
	skilldesc(SKILL_SPACT_ACID_HURRICANE) = lang("酸攻撃/鎧やメタルに毒", "Line(Acid)")
	if ( 824 < 600 ) {
		skillencdesc(SKILL_SPACT_ACID_HURRICANE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_KAMUI) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 1, 3000 + 6, 0
	skillname(SKILL_SPACT_KAMUI) = lang("神威", "Kamui")
	skilldesc(SKILL_SPACT_KAMUI) = lang("神々の力で多彩な攻撃", "Various attacks")
	if ( 825 < 600 ) {
		skillencdesc(SKILL_SPACT_KAMUI) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CONVERGE_BREATH) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, 2000 + 10, 0
	skillname(SKILL_SPACT_CONVERGE_BREATH) = lang("収束放射", "Converge Breath")
	skilldesc(SKILL_SPACT_CONVERGE_BREATH) = lang("強力な一列放射/ゲージ100％消費", "Breath(converge)")
	if ( 715 < 600 ) {
		skillencdesc(SKILL_SPACT_CONVERGE_BREATH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SPINNING_THROW) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, 2000 + 10, 0
	skillname(SKILL_SPACT_SPINNING_THROW) = lang("超輪転", "Spinning Throw")
	skilldesc(SKILL_SPACT_SPINNING_THROW) = lang("貫通率上昇必中会心/ゲージ100％消費", "revolve enough to penetrate")
	if ( 735 < 600 ) {
		skillencdesc(SKILL_SPACT_SPINNING_THROW) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GAUGE_RELEASE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 1, 2000 + 10, 0
	skillname(SKILL_SPACT_GAUGE_RELEASE) = lang("【力の解放】", "<Gauge Release>")
	skilldesc(SKILL_SPACT_GAUGE_RELEASE) = lang("次の攻撃時にゲージ技で追加攻撃", "Add gauge skill  at the next attack")
	if ( 750 < 600 ) {
		skillencdesc(SKILL_SPACT_GAUGE_RELEASE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MIND_BREAK) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 30, 2000 + 3, 0
	skillname(SKILL_SPACT_MIND_BREAK) = lang("精神破壊光", "Mind Break")
	skilldesc(SKILL_SPACT_MIND_BREAK) = lang("精神攻撃/ゲージ100％消費", "Mental Pollution")
	if ( 728 < 600 ) {
		skillencdesc(SKILL_SPACT_MIND_BREAK) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ASSIMILATE) = SKILL_ATTR_STR, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_ASSIMILATE) = lang("同化吸収", "Assimilate")
	skilldesc(SKILL_SPACT_ASSIMILATE) = lang("睡眠＋吸収", "Assimilate")
	if ( 719 < 600 ) {
		skillencdesc(SKILL_SPACT_ASSIMILATE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_OVER_BOOST) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_OVER_BOOST) = lang("オーバーブースト", "Over Boost")
	skilldesc(SKILL_SPACT_OVER_BOOST) = lang("能力強化", "Over Boost")
	if ( 720 < 600 ) {
		skillencdesc(SKILL_SPACT_OVER_BOOST) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_HARMONIC_ASSAULT) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 24, 3000 + 6, 0
	skillname(SKILL_SPACT_HARMONIC_ASSAULT) = lang("ハーモニックアサルト", "Harmonic Assault")
	skilldesc(SKILL_SPACT_HARMONIC_ASSAULT) = lang("交渉系技能強化", "Enhances negotiate abilities")
	if ( 721 < 600 ) {
		skillencdesc(SKILL_SPACT_HARMONIC_ASSAULT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_RESONANT_VOICE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 30, 2000 + 7, 0
	skillname(SKILL_SPACT_RESONANT_VOICE) = lang("レゾナントボイス", "Resonant Voice")
	skilldesc(SKILL_SPACT_RESONANT_VOICE) = lang("視界内敵戦意喪失/ゲージ100％消費", "Fatigue enemies, halve power gauges")
	if ( 722 < 600 ) {
		skillencdesc(SKILL_SPACT_RESONANT_VOICE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_KIJIN_SHIBARI) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 15, 3000 + 6, 0
	skillname(SKILL_SPACT_KIJIN_SHIBARI) = lang("鬼神縛り", "Kijin Shibari")
	skilldesc(SKILL_SPACT_KIJIN_SHIBARI) = lang("巻物を10枚消費/全体束縛器用弱体化", "Consume 10 scrolls,enemies bind and weaken DEX")
	if ( 723 < 600 ) {
		skillencdesc(SKILL_SPACT_KIJIN_SHIBARI) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BURN_SCROLLS) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 10, 2000 + 7, 0
	skillname(SKILL_SPACT_BURN_SCROLLS) = lang("灼熱絵巻", "Burn Scrolls")
	skilldesc(SKILL_SPACT_BURN_SCROLLS) = lang("巻物を20枚消費/火炎属性攻撃", "Consume 20 scrolls, fire attack")
	if ( 724 < 600 ) {
		skillencdesc(SKILL_SPACT_BURN_SCROLLS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DEATH_BIND) = SKILL_ATTR_STR, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_DEATH_BIND) = lang("デスバインド", "Death Bind")
	skilldesc(SKILL_SPACT_DEATH_BIND) = lang("束縛＋貫通攻撃", "Penetrating attack")
	if ( 726 < 600 ) {
		skillencdesc(SKILL_SPACT_DEATH_BIND) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_JYUSOU_GOUSHIN) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 20, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_JYUSOU_GOUSHIN) = lang("呪装豪身", "Jyusou Goushin")
	skilldesc(SKILL_SPACT_JYUSOU_GOUSHIN) = lang("自分の装備に呪い/自己強化", "Self-curse and self-reinforcement")
	if ( 725 < 600 ) {
		skillencdesc(SKILL_SPACT_JYUSOU_GOUSHIN) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DOWNPOUR_SPORE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 28, 3000 + 6, 500
	skillname(SKILL_SPACT_DOWNPOUR_SPORE) = lang("降り注ぐ胞子", "Downpour Spore")
	skilldesc(SKILL_SPACT_DOWNPOUR_SPORE) = lang("周囲の敵に睡眠と鈍足効果", "Sleep and speeddown surrounding enemies.")
	if ( 727 < 600 ) {
		skillencdesc(SKILL_SPACT_DOWNPOUR_SPORE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_HAND_OF_SPLENDOR) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 30, 2000 + 20, 0
	skillname(SKILL_SPACT_HAND_OF_SPLENDOR) = lang("光輝の手", "GHAND")
	skilldesc(SKILL_SPACT_HAND_OF_SPLENDOR) = lang("光を叩きつける/ゲージ100％消費", "magic attack")
	if ( 729 < 600 ) {
		skillencdesc(SKILL_SPACT_HAND_OF_SPLENDOR) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_UNISON_IMPACT) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 10, 2000 + 7, 0
	skillname(SKILL_SPACT_UNISON_IMPACT) = lang("【合体攻撃発動】", "<Unison Impact>")
	skilldesc(SKILL_SPACT_UNISON_IMPACT) = lang("全員のゲージ全消費して合体攻撃", "Attack with all ally")
	if ( 804 < 600 ) {
		skillencdesc(SKILL_SPACT_UNISON_IMPACT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_QUICK_USE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 20, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_QUICK_USE) = lang("パワーアイテム", "Power Item")
	skilldesc(SKILL_SPACT_QUICK_USE) = lang("一部アイテム使用強化", "Enhances use items")
	if ( 709 < 600 ) {
		skillencdesc(SKILL_SPACT_QUICK_USE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MANIS_DISASSEMBLY) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 10, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_MANIS_DISASSEMBLY) = lang("マニの分解術", "Mani's Disassembly")
	skilldesc(SKILL_SPACT_MANIS_DISASSEMBLY) = lang("敵瀕死", "Almost kill target")
	if ( 660 < 600 ) {
		skillencdesc(SKILL_SPACT_MANIS_DISASSEMBLY) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EYE_OF_MUTATION) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 5, 2000 + 2, 0
	skillname(SKILL_SPACT_EYE_OF_MUTATION) = lang("変容の眼差し", "Eye of Mutation")
	skilldesc(SKILL_SPACT_EYE_OF_MUTATION) = lang("対象変容", "Mutate target")
	if ( 632 < 600 ) {
		skillencdesc(SKILL_SPACT_EYE_OF_MUTATION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EYE_OF_ETHER) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 5, 2000 + 2, 0
	skillname(SKILL_SPACT_EYE_OF_ETHER) = lang("エーテルの眼差し", "Eye of Ether")
	skilldesc(SKILL_SPACT_EYE_OF_ETHER) = lang("対象エーテル侵食", "Corrupt target")
	if ( 633 < 600 ) {
		skillencdesc(SKILL_SPACT_EYE_OF_ETHER) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EYE_OF_INSANITY) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 5, 2000 + 2, 0
	skillname(SKILL_SPACT_EYE_OF_INSANITY) = lang("狂気の眼差し", "Eye of Insanity")
	skilldesc(SKILL_SPACT_EYE_OF_INSANITY) = lang("対象狂気", "Craze target")
	if ( 636 < 600 ) {
		skillencdesc(SKILL_SPACT_EYE_OF_INSANITY) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EYE_OF_DIMNESS) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 5, 2000 + 2, 0
	skillname(SKILL_SPACT_EYE_OF_DIMNESS) = lang("朦朧の眼差し", "Eye of dimness")
	skilldesc(SKILL_SPACT_EYE_OF_DIMNESS) = lang("対象朦朧", "Dim target")
	if ( 638 < 600 ) {
		skillencdesc(SKILL_SPACT_EYE_OF_DIMNESS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EYE_OF_MANA) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 5, 2000 + 2, 0
	skillname(SKILL_SPACT_EYE_OF_MANA) = lang("マナの眼差し", "Eye of Mana")
	skilldesc(SKILL_SPACT_EYE_OF_MANA) = lang("マナダメージ", "Damage MP target")
	if ( 652 < 600 ) {
		skillencdesc(SKILL_SPACT_EYE_OF_MANA) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EYE_OF_STIFFEN) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 8, 2000 + 2, 0
	skillname(SKILL_SPACT_EYE_OF_STIFFEN) = lang("硬直の眼差し", "Eye of Stiffen")
	skilldesc(SKILL_SPACT_EYE_OF_STIFFEN) = lang("神経ダメージ/対象の防御力一時上昇", "Damage nerve/Increases protect target")
	if ( 771 < 600 ) {
		skillencdesc(SKILL_SPACT_EYE_OF_STIFFEN) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EYE_OF_ILLUSION) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 8, 2000 + 2, 0
	skillname(SKILL_SPACT_EYE_OF_ILLUSION) = lang("幻惑の眼差し", "Eye of Illusion")
	skilldesc(SKILL_SPACT_EYE_OF_ILLUSION) = lang("幻惑ダメージ", "Damage mind")
	if ( 772 < 600 ) {
		skillencdesc(SKILL_SPACT_EYE_OF_ILLUSION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ABYSS_IN_THE_EYE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 21, 3000 + 6, 0
	skillname(SKILL_SPACT_ABYSS_IN_THE_EYE) = lang("瞳の奥の深淵", "Abyss in the eye")
	skilldesc(SKILL_SPACT_ABYSS_IN_THE_EYE) = lang("心眼強化/眼差し系の技能に効果追加", "Enhance Eye of Mind,Add absorption to Eye-skills")
	if ( 778 < 600 ) {
		skillencdesc(SKILL_SPACT_ABYSS_IN_THE_EYE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BLAME_PAIN) = SKILL_ATTR_CON, SKILL_TYPE_SP, 19, 2000 + 4, 500
	skillname(SKILL_SPACT_BLAME_PAIN) = lang("地獄の責め苦", "Blame Pain")
	skilldesc(SKILL_SPACT_BLAME_PAIN) = lang("地獄ダメージ/拷問成功時ゲージ減少", "Damage nether/Reduce power gauge")
	if ( 801 < 600 ) {
		skillencdesc(SKILL_SPACT_BLAME_PAIN) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_INSULT) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 10, 2000 + 4, 0
	skillname(SKILL_SPACT_INSULT) = lang("罵倒", "Insult")
	skilldesc(SKILL_SPACT_INSULT) = lang("対象朦朧", "Insult target")
	if ( 648 < 600 ) {
		skillencdesc(SKILL_SPACT_INSULT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_WIN) = SKILL_ATTR_SPD, SKILL_TYPE_SP, 1, 2000 + 7, 500
	skillname(SKILL_SPACT_WIN) = lang("*勝利*", "<Win>")
	skilldesc(SKILL_SPACT_WIN) = lang("即死攻撃/Purgeモード専用", "Instant death attack / Purge mode only")
	if ( 802 < 600 ) {
		skillencdesc(SKILL_SPACT_WIN) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_VANISH) = SKILL_ATTR_PER, SKILL_TYPE_SP, 10, TARGET_TYPE_SELF, 0
	skillname(SKILL_SPACT_VANISH) = lang("退却", "Vanish")
	skilldesc(SKILL_SPACT_VANISH) = lang("退却する", "Escape self.")
	if ( 653 < 600 ) {
		skillencdesc(SKILL_SPACT_VANISH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BLOOD_STREAM) = SKILL_ATTR_CON, SKILL_TYPE_SP, 18, 2000 + 7, 0
	skillname(SKILL_SPACT_BLOOD_STREAM) = lang("鮮血の撃刃", "Blood Stream")
	skilldesc(SKILL_SPACT_BLOOD_STREAM) = lang("出血量依存攻撃/出血悪化", "Line attack.")
	if ( 794 < 600 ) {
		skillencdesc(SKILL_SPACT_BLOOD_STREAM) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SHINING_WAVE) = SKILL_ATTR_STR, SKILL_TYPE_SP, 27, 2000 + 4, 0
	skillname(SKILL_SPACT_SHINING_WAVE) = lang("衝撃波動", "Shining Wave")
	skilldesc(SKILL_SPACT_SHINING_WAVE) = lang("一直線攻撃", "Line attack.")
	if ( 649 < 600 ) {
		skillencdesc(SKILL_SPACT_SHINING_WAVE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DISTANT_ATTACK) = SKILL_ATTR_DEX, SKILL_TYPE_ATTACK, 2, 2000 + 3, 0
	skillname(SKILL_SPACT_DISTANT_ATTACK) = lang("遠距離打撃", "Distant Attack")
	skilldesc(SKILL_SPACT_DISTANT_ATTACK) = lang("有射程/通常近接攻撃", "Distant attack.")
	if ( 734 < 600 ) {
		skillencdesc(SKILL_SPACT_DISTANT_ATTACK) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DISTANT_ATTACK7) = SKILL_ATTR_STR, SKILL_TYPE_ATTACK, 2, 2000 + 7, 0
	skillname(SKILL_SPACT_DISTANT_ATTACK7) = lang("遠距離打撃７", "Distant Attack 7")
	skilldesc(SKILL_SPACT_DISTANT_ATTACK7) = lang("有射程/通常近接攻撃", "Distant attack.")
	if ( 650 < 600 ) {
		skillencdesc(SKILL_SPACT_DISTANT_ATTACK7) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_FORCED_DRAFT) = SKILL_ATTR_STR, SKILL_TYPE_SP, 20, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_FORCED_DRAFT) = lang("強制連行", "Forced draft")
	skilldesc(SKILL_SPACT_FORCED_DRAFT) = lang("牢獄に入れる", "Put in prison.")
	if ( 696 < 600 ) {
		skillencdesc(SKILL_SPACT_FORCED_DRAFT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CONTINUOUS_ATTACKS) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 5, 2000 + 3, 0
	skillname(SKILL_SPACT_CONTINUOUS_ATTACKS) = lang("高速ラッシュ", "Continuous attacks")
	skilldesc(SKILL_SPACT_CONTINUOUS_ATTACKS) = lang("連続通常近接攻撃/追加効果無効", "Continuous attacks.")
	if ( 697 < 600 ) {
		skillencdesc(SKILL_SPACT_CONTINUOUS_ATTACKS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_VARIABLE_BREATH) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 10, 9000 + 6, 0
	skillname(SKILL_SPACT_VARIABLE_BREATH) = lang("可変放射", "Variable Breath")
	skilldesc(SKILL_SPACT_VARIABLE_BREATH) = lang("耐性に応じた属性を放射", "Breath(variable)")
	if ( 698 < 600 ) {
		skillencdesc(SKILL_SPACT_VARIABLE_BREATH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EXTERMINATION_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_SP, 10, 9000 + 6, 0
	skillname(SKILL_SPACT_EXTERMINATION_BREATH) = lang("殲滅可変放射", "Extermination Breath")
	skilldesc(SKILL_SPACT_EXTERMINATION_BREATH) = lang("耐性属性視界内放射/ゲージ25％消費", "All Breath(variable)")
	if ( 773 < 600 ) {
		skillencdesc(SKILL_SPACT_EXTERMINATION_BREATH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CHANGE) = SKILL_ATTR_PER, SKILL_TYPE_SP, 10, 2000 + 6, 0
	skillname(SKILL_SPACT_CHANGE) = lang("他者変容", "Change")
	skilldesc(SKILL_SPACT_CHANGE) = lang("対象変容", "Change target")
	if ( 628 < 600 ) {
		skillencdesc(SKILL_SPACT_CHANGE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DRAW_CHARGE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_DRAW_CHARGE) = lang("魔力の抽出", "Draw Charge")
	skilldesc(SKILL_SPACT_DRAW_CHARGE) = lang("杖から魔力抽出", "Draw charges")
	if ( 629 < 600 ) {
		skillencdesc(SKILL_SPACT_DRAW_CHARGE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_FILL_CHARGE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 10, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_FILL_CHARGE) = lang("魔力の充填", "Fill Charge")
	skilldesc(SKILL_SPACT_FILL_CHARGE) = lang("充填", "Restore charges")
	if ( 630 < 600 ) {
		skillencdesc(SKILL_SPACT_FILL_CHARGE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SWARM) = SKILL_ATTR_STR, SKILL_TYPE_SP, 27, TARGET_TYPE_SELF_ONLY, 220
	skillname(SKILL_SPACT_SWARM) = lang("スウォーム", "Swarm")
	skilldesc(SKILL_SPACT_SWARM) = lang("隣接対象通常近接攻撃", "Attack circle")
	if ( 631 < 600 ) {
		skillencdesc(SKILL_SPACT_SWARM) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SMASH_GROUND) = SKILL_ATTR_STR, SKILL_TYPE_SP, 12, TARGET_TYPE_SELF_ONLY, 220
	skillname(SKILL_SPACT_SMASH_GROUND) = lang("地砕き", "Smash Ground")
	skilldesc(SKILL_SPACT_SMASH_GROUND) = lang("隣接対象攻撃/怯み付与", "Attack circle")
	if ( 747 < 600 ) {
		skillencdesc(SKILL_SPACT_SMASH_GROUND) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CHEER) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 32, 3000 + 6, 500
	skillname(SKILL_SPACT_CHEER) = lang("鼓舞", "Cheer")
	skilldesc(SKILL_SPACT_CHEER) = lang("視界内仲間強化", "Strengthen allies")
	if ( 656 < 600 ) {
		skillencdesc(SKILL_SPACT_CHEER) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BOUND_IN_BLOOD) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 28, 3000 + 6, 500
	skillname(SKILL_SPACT_BOUND_IN_BLOOD) = lang("血の結束", "Bound in Blood")
	skilldesc(SKILL_SPACT_BOUND_IN_BLOOD) = lang("元々の種族が同じ仲間を強化", "Strengthen same race allies")
	if ( 764 < 600 ) {
		skillencdesc(SKILL_SPACT_BOUND_IN_BLOOD) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SILENT_OCEAN) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 28, 3000 + 6, 500
	skillname(SKILL_SPACT_SILENT_OCEAN) = lang("沈黙の海", "Silent Ocean")
	skilldesc(SKILL_SPACT_SILENT_OCEAN) = lang("視界内水化/範囲内沈黙", "Flooded and silence")
	if ( 765 < 600 ) {
		skillencdesc(SKILL_SPACT_SILENT_OCEAN) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DIMENSION_FISHING) = SKILL_ATTR_PER, SKILL_TYPE_SP, 16, 3000 + 6, 500
	skillname(SKILL_SPACT_DIMENSION_FISHING) = lang("亜空釣り", "Dimension Fishing")
	skilldesc(SKILL_SPACT_DIMENSION_FISHING) = lang("敵1体を引き寄せ", "Draw enemy")
	if ( 766 < 600 ) {
		skillencdesc(SKILL_SPACT_DIMENSION_FISHING) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TAG_FORCE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 24, 3000 + 6, 500
	skillname(SKILL_SPACT_TAG_FORCE) = lang("タッグフォース", "Tag Force")
	skilldesc(SKILL_SPACT_TAG_FORCE) = lang("タッグ強化回復/ゲージ50％消費", "Strengthen tag/gauge50")
	if ( 741 < 600 ) {
		skillencdesc(SKILL_SPACT_TAG_FORCE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_NECRO_FORCE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 10, 3000 + 6, 500
	skillname(SKILL_SPACT_NECRO_FORCE) = lang("ネクロフォース", "Necro Force")
	skilldesc(SKILL_SPACT_NECRO_FORCE) = lang("使役アンデッド制御", "Control coffin undead")
	if ( 743 < 600 ) {
		skillencdesc(SKILL_SPACT_NECRO_FORCE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CLOSE_SUICIDE) = SKILL_ATTR_CON, SKILL_TYPE_SP, 18, TARGET_TYPE_ENEMY, 700
	skillname(SKILL_SPACT_CLOSE_SUICIDE) = lang("道連れ", "Close Suicide")
	skilldesc(SKILL_SPACT_CLOSE_SUICIDE) = lang("自爆", "Suicide")
	if ( 744 < 600 ) {
		skillencdesc(SKILL_SPACT_CLOSE_SUICIDE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ALCHEMICAL_RAIN) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 35, 3000 + 6, 0
	skillname(SKILL_SPACT_ALCHEMICAL_RAIN) = lang("錬成雨", "Alchemical Rain")
	skilldesc(SKILL_SPACT_ALCHEMICAL_RAIN) = lang("視界内の味方にポーション効果", "Enlarge effect range of potions to followers.")
	if ( 751 < 600 ) {
		skillencdesc(SKILL_SPACT_ALCHEMICAL_RAIN) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_LIQUID_MANIPULATION) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 28, 3000 + 6, 0
	skillname(SKILL_SPACT_LIQUID_MANIPULATION) = lang("液体操作弾", "Liquid Manipulation")
	skilldesc(SKILL_SPACT_LIQUID_MANIPULATION) = lang("視界内の敵にポーション効果", "Enlarge effect range of potions to enemies.")
	if ( 826 < 600 ) {
		skillencdesc(SKILL_SPACT_LIQUID_MANIPULATION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_HAZARD_RECIPE) = SKILL_ATTR_PER, SKILL_TYPE_SP, 15, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_HAZARD_RECIPE) = lang("ハザードレシピ", "Hazard Recipe")
	skilldesc(SKILL_SPACT_HAZARD_RECIPE) = lang("食品を化学兵器に作り変える", "Reshape food to chemical weapon")
	if ( 814 < 600 ) {
		skillencdesc(SKILL_SPACT_HAZARD_RECIPE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DUPLICANE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_DUPLICANE) = lang("デュプリケイン", "Dupli-Cane")
	skilldesc(SKILL_SPACT_DUPLICANE) = lang("攻撃杖の回数減無効/威力減/Sp3消費", "Use rod without reducing the remaining number.")
	if ( 756 < 600 ) {
		skillencdesc(SKILL_SPACT_DUPLICANE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SHADOW_RUSH) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 10, 2000 + 10, 0
	skillname(SKILL_SPACT_SHADOW_RUSH) = lang("全軍突撃", "Shadow rush")
	skilldesc(SKILL_SPACT_SHADOW_RUSH) = lang("全員で突撃＋通常近接攻撃/ゲージ75％消費", "Attack by all allies/gauge70")
	if ( 740 < 600 ) {
		skillencdesc(SKILL_SPACT_SHADOW_RUSH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_FIRE_A_VOLLEY) = SKILL_ATTR_PER, SKILL_TYPE_SP, 10, 2000 + 10, 0
	skillname(SKILL_SPACT_FIRE_A_VOLLEY) = lang("一斉射撃", "Fire a volley/gauge50")
	skilldesc(SKILL_SPACT_FIRE_A_VOLLEY) = lang("仲間と一斉に通常遠隔攻撃/ゲージ50％消費", "")
	if ( 693 < 600 ) {
		skillencdesc(SKILL_SPACT_FIRE_A_VOLLEY) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ROCKET_FIRE) = SKILL_ATTR_PER, SKILL_TYPE_SP, 20, 2000 + 10, 0
	skillname(SKILL_SPACT_ROCKET_FIRE) = lang("砲弾発射", "Rocket Fire")
	skilldesc(SKILL_SPACT_ROCKET_FIRE) = lang("防御を下げる/ゲージ25％消費", "Attack and reduce the defense/gauge25")
	if ( 780 < 600 ) {
		skillencdesc(SKILL_SPACT_ROCKET_FIRE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_NUCLEAR_FIRE) = SKILL_ATTR_PER, SKILL_TYPE_SP, 50, 2000 + 10, 0
	skillname(SKILL_SPACT_NUCLEAR_FIRE) = lang("核発射", "Nuclear Fire")
	skilldesc(SKILL_SPACT_NUCLEAR_FIRE) = lang("広範囲爆破/ゲージ25％消費", "Attack and reduce the defense/gauge25")
	if ( 781 < 600 ) {
		skillencdesc(SKILL_SPACT_NUCLEAR_FIRE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ZERO_SHOOT) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 15, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_ZERO_SHOOT) = lang("零の間撃", "Zero shoot")
	skilldesc(SKILL_SPACT_ZERO_SHOOT) = lang("無射程/距離補正命中率上昇通常射撃", "Hitting the target")
	if ( 700 < 600 ) {
		skillencdesc(SKILL_SPACT_ZERO_SHOOT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PLATINUM_SONG) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 34, 3000 + 6, 500
	skillname(SKILL_SPACT_PLATINUM_SONG) = lang("プラチナソング", "Platinum Song")
	skilldesc(SKILL_SPACT_PLATINUM_SONG) = lang("視界内仲間強化", "Strengthen allies")
	if ( 679 < 600 ) {
		skillencdesc(SKILL_SPACT_PLATINUM_SONG) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PROVOKE) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 20, 3000 + 6, 500
	skillname(SKILL_SPACT_PROVOKE) = lang("挑発", "Provoke")
	skilldesc(SKILL_SPACT_PROVOKE) = lang("自分をターゲットにさせる", "Attract attack")
	if ( 680 < 600 ) {
		skillencdesc(SKILL_SPACT_PROVOKE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BIND) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 20, 2000 + 2, 0
	skillname(SKILL_SPACT_BIND) = lang("束縛", "Bind")
	skilldesc(SKILL_SPACT_BIND) = lang("対象移動不能", "Forbid target move")
	if ( 681 < 600 ) {
		skillencdesc(SKILL_SPACT_BIND) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BROWBEAT) = SKILL_ATTR_PER, SKILL_TYPE_SP, 20, 2000 + 2, 0
	skillname(SKILL_SPACT_BROWBEAT) = lang("威嚇", "Browbeat")
	skilldesc(SKILL_SPACT_BROWBEAT) = lang("対象の攻撃力を下げる", "attack down")
	if ( 682 < 600 ) {
		skillencdesc(SKILL_SPACT_BROWBEAT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CUT_TREE) = SKILL_ATTR_STR, SKILL_TYPE_SP, 12, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_CUT_TREE) = lang("樹木の伐採", "Cut Tree")
	skilldesc(SKILL_SPACT_CUT_TREE) = lang("伐採して材木にする", "make tree material")
	if ( 712 < 600 ) {
		skillencdesc(SKILL_SPACT_CUT_TREE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EYE_OF_BRAINWASHING) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 10, 2000 + 2, 0
	skillname(SKILL_SPACT_EYE_OF_BRAINWASHING) = lang("洗脳の眼差し", "Eye of brainwashing")
	skilldesc(SKILL_SPACT_EYE_OF_BRAINWASHING) = lang("PCを襲わせる", "control ally")
	if ( 683 < 600 ) {
		skillencdesc(SKILL_SPACT_EYE_OF_BRAINWASHING) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GRAVITY_SPHERE) = SKILL_ATTR_CON, SKILL_TYPE_SP, 8, 2000 + 6, 0
	skillname(SKILL_SPACT_GRAVITY_SPHERE) = lang("重力球", "Gravity Sphere")
	skilldesc(SKILL_SPACT_GRAVITY_SPHERE) = lang("階層依存ダメージ", "Gravity Damage")
	if ( 691 < 600 ) {
		skillencdesc(SKILL_SPACT_GRAVITY_SPHERE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GRAVITY_ACCEL) = SKILL_ATTR_CON, SKILL_TYPE_SP, 21, 3000 + 6, 0
	skillname(SKILL_SPACT_GRAVITY_ACCEL) = lang("重力偏向", "Gravity Accel")
	skilldesc(SKILL_SPACT_GRAVITY_ACCEL) = lang("重力の向きを変えて戦闘に応用", "Gravity buff")
	if ( 783 < 600 ) {
		skillencdesc(SKILL_SPACT_GRAVITY_ACCEL) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GIGA_GRAVITATION) = SKILL_ATTR_CON, SKILL_TYPE_SP, 18, 3000 + 6, 0
	skillname(SKILL_SPACT_GIGA_GRAVITATION) = lang("超重圧殺", "Giga Gravitation")
	skilldesc(SKILL_SPACT_GIGA_GRAVITATION) = lang("周辺の敵に重力依存ダメージ/MP10％消費", "Gravity Damage Surround/MP10")
	if ( 784 < 600 ) {
		skillencdesc(SKILL_SPACT_GIGA_GRAVITATION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GRAVITON_BUSTER) = SKILL_ATTR_CON, SKILL_TYPE_SP, 20, 9000 + 6, 0
	skillname(SKILL_SPACT_GRAVITON_BUSTER) = lang("グラビトンバスター", "Graviton Buster")
	skilldesc(SKILL_SPACT_GRAVITON_BUSTER) = lang("階層依存放射/ゲージ100％消費", "Gravity Blast/gauge100")
	if ( 730 < 600 ) {
		skillencdesc(SKILL_SPACT_GRAVITON_BUSTER) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CLEAR_MIND) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 22, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_CLEAR_MIND) = lang("明鏡止水", "Clear Mind")
	skilldesc(SKILL_SPACT_CLEAR_MIND) = lang("主能力と回避力が上昇", "Strengthen WIL and PER")
	if ( 673 < 600 ) {
		skillencdesc(SKILL_SPACT_CLEAR_MIND) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_VINDALIAN_JIUJITSU) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_VINDALIAN_JIUJITSU) = lang("ヴィンデリアン柔術", "Vindalian Jiu-jitsu")
	skilldesc(SKILL_SPACT_VINDALIAN_JIUJITSU) = lang("格闘スタイルの切替", "Change martial style.")
	if ( 768 < 600 ) {
		skillencdesc(SKILL_SPACT_VINDALIAN_JIUJITSU) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DATA_SCAN) = SKILL_ATTR_PER, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_DATA_SCAN) = lang("データスキャン", "Data scan")
	skilldesc(SKILL_SPACT_DATA_SCAN) = lang("分析力強化/毎ターン微疲労", "Raise the analysis power/SP expend")
	if ( 827 < 600 ) {
		skillencdesc(SKILL_SPACT_DATA_SCAN) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ADVANCED_CASTING) = SKILL_ATTR_LER, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_ADVANCED_CASTING) = lang("高度詠唱", "Advanced Casting")
	skilldesc(SKILL_SPACT_ADVANCED_CASTING) = lang("魔法の詠唱難度・経験値が増加", "Increase casting difficulty and experience")
	if ( 828 < 600 ) {
		skillencdesc(SKILL_SPACT_ADVANCED_CASTING) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SYNCHRO_HEARTS) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 100, 3000 + 6, 500
	skillname(SKILL_SPACT_SYNCHRO_HEARTS) = lang("魂のシンクロ", "Synchro hearts")
	skilldesc(SKILL_SPACT_SYNCHRO_HEARTS) = lang("好感度依存仲間強化", "Strengthen allies")
	if ( 671 < 600 ) {
		skillencdesc(SKILL_SPACT_SYNCHRO_HEARTS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DIVINE_STREAM) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 100, 2000 + 6, 500
	skillname(SKILL_SPACT_DIVINE_STREAM) = lang("神気発勝", "Divine Stream")
	skilldesc(SKILL_SPACT_DIVINE_STREAM) = lang("神力の解放", "?")
	if ( 699 < 600 ) {
		skillencdesc(SKILL_SPACT_DIVINE_STREAM) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MAGIC_KISS) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 2, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_MAGIC_KISS) = lang("魔法の口づけ", "Magic Kiss")
	skilldesc(SKILL_SPACT_MAGIC_KISS) = lang("マナ吸収あるいはマナ分譲", "Heal mana")
	if ( 672 < 600 ) {
		skillencdesc(SKILL_SPACT_MAGIC_KISS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_VENOTRATE) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 20, 2000 + 10, 500
	skillname(SKILL_SPACT_VENOTRATE) = lang("ヴェノトレイト", "Venotrate")
	skilldesc(SKILL_SPACT_VENOTRATE) = lang("問答無用で毒状態/ゲージ25％消費", "Poison target/gauge25")
	if ( 815 < 600 ) {
		skillencdesc(SKILL_SPACT_VENOTRATE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EXPLOSIVE_FIST) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 15, TARGET_TYPE_DIRECTION, 500
	skillname(SKILL_SPACT_EXPLOSIVE_FIST) = lang("爆裂拳", "BakuretuKen")
	skilldesc(SKILL_SPACT_EXPLOSIVE_FIST) = lang("通常格闘攻撃＋グレネード発動", "Grenade martial")
	if ( 685 < 600 ) {
		skillencdesc(SKILL_SPACT_EXPLOSIVE_FIST) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_THUNDERCLAP_KICK) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 35, 2000 + 6, 500
	skillname(SKILL_SPACT_THUNDERCLAP_KICK) = lang("迅雷脚", "ZinlaiKyaku")
	skilldesc(SKILL_SPACT_THUNDERCLAP_KICK) = lang("突撃＋通常電撃格闘/ゲージ25％消費", "Lightning martial/gauge25")
	if ( 737 < 600 ) {
		skillencdesc(SKILL_SPACT_THUNDERCLAP_KICK) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BODY_BLOW) = SKILL_ATTR_STR, SKILL_TYPE_SP, 10, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_BODY_BLOW) = lang("ボディブロー", "Body Blow")
	skilldesc(SKILL_SPACT_BODY_BLOW) = lang("通常格闘攻撃にボディブロー追加", "Add body blow to martial")
	if ( 742 < 600 ) {
		skillencdesc(SKILL_SPACT_BODY_BLOW) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_KNOCKOUT) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 5, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_KNOCKOUT) = lang("ノックアウト攻撃", "Knockout")
	skilldesc(SKILL_SPACT_KNOCKOUT) = lang("威力減通常近接攻撃で気絶を狙う", "Attack to stun")
	if ( 745 < 600 ) {
		skillencdesc(SKILL_SPACT_KNOCKOUT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_STRUCK_OUT) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 15, 2000 + 6, 500
	skillname(SKILL_SPACT_STRUCK_OUT) = lang("ストラックアウト", "Struck Out")
	skilldesc(SKILL_SPACT_STRUCK_OUT) = lang("3×3マスへの通常投擲攻撃", "Throwing attack circle")
	if ( 738 < 600 ) {
		skillencdesc(SKILL_SPACT_STRUCK_OUT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_LOCK_BREAK) = SKILL_ATTR_STR, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_LOCK_BREAK) = lang("破錠攻撃", "Lock Break")
	skilldesc(SKILL_SPACT_LOCK_BREAK) = lang("力を結集し鍵破壊/中身微破損", "Joining forces and break the lock")
	if ( 757 < 600 ) {
		skillencdesc(SKILL_SPACT_LOCK_BREAK) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GOLDEN_STORM) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 18, 3000 + 6, 500
	skillname(SKILL_SPACT_GOLDEN_STORM) = lang("デフレストーム", "Golden Storm")
	skilldesc(SKILL_SPACT_GOLDEN_STORM) = lang("所持金貨２千枚を投げ散らす", "Consume 2000gold attack")
	if ( 782 < 600 ) {
		skillencdesc(SKILL_SPACT_GOLDEN_STORM) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_OVER_LONG_THROW) = SKILL_ATTR_STR, SKILL_TYPE_SP, 3, 2000 + 6, 500
	skillname(SKILL_SPACT_OVER_LONG_THROW) = lang("超遠投", "Over Long Throw")
	skilldesc(SKILL_SPACT_OVER_LONG_THROW) = lang("遠距離に適した通常投擲攻撃", "Suitable for long distance")
	if ( 755 < 600 ) {
		skillencdesc(SKILL_SPACT_OVER_LONG_THROW) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_LOVE_CRAFTING) = SKILL_ATTR_PER, SKILL_TYPE_SP, 30, 3000 + 6, 500
	skillname(SKILL_SPACT_LOVE_CRAFTING) = lang("漏出する狂気", "Love Crafting")
	skilldesc(SKILL_SPACT_LOVE_CRAFTING) = lang("視界内敵狂気", "Craze enemies in sight")
	if ( 829 < 600 ) {
		skillencdesc(SKILL_SPACT_LOVE_CRAFTING) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GROUP_HYPNOSIS) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 25, 3000 + 6, 500
	skillname(SKILL_SPACT_GROUP_HYPNOSIS) = lang("集団催眠", "Group Hypnosis")
	skilldesc(SKILL_SPACT_GROUP_HYPNOSIS) = lang("視界内の敵睡眠・洗脳", "Sleep or brainwashing enemies in sight")
	if ( 805 < 600 ) {
		skillencdesc(SKILL_SPACT_GROUP_HYPNOSIS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PSYCHIC_WAVE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 20, 3000 + 6, 500
	skillname(SKILL_SPACT_PSYCHIC_WAVE) = lang("サイキックウェーブ", "Psychic Wave")
	skilldesc(SKILL_SPACT_PSYCHIC_WAVE) = lang("束縛＋LV依存の変動固定ダメージ", "Bind and level dependent fixed damage")
	if ( 753 < 600 ) {
		skillencdesc(SKILL_SPACT_PSYCHIC_WAVE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PRESSURE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 20, 3000 + 6, 500
	skillname(SKILL_SPACT_PRESSURE) = lang("プレッシャー", "Pressure")
	skilldesc(SKILL_SPACT_PRESSURE) = lang("MP消費し周囲の敵のゲージ-50％", "Reduce power gauge of surrounding enemies.")
	if ( 674 < 600 ) {
		skillencdesc(SKILL_SPACT_PRESSURE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SMILE_FIELD) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 20, 3000 + 6, 500
	skillname(SKILL_SPACT_SMILE_FIELD) = lang("スマイルフィールド", "Smile Field")
	skilldesc(SKILL_SPACT_SMILE_FIELD) = lang("視界内全員強化", "Strengthen everyone around.")
	if ( 777 < 600 ) {
		skillencdesc(SKILL_SPACT_SMILE_FIELD) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_COWERING_SMILE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 32, 3000 + 6, 500
	skillname(SKILL_SPACT_COWERING_SMILE) = lang("戦慄の笑顔", "Cowering Smile")
	skilldesc(SKILL_SPACT_COWERING_SMILE) = lang("視界内に萎縮と震えをまき散らす", "Spread atrophy and chills around.")
	if ( 776 < 600 ) {
		skillencdesc(SKILL_SPACT_COWERING_SMILE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_HYPER_DASH) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 21, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_HYPER_DASH) = lang("烈走破", "Hyper Dash")
	skilldesc(SKILL_SPACT_HYPER_DASH) = lang("押しのけ移動しつつダメージ", "Run through and attack")
	if ( 785 < 600 ) {
		skillencdesc(SKILL_SPACT_HYPER_DASH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BLADE_TURBULENCE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 15, 3000 + 6, 500
	skillname(SKILL_SPACT_BLADE_TURBULENCE) = lang("乱れ切風", "Blade Turbulence")
	skilldesc(SKILL_SPACT_BLADE_TURBULENCE) = lang("周囲の敵に切り傷ダメージ", "Bleeding attack to surrounding enemies.")
	if ( 759 < 600 ) {
		skillencdesc(SKILL_SPACT_BLADE_TURBULENCE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CLASH_RUSH) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 25, 2000 + 6, 0
	skillname(SKILL_SPACT_CLASH_RUSH) = lang("捨て身", "Clash Rush")
	skilldesc(SKILL_SPACT_CLASH_RUSH) = lang("接近攻撃/反動あり/ゲージ25％消費", "Attack at the risk of life")
	if ( 760 < 600 ) {
		skillencdesc(SKILL_SPACT_CLASH_RUSH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DEATH_SONG) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 30, 3000 + 6, 500
	skillname(SKILL_SPACT_DEATH_SONG) = lang("破滅の歌", "Death Song")
	skilldesc(SKILL_SPACT_DEATH_SONG) = lang("周囲全員に音属性対抗死の宣告", "Death for surrounding.")
	if ( 761 < 600 ) {
		skillencdesc(SKILL_SPACT_DEATH_SONG) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_HOMING_LASER) = SKILL_ATTR_PER, SKILL_TYPE_SP, 12, 3000 + 6, 500
	skillname(SKILL_SPACT_HOMING_LASER) = lang("マルチロック射撃", "Homing Lazer")
	skilldesc(SKILL_SPACT_HOMING_LASER) = lang("敵の数に応じて分散する射撃", "The entire distributed attack")
	if ( 762 < 600 ) {
		skillencdesc(SKILL_SPACT_HOMING_LASER) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SMOKE_MIRROR) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF, 500
	skillname(SKILL_SPACT_SMOKE_MIRROR) = lang("煙吐く鏡", "Smoke Mirror")
	skilldesc(SKILL_SPACT_SMOKE_MIRROR) = lang("煙幕＆能力転写", "?")
	if ( 790 < 600 ) {
		skillencdesc(SKILL_SPACT_SMOKE_MIRROR) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MEWMEWMEW) = SKILL_ATTR_LUC, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF, 500
	skillname(SKILL_SPACT_MEWMEWMEW) = lang("うみみゃぁ！", "Mewmewmew!")
	skilldesc(SKILL_SPACT_MEWMEWMEW) = lang("全体高ダメージ", "?")
	if ( 657 < 600 ) {
		skillencdesc(SKILL_SPACT_MEWMEWMEW) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_INSANE_WAVE) = SKILL_ATTR_LER, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF, 500
	skillname(SKILL_SPACT_INSANE_WAVE) = lang("病愛波動", "Insane Wave")
	skilldesc(SKILL_SPACT_INSANE_WAVE) = lang("全体発狂", "?")
	if ( 661 < 600 ) {
		skillencdesc(SKILL_SPACT_INSANE_WAVE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUPER_VIBRATING_FIST) = SKILL_ATTR_STR, SKILL_TYPE_SP, 1, 2000 + 2, 500
	skillname(SKILL_SPACT_SUPER_VIBRATING_FIST) = lang("超振動拳", "TyousindouKen")
	skilldesc(SKILL_SPACT_SUPER_VIBRATING_FIST) = lang("超威力単体攻撃", "?")
	if ( 662 < 600 ) {
		skillencdesc(SKILL_SPACT_SUPER_VIBRATING_FIST) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TEMPEST_ARROW) = SKILL_ATTR_DEX, SKILL_TYPE_SUMMON, 1, 2000 + 6, 200
	skillname(SKILL_SPACT_TEMPEST_ARROW) = lang("嵐の流法", "TempestArrow")
	skilldesc(SKILL_SPACT_TEMPEST_ARROW) = lang("竜巻召喚", "?")
	if ( 663 < 600 ) {
		skillencdesc(SKILL_SPACT_TEMPEST_ARROW) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUMMON_CHAOS) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 30, 2000 + 6, 200
	skillname(SKILL_SPACT_SUMMON_CHAOS) = lang("眷属召喚", "Summon chaos")
	skilldesc(SKILL_SPACT_SUMMON_CHAOS) = lang("眷属を召喚する", "Summon chaos")
	if ( 675 < 600 ) {
		skillencdesc(SKILL_SPACT_SUMMON_CHAOS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EXCESSIVE_HEAL) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 1, 2000 + 2, 500
	skillname(SKILL_SPACT_EXCESSIVE_HEAL) = lang("閃華裂光", "ExcessiveHeal")
	skilldesc(SKILL_SPACT_EXCESSIVE_HEAL) = lang("大量出血させる", "?")
	if ( 664 < 600 ) {
		skillencdesc(SKILL_SPACT_EXCESSIVE_HEAL) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ELEMENTIA) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 1, 2000 + 2, 500
	skillname(SKILL_SPACT_ELEMENTIA) = lang("エレメンティア", "Elementia")
	skilldesc(SKILL_SPACT_ELEMENTIA) = lang("単体超マナダメージ", "?")
	if ( 668 < 600 ) {
		skillencdesc(SKILL_SPACT_ELEMENTIA) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GOLD_RUSH) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_GOLD_RUSH) = lang("ゴールドラッシュ", "Gold Rush")
	skilldesc(SKILL_SPACT_GOLD_RUSH) = lang("超強化", "?")
	if ( 670 < 600 ) {
		skillencdesc(SKILL_SPACT_GOLD_RUSH) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ATTRIBUTE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 24, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_ATTRIBUTE) = lang("アトリビウト", "Attribute")
	skilldesc(SKILL_SPACT_ATTRIBUTE) = lang("耐性が最も高い属性を格闘に付加する", "Add attribute to martial")
	if ( 692 < 600 ) {
		skillencdesc(SKILL_SPACT_ATTRIBUTE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_OVERLIMIT_THROW) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 5, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_OVERLIMIT_THROW) = lang("一投入魂", "OverLimit-Throw")
	skilldesc(SKILL_SPACT_OVERLIMIT_THROW) = lang("瞑想依存で通常投擲強化/MP消費", "Throwing reinforced with meditation/MP expend")
	if ( 822 < 600 ) {
		skillencdesc(SKILL_SPACT_OVERLIMIT_THROW) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CHARGE) = SKILL_ATTR_CON, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_CHARGE) = lang("チャージ", "Charge Attack")
	skilldesc(SKILL_SPACT_CHARGE) = lang("溜めて通常攻撃/魔法/放射を一度強化", "charge power")
	if ( 686 < 600 ) {
		skillencdesc(SKILL_SPACT_CHARGE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PSYCHOANALYSIS) = SKILL_ATTR_PER, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_PSYCHOANALYSIS) = lang("精神分析", "Psychoanalysis")
	skilldesc(SKILL_SPACT_PSYCHOANALYSIS) = lang("対象の精神状態の感知", "Know mind")
	if ( 626 < 600 ) {
		skillencdesc(SKILL_SPACT_PSYCHOANALYSIS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MIRROR) = SKILL_ATTR_PER, SKILL_TYPE_SP, 10, TARGET_TYPE_DIRECTION, 500
	skillname(SKILL_SPACT_MIRROR) = lang("超認識", "Mirror")
	skilldesc(SKILL_SPACT_MIRROR) = lang("対象の状態の感知", "Know bonus")
	if ( 791 < 600 ) {
		skillencdesc(SKILL_SPACT_MIRROR) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EMERGENCY_EVASION) = SKILL_ATTR_CON, SKILL_TYPE_SP, 30, 3000 + 6, 500
	skillname(SKILL_SPACT_EMERGENCY_EVASION) = lang("緊急回避", "Emergency Evasion")
	skilldesc(SKILL_SPACT_EMERGENCY_EVASION) = lang("軽装備ならクリティカル無効", "Enhance evasion")
	if ( 687 < 600 ) {
		skillencdesc(SKILL_SPACT_EMERGENCY_EVASION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MAGIC_EQUIP) = SKILL_ATTR_CON, SKILL_TYPE_SP, 30, 3000 + 6, 500
	skillname(SKILL_SPACT_MAGIC_EQUIP) = lang("魔装", "Magic Equip")
	skilldesc(SKILL_SPACT_MAGIC_EQUIP) = lang("中装備なら魔法威力上昇", "Enhance magic power")
	if ( 688 < 600 ) {
		skillencdesc(SKILL_SPACT_MAGIC_EQUIP) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUPER_ARMOR) = SKILL_ATTR_CON, SKILL_TYPE_SP, 30, 3000 + 6, 500
	skillname(SKILL_SPACT_SUPER_ARMOR) = lang("超重装", "Super Armor")
	skilldesc(SKILL_SPACT_SUPER_ARMOR) = lang("重装備なら大ダメージを軽減", "Enhance protection")
	if ( 689 < 600 ) {
		skillencdesc(SKILL_SPACT_SUPER_ARMOR) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SHIELD_PARRY) = SKILL_ATTR_CON, SKILL_TYPE_SP, 30, 3000 + 6, 500
	skillname(SKILL_SPACT_SHIELD_PARRY) = lang("シールドパリィ", "Shield Parry")
	skilldesc(SKILL_SPACT_SHIELD_PARRY) = lang("近接攻撃を盾で弾く", "Parry")
	if ( 779 < 600 ) {
		skillencdesc(SKILL_SPACT_SHIELD_PARRY) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_KILLING_DANCE) = SKILL_ATTR_PER, SKILL_TYPE_SP, 44, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_KILLING_DANCE) = lang("死神の舞踏", "Killing Dance")
	skilldesc(SKILL_SPACT_KILLING_DANCE) = lang("回避上昇/回避成功時反撃", "Increases Evasion, and add　counterattack")
	if ( 811 < 600 ) {
		skillencdesc(SKILL_SPACT_KILLING_DANCE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DO_NOTHING) = SKILL_ATTR_CON, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_DO_NOTHING) = lang("何もしない", "Do Nothing")
	skilldesc(SKILL_SPACT_DO_NOTHING) = lang("ターン終了", "Turn End")
	if ( 690 < 600 ) {
		skillencdesc(SKILL_SPACT_DO_NOTHING) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ABSOLUTE_PROTECT) = SKILL_ATTR_CON, SKILL_TYPE_SP, 80, TARGET_TYPE_SELF, 500
	skillname(SKILL_SPACT_ABSOLUTE_PROTECT) = lang("絶対防衛", "Absolute protect")
	skilldesc(SKILL_SPACT_ABSOLUTE_PROTECT) = lang("仲間のダメージを肩代わり", "Take over the damage of ally")
	if ( 694 < 600 ) {
		skillencdesc(SKILL_SPACT_ABSOLUTE_PROTECT) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MEGID_FLAME) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 100, TARGET_TYPE_SELF, 700
	skillname(SKILL_SPACT_MEGID_FLAME) = lang("焼けつく波動", "Megid Flame")
	skilldesc(SKILL_SPACT_MEGID_FLAME) = lang("祝福を焼き尽くす", "Buff Bunish")
	if ( 695 < 600 ) {
		skillencdesc(SKILL_SPACT_MEGID_FLAME) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GRENADE) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 18, TARGET_TYPE_SELF_ONLY, 700
	skillname(SKILL_SPACT_GRENADE) = lang("グレネード", "Grenade")
	skilldesc(SKILL_SPACT_GRENADE) = lang("轟音の球", "Surround(Sound)")
	if ( 655 < 600 ) {
		skillencdesc(SKILL_SPACT_GRENADE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DROP_MINE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 15, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_DROP_MINE) = lang("地雷投下", "Drop Mine")
	skilldesc(SKILL_SPACT_DROP_MINE) = lang("足元に地雷設置", "Set Mine")
	if ( 659 < 600 ) {
		skillencdesc(SKILL_SPACT_DROP_MINE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SHINE_SNAIL) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 100, 2000 + 2, 500
	skillname(SKILL_SPACT_SHINE_SNAIL) = lang("シャインスネイル", "ShineSnail")
	skilldesc(SKILL_SPACT_SHINE_SNAIL) = lang("単体攻撃", "?")
	if ( 665 < 600 ) {
		skillencdesc(SKILL_SPACT_SHINE_SNAIL) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MANA_BURST) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 50, 2000 + 7, 0
	skillname(SKILL_SPACT_MANA_BURST) = lang("マナの解放", "Mana Burst")
	skilldesc(SKILL_SPACT_MANA_BURST) = lang("MP消費範囲攻撃", "Burn MP")
	if ( 667 < 600 ) {
		skillencdesc(SKILL_SPACT_MANA_BURST) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_OVERRAY) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 10, 2000 + 7, 0
	skillname(SKILL_SPACT_OVERRAY) = lang("多重詠唱魔法", "Over-Ray")
	skilldesc(SKILL_SPACT_OVERRAY) = lang("仲間の魔力を集積/ゲージ50％消費", "Attack by integrating the magic of ally.")
	if ( 746 < 600 ) {
		skillencdesc(SKILL_SPACT_OVERRAY) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ENSEMBLE) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 45, 3000 + 6, 500
	skillname(SKILL_SPACT_ENSEMBLE) = lang("アンサンブル", "Ensemble")
	skilldesc(SKILL_SPACT_ENSEMBLE) = lang("仲間と合奏・合唱する/時間かかる", "Ensemble")
	if ( 676 < 600 ) {
		skillencdesc(SKILL_SPACT_ENSEMBLE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PERSUASION) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 10, 3000 + 6, 500
	skillname(SKILL_SPACT_PERSUASION) = lang("全力説得", "Persuasion")
	skilldesc(SKILL_SPACT_PERSUASION) = lang("意志対抗/SP減っている対象ほど疲労", "Against WIL,Fatigue decreasing SP enemies")
	if ( 816 < 600 ) {
		skillencdesc(SKILL_SPACT_PERSUASION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PECULIAR_JOKE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 10, 3000 + 6, 500
	skillname(SKILL_SPACT_PECULIAR_JOKE) = lang("渾身のギャグ", "Peculiar joke")
	skilldesc(SKILL_SPACT_PECULIAR_JOKE) = lang("感覚対抗/ゲージが低い対象ほど疲労", "Against PER,Fatigue low power gauge enemies")
	if ( 817 < 600 ) {
		skillencdesc(SKILL_SPACT_PECULIAR_JOKE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BLENDED_LIE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 10, 3000 + 6, 500
	skillname(SKILL_SPACT_BLENDED_LIE) = lang("少しの大嘘", "Blended lie")
	skilldesc(SKILL_SPACT_BLENDED_LIE) = lang("器用対抗/MP減っている対象ほど疲労", "Against DEX,Fatigue decreasing MP enemies")
	if ( 818 < 600 ) {
		skillencdesc(SKILL_SPACT_BLENDED_LIE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_INTIMIDATION) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 10, 3000 + 6, 500
	skillname(SKILL_SPACT_INTIMIDATION) = lang("脅迫地獄", "Intimidation")
	skilldesc(SKILL_SPACT_INTIMIDATION) = lang("筋力対抗/HP減っている対象ほど疲労", "Against STR,Fatigue decreasing HP enemies")
	if ( 819 < 600 ) {
		skillencdesc(SKILL_SPACT_INTIMIDATION) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MYSTERIOUS_SONG) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 10, 3000 + 6, 500
	skillname(SKILL_SPACT_MYSTERIOUS_SONG) = lang("魔唱", "Mysterious song")
	skilldesc(SKILL_SPACT_MYSTERIOUS_SONG) = lang("魔力対抗/ゲージが高い対象ほど疲労", "Against MAG,Fatigue high power gauge enemies")
	if ( 820 < 600 ) {
		skillencdesc(SKILL_SPACT_MYSTERIOUS_SONG) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TUIN_DER_LUSTEN) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 10, 3000 + 6, 500
	skillname(SKILL_SPACT_TUIN_DER_LUSTEN) = lang("快楽の園", "Tuin der Lusten")
	skilldesc(SKILL_SPACT_TUIN_DER_LUSTEN) = lang("魅力対抗/広域気持ちいいこと/疲労大", "Against CHR,Give pleasure to drunken people")
	if ( 821 < 600 ) {
		skillencdesc(SKILL_SPACT_TUIN_DER_LUSTEN) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MISTELTEIN) = SKILL_ATTR_LER, SKILL_TYPE_SP, 8, 2000 + 6, 500
	skillname(SKILL_SPACT_MISTELTEIN) = lang("ミストルティン", "Misteltein")
	skilldesc(SKILL_SPACT_MISTELTEIN) = lang("対象弱体・マナダメージ・神特効", "Damage MP and weaken")
	if ( 787 < 600 ) {
		skillencdesc(SKILL_SPACT_MISTELTEIN) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_VIOLENT_GARDEN) = SKILL_ATTR_LER, SKILL_TYPE_SP, 18, 3000 + 6, 500
	skillname(SKILL_SPACT_VIOLENT_GARDEN) = lang("暴虐の庭園", "Violent Garden")
	skilldesc(SKILL_SPACT_VIOLENT_GARDEN) = lang("視界内束縛毒ダメージ", "Bind and poison")
	if ( 786 < 600 ) {
		skillencdesc(SKILL_SPACT_VIOLENT_GARDEN) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_AROMAGEDDON) = SKILL_ATTR_LER, SKILL_TYPE_SP, 24, 3000 + 6, 500
	skillname(SKILL_SPACT_AROMAGEDDON) = lang("アロマゲドン", "Aromageddon")
	skilldesc(SKILL_SPACT_AROMAGEDDON) = lang("味方MP回復敵弱体/精油消費", "Expend essential oil")
	if ( 788 < 600 ) {
		skillencdesc(SKILL_SPACT_AROMAGEDDON) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ANAPHYLAXIS) = SKILL_ATTR_CON, SKILL_TYPE_SP, 22, 3000 + 6, 500
	skillname(SKILL_SPACT_ANAPHYLAXIS) = lang("アナフィラキシー", "Anaphylaxis")
	skilldesc(SKILL_SPACT_ANAPHYLAXIS) = lang("視界内毒状態の敵に大ダメージ", "Attack enemies of the poison state")
	if ( 813 < 600 ) {
		skillencdesc(SKILL_SPACT_ANAPHYLAXIS) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DESTINY_DICE) = SKILL_ATTR_LUC, SKILL_TYPE_SP, 9, 3000 + 6, 500
	skillname(SKILL_SPACT_DESTINY_DICE) = lang("荒ぶるダイス", "Destiny dice")
	skilldesc(SKILL_SPACT_DESTINY_DICE) = lang("判定に応じて視界内投擲ダメージ", "Attack enemies when successful")
	if ( 823 < 600 ) {
		skillencdesc(SKILL_SPACT_DESTINY_DICE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_FLAME_OF_RAGE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 22, 3000 + 6, 500
	skillname(SKILL_SPACT_FLAME_OF_RAGE) = lang("怒りの爆炎", "Flame of Rage")
	skilldesc(SKILL_SPACT_FLAME_OF_RAGE) = lang("激怒時のみ視界内火炎ダメージ", "Fire damage only when fury")
	if ( 795 < 600 ) {
		skillencdesc(SKILL_SPACT_FLAME_OF_RAGE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GRAND_FINALE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 101, 3000 + 6, 500
	skillname(SKILL_SPACT_GRAND_FINALE) = lang("グランドフィナーレ", "Grand Finale")
	skilldesc(SKILL_SPACT_GRAND_FINALE) = lang("プレイヤー駆逐", "player and ally kill")
	if ( 808 < 600 ) {
		skillencdesc(SKILL_SPACT_GRAND_FINALE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_READING_PARTY) = SKILL_ATTR_LER, SKILL_TYPE_SP, 25, 3000 + 6, 500
	skillname(SKILL_SPACT_READING_PARTY) = lang("読書会", "Reading Party")
	skilldesc(SKILL_SPACT_READING_PARTY) = lang("仲間と一緒に書物の解読を行う", "Reading Party")
	if ( 754 < 600 ) {
		skillencdesc(SKILL_SPACT_READING_PARTY) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DIRECTIVE) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_DIRECTIVE) = lang("戦術指示", "Directive")
	skilldesc(SKILL_SPACT_DIRECTIVE) = lang("仲間に態勢と特殊弾指示", "Switch battle mode")
	if ( 678 < 600 ) {
		skillencdesc(SKILL_SPACT_DIRECTIVE) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_METAL_GUARD) = SKILL_ATTR_CON, SKILL_TYPE_SP, 70, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_METAL_GUARD) = lang("メタルコート", "Metal Guard")
	skilldesc(SKILL_SPACT_METAL_GUARD) = lang("一度だけ受けるダメージを1/10にする", "To 1/10 damage once.")
	if ( 736 < 600 ) {
		skillencdesc(SKILL_SPACT_METAL_GUARD) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PREACHING) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 20, 3000 + 6, 500
	skillname(SKILL_SPACT_PREACHING) = lang("説法", "Preaching")
	skilldesc(SKILL_SPACT_PREACHING) = lang("信仰のあり方について考えを広める", "Encourage conversion")
	if ( 713 < 600 ) {
		skillencdesc(SKILL_SPACT_PREACHING) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SERIOUS_BEGGING) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 15, 3000 + 6, 500
	skillname(SKILL_SPACT_SERIOUS_BEGGING) = lang("本気物乞い", "Serious Begging")
	skilldesc(SKILL_SPACT_SERIOUS_BEGGING) = lang("金貨や食べる物をめぐんでもらう", "Ask for gold coins and foods")
	if ( 830 < 600 ) {
		skillencdesc(SKILL_SPACT_SERIOUS_BEGGING) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CALL_FAMILIAR) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 2, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_CALL_FAMILIAR) = lang("コールファミリア", "Call Familiar")
	skilldesc(SKILL_SPACT_CALL_FAMILIAR) = lang("指定した仲間を呼ぶ/待機させる", "Call Ally")
	if ( 684 < 600 ) {
		skillencdesc(SKILL_SPACT_CALL_FAMILIAR) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUPER_REGEN) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 50, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_SUPER_REGEN) = lang("超再生", "Super Regene")
	skilldesc(SKILL_SPACT_SUPER_REGEN) = lang("治癒力超上昇", "?")
	if ( 677 < 600 ) {
		skillencdesc(SKILL_SPACT_SUPER_REGEN) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_UNCONTROL) = SKILL_ATTR_STR, SKILL_TYPE_SP, 26, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_UNCONTROL) = lang("暴走", "Uncontroll")
	skilldesc(SKILL_SPACT_UNCONTROL) = lang("能力の変動・暴れ回る", "?")
	if ( 714 < 600 ) {
		skillencdesc(SKILL_SPACT_UNCONTROL) = lang("", "")
	}
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TIME_STOP) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 200, TARGET_TYPE_SELF, 500
	skillname(SKILL_SPACT_TIME_STOP) = lang("刻の涙", "Time Stop")
	skilldesc(SKILL_SPACT_TIME_STOP) = lang("時間を止める/ゲージ100％消費", "?")
	if ( 716 < 600 ) {
		skillencdesc(SKILL_SPACT_TIME_STOP) = lang("", "")
	}
	return
	goto *label_0038

#deffunc calcskill int calcskill_skillid, int calcskill_charid, int calcskill_spellpower_dice_y, int calcskill_spellpower_dice_x
	locvar_calcskill_rs = sdata(sdataref(SKILL_DATAREF_USE, calcskill_skillid), calcskill_charid)
	ele = SKILL_NONE
	elep = 0
	if ( calcskill_skillid == SKILL_SPELL_UNCURSE ) {
		dice1 = 0
		dice2 = 0 + 1
		bonus = locvar_calcskill_rs * calcskill_spellpower_dice_y * 5 / 100
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_RESURRECTION ) {
		dice1 = 0
		dice2 = 0 + 1
		bonus = limit((locvar_calcskill_rs * 5 + calcskill_spellpower_dice_y) / 20 + 40, 40, 100)
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_IDENTIFY ) {
		dice1 = 0
		dice2 = 0 + 1
		bonus = locvar_calcskill_rs * calcskill_spellpower_dice_y * 10 / 100
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_HEAL_LIGHT ) {
		dice1 = 1 + locvar_calcskill_rs / 30
		dice2 = calcskill_spellpower_dice_y / 40 + 5 + 1
		bonus = calcskill_spellpower_dice_y / 30
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_HEAL_CRITICAL ) {
		dice1 = 2 + locvar_calcskill_rs / 26
		dice2 = calcskill_spellpower_dice_y / 25 + 5 + 1
		bonus = calcskill_spellpower_dice_y / 15
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_HEALING_TOUCH ) {
		dice1 = 2 + locvar_calcskill_rs / 22
		dice2 = calcskill_spellpower_dice_y / 18 + 5 + 1
		bonus = calcskill_spellpower_dice_y / 10
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_CURE_OF_ERIS ) {
		dice1 = 3 + locvar_calcskill_rs / 15
		dice2 = calcskill_spellpower_dice_y / 12 + 5 + 1
		bonus = calcskill_spellpower_dice_y / 6
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_CURE_OF_JURE ) {
		dice1 = 5 + locvar_calcskill_rs / 10
		dice2 = calcskill_spellpower_dice_y / 7 + 5 + 1
		bonus = calcskill_spellpower_dice_y / 2
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_HOLY_LIGHT ) {
		dice1 = 0
		dice2 = 0 + 1
		bonus = locvar_calcskill_rs * 5 + calcskill_spellpower_dice_y * 2
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_VANQUISH_HEX ) {
		dice1 = 0
		dice2 = 0 + 1
		bonus = locvar_calcskill_rs * 5 + calcskill_spellpower_dice_y * 3 / 2
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_PRAYER_OF_JURE ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = cdata(CDATA_PIETY, calcskill_charid) / 70 + 1 + 1
		bonus = 0
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_ABSORB_MAGIC ) {
		dice1 = 1 + locvar_calcskill_rs / 20
		dice2 = cdata(CDATA_PIETY, calcskill_charid) / 140 + 1 + 1
		bonus = 0
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_MAGIC_DART ) {
		dice1 = calcskill_spellpower_dice_x / 70 + 1 + locvar_calcskill_rs / 13
		dice2 = calcskill_spellpower_dice_y / 20 + 4 + 1
		bonus = 0
		ele = SKILL_RES_MAGIC
		elep = 100
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_CRYSTAL_SPEAR ) {
		dice1 = calcskill_spellpower_dice_x / 70 + 1 + locvar_calcskill_rs / 13
		dice2 = calcskill_spellpower_dice_y / 20 + 4 + 1
		bonus = 0
		ele = SKILL_RES_MAGIC
		elep = 100
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_DARK_EYE ) {
		dice1 = calcskill_spellpower_dice_x / 70 + 1 + locvar_calcskill_rs / 13
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_DARKNESS
		elep = 150 + calcskill_spellpower_dice_y / 3
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_NETHER_ARROW ) {
		dice1 = calcskill_spellpower_dice_x / 70 + 1 + locvar_calcskill_rs / 13
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_NETHER
		elep = 150 + calcskill_spellpower_dice_y / 3
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_CHAOS_EYE ) {
		dice1 = calcskill_spellpower_dice_x / 70 + 1 + locvar_calcskill_rs / 13
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_CHAOS
		elep = 150 + calcskill_spellpower_dice_y / 3
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_NERVE_ARROW ) {
		dice1 = calcskill_spellpower_dice_x / 70 + 1 + locvar_calcskill_rs / 13
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_NERVE
		elep = 150 + calcskill_spellpower_dice_y / 3
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_ICE_BOLT ) {
		dice1 = calcskill_spellpower_dice_x / 65 + 1 + locvar_calcskill_rs / 14
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_COLD
		elep = 150 + calcskill_spellpower_dice_y / 4
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_FIRE_BOLT ) {
		dice1 = calcskill_spellpower_dice_x / 65 + 1 + locvar_calcskill_rs / 14
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_FIRE
		elep = 150 + calcskill_spellpower_dice_y / 4
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_LIGHTNING_BOLT ) {
		dice1 = calcskill_spellpower_dice_x / 65 + 1 + locvar_calcskill_rs / 14
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_LIGHTNING
		elep = 150 + calcskill_spellpower_dice_y / 4
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_DARKNESS_BOLT ) {
		dice1 = calcskill_spellpower_dice_x / 65 + 1 + locvar_calcskill_rs / 14
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_DARKNESS
		elep = 150 + calcskill_spellpower_dice_y / 4
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_MIND_BOLT ) {
		dice1 = calcskill_spellpower_dice_x / 65 + 1 + locvar_calcskill_rs / 14
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_MIND
		elep = 150 + calcskill_spellpower_dice_y / 4
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_WATER_BOLT ) {
		dice1 = calcskill_spellpower_dice_x / 65 + 1 + locvar_calcskill_rs / 42
		dice2 = calcskill_spellpower_dice_y / 60 + 4 + 1
		bonus = 0
		ele = SKILL_NONE
		elep = 100
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_ICE_BALL ) {
		dice1 = calcskill_spellpower_dice_x / 60 + 1 + locvar_calcskill_rs / 15
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_COLD
		elep = 150 + calcskill_spellpower_dice_y / 5
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_FIRE_BALL ) {
		dice1 = calcskill_spellpower_dice_x / 60 + 1 + locvar_calcskill_rs / 15
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_FIRE
		elep = 150 + calcskill_spellpower_dice_y / 5
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_CHAOS_BALL ) {
		dice1 = calcskill_spellpower_dice_x / 60 + 1 + locvar_calcskill_rs / 15
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_CHAOS
		elep = 150 + calcskill_spellpower_dice_y / 5
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_RAGING_ROAR ) {
		dice1 = calcskill_spellpower_dice_x / 60 + 1 + locvar_calcskill_rs / 15
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_SOUND
		elep = 150 + calcskill_spellpower_dice_y / 5
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_MAGIC_STORM ) {
		dice1 = calcskill_spellpower_dice_x / 60 + 1 + locvar_calcskill_rs / 15
		dice2 = calcskill_spellpower_dice_y / 20 + 4 + 1
		bonus = 0
		ele = SKILL_RES_MAGIC
		elep = 100
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_ECLIPSE ) {
		dice1 = calcskill_spellpower_dice_x / 60 + 1 + locvar_calcskill_rs / 15
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_DARKNESS
		elep = 150 + calcskill_spellpower_dice_y / 5
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_THUNDER_VORTEX ) {
		dice1 = calcskill_spellpower_dice_x / 60 + 1 + locvar_calcskill_rs / 15
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_LIGHTNING
		elep = 150 + calcskill_spellpower_dice_y / 5
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_NETHER_WAVE ) {
		dice1 = calcskill_spellpower_dice_x / 60 + 1 + locvar_calcskill_rs / 15
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_NETHER
		elep = 150 + calcskill_spellpower_dice_y / 5
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_POISON_STORM ) {
		dice1 = calcskill_spellpower_dice_x / 60 + 1 + locvar_calcskill_rs / 15
		dice2 = calcskill_spellpower_dice_y / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_POISON
		elep = 150 + calcskill_spellpower_dice_y / 5
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_BUBBLE_STORM ) {
		dice1 = calcskill_spellpower_dice_x / 60 + 1 + locvar_calcskill_rs / 45
		dice2 = calcskill_spellpower_dice_y / 60 + 4 + 1
		bonus = 0
		ele = SKILL_NONE
		elep = 100
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_HEALING_RAIN ) {
		dice1 = locvar_calcskill_rs / 20 + 3
		dice2 = calcskill_spellpower_dice_y / 15 + 5 + 1
		bonus = calcskill_spellpower_dice_y / 10
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_SUICIDE_ATTACK ) {
		dice1 = 1 + locvar_calcskill_rs / 25
		dice2 = 15 + locvar_calcskill_rs / 5 + 1
		bonus = ele == SKILL_NONE
		elep = 0
		return 1
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_DRAIN_BLOOD ) {
		dice1 = 1 + locvar_calcskill_rs / 15
		dice2 = 3 + locvar_calcskill_rs / 20 + 1
		bonus = locvar_calcskill_rs / 4
		ele = SKILL_RES_NETHER
		elep = 200
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_VORACITY_FANG ) {
		dice1 = 1 + locvar_calcskill_rs / 9
		dice2 = 7 + locvar_calcskill_rs / 10 + 1
		bonus = locvar_calcskill_rs / 2
		ele = SKILL_RES_NETHER
		elep = 200
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_MP_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 12
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_MAGIC, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20 + cdata(CDATA_MAX_MP, calcskill_charid) / 4
		ele = SKILL_RES_MAGIC
		elep = 200
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_POWER_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 12
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_MAGIC, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_MAGIC
		elep = 200
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_FIRE_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_FIRE, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_FIRE
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_FIRE, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_COLD_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_COLD, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_COLD
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_COLD, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_LIGHTNING_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_LIGHTNING, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_LIGHTNING
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_LIGHTNING, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_DARKNESS_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_DARKNESS, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_DARKNESS
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_DARKNESS, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_CHAOS_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_CHAOS, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_CHAOS
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_CHAOS, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_NETHER_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_NETHER, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_NETHER
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_NETHER, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_POISON_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_POISON, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_POISON
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_POISON, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_SOUND_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_SOUND, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_SOUND
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_SOUND, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_NERVE_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_NERVE, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_NERVE
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_NERVE, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_MIND_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_MIND, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_MIND
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_MIND, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_ACID_HURRICANE ) {
		dice1 = 1 + locvar_calcskill_rs / 30
		dice2 = 2 + locvar_calcskill_rs / 30 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RESDMG_ACID
		elep = 200
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_TOUCH_OF_WEAKNESS ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 3 + 1
		bonus = ep == 0
		return 1
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_TOUCH_OF_HUNGER ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 3 + 1
		bonus = ep == 0
		return 1
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_TOUCH_OF_FEAR ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 3 + 1
		bonus = 0
		ele = SKILL_NONE
		elep = 100 + locvar_calcskill_rs * 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_TOUCH_OF_SLEEP ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 3 + 1
		bonus = 0
		ele = SKILL_NONE
		elep = 100 + locvar_calcskill_rs * 3
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_TOUCH_OF_POISON ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 4 + 1
		bonus = 0
		ele = SKILL_RES_POISON
		elep = locvar_calcskill_rs * 4 + 20
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_MEMORY_POISON ) {
		dice1 = 1 + locvar_calcskill_rs / 5
		dice2 = 2 + locvar_calcskill_rs / 10 + 1
		bonus = locvar_calcskill_rs / 5
		ele = SKILL_RES_POISON
		elep = 100
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_TOUCH_OF_NERVE ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 4 + 1
		bonus = 0
		ele = SKILL_RES_NERVE
		elep = locvar_calcskill_rs * 4 + 20
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_EYE_OF_INSANITY ) {
		dice1 = 1 + locvar_calcskill_rs / 20
		dice2 = 10 + 1
		bonus = elep == 0
		return 1
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_LOVE_CRAFTING ) {
		dice1 = 1 + locvar_calcskill_rs / 40
		dice2 = 10 + 1
		bonus = 0
		elep = 0
		return 1
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_GRENADE ) {
		dice1 = calcskill_spellpower_dice_y / 110 + 1
		dice2 = calcskill_spellpower_dice_y / 10 + 2 + 1
		bonus = 0
		ele = SKILL_RES_SOUND
		elep = 150 + calcskill_spellpower_dice_y / 40
		return 1
	}
	return 0

*label_0038
	goto *trait_init

#defcfunc sorg int sorg_skillid, int sorg_charid
	return sdata(sorg_skillid + STARTING_SKILL_SPACT, sorg_charid) / 1000000

#defcfunc randskill
	return rnd(191 - 150) + 150

#defcfunc randattb
	return rnd(8) + 10

#defcfunc randwskill
	return rnd(112 - 100) + 100

*trait_init
	dim traitref, 10
	sdim traitrefn, 80, 9
	sdim traitrefn2, 20, 6
	return

*trait_ref
	if ( tid == TRAIT_NORMAL_STAT_STAMINA ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 3, 1, 0, 100, -1
			traitrefn2 = lang("短距離走者", "Short Distance Runner"), lang("中距離走者", "Middle Distance Runner"), lang("長距離走者", "Long Distance Runner")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("長年の特訓の成果がスタミナを高める", "Years of training strengthens your stamina."), lang("あなたは持久力がある[スタミナ+]", "You have good stamina. [Stamina+]"), lang("あなたはかなり持久力がある[スタミナ++]", "You have very good stamina. [Stamina++]"), lang("あなたの持久力は恐ろしい[スタミナ上昇]", "You have outstanding stamina. [Stamina+++]")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_SPACT_DRAIN_BLOOD ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("吸血鬼", "Vampiric Ability")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("吸血鬼の友人から血の吸い方を学ぶ", "Your vampire friend teaches you how to suck blood."), lang("あなたは血を吸うことができる", "You can suck blood now.")
			}
			return 1
		}
		if ( spact(SKILL_SPACT_DRAIN_BLOOD - STARTING_SKILL_SPACT) == 0 ) {
			spact(SKILL_SPACT_DRAIN_BLOOD - STARTING_SKILL_SPACT) = 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_SPACT_CHEER ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("指導者", "Natural Leader")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("指導を続けるうちに、仲間を一時的に強くする方法を見つける", "You find how to strengthen your allies for a short time."), lang("あなたは仲間を一時的に強くできる", "You can temporally strengthen your allies.")
			}
			return 1
		}
		if ( spact(SKILL_SPACT_CHEER - STARTING_SKILL_SPACT) == 0 ) {
			spact(SKILL_SPACT_CHEER - STARTING_SKILL_SPACT) = 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_SPACT_KNOCKOUT ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("手加減", "Knockout")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("修行の中で、相手を殺さずに気絶させる攻撃を編み出す", "You find how to stun enemy without killing."), lang("あなたは敵に手加減して攻撃ができる", "You can attack it easy on the enemy.")
			}
			return 1
		}
		if ( spact(SKILL_SPACT_KNOCKOUT - STARTING_SKILL_SPACT) == 0 ) {
			spact(SKILL_SPACT_KNOCKOUT - STARTING_SKILL_SPACT) = 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_SPACT_EYE_OF_MANA ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("魔眼", "Magic Eye")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("謎の儀式に巻き込まれ、眼に呪術を施される", "You are subjected to the magic in the eyes by the ritual."), lang("あなたの眼には得体のしれない魔力が宿っている", "Your eye is harboring the magic of mystery.")
			}
			return 1
		}
		if ( spact(SKILL_SPACT_EYE_OF_MANA - STARTING_SKILL_SPACT) == 0 ) {
			spact(SKILL_SPACT_EYE_OF_MANA - STARTING_SKILL_SPACT) = 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_SPACT_MISTELTEIN ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("魔導植物の知識", "Knowledge of magical plants")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("拾った手記の断片から特殊な植物の召喚法を知る", "You learned how to summon magical plants from the piece of the note."), lang("あなたは魔力を帯びた植物を呼び出し操れる", "You can summon and manipulate magical plants.")
			}
			return 1
		}
		if ( spact(SKILL_SPACT_MISTELTEIN - STARTING_SKILL_SPACT) == 0 ) {
			spact(SKILL_SPACT_MISTELTEIN - STARTING_SKILL_SPACT) = 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_SPACT_DIMENSIONAL_MOVE ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("空間歪曲", "Dimensional Move")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("夢の中で近くへの瞬間移動を思いつく", "You hit upon an idea of insta-teleport from a dream."), lang("あなたは空間を曲げられる", "You can insta-teleport to nearby tiles.")
			}
			return 1
		}
		if ( spact(SKILL_SPACT_DIMENSIONAL_MOVE - STARTING_SKILL_SPACT) == 0 ) {
			spact(SKILL_SPACT_DIMENSIONAL_MOVE - STARTING_SKILL_SPACT) = 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_SPACT_FIRE_BREATH ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("火炎芸", "Fire Breath")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("酒を飲んでいるうちに火を噴けるようになる", "Too much drinking makes you want to breath fire."), lang("あなたは口から火を噴ける", "You can breath fire.")
			}
			return 1
		}
		if ( spact(SKILL_SPACT_FIRE_BREATH - STARTING_SKILL_SPACT) == 0 ) {
			spact(SKILL_SPACT_FIRE_BREATH - STARTING_SKILL_SPACT) = 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_SPACT_TOUCH_OF_SLEEP ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("催眠術師", "Hypnotism")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("突如として眠りの手を覚える", "Suddenly, you know how to make everyone sleep."), lang("あなたは催眠をかけることができる", "You can hypnotize single target.")
			}
			return 1
		}
		if ( spact(SKILL_SPACT_TOUCH_OF_SLEEP - STARTING_SKILL_SPACT) == 0 ) {
			spact(SKILL_SPACT_TOUCH_OF_SLEEP - STARTING_SKILL_SPACT) = 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_SPACT_TOUCH_OF_POISON ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("毒の知恵", "Poison Nail")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("毒の研究の結果、毒の手を覚える", "Researching poisons leads you to a method to poison others."), lang("あなたは毒を盛ることができる", "You can poison a creature.")
			}
			return 1
		}
		if ( spact(SKILL_SPACT_TOUCH_OF_POISON - STARTING_SKILL_SPACT) == 0 ) {
			spact(SKILL_SPACT_TOUCH_OF_POISON - STARTING_SKILL_SPACT) = 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_SPACT_FASCINATION_DANCE ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("舞踏", "Sexy Dance"), lang("舞踏", "Sexy Dance")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("見惚れるような踊りを身に着ける", "You learn sexy dance."), lang("あなたの踊りはとても魅力的だ", "Your dance has been refined."), lang("あなたの踊りはとても魅力的だ", "Your dance has been refined.")
			}
			return 1
		}
		if ( spact(SKILL_SPACT_FASCINATION_DANCE - STARTING_SKILL_SPACT) == 0 ) {
			spact(SKILL_SPACT_FASCINATION_DANCE - STARTING_SKILL_SPACT) = 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_SPACT_UNCONTROL ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("力の暴走", "Uncontrollable power"), lang("力の暴走", "Uncontrollable power"), lang("力の暴走", "Uncontrollable power")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("内に潜む謎の力に振り回される", "Swayed by the mystery power that lurks within."), lang("あなたは制御しきれない何かを秘めている", "You have hidden something that can not be controlled."), lang("あなたは制御しきれない何かを秘めている", "You have hidden something that can not be controlled."), lang("あなたは制御しきれない何かを秘めている", "You have hidden something that can not be controlled.")
			}
			return 1
		}
		if ( spact(SKILL_SPACT_UNCONTROL - STARTING_SKILL_SPACT) == 0 ) {
			spact(SKILL_SPACT_UNCONTROL - STARTING_SKILL_SPACT) = 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_OTHER_ACCOUNTANT ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 2, 1, 0, 100, -1
			traitrefn2 = lang("見習い会計士", "Apprentice Accountant"), lang("熟練会計士", "Expert Accountant")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("会計の技能を磨き税金を減らす", "Working as an accountant reduces your tax payment."), lang("あなたは税金の計算に強い[税金7%減]", "You can set expenses off against tax. [TAX-7%]"), lang("あなたは税金の計算にとても強い[税金15%減]", "You are good at setting expenses off against tax. [TAX-15%]")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_OTHER_QUARTERMASTER ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 2, 1, 0, 100, -1
			traitrefn2 = lang("見習い補給係", "Apprentice Quartermaster"), lang("熟練補給係", "Expert Quartermaster")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("補給係としての経験が、給料物資の品質を上げる", "Working as a quartermaster gives you better payoff."), lang("あなたはたまに質の高い補給品を受け取る", "You sometimes receive quality supplies."), lang("あなたは頻繁に質の高い補給品を受け取る", "You frequently receive quality supplies.")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_OTHER_RES_CURSE ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("祈祷師", "Exorcist")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("祈祷を捧げることで、呪いの言葉の効力を弱める", "Your prayer weakens the power of cursed whisperings."), lang("あなたの祈りは呪いの言葉を掻き消す", "Your prayer nullifies cursed whisperings.")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_OTHER_INDEPENDENT ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("孤高", "Kokou")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("最後に信じられるのは、自分の力だけという考えに至る", "Finally, you can believe only your power."), lang("あなたは独りの方が行動しやすい[単独時に速度+20%]", "You prefer alone. [SPD+20% at the time alone]")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_OTHER_MOUNT_BOND ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("迅馬一体", "Zin-ba")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("戦場を馬と共に駆け回り、乗馬相手との呼吸の合わせ方を知る", "Finally, you can believe only your power."), lang("あなたは馬上での武器の扱いが得意だ[乗馬時命中ペナルティ緩和]", "You prefer alone. [SPD+20% at the time alone]")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_SPACT_GRAVITY_ACCEL ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("重力制御", "Gravity Control"), lang("重力制御", "Gravity Control")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("改造を施され重力へ干渉できる体質になる", "You have remodeled to gravity interference diathesis."), lang("あなたは重力を操る", "You manipulate the gravity."), lang("あなたは重力を操る", "You manipulate the gravity."), lang("あなたは重力を操る", "You manipulate the gravity.")
			}
			return 1
		}
		if ( spact(SKILL_SPACT_GRAVITY_ACCEL - STARTING_SKILL_SPACT) == 0 ) {
			spact(SKILL_SPACT_GRAVITY_ACCEL - STARTING_SKILL_SPACT) = 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_SPACT_VINDALIAN_JIUJITSU ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("柔術", "Jiu-jitsu"), lang("柔術", "Jiu-jitsu")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("山で会った謎の老人から古の武術を伝授される", "You have been taught the martial arts from the mysterious old man."), lang("あなたは柔術を会得している", "You mastered Jiu-jitsu."), lang("あなたは柔術を会得している", "You mastered Jiu-jitsu. ")
			}
			return 1
		}
		if ( spact(SKILL_SPACT_VINDALIAN_JIUJITSU - STARTING_SKILL_SPACT) == 0 ) {
			spact(SKILL_SPACT_VINDALIAN_JIUJITSU - STARTING_SKILL_SPACT) = 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_SKILL_CASTING ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 2, 1, 0, 100, -1
			traitrefn2 = lang("集中", "Concentration"), lang("高い集中", "More Concentration")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("日々瞑想し詠唱技術を高める", "Daily meditation increases your casting skill."), lang("あなたの集中力は高い[詠唱+4]", "You concentrate while casting. [Casting+4]"), lang("あなたは極度に集中できる[詠唱+8]", "You concentrate more while casting. [Casting+8]")
			}
			if ( sorg(SKILL_NORMAL_CASTING, CHARA_PLAYER) == 0 ) {
				return -1
			}
			return 1
		}
		sdata(SKILL_NORMAL_CASTING, CHARA_PLAYER) = limit(sdata(SKILL_NORMAL_CASTING, CHARA_PLAYER) + trait(tid) * 4, sdata(SKILL_NORMAL_CASTING, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_NORMAL_OTHER_SHIELD_BASH ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("盾殴り", "Shield Bash")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("盾の扱いを身につけ、盾での攻撃の効果を上げる", "Mastering shield increases your power of shield bash."), lang("あなたは盾での攻撃に追加効果を得る", "You can bash with your shield more effect.")
			}
			if ( sorg(SKILL_NORMAL_SHIELD, CHARA_PLAYER) == 0 ) {
				return -1
			}
			return 1
		}
		cbitmod CHARA_BIT_BREAK_WALLS, CHARA_PLAYER, TRUE
		return 1
	}
	if ( tid == TRAIT_NORMAL_OTHER_GENTLE_FACE ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("優しい笑顔", "Gentle Face")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("優しい笑顔を習得し、敵が逃げ出すのを防ぐ", "Your gentle face prevents your enemies from escaping."), lang("あなたの笑顔は敵を油断させる", "Your attacks don't cause enemies to run.")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_SKILL_DUAL_WIELD ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 2, 1, 0, 100, -1
			traitrefn2 = lang("二刀流の習熟", "Ambidextrous"), lang("二刀流の達人", "Improved Ambidextrous")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("長年の修行により二刀流の技術を磨く", "Years of training increases your two weapon fighting skill."), lang("あなたは複数の武器を巧みに操る[二刀流+4]", "You can handle multiple weapons. [Dual Wield+4]"), lang("あなたは二刀流を極めている[二刀流+8]", "You mastered multiple weapon style. [Two Wield+8]")
			}
			if ( sorg(SKILL_NORMAL_DUAL_WIELD, CHARA_PLAYER) == 0 ) {
				return -1
			}
			return 1
		}
		sdata(SKILL_NORMAL_DUAL_WIELD, CHARA_PLAYER) = limit(sdata(SKILL_NORMAL_DUAL_WIELD, CHARA_PLAYER) + trait(tid) * 4, sdata(SKILL_NORMAL_DUAL_WIELD, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_NORMAL_RES_DARKNESS ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 2, 1, 0, 100, -1
			traitrefn2 = lang("暗闇への適正", "Conquer Darkness"), lang("暗闇への強い適正", "Conquer Deep Darkness")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("地底での生活が暗黒への耐性を高める", "Living in darkness makes you resistant to darkness."), lang("あなたは暗闇に慣れている[暗黒耐性強化]", "You don't fear darkness. [RES Darkness+]"), lang("あなたは闇の中で生活できる[暗黒耐性強化]", "You can dance in darkness. [RES Darkness++]")
			}
			return 1
		}
		sdata(SKILL_RES_DARKNESS, CHARA_PLAYER) = limit(sdata(SKILL_RES_DARKNESS, CHARA_PLAYER) + trait(tid) * 50 / 2, sdata(SKILL_RES_DARKNESS, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_NORMAL_RES_POISON ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 2, 1, 0, 100, -1
			traitrefn2 = lang("免疫", "Poison Tolerance"), lang("強い免疫", "More Poison Tolerance")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("貴族の毒見係のおかげで毒への耐性を得る", "Being a taster for a noble grants you resistance to poison."), lang("あなたは毒に免疫がある[毒耐性強化]", "You have a torerance to poison. [RES Poison+]"), lang("あなたには毒に強い免疫がある[毒耐性強化]", "You have a strong tolerance to poison. [RES Poison++]")
			}
			return 1
		}
		sdata(SKILL_RES_POISON, CHARA_PLAYER) = limit(sdata(SKILL_RES_POISON, CHARA_PLAYER) + trait(tid) * 50 / 2, sdata(SKILL_RES_POISON, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_NORMAL_SKILL_NEGOTIATION ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("共感上手", "Empathy"), lang("共感上手", "Empathy")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("相手の考えを理解し対応する技術を学ぶ", "You learn the skill to understand and respond to enemy thoughts."), lang("あなたの言葉は心に響く", "Your talk resonate in the mind."), lang("あなたの言葉は心に響く", "Your talk resonate in the mind.")
			}
			return 1
		}
		if ( spact(SKILL_SPACT_PERSUASION - STARTING_SKILL_SPACT) == 0 ) {
			spact(SKILL_SPACT_PERSUASION - STARTING_SKILL_SPACT) = 1
		}
		if ( spact(SKILL_SPACT_PECULIAR_JOKE - STARTING_SKILL_SPACT) == 0 ) {
			spact(SKILL_SPACT_PECULIAR_JOKE - STARTING_SKILL_SPACT) = 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_SKILL_FAITH ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 2, 1, 0, 100, -1
			traitrefn2 = lang("信者", "Believer"), lang("狂信者", "Zealot")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("神官の下で修行し信仰を深める", "Training under a priest deepens your faith."), lang("あなたは信仰に篤い[信仰+4]", "You really believe in god. [Faith+4]"), lang("あなたは猛烈な信者だ[信仰+8]", "You are a zealot. [Faith+8]")
			}
			return 1
		}
		sdata(SKILL_NORMAL_FAITH, CHARA_PLAYER) = limit(sdata(SKILL_NORMAL_FAITH, CHARA_PLAYER) + trait(tid) * 4, sdata(SKILL_NORMAL_FAITH, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_NORMAL_STAT_LUC ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 3, 1, 0, 100, -1
			traitrefn2 = lang("幸運の持ち主", "Lucky"), lang("類稀な幸運", "Incredibly Lucky"), lang("幸運の女神の寵愛", "Goddess of Luck")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("流れ星を見て幸運を手にする", "Sighting a falling star brings you luck."), lang("あなたは幸運の持ち主だ", "You are lucky"), lang("あなたは類稀な幸運の持ち主だ", "You can rely on a good dose of luck."), lang("あなたは幸運の女神の寵愛を受けている", "The goddess of luck smiles on you.")
			}
			return 1
		}
		sdata(SKILL_ATTR_LUC, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_LUC, CHARA_PLAYER) + trait(tid) * 5, sdata(SKILL_ATTR_LUC, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_NORMAL_STAT_LIFE ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 5, 1, 0, 100, -1
			traitrefn2 = lang("苦行者見習い", "Apprentice Ascetic"), lang("苦行者", "Journeyman Ascetic"), lang("熟練の苦行者", "Expert Ascetic"), lang("苦行の達人", "Master Ascetic"), lang("伝説的苦行者", "Legendary Ascetic")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("苦行を通じてHPを増やす", "Being an ascetic increases your HP."), lang("あなたは苦行者の見習いだ[HP+5%]", "You are an apprentice of an ascetic. [HP+5%]"), lang("あなたは立派な苦行者だ[HP+10%]", "You are a journeyman of an ascetic. [HP+10%]"), lang("あなたは熟練した苦行者だ[HP+15%]", "You are an expert of an ascetic. [HP+15%]"), lang("あなたは苦行の達人だ[HP+20%]", "You are a master of an ascetic. [HP+20%]"), lang("あなたは伝説的名苦行者だ[HP+25%]", "You are an legendary ascetic. [HP+25%]")
			}
			return 1
		}
		sdata(SKILL_ATTR_LIFE, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_LIFE, CHARA_PLAYER) + trait(tid) * 5, sdata(SKILL_ATTR_LIFE, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_NORMAL_STAT_MANA ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 5, 1, 0, 100, -1
			traitrefn2 = lang("魔力の遺伝子", "Magical Gene"), lang("魔力の細胞", "Magical Cell"), lang("魔力の血液", "Magical Blood"), lang("魔力の肉体", "Magic Body"), lang("魔力の支配", "Magic Being")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("遺伝子組み換えを行いMPを増やす", "You gain MP by using gene manipulation."), lang("あなたは魔力の遺伝子を持っている[MP+5%]", "Your genes contain magic. [MP+5%]"), lang("あなたは魔力の細胞を持っている[MP+10%]", "Your cells contain magica [MP+10%]"), lang("あなたには魔力の血液が流れている[MP+15%]", "Your blood contain magic [MP+15%]"), lang("あなたの肉体は魔力を帯びている[MP+20%]", "Your body is made of magic. [MP+20%]"), lang("あなたは魔力を支配している[MP+25%]", "Magic dominats your entire body. [MP+25%")
			}
			return 1
		}
		sdata(SKILL_ATTR_MANA, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_MANA, CHARA_PLAYER) + trait(tid) * 5, sdata(SKILL_ATTR_MANA, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_NORMAL_SPACT_BLADE_STRINGS ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 1, 1, 0, 100, -1
			traitrefn2 = lang("糸使い", "Strings Assassin"), lang("糸使い", "Strings Assassin")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("鋭く丈夫な糸を隠し持つ", "You concealed a sharp durable strings."), lang("あなたは糸を自在に操る", "You manipulate strings freely."), lang("あなたは糸を自在に操る", "You manipulate strings freely.")
			}
			return 1
		}
		if ( spact(SKILL_SPACT_BLADE_STRINGS - STARTING_SKILL_SPACT) == 0 ) {
			spact(SKILL_SPACT_BLADE_STRINGS - STARTING_SKILL_SPACT) = 1
		}
		return 1
	}
	if ( tid == TRAIT_NORMAL_STAT_SPD ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 2, 1, 0, 100, -1
			traitrefn2 = lang("俊足", "Agile"), lang("韋駄天", "Very Agile")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("猫を追いかけて速くなる", "Chasing cats increases your speed."), lang("あなたは速く走ることができる[速度+5]", "You can run fast. [SPD+5]"), lang("あなたは猫よりも速い[速度+10]", "You can run faster than a cat. [SPD+10]")
			}
			if ( trait(tid) == 1 ) {
				if ( cdata(CDATA_LEVEL, CHARA_PLAYER) < 5 ) {
					return -1
				}
			}
			return 1
		}
		sdata(SKILL_ATTR_SPD, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_SPD, CHARA_PLAYER) + trait(tid) * 5, sdata(SKILL_ATTR_SPD, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_NORMAL_STAT_PV ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 3, 1, 0, 100, -1
			traitrefn2 = lang("石の守備", "Stone Defense"), lang("鉄の守備", "Iron Defense"), lang("鋼の守備", "Steel Defense")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("受身を会得しPVを上昇させる", "You establish your own defensive style."), lang("あなたの防御は石のように硬い[PV+5]", "Your defense is as hard as stone. [PV+5]"), lang("あなたの守備は鉄壁だ[PV+10]", "Your defense is as hard as iron. [PV+10]"), lang("あなたの防御は鋼のように固い[PV+15]", "Your defense is as hard as steel. [PV+15]")
			}
			if ( trait(tid) == 1 ) {
				if ( cdata(CDATA_LEVEL, CHARA_PLAYER) < 5 ) {
					return -1
				}
			}
			return 1
		}
		cdata(CDATA_PV, CHARA_PLAYER) = limit(cdata(CDATA_PV, CHARA_PLAYER) + trait(tid) * 5, cdata(CDATA_PV, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_NORMAL_STAT_DV ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 3, 1, 0, 100, -1
			traitrefn2 = lang("見極め", "Dodge"), lang("見極めの熟練者", "Improved Dodge"), lang("見極めの達人", "Greater Dodge")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("敵の動きを見極めDVを上昇させる", "You learn how to dodge attacks."), lang("あなたは見切れる[DV+4]", "You can somewhat dodge enemy attacks. [DV+4]"), lang("あなたはかなり見切れる[DV+8]", "You can dodge enemy attacks. [DV+8]"), lang("あなたの見切りは伝説的だ[DV+12]", "You can really dodge enemy attacks. [DV+12]")
			}
			return 1
		}
		cdata(CDATA_DV, CHARA_PLAYER) = limit(cdata(CDATA_DV, CHARA_PLAYER) + trait(tid) * 4, cdata(CDATA_DV, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_NORMAL_SKILL_EVASION ) {
		if ( traitmode == 0 ) {
			traitref = 0, 0, 3, 1, 0, 100, -1
			traitrefn2 = lang("回避の修練者", "Evade"), lang("回避の熟練者", "Improved Evade"), lang("回避の達人", "Greater Evade")
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("回避の技術に磨きをかける", "You improve your evasion skill."), lang("あなたは回避に長けている[回避+2]", "You can somewhat evade enemy attacks. [Evasion+2]"), lang("あなたは華麗に回避する[回避+4]", "You can evade enemy attacks. [Evasion+4]"), lang("あなたは回避の達人だ[回避+6]", "You can really evade enemy attacks. [Evasion+6]")
			}
			if ( sorg(SKILL_NORMAL_EVASION, CHARA_PLAYER) == 0 ) {
				return -1
			}
			return 1
		}
		sdata(SKILL_NORMAL_EVASION, CHARA_PLAYER) = limit(sdata(SKILL_NORMAL_EVASION, CHARA_PLAYER) + trait(tid) * 2, sdata(SKILL_NORMAL_EVASION, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_NORMAL_OTHER_CANNIBALISM ) {
		if ( traitmode == 0 ) {
			traitref = 1, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("カンニバリズム", "Cannibalism"), lang("あなたは人肉を食べることに抵抗がない", "You have no trouble eating human flesh.")
			}
			traitrefn = lang("あなたは人肉の味の虜になった。", "You are charmed by the flavor of human flesh."), lang("あなたは人肉の味に飽きた。", "You can no longer accept human flesh.")
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_MUTATION_STAT_PV ) {
		if ( traitmode == 0 ) {
			traitref = 1, -3, 3, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("鉄の皮膚", "Iron Skin"), lang("あなたの皮膚は硬い[PV+3]", "Your skin is hard. [PV+3]"), lang("あなたの皮膚はとても硬い[PV+6]", "Your skin is very hard. [PV+6]"), lang("あなたは鉄のような皮膚を持っている[PV+9]", "Your skin is as hard as iron. [PV+9]")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = lang("アルビノ", "Albino"), lang("あなたの皮膚は白い[PV-3]", "Your skin is white. [PV-3]"), lang("あなたの皮膚は脆い[PV-6]", "Your skin is fragile. [PV-6]"), lang("あなたの皮膚は崩れている[PV-9]", "Your skin is collapsing. [PV-9]")
			}
			traitrefn = lang("あなたの皮膚は硬くなった。", "Your skin becomes harder."), lang("あなたの皮膚は薄くなった。", "Your skin becomes pale.")
			return 1
		}
		cdata(CDATA_PV, CHARA_PLAYER) += trait(tid) * 3
		return 1
	}
	if ( tid == TRAIT_MUTATION_STAT_DEX ) {
		if ( traitmode == 0 ) {
			traitref = 1, -3, 3, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("しなやかな関節", "Flexible Joint"), lang("あなたの関節はしなやかだ[器用+3]", "Your joints are flexible. [DEX+3]"), lang("あなたの関節はとてもしなやかだ[器用+6]", "Your joints are very flexible. [DEX+6]"), lang("あなたの関節は驚くほどしなやかだ[器用+9]", "Your joints are incredibly flexible. [DEX+9]")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = lang("きしむ関節", "Creaking Joint"), lang("あなたの関節はきしむ[器用-3]", "Your joints creak. [DEX-3]"), lang("あなたは関節痛に悩んでいる[器用-6]", "You are worrying about your joint creakings. [DEX-6]"), lang("あなたはひどい関節痛を抱えている[器用-9]", "You have terrible joint creakings. [DEX-9]")
			}
			traitrefn = lang("あなたの関節はしなやかになった。", "Your joints become flexible."), lang("あなたの関節は痛み出した。", "Your joints creak.")
			return 1
		}
		sdata(SKILL_ATTR_DEX, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_DEX, CHARA_PLAYER) + trait(tid) * 3, sdata(SKILL_ATTR_DEX, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_MUTATION_SKILL_HEALING ) {
		if ( traitmode == 0 ) {
			traitref = 1, -2, 2, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("トロールの血", "Troll Blood"), lang("あなたの傷跡は再生する[自然治癒強化]", "Your wounds regenerate rapidly. [Regeneration+]"), lang("あなたの傷は瞬く間にふさがる[自然治癒強化]", "Your wounds regenerate instantly. [Regeneration++]")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = lang("貧血", "Anemia"), lang("あなたは血の気が少ない[自然治癒弱化]", "You suffer from anemia. [Regeneration-]"), lang("あなたの顔には血の気が全くない[自然治癒弱化]", "You constantly have an attack of anemia. [Regeneration--]")
			}
			traitrefn = lang("あなたの血液は緑っぽくなった。", "Suddenly your blood become greenish!"), lang("あなたの血液は薄れた。", "Your metabolism slows down.")
			return 1
		}
		sdata(SKILL_NORMAL_HEALING, CHARA_PLAYER) = limit(sdata(SKILL_NORMAL_HEALING, CHARA_PLAYER) + trait(tid) * 4, sdata(SKILL_NORMAL_HEALING, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_MUTATION_STAT_SPD ) {
		if ( traitmode == 0 ) {
			traitref = 1, -3, 3, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("しなやかな脚", "Lithe Leg"), lang("あなたの脚はしなやかだ[速度上昇]", "You have lithe legs. [SPD+5]"), lang("あなたの脚はとてもしなやかだ[速度上昇]", "You have very lithe legs. [SPD+10]"), lang("あなたの脚は理想的な形をしている[速度上昇]", "You have ideal legs. [SPD+15]")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = lang("ねじれた脚", "Twisted Leg"), lang("あなたの脚はねじれている[速度下降]", "Your legs are twisted. [SPD-5]"), lang("あなたの脚はとてもねじれている[速度下降]", "Your legs are very twisted. [SPD-10]"), lang("あなたの脚は折れている[速度下降]", "Your legs are broken. [SPD-15]")
			}
			traitrefn = lang("あなたの脚はしなやかになった。", "Your legs become lithe."), lang("あなたの脚はねじれた。", "Your legs are twisted!")
			return 1
		}
		sdata(SKILL_ATTR_SPD, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_SPD, CHARA_PLAYER) + trait(tid) * 5, sdata(SKILL_ATTR_SPD, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_MUTATION_STAT_STR ) {
		if ( traitmode == 0 ) {
			traitref = 1, -3, 3, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("強い腕", "Strong Arm"), lang("あなたの腕はひきしまっている[筋力+3]", "You have well-knit arms. [STR+3]"), lang("あなたの腕は強力だ[筋力+6]", "You have well-muscled arms. [STR+6]"), lang("あなたの腕は筋肉の塊だ[筋力+9]", "You have ideal arms. [STR+9]")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = lang("弱い腕", "Weak Arm"), lang("あなたの腕はたるんでいる[筋力-3]", "Your arms are thin. [STR-3]"), lang("あなたの腕はとてもたるんでいる[筋力-6]", "Your arms are very thin. [STR-6]"), lang("あなたの腕には筋肉がない[筋力-9]", "Your arms are just decorative. [STR-9]")
			}
			traitrefn = lang("あなたの腕の筋肉が増えた。", "Your arms grow stronger."), lang("あなたの腕の贅肉が増えた。", "Your arms become thin.")
			return 1
		}
		sdata(SKILL_ATTR_STR, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_STR, CHARA_PLAYER) + trait(tid) * 3, sdata(SKILL_ATTR_STR, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_MUTATION_STAT_CHR ) {
		if ( traitmode == 0 ) {
			traitref = 1, -2, 2, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("美声", "Sweet Voice"), lang("あなたは美声を持っている[魅力+5]", "Your voice is sweet.[CHR+5]"), lang("あなたの声は全てを魅了する[魅力+10]", "Your voice charms everyone.[CHR+10]")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = lang("かれた声", "Husky Voice"), lang("あなたの声はかれている[魅力-5]", "Your voice is hasky.[CHR-5]"), lang("あなたが喋ると皆逃げる[魅力-10]", "Everyone is frightened when you talk.[CHR-10]")
			}
			traitrefn = lang("あなたの声はよく通る。", "Your voice becomes lovely."), lang("あなたの声はかれた。", "Your voice becomes scary.")
			return 1
		}
		sdata(SKILL_ATTR_CHA, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_CHA, CHARA_PLAYER) + trait(tid) * 5, sdata(SKILL_ATTR_CHA, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_MUTATION_SKILL_MEMORIZATION ) {
		if ( traitmode == 0 ) {
			traitref = 1, -2, 2, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("脳内コンピュータ", "Brain Computer"), lang("あなたの脳は機械化している[暗記+4]", "Your brain is mechanized.[Memorization+4]"), lang("あなたの脳は完璧な機械だ[暗記+8]", "Your brain is fully mechanized.[Memorization+8]")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = lang("痴呆", "Stupid"), lang("あなたは少しぼけている[暗記-4]", "You are stupid.[Memorization-4]"), lang("あなたは痴呆だ[暗記-8]", "You are really stupid.[Memorization-8]")
			}
			traitrefn = lang("あなたの脳は機械化した。", "Your brain is mechanized!"), lang("あなたの脳は原始化した。", "Your brain degenerates.")
			return 1
		}
		sdata(SKILL_NORMAL_MEMORIZATION, CHARA_PLAYER) = limit(sdata(SKILL_NORMAL_MEMORIZATION, CHARA_PLAYER) + trait(tid) * 4, sdata(SKILL_NORMAL_MEMORIZATION, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_MUTATION_RES_MAGIC ) {
		if ( traitmode == 0 ) {
			traitref = 1, -1, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("魔法への耐性", "Magic Res+"), lang("あなたは魔法に耐性がある[魔法耐性強化]", "You have resistance to magic.[RES Magic+]")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = lang("魔法の弱点", "Magic Res-"), lang("あなたは魔法に弱い[魔法耐性弱化]", "You have weakness to magic.[RES Magic-]")
			}
			traitrefn = lang("あなたは魔法の耐性を得た。", "You gain resistance to magic."), lang("あなたは魔法の耐性を失った。", "You lose resistance to magic.")
			return 1
		}
		sdata(SKILL_RES_MAGIC, CHARA_PLAYER) = limit(sdata(SKILL_RES_MAGIC, CHARA_PLAYER) + trait(tid) * 50, sdata(SKILL_RES_MAGIC, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_MUTATION_RES_SOUND ) {
		if ( traitmode == 0 ) {
			traitref = 1, -1, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("強い鼓膜", "Sound Res+"), lang("あなたの鼓膜は厚い[音耐性強化]", "Your eardrums are thick.[RES Sound+]")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = lang("弱い鼓膜", "Sound Res-"), lang("あなたの鼓膜は薄い[音耐性弱化]", "Your eardrums are thin.[RES Sound-]")
			}
			traitrefn = lang("あなたの鼓膜は厚くなった。", "Your eardrums become thick."), lang("あなたの鼓膜は薄くなった。", "Your eardrums become thin.")
			return 1
		}
		sdata(SKILL_RES_SOUND, CHARA_PLAYER) = limit(sdata(SKILL_RES_SOUND, CHARA_PLAYER) + trait(tid) * 50, sdata(SKILL_RES_SOUND, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_MUTATION_RES_FIRE ) {
		if ( traitmode == 0 ) {
			traitref = 1, -1, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("火炎耐性", "Fire Res+"), lang("あなたの血は滾っている[火炎耐性強化]", "Your blood is boiling. [RES Fire+]")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = lang("火炎弱点", "Fire Res-"), lang("あなたの腕には鳥肌がたっている[火炎耐性弱化]", "Your skin gets gooseflesh.[RES Fire-]")
			}
			traitrefn = lang("あなたの血は滾りだした。", "Your blood starts to boil."), lang("あなたの腕に鳥肌がたった。", "Your skin gets gooseflesh.")
			return 1
		}
		sdata(SKILL_RES_FIRE, CHARA_PLAYER) = limit(sdata(SKILL_RES_FIRE, CHARA_PLAYER) + trait(tid) * 50, sdata(SKILL_RES_FIRE, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_MUTATION_RES_COLD ) {
		if ( traitmode == 0 ) {
			traitref = 1, -1, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("冷気耐性", "Cold Res+"), lang("あなたの皮膚には霜が付いている[冷気耐性強化]", "Your skin is covered by frost.[RES Cold+]")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = lang("冷気弱点", "Cold Res-"), lang("あなたの皮膚は寒さに弱い[冷気耐性弱化]", "Your skin is sheer.[RES Cold-]")
			}
			traitrefn = lang("あなたの皮膚は冷たくなった。", "You feel hot-headed."), lang("あなたは汗をかきはじめた。", "You shiver.")
			return 1
		}
		sdata(SKILL_RES_COLD, CHARA_PLAYER) = limit(sdata(SKILL_RES_COLD, CHARA_PLAYER) + trait(tid) * 50, sdata(SKILL_RES_COLD, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_MUTATION_RES_LIGHTNING ) {
		if ( traitmode == 0 ) {
			traitref = 1, -1, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("電撃耐性", "Lightning Res+"), lang("あなたは非電導体だ[電撃耐性強化]", "You have resistance to lightning.[RES Lightning+]")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = lang("電撃弱点", "Lightning Res-"), lang("あなたの身体は電気を良く通す[電撃耐性弱化]", "You have weakness to lightning.[RES Lightning-]")
			}
			traitrefn = lang("あなたは非電導体になった。", "You gain resistance to lightning."), lang("あなたの身体は電気を良く通す。", "You lose resistance to lightning.")
			return 1
		}
		sdata(SKILL_RES_LIGHTNING, CHARA_PLAYER) = limit(sdata(SKILL_RES_LIGHTNING, CHARA_PLAYER) + trait(tid) * 50, sdata(SKILL_RES_LIGHTNING, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_MUTATION_STAT_PER ) {
		if ( traitmode == 0 ) {
			traitref = 1, -2, 2, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = lang("鷹の目", "Hawk Eye"), lang("あなたは猫の目をしている[感覚+5]", "You have the eyes of a cat. [PER+5]"), lang("あなたは鷹の目をしている[感覚+10]", "You have the eyes of a hawk. [PER+10]")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = lang("色弱", "Color Blind"), lang("あなたは色弱だ[感覚-5]", "You are partially color-blind. [PER-5]"), lang("あなたは片目がない[感覚-10]", "You are blind in one eye. [PER-10]")
			}
			traitrefn = lang("あなたの目は細くなった。", "Your eyes glow."), lang("あなたの視力は低下した。", "Your sight is weakened.")
			return 1
		}
		sdata(SKILL_ATTR_PER, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_PER, CHARA_PLAYER) + trait(tid) * 5, sdata(SKILL_ATTR_PER, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_RACE_RES_FIRE ) {
		if ( traitmode == 0 ) {
			traitref = 2, -2, 2, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたは火炎に耐性がある", "You have resistance to fire."), lang("あなたは火炎にかなりの耐性がある", "You have strong resistance to fire.")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたは火炎に弱い", "You have weakness to fire."), lang("あなたはかなり火炎に弱い", "You have strong weakness to fire.")
			}
			return 1
		}
		sdata(SKILL_RES_FIRE, CHARA_PLAYER) = limit(sdata(SKILL_RES_FIRE, CHARA_PLAYER) + trait(tid) * 50, sdata(SKILL_RES_FIRE, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_RACE_RES_COLD ) {
		if ( traitmode == 0 ) {
			traitref = 2, -2, 2, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたは冷気に耐性がある", "You have resistance to cold."), lang("あなたは冷気にかなりの耐性がある", "You have strong resistance to cold.")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたは冷気に弱い", "You have weakness to cold."), lang("あなたはかなり冷気に弱い", "You have strong weakness to cold.")
			}
			return 1
		}
		sdata(SKILL_RES_COLD, CHARA_PLAYER) = limit(sdata(SKILL_RES_COLD, CHARA_PLAYER) + trait(tid) * 50, sdata(SKILL_RES_COLD, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_RACE_RES_POISON ) {
		if ( traitmode == 0 ) {
			traitref = 2, -2, 2, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたは毒に耐性がある", "You have resistance to poison."), lang("あなたは毒にかなりの耐性がある", "You have strong resistance to poison.")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたは毒に弱い", "You have weakness to poison."), lang("あなたはかなり毒に弱い", "You have strong weakness to poison.")
			}
			return 1
		}
		sdata(SKILL_RES_POISON, CHARA_PLAYER) = limit(sdata(SKILL_RES_POISON, CHARA_PLAYER) + trait(tid) * 50, sdata(SKILL_RES_POISON, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_RACE_RES_DARKNESS ) {
		if ( traitmode == 0 ) {
			traitref = 2, -2, 2, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたは暗黒に耐性がある", "You have resistance to darkness."), lang("あなたは暗黒にかなりの耐性がある", "You have strong resistance to darkness.")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたは暗黒に弱い", "You have weakness to darkness."), lang("あなたはかなり暗黒に弱い", "You have strong weakness to darkness.")
			}
			return 1
		}
		sdata(SKILL_RES_DARKNESS, CHARA_PLAYER) = limit(sdata(SKILL_RES_DARKNESS, CHARA_PLAYER) + trait(tid) * 50, sdata(SKILL_RES_DARKNESS, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_RACE_MAGIC_REACTION ) {
		if ( traitmode == 0 ) {
			traitref = 2, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたはマナの反動を軽減できる", "You take less damages from the mana reaction.")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_RACE_BONUS_RESISTANCE ) {
		if ( traitmode == 0 ) {
			traitref = 2, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたは高い耐性をもっている", "You have outstanding resistances.")
			}
			return 1
		}
		sdata(SKILL_RES_MAGIC, CHARA_PLAYER) = limit(sdata(SKILL_RES_MAGIC, CHARA_PLAYER) + 3 * 50, sdata(SKILL_RES_MAGIC, CHARA_PLAYER) > 0, 9999)
		sdata(SKILL_RES_LIGHTNING, CHARA_PLAYER) = limit(sdata(SKILL_RES_LIGHTNING, CHARA_PLAYER) + 2 * 50, sdata(SKILL_RES_LIGHTNING, CHARA_PLAYER) > 0, 9999)
		sdata(SKILL_RES_DARKNESS, CHARA_PLAYER) = limit(sdata(SKILL_RES_DARKNESS, CHARA_PLAYER) + 4 * 50, sdata(SKILL_RES_DARKNESS, CHARA_PLAYER) > 0, 9999)
		sdata(SKILL_RES_SOUND, CHARA_PLAYER) = limit(sdata(SKILL_RES_SOUND, CHARA_PLAYER) + 1 * 50, sdata(SKILL_RES_SOUND, CHARA_PLAYER) > 0, 9999)
		sdata(SKILL_RES_CHAOS, CHARA_PLAYER) = limit(sdata(SKILL_RES_CHAOS, CHARA_PLAYER) + 2 * 50, sdata(SKILL_RES_CHAOS, CHARA_PLAYER) > 0, 9999)
		sdata(SKILL_RES_MIND, CHARA_PLAYER) = limit(sdata(SKILL_RES_MIND, CHARA_PLAYER) + 4 * 50, sdata(SKILL_RES_MIND, CHARA_PLAYER) > 0, 9999)
		sdata(SKILL_RES_NERVE, CHARA_PLAYER) = limit(sdata(SKILL_RES_NERVE, CHARA_PLAYER) + 2 * 50, sdata(SKILL_RES_NERVE, CHARA_PLAYER) > 0, 9999)
		sdata(SKILL_RES_COLD, CHARA_PLAYER) = limit(sdata(SKILL_RES_COLD, CHARA_PLAYER) + 2 * 50, sdata(SKILL_RES_COLD, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_RACE_WEAK ) {
		if ( traitmode == 0 ) {
			traitref = 2, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたは1s以上の物を装備できない[DV上昇]", "You can't wear equipment weight more than 1s. [DV++]")
			}
			return 1
		}
		if ( cdata(CDATA_DV, CHARA_PLAYER) > 0 ) {
			cdata(CDATA_DV, CHARA_PLAYER) = cdata(CDATA_DV, CHARA_PLAYER) * 125 / 100 + 50
		}
		return 1
	}
	if ( tid == TRAIT_OTHER_WICKED ) {
		if ( traitmode == 0 ) {
			traitref = 2, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたは罪悪感を感じない[カルマ上限-20]", "You don't feel guilty. [Karma limit -20]")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_OTHER_SAINT ) {
		if ( traitmode == 0 ) {
			traitref = 2, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたは良い心を持っている[カルマ上限+20]", "You are a good man. [Karma limit +20]")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_GOD_EHEKATL ) {
		if ( traitmode == 0 ) {
			traitref = 2, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたの周りでは質の高いエンチャントが生成されやすい", "Quality stuff are generated around you.")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_GOD_OPATOS ) {
		if ( traitmode == 0 ) {
			traitref = 2, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたが受ける物理ダメージは軽減される", "You are given physical damage reduction.")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_GOD_ITZPALT ) {
		if ( traitmode == 0 ) {
			traitref = 2, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたの元素魔法は強化されている", "Elemental spells you cast are empowered.")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_GOD_JURE ) {
		if ( traitmode == 0 ) {
			traitref = 2, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたは周囲の狂気を緩和する", "You are surrounded by an aura that cures sanity.")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_OTHER_MOE ) {
		if ( traitmode == 0 ) {
			traitref = 2, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたは萌える", "You moe.")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_RACE_RES_DIM ) {
		if ( traitmode == 0 ) {
			traitref = 2, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたは朦朧状態にならない", "You won't be dim.")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_RACE_SLOW_DIGESTION ) {
		if ( traitmode == 0 ) {
			traitref = 2, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたの食料の消化は遅い", "Your digestion is slow.")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_RACE_BONUS_MATERIAL ) {
		if ( traitmode == 0 ) {
			traitref = 2, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたはより多く採取できる", "You can gather more materials.")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_RACE_BONUS_SKILLPOINT ) {
		if ( traitmode == 0 ) {
			traitref = 2, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたには追加の成長ボーナスが与えられる", "You receive extra bonus points.")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_RACE_RES_MAGIC ) {
		if ( traitmode == 0 ) {
			traitref = 2, -2, 2, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたは魔法に耐性がある", "You have resistance to magic."), lang("あなたは魔法にかなりの耐性がある", "You have strong resistance to magic.")
			}
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたは魔法に弱い", "You have weakness to magic."), lang("あなたはかなり魔法に弱い", "You have strong weakness to magic.")
			}
			return 1
		}
		sdata(SKILL_RES_MAGIC, CHARA_PLAYER) = limit(sdata(SKILL_RES_MAGIC, CHARA_PLAYER) + trait(tid) * 50, sdata(SKILL_RES_MAGIC, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_NORMAL_OTHER_MUTANT ) {
		if ( traitmode == 0 ) {
			traitref = 2, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたの肉体は刻々と変化する", "Your body is changing every moment.")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_RACE_RES_ETHER ) {
		if ( traitmode == 0 ) {
			traitref = 2, 0, 1, 1, 0, 100, -1
			if ( trait(tid) >= 0 ) {
				traitrefn(2) = "", lang("あなたのエーテル病の進行は遅い", "Your body slows the Ether Disease progress.")
			}
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_ETHER_WEIGHT ) {
		if ( traitmode == 0 ) {
			traitref = 3, -3, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたは重力を生み出している[重量+10%]", "You generate gravity. [Weight+10%]"), lang("あなたは大きな重力を生み出している[重量+20%]", "You generate heavy gravity. [Weight+20%]"), lang("あなたはとてつもない重力を生み出している[重量+30%]", "You generate massive gravity. [Weight+30%]")
			}
			traitrefn = lang("あなたの周りの重力は軽減した。", "You wieght less."), lang("あなたは重力を発するようになった。", "You start to generate gravity.")
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_ETHER_SORE_FACE ) {
		if ( traitmode == 0 ) {
			traitref = 3, -3, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたの顔はただれている[魅力" + limit((-1) * (4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 5), -999, 0) + "]", "You have sores on your face. [CHR" + limit((-1) * (4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 5), -999, 0) + "]"), lang("あなたの顔中に蕁麻疹が出ている[魅力" + limit((-2) * (4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 5), -999, 0) + "]", "Your face is ulcerate. [CHR" + limit((-2) * (4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 5), -999, 0) + "]"), lang("あなたの顔は崩れかけている[魅力" + limit((-3) * (4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 5), -999, 0) + "]", "Your face is crumbling. [CHR" + limit((-3) * (4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 5), -999, 0) + "]")
			}
			traitrefn = lang("あなたの顔のただれは軽くなった。", "The swelling in your face decreases."), lang("あなたの顔はただれた。", "Your face is festered.")
			return 1
		}
		sdata(SKILL_ATTR_CHA, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_CHA, CHARA_PLAYER) + limit(trait(tid) * (4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 5), -999, 0), sdata(SKILL_ATTR_CHA, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_ETHER_EQUIP_LEG ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたの足の裏は蹄になっている[足装備不可 速度+" + limit(20 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2, 0, 255) + "]", "Your feet transformed into hooves. [SPD+" + limit(20 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2, 0, 255) + " Can't wear boots]")
			}
			traitrefn = lang("あなたの足は元に戻った。", "Your feet become normal."), lang("あなたの足の裏は蹄に変形した。", "Your feet change into hooves.")
			return 1
		}
		sdata(SKILL_ATTR_SPD, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_SPD, CHARA_PLAYER) + limit(20 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2, 0, 255), sdata(SKILL_ATTR_SPD, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_ETHER_FOUR_EYES ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたの目は4つある[感覚+" + limit(5 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 3, 0, 255) + " 魅力" + limit((5 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 3) * (-1), -255, 0) + "]", "You have 4 eyes. [PER+" + limit(5 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 3, 0, 255) + " CHR" + limit((5 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 3) * (-1), -255, 0) + "]")
			}
			traitrefn = lang("あなたの目は減った。", "Your eyes become normal."), lang("あなたの目は増殖した。", "Your eyes are multipling.")
			return 1
		}
		sdata(SKILL_ATTR_CHA, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_CHA, CHARA_PLAYER) + limit((5 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 3) * (-1), -255, 0), sdata(SKILL_ATTR_CHA, CHARA_PLAYER) > 0, 9999)
		sdata(SKILL_ATTR_PER, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_PER, CHARA_PLAYER) + limit(5 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 3, 0, 255), sdata(SKILL_ATTR_PER, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_ETHER_EQUIP_BACK ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたの背中には羽がある[背中装備不可 重量-20% 速度+" + limit(12 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4, 0, 255) + "]", "You have grown feather. [SPD+" + limit(12 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4, 0, 255) + " Weight-20% Can't wear cloaks]")
			}
			traitrefn = lang("あなたの背中から羽が消えた。", "Your feathers wilt."), lang("あなたの背中に羽が生えた。", "Feathers come out from your back.")
			return 1
		}
		cbitmod CHARA_BIT_FLOAT, CHARA_PLAYER, TRUE
		sdata(SKILL_ATTR_SPD, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_SPD, CHARA_PLAYER) + limit(12 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4, 0, 255), sdata(SKILL_ATTR_SPD, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_ETHER_EQUIP_NECK ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたの首はもの凄く太い[首装備不可 魅力" + limit((5 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 5) * (-1), -255, 0) + " PV+" + limit(12 + cdata(CDATA_LEVEL, CHARA_PLAYER), 0, 255) + "]", "Your neck is extremely thick. [CHR" + limit((5 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 5) * (-1), -255, 0) + " PV+" + limit(12 + cdata(CDATA_LEVEL, CHARA_PLAYER), 0, 255) + " Can't wear amulets]")
			}
			traitrefn = lang("あなたの首は細くなった。", "Your neck becomes thin."), lang("あなたの首は太くなった。", "Your neck becomes extremely thick.")
			return 1
		}
		sdata(SKILL_ATTR_CHA, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_CHA, CHARA_PLAYER) + limit((5 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 5) * (-1), -255, 0), sdata(SKILL_ATTR_CHA, CHARA_PLAYER) > 0, 9999)
		cdata(CDATA_PV, CHARA_PLAYER) += limit(12 + cdata(CDATA_LEVEL, CHARA_PLAYER), 0, 255)
		return 1
	}
	if ( tid == TRAIT_ETHER_VIOLENCE ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたは殺戮に飢えている[被ダメージ修正+" + limit(5 + cdata(CDATA_LEVEL, CHARA_PLAYER) * 2 / 3, 0, 100) / 4 + " 与ダメージ修正+" + limit(5 + cdata(CDATA_LEVEL, CHARA_PLAYER) * 2 / 3, 0, 100) + "]", "Desire for violence arises withn in you. [DV" + limit((15 + cdata(CDATA_LEVEL, CHARA_PLAYER) * 3 / 2) * (-1), -255, 0) + " Dmg bonus+" + limit(5 + cdata(CDATA_LEVEL, CHARA_PLAYER) * 2 / 3, 0, 100) + "]")
			}
			traitrefn = lang("あなたの心は落ち着いた。", " A deep sense of peace fills your heart."), lang("あなたは憎しみに支配された。", "Hatred dominates your soul.")
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_ETHER_HUGE_HEAD ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたの頭は巨大化している[耐久" + limit((5 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 3) * (-1), -255, 0) + " 器用" + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4) * (-1), -255, 0) + " 習得+" + limit(6 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2, 0, 255) + " 意志+" + limit(2 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 6, 0, 255) + "]", "Your head has grown huge. [END" + limit((5 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 3) * (-1), -255, 0) + " DEX" + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4) * (-1), -255, 0) + " LER+" + limit(6 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2, 0, 255) + " WIL+" + limit(2 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 6, 0, 255) + "]")
			}
			traitrefn = lang("あなたの頭は元に戻った。", "Your head is normal size now."), lang("あなたの頭は巨大化した。", "Suddenly your head become giant size.")
			return 1
		}
		sdata(SKILL_ATTR_CON, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_CON, CHARA_PLAYER) + limit((5 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 3) * (-1), -255, 0), sdata(SKILL_ATTR_CON, CHARA_PLAYER) > 0, 9999)
		sdata(SKILL_ATTR_DEX, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_DEX, CHARA_PLAYER) + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4) * (-1), -255, 0), sdata(SKILL_ATTR_DEX, CHARA_PLAYER) > 0, 9999)
		sdata(SKILL_ATTR_LER, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_LER, CHARA_PLAYER) + limit(6 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2, 0, 255), sdata(SKILL_ATTR_LER, CHARA_PLAYER) > 0, 9999)
		sdata(SKILL_ATTR_WIL, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_WIL, CHARA_PLAYER) + limit(2 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 6, 0, 255), sdata(SKILL_ATTR_WIL, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_ETHER_RAIN_CLOUD ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたは雨を呼ぶ[雨天確率上昇]", "Clouds of rain follow you. [Chance of rain+]")
			}
			traitrefn = lang("あなたの頭上から雨雲が消えた。", "Clouds of rain stop following you."), lang("あなたの頭上に雨雲が現れた。", "Clouds of rain start to follow you.")
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_ETHER_ADDICTED_POTION ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたはポーション中毒だ[定期的ポーション消費]", "You are addicted to potion. [Consume potions]")
			}
			traitrefn = lang("あなたのポーション中毒は消えた。", "You are no longer addicted to potion."), lang("あなたはポーション中毒になった。", "Potions! More potions!! Suddenly, You become addicted to potion.")
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_ETHER_DEBILITATION ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたは衰弱している[HP-15% 筋力" + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2) * (-1), -255, 0) + "]", "You suffer debilitation. [HP-15% STR" + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2) * (-1), -255, 0) + "]")
			}
			traitrefn = lang("あなたは健康になった。", "You become healthy again."), lang("あなたは衰弱した。", "You become weak, very weak.")
			return 1
		}
		sdata(SKILL_ATTR_STR, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_STR, CHARA_PLAYER) + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2) * (-1), -255, 0), sdata(SKILL_ATTR_STR, CHARA_PLAYER) > 0, 9999)
		sdata(SKILL_ATTR_LIFE, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_LIFE, CHARA_PLAYER) + (-15), sdata(SKILL_ATTR_LIFE, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_ETHER_DEMENTIA ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたは痴呆になっている[MP-15% 魔力" + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2) * (-1), -255, 0) + "]", "You have dementia. [MP-15% MAG" + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2) * (-1), -255, 0) + "]")
			}
			traitrefn = lang("あなたは明晰になった。", "You become confident again."), lang("あなたはぼけた。", "You become feebleminded.")
			return 1
		}
		sdata(SKILL_ATTR_MAG, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_MAG, CHARA_PLAYER) + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2) * (-1), -255, 0), sdata(SKILL_ATTR_MAG, CHARA_PLAYER) > 0, 9999)
		sdata(SKILL_ATTR_MANA, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_MANA, CHARA_PLAYER) + (-15), sdata(SKILL_ATTR_MANA, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_ETHER_CARAPACE ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたは重い甲殻で覆われている[PV+" + limit(15 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2, 0, 255) + " 速度" + limit((20 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2) * (-1), -255, 0) + "]", "You are covered by heavy carapace. [PV+" + limit(15 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2, 0, 255) + " SPD" + limit((20 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2) * (-1), -255, 0) + "]")
			}
			traitrefn = lang("あなたの皮膚から甲殻が消えた。", "Your carapace starts to break."), lang("あなたの皮膚は甲殻で覆われた。", "Heavy carapace starts to cover up your skin.")
			return 1
		}
		sdata(SKILL_ATTR_SPD, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_SPD, CHARA_PLAYER) + limit((20 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2) * (-1), -255, 0), sdata(SKILL_ATTR_SPD, CHARA_PLAYER) > 0, 9999)
		cdata(CDATA_PV, CHARA_PLAYER) += limit(15 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2, 0, 255)
		return 1
	}
	if ( tid == TRAIT_ETHER_RANDOM_TELEPORT ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたの周囲の空間は捩れている[ランダムテレポート]", "You are unstablizing space around you. [Random teleporation]")
			}
			traitrefn = lang("あなたの周囲の空間は元通りになった。", "You feel steady."), lang("あなたの周囲の空間は捩れた。", "You feel unstable.")
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_ETHER_ABSORB_ROD ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたは生きたマナバッテリーだ[杖から魔力抽出]", "You are a living mana battery. [Absorb mana from rods]")
			}
			traitrefn = lang("あなたのマナは元通りになった。", "You are no longer a living mana battery."), lang("あなたのマナは杖から魔力を抽出する。", "You are a living mana battery.")
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_ETHER_POISON_HANDS ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたの手から毒が滴っている[ポーション毒化 毒耐性強化]", "Poison drips from your hands. [Poison potions RES Poison+]")
			}
			traitrefn = lang("あなたの手は元通りになった。", "Your hands are clean now."), lang("あなたの手から毒が滴り出した。", "Poison starts to drip from your hands.")
			return 1
		}
		sdata(SKILL_RES_POISON, CHARA_PLAYER) = limit(sdata(SKILL_RES_POISON, CHARA_PLAYER) + 100, sdata(SKILL_RES_POISON, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_ETHER_EQUIP_HEAD ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたの頭には獣の耳が生えている[頭装備不可 感覚+" + limit(10 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4, 0, 255) + "]", "Your head is growing in the ears of the beast. [PER+" + limit(10 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4, 0, 255) + " Can't wear helms]")
			}
			traitrefn = lang("あなたの耳は元通りになった。", "Your ears have been restored."), lang("あなたに獣の耳が生えた。", "Ears of the beast grew on your head.")
			return 1
		}
		sdata(SKILL_ATTR_PER, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_PER, CHARA_PLAYER) + limit(10 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4, 0, 255), sdata(SKILL_ATTR_PER, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_ETHER_BONES ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたの骨は飛び出している[体装備不可 切り傷反撃]", "Your bones are popping out. [Deals cut damage to the attacker, Can't wear armors]")
			}
			traitrefn = lang("あなたの骨は元通りになった。", "Your bones have retracted."), lang("あなたの体から鋭い骨が皮膚を突き破って飛び出した。", "Sharp bones from your body pierced through your skin.")
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_ETHER_TAIL ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたには発達した尻尾がある[腰装備不可 器用+" + limit(10 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4, 0, 255) + "]", "You have a developed tail. [DEX+" + limit(10 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4, 0, 255) + " Can't wear girdles]")
			}
			traitrefn = lang("あなたの尻尾は元通りになった。", "Your tail has shrunk."), lang("あなたは尻尾が発達した。", "Your tail has grown.")
			return 1
		}
		sdata(SKILL_ATTR_DEX, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_DEX, CHARA_PLAYER) + limit(10 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4, 0, 255), sdata(SKILL_ATTR_DEX, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_ETHER_BLOOMING_FLOWER ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたには美しい花が咲いている[寄生無効 [治癒" + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2) * (-1), -255, 0) + " 魅力+" + limit(1 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 8, 0, 255) + "]", "The beautiful flower is blooming on you. [Prevents-aliens Healing" + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2) * (-1), -255, 0) + " CHR" + limit(1 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 8, 0, 255) + "]")
			}
			traitrefn = lang("あなたに咲いていた花が散った。", "The flower that was blooming on you scattered."), lang("あなたの皮膚が破れて花が咲いた。", "Your skin has torn and flowers have bloomed.")
			return 1
		}
		sdata(SKILL_NORMAL_HEALING, CHARA_PLAYER) = limit(sdata(SKILL_NORMAL_HEALING, CHARA_PLAYER) + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 2) * (-1), -255, 0), sdata(SKILL_NORMAL_HEALING, CHARA_PLAYER) > 0, 9999)
		sdata(SKILL_ATTR_CHA, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_CHA, CHARA_PLAYER) + limit(1 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 8, 0, 255), sdata(SKILL_ATTR_CHA, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_ETHER_WEBBED ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたには大きな水かきがついている[指装備不可 着衣水泳+" + limit(2 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 6, 0, 255) + "]", "You have a big webbeds. [Swimming+" + limit(2 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 6, 0, 255) + " Can't wear rings]")
			}
			traitrefn = lang("あなたの水かきは元通りになった。", "Your webbed has become smaller."), lang("あなたの指の間に大きな水かきができた。", "Large webbeds were generated between your fingers.")
			return 1
		}
		sdata(SKILL_NORMAL_SWIMMING, CHARA_PLAYER) = limit(sdata(SKILL_NORMAL_SWIMMING, CHARA_PLAYER) + limit(2 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 6, 0, 255), sdata(SKILL_NORMAL_SWIMMING, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_ETHER_THICK_ARMS ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたの腕は胴より太い[腕装備不可 筋力+" + limit(5 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 6, 0, 255) + "]", "Your arms are thicker than your torso. [STR+" + limit(5 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 6, 0, 255) + " Can't wear gloves]")
			}
			traitrefn = lang("あなたの腕は元通りになった。", "Your arms became restored."), lang("あなたの腕が胴より太くなった。", "Your arms become thicker than your torso.")
			return 1
		}
		sdata(SKILL_ATTR_STR, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_STR, CHARA_PLAYER) + limit(5 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 6, 0, 255), sdata(SKILL_ATTR_STR, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_ETHER_BLADE_HANDS ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたの手は刃物になっている[手装備不可 首狩り攻撃会得]", "Your hands are blades. [Can't wear weapons, Available Decapitation]")
			}
			traitrefn = lang("あなたの手は元通りになった。", "Your hands became restored."), lang("あなたの手が鋭い刃物に変化した。", "Your hands has turned into sharp blades.")
			return 1
		}
		return 1
	}
	if ( tid == TRAIT_ETHER_TORN_MOUTH ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたの口は裂けている[魅力" + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 8) * (-1), -255, 0) + " 貪食の牙会得]", "Your mouth is torn. [CHR" + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 8) * (-1), -255, 0) + " Available Voracity Fang]")
			}
			traitrefn = lang("あなたの口は元通りになった。", "Your mouth became restored."), lang("あなたの口が大きく裂けた。", "Your mouth began to torn greatly.")
			return 1
		}
		sdata(SKILL_ATTR_CHA, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_CHA, CHARA_PLAYER) + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 8) * (-1), -255, 0), sdata(SKILL_ATTR_CHA, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_ETHER_MULTIPLE_MOUTHS ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたには口が複数ある[耐久" + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 6) * (-1), -255, 0) + " 食事ターン半減]", "You have multiple mouths. [END" + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 6) * (-1), -255, 0) + " Halve eating turn]")
			}
			traitrefn = lang("あなたの口は元通りの数になった。", "Your mouth has returned to its original number."), lang("あなたの皮膚が割れて新たな口が形成された。", "Your skin cracked and a new mouth was formed.")
			return 1
		}
		sdata(SKILL_ATTR_CON, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_CON, CHARA_PLAYER) + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 6) * (-1), -255, 0), sdata(SKILL_ATTR_CON, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_ETHER_ABNORMAL_LIBIDO ) {
		if ( traitmode == 0 ) {
			traitref = 3, -1, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたの精力は異常だ[SP+20% 意志" + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4) * (-1), -255, 0) + " 習得" + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4) * (-1), -255, 0) + "]", "Your libido is abnormal. [SP+20% WIL" + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4) * (-1), -255, 0) + " LER" + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4) * (-1), -255, 0) + "]")
			}
			traitrefn = lang("あなたの精力は元通りになった。", "Your libido has subsided."), lang("あなたは精力が病的なまでにみなぎってきた。", "You have full of libido pathologically.")
			return 1
		}
		sdata(SKILL_ATTR_WIL, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_WIL, CHARA_PLAYER) + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4) * (-1), -255, 0), sdata(SKILL_ATTR_WIL, CHARA_PLAYER) > 0, 9999)
		sdata(SKILL_ATTR_LER, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_LER, CHARA_PLAYER) + limit((4 + cdata(CDATA_LEVEL, CHARA_PLAYER) / 4) * (-1), -255, 0), sdata(SKILL_ATTR_LER, CHARA_PLAYER) > 0, 9999)
		return 1
	}
	if ( tid == TRAIT_ETHER_TENTACLES ) {
		if ( traitmode == 0 ) {
			traitref = 3, -2, 0, 1, 0, 100, -1
			if ( trait(tid) < 0 ) {
				traitrefn(2) = "", lang("あなたには細い触手が生えている[戦闘・干渉時に触手暴走]", "Thin tentacles are growing from you. [Tentacles runaway during battle and interference]"), lang("あなたには太い触手が生えている[戦闘・干渉時に強触手暴走]", "Thick tentacles are growing from you. [Strong tentacles runaway during battle and interference]")
			}
			traitrefn = lang("あなたの触手はしなびた。", "Your tentacles have shrunk."), lang("あなたの体から触手が生えてきた。", "Tentacles have grown from your body.")
			return 1
		}
		return 1
	}
	return 0

*cm_putTrait
	if ( cdatan(CDATAN_RACE, CHARA_PLAYER) == "dwarf" ) {
		trait(TRAIT_RACE_RES_POISON) = 2
		trait(TRAIT_RACE_RES_DARKNESS) = 1
	}
	if ( cdatan(CDATAN_RACE, CHARA_PLAYER) == "elea" ) {
		trait(TRAIT_RACE_RES_ETHER) = 1
		trait(TRAIT_RACE_MAGIC_REACTION) = 1
	}
	if ( cdatan(CDATAN_RACE, CHARA_PLAYER) == "eulderna" ) {
		trait(TRAIT_RACE_RES_MAGIC) = 1
	}
	if ( cdatan(CDATAN_RACE, CHARA_PLAYER) == "lich" ) {
		trait(TRAIT_RACE_RES_COLD) = 1
		trait(TRAIT_RACE_RES_DARKNESS) = 2
		trait(TRAIT_RACE_RES_POISON) = 1
	}
	if ( cdatan(CDATAN_RACE, CHARA_PLAYER) == "golem" ) {
		trait(TRAIT_RACE_RES_DIM) = 1
		trait(TRAIT_RACE_RES_POISON) = 2
	}
	if ( cdatan(CDATAN_RACE, CHARA_PLAYER) == "yerles" ) {
		trait(TRAIT_RACE_BONUS_SKILLPOINT) = 1
	}
	if ( cdatan(CDATAN_RACE, CHARA_PLAYER) == "juere" ) {
		trait(TRAIT_RACE_SLOW_DIGESTION) = 1
		trait(TRAIT_RACE_BONUS_MATERIAL) = 1
	}
	if ( cdatan(CDATAN_RACE, CHARA_PLAYER) == "goblin" ) {
		trait(TRAIT_RACE_RES_DARKNESS) = 1
		trait(TRAIT_RACE_BONUS_MATERIAL) = 1
	}
	if ( cdatan(CDATAN_RACE, CHARA_PLAYER) == "mutant" ) {
		trait(TRAIT_NORMAL_OTHER_MUTANT) = 1
	}
	if ( cdatan(CDATAN_RACE, CHARA_PLAYER) == "fairy" ) {
		trait(TRAIT_RACE_BONUS_RESISTANCE) = 1
		trait(TRAIT_RACE_WEAK) = 1
	}
	return
	goto *label_0049

#defcfunc ibit int ibit_bit, int ibit_itemid
	HMMBITCHECK inv(35 + ibit_bit / 32, ibit_itemid), ibit_bit \ 32
	return stat

#deffunc ibitmod int ibitmod_bit, int ibitmod_itemid, int ibitmod_seton
	if ( ibitmod_seton == FALSE ) {
		HMMBITOFF inv(35 + ibitmod_bit / 32, ibitmod_itemid), ibitmod_bit \ 32
		return
	}
	HMMBITON inv(35 + ibitmod_bit / 32, ibitmod_itemid), ibitmod_bit \ 32
	return
	return

*label_0049
	goto *label_0051

#defcfunc refitem int refitem_dbid, int refitem_dbspec
	dbmode = DBMODE_REF_SPEC
	dbid = refitem_dbid
	dbspec = refitem_dbspec
	gosub *db_item
	return stat

*label_0051
	goto *label_0053

#defcfunc iequiploc int iequiploc_itemid
	locvar_iequiploc_p = refitem(inv(INV_ITEM_ID, iequiploc_itemid), DBSPEC_TYPE)
	if ( locvar_iequiploc_p == 12000 ) {
		return 1
	}
	if ( locvar_iequiploc_p == 34000 ) {
		return 2
	}
	if ( locvar_iequiploc_p == 20000 ) {
		return 3
	}
	if ( locvar_iequiploc_p == 16000 ) {
		return 4
	}
	if ( locvar_iequiploc_p == 10000 ) {
		return 5
	}
	if ( locvar_iequiploc_p == 14000 ) {
		return 5
	}
	if ( locvar_iequiploc_p == 32000 ) {
		return 6
	}
	if ( locvar_iequiploc_p == 22000 ) {
		return 7
	}
	if ( locvar_iequiploc_p == 18000 ) {
		return 9
	}
	if ( locvar_iequiploc_p == 24000 ) {
		return 10
	}
	if ( locvar_iequiploc_p == 25000 ) {
		return 11
	}
	if ( locvar_iequiploc_p == 19000 ) {
		return 8
	}
	return 0

*label_0053
	goto *label_0059

#deffunc setunid int setunid_charid, int setunid_unid
	cdata(CDATA_USERNPC_ID, setunid_charid) = setunid_unid
	if ( cdata(CDATA_PIC, setunid_charid) < xy2pic(0, 21) | cdata(CDATA_PIC, setunid_charid) > xy2pic(31, 21) ) {
		cdata(CDATA_PIC, setunid_charid) = 1122 + setunid_unid
		cdata(CDATA_PIC, setunid_charid) += 0 * 1000
		cdata(CDATA_CHARA_PIC, setunid_charid) = xy2pic(1, 0)
	}
	return

#deffunc getunid int getunid_charid
	locvar_getunid_f = 0
	repeat usernpcmax
		if ( cdatan(CDATAN_USER_NPC_TAG, getunid_charid) == userdatan(0, cnt) ) {
			setunid getunid_charid, cnt
			locvar_getunid_f = 1
			break
		}
	loop
	if ( locvar_getunid_f == 0 ) {
		cdata(CDATA_PIC, getunid_charid) = 0 * 1000 + 1
		cdata(CDATA_USERNPC_ID, getunid_charid) = usernpcmax
		cdatan(CDATAN_NAME, getunid_charid) = lang("残りカス", "a garbage")
	}
	return locvar_getunid_f

#defcfunc findunid str findunid_arg1
	locvar_getunid_f = 0
	repeat usernpcmax
		if ( findunid_arg1 == userdatan(0, cnt) ) {
			locvar_getunid_f = 1 + cnt
			break
		}
	loop
	return locvar_getunid_f

*label_0059
	goto *label_0061

#defcfunc synccheck int synccheck_arg1, int synccheck_arg2
	if ( synccheck_arg2 == (-1) ) {
		if ( cdata(CDATA_IN_TAGTEAM, synccheck_arg1) == 1 ) {
			return 1
		}
	}
	if ( synccheck_arg2 == (-1) ) {
		return cdata(CDATA_SYNC, synccheck_arg1) == msync | synccheck_arg1 == gdata(GDATA_RIDER)
	}
	if ( mapsync(synccheck_arg1, synccheck_arg2) == msync ) {
		return 1
	}
	return 0

*label_0061
	goto *label_0063

#defcfunc evid
	if ( evnum <= 0 ) {
		return -1
	}
	return evlist(evnum - 1)

*label_0063
	goto *label_0067

#defcfunc evfind int evfind_eventid
	locvar_evfind_f = 0
	repeat evnum
		if ( evlist(cnt) == evfind_eventid ) {
			locvar_evfind_f = 1
		}
	loop
	return locvar_evfind_f

#deffunc evadd int evadd_evid, int evadd_param1, int evadd_param2
	if ( evproc ) {
		evlist(evnum) = evlist(evnum - 1)
		evdata1(evnum) = evdata1(evnum - 1)
		evdata2(evnum) = evdata2(evnum - 1)
		evlist(evnum - 1) = evadd_evid
		evdata1(evnum - 1) = evadd_param1
		evdata2(evnum - 1) = evadd_param2
	}
	else {
		evlist(evnum) = evadd_evid
		evdata1(evnum) = evadd_param1
		evdata2(evnum) = evadd_param2
	}
	evnum++
	return

*label_0067
	goto *sound_init

#deffunc sndload str sndload_filepath, int sndload_sound_id
	if ( sndload_sound_id < 7 ) {
		if ( cfg_sound == 1 ) {
			DSLOADFNAME sndload_filepath, sndload_sound_id
		}
		else {
			mmload sndload_filepath, sndload_sound_id
		}
	}
	soundfile(sndload_sound_id) = sndload_filepath
	return

#deffunc musicload str musicload_arg1, int musicload_arg2
	musicfile(musicload_arg2) = musicload_arg1
	return

#deffunc snd int snd_sound_id, int snd_looping, int snd_stop_if_playing
	if ( cfg_sound == 0 ) {
		return
	}
	locvar_snd_sound = snd_sound_id
	if ( locvar_snd_sound > 7 ) {
		if ( snd_looping ) {
			locvar_snd_sound = 7 + 6
			if ( snd_sound_id == SOUNDLIST_BG_SEA ) {
				locvar_snd_sound = 7 + 6 + 1
			}
			if ( snd_sound_id == SOUNDLIST_BG_TOWN ) {
				locvar_snd_sound = 7 + 6 + 2
			}
			if ( snd_sound_id == SOUNDLIST_BG_FIRE ) {
				locvar_snd_sound = 7 + 6 + 3
			}
		}
		else {
			locvar_snd_sound = 7
			locvar_snd_f = 0
			if ( snd_stop_if_playing ) {
				repeat 6, 7
					CHECKPLAY cnt
					if ( stat ) {
						if ( soundlist(cnt - 7) == locvar_snd_sound ) {
							locvar_snd_sound = cnt
							locvar_snd_f = 1
							break
						}
					}
				loop
			}
			if ( locvar_snd_f == 0 ) {
				repeat 6, 7
					CHECKPLAY cnt
					if ( stat == 0 ) {
						locvar_snd_sound = cnt
						soundlist(cnt - 7) = locvar_snd_sound
					}
				loop
			}
		}
		if ( cfg_sound == 1 ) {
			DSLOADFNAME soundfile(snd_sound_id), locvar_snd_sound
		}
		else {
			mmload soundfile(snd_sound_id), locvar_snd_sound
		}
	}
	if ( cfg_sound == 1 ) {
		DSPLAY locvar_snd_sound, snd_looping
	}
	else {
		mmplay locvar_snd_sound
	}
	return

*sound_init
	dim soundlist, 6
	if ( cfg_sound == 1 ) {
		DSGETMASTERVOLUME
		cfg_svolume = stat
	}
	folder = exedir + "sound\\"
	sndload folder + "exitmap1.wav", SOUNDLIST_EXITMAP1
	sndload folder + "book1.wav", SOUNDLIST_BOOK1
	sndload folder + "write1.wav", SOUNDLIST_WRITE1
	sndload folder + "pop1.wav", SOUNDLIST_POP1
	sndload folder + "kill1.wav", SOUNDLIST_KILL1
	sndload folder + "kill2.wav", SOUNDLIST_KILL2
	sndload folder + "trap1.wav", SOUNDLIST_TRAP1
	sndload folder + "more1.wav", SOUNDLIST_MORE1
	sndload folder + "getgold1.wav", SOUNDLIST_GETGOLD1
	sndload folder + "paygold1.wav", SOUNDLIST_PAYGOLD1
	sndload folder + "equip1.wav", SOUNDLIST_EQUIP1
	sndload folder + "get1.wav", SOUNDLIST_GET1
	sndload folder + "get2.wav", SOUNDLIST_GET2
	sndload folder + "drop1.wav", SOUNDLIST_DROP1
	sndload folder + "drink1.wav", SOUNDLIST_DRINK1
	sndload folder + "eat1.wav", SOUNDLIST_EAT1
	sndload folder + "spend1.wav", SOUNDLIST_SPEND1
	sndload folder + "ding1.wav", SOUNDLIST_DING1
	sndload folder + "ding3.wav", SOUNDLIST_DING3
	sndload folder + "dead1.wav", SOUNDLIST_DEAD1
	sndload folder + "ok1.wav", SOUNDLIST_OK1
	sndload folder + "dig1.wav", SOUNDLIST_DIG1
	sndload folder + "bash1.wav", SOUNDLIST_BASH1
	sndload folder + "complete1.wav", SOUNDLIST_COMPLETE1
	sndload folder + "alert1.wav", SOUNDLIST_ALERT1
	sndload folder + "locked1.wav", SOUNDLIST_LOCKED1
	sndload folder + "chest1.wav", SOUNDLIST_CHEST1
	sndload folder + "ding2.wav", SOUNDLIST_DING2
	sndload folder + "cook1.wav", SOUNDLIST_COOK1
	sndload folder + "pop2.wav", SOUNDLIST_POP2
	sndload folder + "fail1.wav", SOUNDLIST_FAIL1
	sndload folder + "build1.wav", SOUNDLIST_BUILD1
	sndload folder + "bow1.wav", SOUNDLIST_BOW1
	sndload folder + "atk1.wav", SOUNDLIST_ATK1
	sndload folder + "atk2.wav", SOUNDLIST_ATK2
	sndload folder + "gun1.wav", SOUNDLIST_GUN1
	sndload folder + "throw1.wav", SOUNDLIST_THROW1
	sndload folder + "heart1.wav", SOUNDLIST_HEART1
	sndload folder + "heal1.wav", SOUNDLIST_HEAL1
	sndload folder + "teleport1.wav", SOUNDLIST_TELEPORT1
	sndload folder + "ball1.wav", SOUNDLIST_BALL1
	sndload folder + "breath1.wav", SOUNDLIST_BREATH1
	sndload folder + "bolt1.wav", SOUNDLIST_BOLT1
	sndload folder + "arrow1.wav", SOUNDLIST_ARROW1
	sndload folder + "curse1.wav", SOUNDLIST_CURSE1
	sndload folder + "pop3.wav", SOUNDLIST_POP3
	sndload folder + "chime.wav", SOUNDLIST_CHIME
	sndload folder + "laser1.wav", SOUNDLIST_LASER1
	sndload folder + "web.wav", SOUNDLIST_WEB
	sndload folder + "cheer.wav", SOUNDLIST_CHEER
	sndload folder + "door1.wav", SOUNDLIST_DOOR1
	sndload folder + "crush1.wav", SOUNDLIST_CRUSH1
	sndload folder + "crush2.wav", SOUNDLIST_CRUSH2
	sndload folder + "fire1.wav", SOUNDLIST_FIRE1
	sndload folder + "snow.wav", SOUNDLIST_SNOW
	sndload folder + "fish_cast.wav", SOUNDLIST_FISH_CAST
	sndload folder + "fish_get.wav", SOUNDLIST_FISH_GET
	sndload folder + "fish_fight.wav", SOUNDLIST_FISH_FIGHT
	sndload folder + "ammo.wav", SOUNDLIST_AMMO
	sndload folder + "throw2.wav", SOUNDLIST_THROW2
	sndload folder + "foot1a.wav", SOUNDLIST_FOOT1A
	sndload folder + "foot2a.wav", SOUNDLIST_FOOT2A
	sndload folder + "foot1b.wav", SOUNDLIST_FOOT1B
	sndload folder + "foot2b.wav", SOUNDLIST_FOOT2B
	sndload folder + "foot2c.wav", SOUNDLIST_FOOT2C
	sndload folder + "click1.wav", SOUNDLIST_CLICK1
	sndload folder + "get3.wav", SOUNDLIST_GET3
	sndload folder + "card1.wav", SOUNDLIST_CARD1
	sndload folder + "water.wav", SOUNDLIST_WATER
	sndload folder + "water2.wav", SOUNDLIST_WATER2
	sndload folder + "dig2.wav", SOUNDLIST_DIG2
	sndload folder + "bush1.wav", SOUNDLIST_BUSH1
	sndload folder + "gasha.wav", SOUNDLIST_GASHA
	sndload folder + "cursor1.wav", SOUNDLIST_CURSOR1
	sndload folder + "pop4.wav", SOUNDLIST_POP4
	sndload folder + "punish1.wav", SOUNDLIST_PUNISH1
	sndload folder + "pray1.wav", SOUNDLIST_PRAY1
	sndload folder + "offer1.wav", SOUNDLIST_OFFER1
	sndload folder + "fizzle.wav", SOUNDLIST_FIZZLE
	sndload folder + "door2.wav", SOUNDLIST_DOOR2
	sndload folder + "foot.wav", SOUNDLIST_FOOT
	sndload folder + "miss.wav", SOUNDLIST_MISS
	sndload folder + "night.wav", SOUNDLIST_NIGHT
	sndload folder + "bg_rain.wav", SOUNDLIST_BG_RAIN
	sndload folder + "bg_thunder.wav", SOUNDLIST_BG_THUNDER
	sndload folder + "bg_wind.wav", SOUNDLIST_BG_WIND
	sndload folder + "bg_sea.wav", SOUNDLIST_BG_SEA
	sndload folder + "bg_town.wav", SOUNDLIST_BG_TOWN
	sndload folder + "bg_fire.wav", SOUNDLIST_BG_FIRE
	sndload folder + "scroll.wav", SOUNDLIST_SCROLL
	sndload folder + "log.wav", SOUNDLIST_LOG
	sndload folder + "chara.wav", SOUNDLIST_CHARA
	sndload folder + "wear.wav", SOUNDLIST_WEAR
	sndload folder + "feat.wav", SOUNDLIST_FEAT
	sndload folder + "port.wav", SOUNDLIST_PORT
	sndload folder + "unpop1.wav", SOUNDLIST_UNPOP1
	sndload folder + "chat.wav", SOUNDLIST_CHAT
	sndload folder + "inv.wav", SOUNDLIST_INV
	sndload folder + "skill.wav", SOUNDLIST_SKILL
	sndload folder + "spell.wav", SOUNDLIST_SPELL
	sndload folder + "dice.wav", SOUNDLIST_DICE
	sndload folder + "vomit.wav", SOUNDLIST_VOMIT
	sndload folder + "atksword.wav", SOUNDLIST_ATKSWORD
	sndload folder + "atk_ice.wav", SOUNDLIST_ATK_ICE
	sndload folder + "atk_elec.wav", SOUNDLIST_ATK_ELEC
	sndload folder + "atk_fire.wav", SOUNDLIST_ATK_FIRE
	sndload folder + "atk_hell.wav", SOUNDLIST_ATK_HELL
	sndload folder + "atk_poison.wav", SOUNDLIST_ATK_POISON
	sndload folder + "atk_nerve.wav", SOUNDLIST_ATK_NERVE
	sndload folder + "atk_sound.wav", SOUNDLIST_ATK_SOUND
	sndload folder + "atk_mind.wav", SOUNDLIST_ATK_MIND
	sndload folder + "atk_chaos.wav", SOUNDLIST_ATK_CHAOS
	sndload folder + "atk_dark.wav", SOUNDLIST_ATK_DARK
	sndload folder + "curse2.wav", SOUNDLIST_CURSE2
	sndload folder + "curse3.wav", SOUNDLIST_CURSE3
	sndload folder + "enc.wav", SOUNDLIST_ENC
	sndload folder + "enc2.wav", SOUNDLIST_ENC2
	sndload folder + "pray2.wav", SOUNDLIST_PRAY2
	sndload folder + "offer2.wav", SOUNDLIST_OFFER2
	sndload folder + "gong.wav", SOUNDLIST_GONG
	sndload folder + "slap.wav", SOUNDLIST_SLAP
	sndload folder + "ceffect.wav", seceffect
	sndload folder + "rain.wav", SOUNDLIST_RAIN
	sndload folder + "wave.wav", SOUNDLIST_WAVE
	sndload folder + "whistle.wav", SOUNDLIST_WHISTLE
	sndload folder + "quizbad.wav", SOUNDLIST_QUIZBAD
	sndload folder + "power.wav", SOUNDLIST_POWER
	sndload folder + "piano1.wav", SOUNDLIST_PIANO1
	sndload folder + "piano2b.wav", SOUNDLIST_PIANO2B
	sndload folder + "piano3.wav", SOUNDLIST_PIANO3
	sndload folder + "piano4b.wav", SOUNDLIST_PIANO4B
	sndload folder + "piano5.wav", SOUNDLIST_PIANO5
	sndload folder + "piano6.wav", SOUNDLIST_PIANO6
	sndload folder + "piano7b.wav", SOUNDLIST_PIANO7B
	sndload folder + "piano8.wav", SOUNDLIST_PIANO8
	sndload folder + "piano9b.wav", SOUNDLIST_PIANO9B
	sndload folder + "piano10.wav", SOUNDLIST_PIANO10
	sndload folder + "piano11b.wav", SOUNDLIST_PIANO11B
	sndload folder + "piano12.wav", SOUNDLIST_PIANO12
	sndload folder + "piano13.wav", SOUNDLIST_PIANO13
	sndload folder + "piano14b.wav", SOUNDLIST_PIANO14B
	sndload folder + "piano15.wav", SOUNDLIST_PIANO15
	sndload folder + "piano16b.wav", SOUNDLIST_PIANO16B
	sndload folder + "piano17.wav", SOUNDLIST_PIANO17
	sndload folder + "piano18.wav", SOUNDLIST_PIANO18
	sndload folder + "piano19b.wav", SOUNDLIST_PIANO19B
	sndload folder + "piano20.wav", SOUNDLIST_PIANO20
	sndload folder + "piano21b.wav", SOUNDLIST_PIANO21B
	sndload folder + "piano22.wav", SOUNDLIST_PIANO22
	sndload folder + "piano23b.wav", SOUNDLIST_PIANO23B
	sndload folder + "piano24.wav", SOUNDLIST_PIANO24
	sndload folder + "sonic.wav", SOUNDLIST_SONIC
	sndload folder + "shots.wav", SOUNDLIST_SHOTS
	sndload folder + "stab.wav", SOUNDLIST_STAB
	sndload folder + "mizu.wav", SOUNDLIST_MIZU
	sndload folder + "buble.wav", SOUNDLIST_BUBLE
	sndload folder + "scream.wav", SOUNDLIST_SCREAM
	sndload folder + "swing.wav", SOUNDLIST_SWING
	sndload folder + "beast02.wav", SOUNDLIST_BEAST02
	sndload folder + "mind000.wav", SOUNDLIST_MIND000
	sndload folder + "load.wav", SOUNDLIST_LOAD
	sndload folder + "explosion.wav", SOUNDLIST_EXPLOSION
	sndload folder + "clap2f.wav", SOUNDLIST_CLAP2F
	sndload folder + "clap4f.wav", SOUNDLIST_CLAP4F
	sndload folder + "chime000r.wav", SOUNDLIST_CHIME000R
	sndload folder + "gunshot1.wav", SOUNDLIST_GUNSHOT1
	sndload folder + "gunshot3.wav", SOUNDLIST_GUNSHOT3
	sndload folder + "crack.wav", SOUNDLIST_CRACK
	sndload folder + "crack2.wav", SOUNDLIST_CRACK2
	sndload folder + "attack00.wav", SOUNDLIST_ATTACK00
	sndload folder + "bom03.wav", SOUNDLIST_BOM03
	sndload folder + "bom06.wav", SOUNDLIST_BOM06
	sndload folder + "bom15.wav", SOUNDLIST_BOM15
	sndload folder + "swing39.wav", SOUNDLIST_SWING39
	sndload folder + "mecha20.wav", SOUNDLIST_MECHA20
	sndload folder + "waterm.wav", SOUNDLIST_WATERM
	sndload folder + "drag01.wav", SOUNDLIST_DRAG01
	sndload folder + "inanaki.wav", SOUNDLIST_INANAKI
	sndload folder + "car-horn1.wav", SOUNDLIST_CAR_HORN1
	sndload folder + "locomo.wav", SOUNDLIST_LOCOMO
	sndload folder + "siren.wav", SOUNDLIST_SIREN
	sndload folder + "power07.wav", SOUNDLIST_POWER07
	sndload folder + "taore08.wav", SOUNDLIST_TAORE08
	sndload folder + "tm2_switch001.wav", SOUNDLIST_TM2_SWITCH001
	sndload folder + "tm2_hit000.wav", SOUNDLIST_TM2_HIT000
	sndload folder + "freeze01.wav", SOUNDLIST_FREEZE01
	sndload folder + "tm2_alchemist000.wav", SOUNDLIST_TM2_ALCHEMIST000
	sndload folder + "kachi08.wav", SOUNDLIST_KACHI08
	sndload folder + "smoke03.wav", SOUNDLIST_SMOKE03
	sndload folder + "tm2_river000.wav", SOUNDLIST_TM2_RIVER000
	sndload folder + "tm2_river001.wav", SOUNDLIST_TM2_RIVER001
	folder = exedir + "user\\sound\\"
	sndload folder + "se0.wav", SOUNDLIST_USER_SE00
	sndload folder + "se1.wav", SOUNDLIST_USER_SE01
	sndload folder + "se2.wav", SOUNDLIST_USER_SE02
	sndload folder + "se3.wav", SOUNDLIST_USER_SE03
	sndload folder + "se4.wav", SOUNDLIST_USER_SE04
	sndload folder + "se5.wav", SOUNDLIST_USER_SE05
	sndload folder + "se6.wav", SOUNDLIST_USER_SE06
	sndload folder + "se7.wav", SOUNDLIST_USER_SE07
	sndload folder + "se8.wav", SOUNDLIST_USER_SE08
	sndload folder + "se9.wav", SOUNDLIST_USER_SE09
	sndload folder + "se10.wav", SOUNDLIST_USER_SE10
	sndload folder + "se11.wav", SOUNDLIST_USER_SE11
	sndload folder + "se12.wav", SOUNDLIST_USER_SE12
	sndload folder + "se13.wav", SOUNDLIST_USER_SE13
	sndload folder + "se14.wav", SOUNDLIST_USER_SE14
	sndload folder + "se15.wav", SOUNDLIST_USER_SE15
	sndload folder + "se16.wav", SOUNDLIST_USER_SE16
	sndload folder + "se17.wav", SOUNDLIST_USER_SE17
	sndload folder + "se18.wav", SOUNDLIST_USER_SE18
	sndload folder + "se19.wav", SOUNDLIST_USER_SE19
	sndload folder + "se20.wav", SOUNDLIST_USER_SE20
	sndload folder + "se21.wav", SOUNDLIST_USER_SE21
	sndload folder + "se22.wav", SOUNDLIST_USER_SE22
	sndload folder + "se23.wav", SOUNDLIST_USER_SE23
	sndload folder + "se24.wav", SOUNDLIST_USER_SE24
	sndload folder + "se25.wav", SOUNDLIST_USER_SE25
	sndload folder + "se26.wav", SOUNDLIST_USER_SE26
	sndload folder + "se27.wav", SOUNDLIST_USER_SE27
	sndload folder + "se28.wav", SOUNDLIST_USER_SE28
	sndload folder + "se29.wav", SOUNDLIST_USER_SE29
	sndload folder + "se30.wav", SOUNDLIST_USER_SE30
	sndload folder + "se31.wav", SOUNDLIST_USER_SE31
	sndload folder + "se32.wav", SOUNDLIST_USER_SE32
	sndload folder + "se33.wav", SOUNDLIST_USER_SE33
	sndload folder + "se34.wav", SOUNDLIST_USER_SE34
	sndload folder + "se35.wav", SOUNDLIST_USER_SE35
	sndload folder + "se36.wav", SOUNDLIST_USER_SE36
	sndload folder + "se37.wav", SOUNDLIST_USER_SE37
	sndload folder + "se38.wav", SOUNDLIST_USER_SE38
	sndload folder + "se39.wav", SOUNDLIST_USER_SE39
	sndload folder + "se40.wav", SOUNDLIST_USER_SE40
	sndload folder + "se41.wav", SOUNDLIST_USER_SE41
	sndload folder + "se42.wav", SOUNDLIST_USER_SE42
	sndload folder + "se43.wav", SOUNDLIST_USER_SE43
	sndload folder + "se44.wav", SOUNDLIST_USER_SE44
	sndload folder + "se45.wav", SOUNDLIST_USER_SE45
	sndload folder + "se46.wav", SOUNDLIST_USER_SE46
	sndload folder + "se47.wav", SOUNDLIST_USER_SE47
	sndload folder + "se48.wav", SOUNDLIST_USER_SE48
	sndload folder + "se49.wav", SOUNDLIST_USER_SE49
	sndload folder + "se50.wav", SOUNDLIST_USER_SE50
	sndload folder + "se51.wav", SOUNDLIST_USER_SE51
	sndload folder + "se52.wav", SOUNDLIST_USER_SE52
	sndload folder + "se53.wav", SOUNDLIST_USER_SE53
	sndload folder + "se54.wav", SOUNDLIST_USER_SE54
	sndload folder + "se55.wav", SOUNDLIST_USER_SE55
	sndload folder + "se56.wav", SOUNDLIST_USER_SE56
	sndload folder + "se57.wav", SOUNDLIST_USER_SE57
	sndload folder + "se58.wav", SOUNDLIST_USER_SE58
	sndload folder + "se59.wav", SOUNDLIST_USER_SE59
	sndload folder + "se60.wav", SOUNDLIST_USER_SE60
	sndload folder + "se61.wav", SOUNDLIST_USER_SE61
	sndload folder + "se62.wav", SOUNDLIST_USER_SE62
	sndload folder + "se63.wav", SOUNDLIST_USER_SE63
	sndload folder + "se64.wav", SOUNDLIST_USER_SE64
	sndload folder + "se65.wav", SOUNDLIST_USER_SE65
	sndload folder + "se66.wav", SOUNDLIST_USER_SE66
	sndload folder + "se67.wav", SOUNDLIST_USER_SE67
	sndload folder + "se68.wav", SOUNDLIST_USER_SE68
	sndload folder + "se69.wav", SOUNDLIST_USER_SE69
	sndload folder + "se70.wav", SOUNDLIST_USER_SE70
	sndload folder + "se71.wav", SOUNDLIST_USER_SE71
	sndload folder + "se72.wav", SOUNDLIST_USER_SE72
	sndload folder + "se73.wav", SOUNDLIST_USER_SE73
	sndload folder + "se74.wav", SOUNDLIST_USER_SE74
	sndload folder + "se75.wav", SOUNDLIST_USER_SE75
	sndload folder + "se76.wav", SOUNDLIST_USER_SE76
	sndload folder + "se77.wav", SOUNDLIST_USER_SE77
	sndload folder + "se78.wav", SOUNDLIST_USER_SE78
	sndload folder + "se79.wav", SOUNDLIST_USER_SE79
	sndload folder + "se80.wav", SOUNDLIST_USER_SE80
	sndload folder + "se81.wav", SOUNDLIST_USER_SE81
	sndload folder + "se82.wav", SOUNDLIST_USER_SE82
	sndload folder + "se83.wav", SOUNDLIST_USER_SE83
	sndload folder + "se84.wav", SOUNDLIST_USER_SE84
	sndload folder + "se85.wav", SOUNDLIST_USER_SE85
	sndload folder + "se86.wav", SOUNDLIST_USER_SE86
	sndload folder + "se87.wav", SOUNDLIST_USER_SE87
	sndload folder + "se88.wav", SOUNDLIST_USER_SE88
	sndload folder + "se89.wav", SOUNDLIST_USER_SE89
	sndload folder + "se90.wav", SOUNDLIST_USER_SE90
	sndload folder + "se91.wav", SOUNDLIST_USER_SE91
	sndload folder + "se92.wav", SOUNDLIST_USER_SE92
	sndload folder + "se93.wav", SOUNDLIST_USER_SE93
	sndload folder + "se94.wav", SOUNDLIST_USER_SE94
	sndload folder + "se95.wav", SOUNDLIST_USER_SE95
	sndload folder + "se96.wav", SOUNDLIST_USER_SE96
	sndload folder + "se97.wav", SOUNDLIST_USER_SE97
	sndload folder + "se98.wav", SOUNDLIST_USER_SE98
	sndload folder + "se99.wav", SOUNDLIST_USER_SE99
	return

*music_init
	s = exedir + "user\\music\\musiclist.txt"
	exist s
	if ( strsize == (-1) ) {
		return
	}
	notesel buff
	noteload s
	repeat noteinfo(0)
		noteget s, cnt
		if ( s == "" ) {
			continue
		}
		musicfile(cnt + 50) = strmid(s, 0, instr(s, 0, "\t"))
	loop
	return

*music_play
	procid = (procid + 1) \ 4
	proclist(procid) = "Music" + " ct:" + ct
	env = SOUNDLIST_NONE
	if ( gdata(GDATA_WEATHER) == WEATHER_RAIN ) {
		env = SOUNDLIST_BG_RAIN
	}
	if ( gdata(GDATA_WEATHER) == WEATHER_HARD_RAIN ) {
		env = SOUNDLIST_BG_THUNDER
	}
	if ( gdata(GDATA_WEATHER) == WEATHER_ETHER ) {
		env = SOUNDLIST_BG_WIND
	}
	if ( gdata(GDATA_AREA) == AREA_AMUR_CAGE & gdata(GDATA_LEVEL) >= 20 ) {
		env = SOUNDLIST_BG_RAIN
	}
	if ( env != envwprev ) {
		envwprev = env
		if ( cfg_sound == 1 ) {
			if ( env == SOUNDLIST_NONE ) {
				DSSTOP 7 + 6
				DSRELEASE 7 + 6
			}
			else {
				snd env, TRUE
			}
		}
	}
	if ( mdata(MDATA_FIELD) == MAP_FIELD_OUTDOOR | (gdata(GDATA_AREA) == AREA_AMUR_CAGE & gdata(GDATA_LEVEL) >= 20) ) {
		DSSETVOLUME 7 + 6, cfg_svolume * 8 / 10
	}
	else {
		if ( gdata(GDATA_LEVEL) == 1 | gdata(GDATA_AREA) == AREA_SHELTER ) {
			DSSETVOLUME 7 + 6, cfg_svolume * 2 / 10
		}
		else {
			DSSETVOLUME 7 + 6, 0
		}
	}
	if ( gdata(GDATA_AREA) == AREA_PORT_KAPUL | gdata(GDATA_AREA) == AREA_KURUALM | gdata(GDATA_AREA) == AREA_VALM | gdata(GDATA_AREA) == AREA_DEVIL_CAPE ) {
		snd SOUNDLIST_BG_SEA, TRUE
	}
	else {
		DSSTOP 7 + 6 + 1
		DSRELEASE 7 + 6 + 1
	}
	if ( mdata(MDATA_TYPE) == MAP_TYPE_TOWN | gdata(GDATA_AREA) == AREA_ULM_LESON | gdata(GDATA_AREA) == AREA_GUARDIAN_SHRINE & gdata(GDATA_AREA) != AREA_LUDUS ) {
		snd SOUNDLIST_BG_TOWN, TRUE
	}
	else {
		DSSTOP 7 + 6 + 2
		DSRELEASE 7 + 6 + 2
	}
	if ( mdata(MDATA_FIRE_SOUND) == 1 ) {
		snd SOUNDLIST_BG_FIRE, TRUE
	}
	else {
		DSSTOP 7 + 6 + 3
		DSRELEASE 7 + 6 + 3
	}
	if ( gdata(GDATA_AREA) == AREA_NOYEL & gdata(GDATA_LEVEL) == 100 ) {
		snd SOUNDLIST_BG_WIND, TRUE
	}
	else {
		DSSTOP lpfilewind
		DSRELEASE lpfilewind
	}
	if ( envonly == 1 ) {
		envonly = 0
		return
	}
	if ( cfg_music == 0 ) {
		return
	}
	if ( music == MUSICLIST_NONE ) {
		if ( adata(ADATA_TYPE, gdata(GDATA_AREA)) == MAP_TYPE_LOCAL ) {
			music = musicprev
		}
		if ( adata(ADATA_TYPE, gdata(GDATA_AREA)) == MAP_TYPE_TOWN ) {
			music = MUSICLIST_MCTOWN1
		}
		if ( adata(ADATA_TYPE, gdata(GDATA_AREA)) == MAP_TYPE_HOME ) {
			music = MUSICLIST_MCHOME0
		}
		if ( mdata(MDATA_MUSIC) != MUSICLIST_NONE ) {
			music = mdata(MDATA_MUSIC)
		}
		if ( adata(ADATA_TYPE, gdata(GDATA_AREA)) >= (20 /*!!!@[MAP_TYPE_DUNGEON @@@ MAP_TYPE_DUNGEON_MIN]@!!! */) ) {
			music = 55 + gdata(GDATA_HOUR) \ 6
		}
		if ( gdata(GDATA_AREA) == AREA_CHAOS_CRADLE ) {
			if ( gdata(GDATA_LEVEL) >= 150 ) {
				if ( gdata(GDATA_HOUR) >= 0 & gdata(GDATA_HOUR) <= 3 ) {
					music = MUSICLIST_MCDUNGEON10
				}
				if ( gdata(GDATA_HOUR) >= 4 & gdata(GDATA_HOUR) <= 7 ) {
					music = MUSICLIST_MCDUNGEON11
				}
				if ( gdata(GDATA_HOUR) >= 8 & gdata(GDATA_HOUR) <= 11 ) {
					music = MUSICLIST_MCDUNGEON12
				}
				if ( gdata(GDATA_HOUR) >= 12 & gdata(GDATA_HOUR) <= 15 ) {
					music = MUSICLIST_MCDUNGEON13
				}
				if ( gdata(GDATA_HOUR) >= 16 & gdata(GDATA_HOUR) <= 19 ) {
					music = MUSICLIST_MCDUNGEON14
				}
				if ( gdata(GDATA_HOUR) >= 20 & gdata(GDATA_HOUR) <= 23 ) {
					music = MUSICLIST_MCDUNGEON15
				}
			}
		}
		if ( adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_RANDOM_DUNGEON | adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_VOID ) {
			if ( gdata(GDATA_LEVEL) == adata(ADATA_MAX_LEVEL, gdata(GDATA_AREA)) ) {
				if ( adata(ADATA_BOSS, gdata(GDATA_AREA)) != (-1) ) {
					music = MUSICLIST_MCBOSS
				}
			}
		}
		if ( adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_PYRAMID | adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_VALLEY_HADES ) {
			if ( gdata(GDATA_LEVEL) != adata(ADATA_MAX_LEVEL, gdata(GDATA_AREA)) ) {
				music = MUSICLIST_MCSAND
			}
			if ( gdata(GDATA_LEVEL) == adata(ADATA_MAX_LEVEL, gdata(GDATA_AREA)) ) {
				music = MUSICLIST_MCBATTLE2
			}
		}
		if ( adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_DRAGON_VOLCANO ) {
			if ( gdata(GDATA_LEVEL) != adata(ADATA_MAX_LEVEL, gdata(GDATA_AREA)) ) {
				music = MUSICLIST_MCBATTLE2
			}
			if ( gdata(GDATA_LEVEL) == adata(ADATA_MAX_LEVEL, gdata(GDATA_AREA)) ) {
				music = MUSICLIST_MCLASTBOSS
			}
		}
		if ( adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_HARVEST_SHIP ) {
			if ( gdata(GDATA_LEVEL) != adata(ADATA_MAX_LEVEL, gdata(GDATA_AREA)) ) {
				music = MUSICLIST_MCRUIN
			}
			if ( gdata(GDATA_LEVEL) == adata(ADATA_MAX_LEVEL, gdata(GDATA_AREA)) ) {
				music = MUSICLIST_MCBATTLE2
			}
		}
		if ( adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_WAR_GROUND ) {
			if ( gdata(GDATA_LEVEL) != adata(ADATA_MAX_LEVEL, gdata(GDATA_AREA)) ) {
				music = MUSICLIST_MCRUIN
			}
			if ( gdata(GDATA_LEVEL) == adata(ADATA_MAX_LEVEL, gdata(GDATA_AREA)) ) {
				music = MUSICLIST_MCBATTLE2
			}
		}
		if ( adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_TOWER_OF_FIRE | adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_CRYPT_OF_THE_DAMNED | adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_ANCIENT_CASTLE | adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_DRAGON_NEST ) {
			if ( gdata(GDATA_LEVEL) == adata(ADATA_MAX_LEVEL, gdata(GDATA_AREA)) ) {
				music = MUSICLIST_MCBATTLE2
			}
		}
		if ( adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_CHAOS_SHRINE | adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_MACHINERY_FORT | adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_VALLEY_HADES ) {
			if ( gdata(GDATA_LEVEL) == adata(ADATA_MAX_LEVEL, gdata(GDATA_AREA)) ) {
				music = MUSICLIST_MCBOSS2
			}
		}
		if ( adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_MELKA_FOREST | adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_GRAVITY_VALLEY | adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_MOUNTAIN_RUIN ) {
			if ( gdata(GDATA_LEVEL) == adata(ADATA_MAX_LEVEL, gdata(GDATA_AREA)) ) {
				music = MUSICLIST_MCBOSS
			}
		}
		if ( gdata(GDATA_AREA) == AREA_LESIMAS ) {
			if ( gdata(GDATA_LEVEL) == adata(ADATA_MAX_LEVEL, gdata(GDATA_AREA)) ) {
				if ( gdata(GDATA_FLAG_MAIN) < 180 ) {
					music = MUSICLIST_MCLASTBOSS
				}
				else {
					music = MUSICLIST_MCOPENING3
				}
			}
		}
		if ( gdata(GDATA_AREA) == AREA_REMIDO ) {
			if ( gdata(GDATA_LEVEL) == adata(ADATA_MAX_LEVEL, gdata(GDATA_AREA)) ) {
				if ( gdata(GDATA_FLAG_MAIN) < 340 ) {
					music = MUSICLIST_MCLASTBOSS
				}
				else {
					music = MUSICLIST_MCOPENING
				}
			}
			if ( gdata(GDATA_LEVEL) == 106 ) {
				if ( gdata(GDATA_FLAG_MAIN) < 266 ) {
					music = MUSICLIST_MCBATTLE2
				}
			}
			if ( gdata(GDATA_LEVEL) == 114 ) {
				if ( gdata(GDATA_FLAG_MAIN) < 270 ) {
					music = MUSICLIST_MCLASTBOSS
				}
			}
		}
		if ( gdata(GDATA_AREA) == AREA_CHAOS_CRADLE ) {
			if ( gdata(GDATA_LEVEL) == adata(ADATA_MAX_LEVEL, gdata(GDATA_AREA)) ) {
				if ( gdata(GDATA_FLAG_MAIN) < 340 ) {
					music = MUSICLIST_MCLASTBOSS3
				}
				else {
					music = MUSICLIST_MCOPENING
				}
			}
			if ( gdata(GDATA_LEVEL) == 146 ) {
				if ( gdata(GDATA_FLAG_MAIN) < 450 ) {
					music = MUSICLIST_MCBOSS2
				}
			}
			if ( gdata(GDATA_LEVEL) == 149 ) {
				if ( gdata(GDATA_FLAG_MAIN) < 480 ) {
					music = MUSICLIST_MCBOSS5
				}
			}
			if ( gdata(GDATA_LEVEL) == 164 ) {
				if ( gdata(GDATA_FLAG_MAIN_CHAOS_CRADLE_25) == 0 ) {
					music = MUSICLIST_MCBOSS5
				}
			}
			if ( gdata(GDATA_LEVEL) == 173 ) {
				music = MUSICLIST_MCUNREST3
			}
			if ( gdata(GDATA_LEVEL) == 178 ) {
				if ( gdata(GDATA_FLAG_MAIN) >= 900 ) {
					music = MUSICLIST_MCEND
				}
			}
			if ( gdata(GDATA_LEVEL) == 179 ) {
				if ( gdata(GDATA_FLAG_MAIN) < 1000 ) {
					music = MUSICLIST_MCLASTBOSS3
				}
				else {
					music = MUSICLIST_MCOPENING3
				}
			}
		}
		if ( gdata(GDATA_AREA) == AREA_QUEST ) {
			if ( gdata(GDATA_QUEST) == QUEST_TYPE_HUNT ) {
				music = MUSICLIST_MCBATTLE1
			}
			if ( gdata(GDATA_QUEST) == QUEST_TYPE_HARVEST ) {
				music = MUSICLIST_MCVILLAGE1
			}
			if ( gdata(GDATA_QUEST) == QUEST_TYPE_PARTY ) {
				music = MUSICLIST_MCCASINO
			}
			if ( gdata(GDATA_QUEST) == QUEST_TYPE_CONQUER ) {
				music = MUSICLIST_MCBATTLE2
			}
			if ( gdata(GDATA_QUEST) == QUEST_TYPE_HUNTEX ) {
				music = MUSICLIST_MCARENA
			}
		}
		if ( gdata(GDATA_AREA) == AREA_ARENA ) {
			music = MUSICLIST_MCARENA
		}
		if ( gdata(GDATA_AREA) == AREA_LARNA ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCVILLAGE1
			}
		}
		if ( gdata(GDATA_AREA) == AREA_VERNIS ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCTOWN1
			}
		}
		if ( gdata(GDATA_AREA) == AREA_ZAILE ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCTOWN1
			}
		}
		if ( gdata(GDATA_AREA) == AREA_SEBI ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCDUNGEON13
			}
		}
		if ( gdata(GDATA_AREA) == AREA_PORT_KAPUL ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCTOWN2
			}
		}
		if ( gdata(GDATA_AREA) == AREA_LUMIEST ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCTOWN2
			}
		}
		if ( gdata(GDATA_AREA) == AREA_YOWYN ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCVILLAGE1
			}
		}
		if ( gdata(GDATA_AREA) == AREA_DERPHY ) {
			music = MUSICLIST_MCTOWN3
		}
		if ( gdata(GDATA_AREA) == AREA_PALMIA ) {
			music = MUSICLIST_MCTOWN4
		}
		if ( gdata(GDATA_AREA) == AREA_CYBER_DOME ) {
			music = MUSICLIST_MCTOWN5
		}
		if ( gdata(GDATA_AREA) == AREA_NOYEL ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCTOWN6
			}
		}
		if ( gdata(GDATA_AREA) == AREA_NOYEL ) {
			if ( gdata(GDATA_LEVEL) == 100 ) {
				if ( gdata(GDATA_FLAG_SUB_REGULUS_MAYROON) >= 4 & gdata(GDATA_FLAG_SUB_REGULUS_MAYROON) < 100 ) {
					music = MUSICLIST_MCBOSS5
				}
				else {
					music = MUSICLIST_SCENE_MUSIC
				}
			}
		}
		if ( gdata(GDATA_AREA) == AREA_EIREL ) {
			music = MUSICLIST_MCTOWN7
		}
		if ( gdata(GDATA_AREA) == AREA_RUOZA ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCTOWN4
			}
		}
		if ( gdata(GDATA_AREA) == AREA_MELKAWN ) {
			music = MUSICLIST_MCTOWN5
		}
		if ( gdata(GDATA_AREA) == AREA_KURUALM ) {
			music = MUSICLIST_MCTOWN9
		}
		if ( gdata(GDATA_AREA) == AREA_SEMINAR ) {
			music = MUSICLIST_MCCASINO
		}
		if ( gdata(GDATA_AREA) == AREA_VALM ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCTOWN2
			}
			if ( gdata(GDATA_LEVEL) == 3 ) {
				music = MUSICLIST_MCRUIN
			}
			if ( gdata(GDATA_LEVEL) == 30 ) {
				music = MUSICLIST_MCCHAOS
			}
		}
		if ( gdata(GDATA_AREA) == AREA_OBLIVION_PALACE ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCUNREST3
			}
		}
		if ( gdata(GDATA_AREA) == AREA_MELUGAS ) {
			music = MUSICLIST_MCDUNGEON7
		}
		if ( gdata(GDATA_AREA) == AREA_ARCBELC ) {
			music = MUSICLIST_MCTOWN8
		}
		if ( gdata(GDATA_AREA) == AREA_LUDUS ) {
			music = MUSICLIST_MCTOWN7
		}
		if ( gdata(GDATA_AREA) == AREA_SOUTH_RASKILIS ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCVOYAGE
			}
		}
		if ( gdata(GDATA_AREA) == AREA_WEST_RASKILIS ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCVOYAGE
			}
			if ( gdata(GDATA_LEVEL) > 1 ) {
				if ( gdata(GDATA_LEVEL) < 9 ) {
					music = MUSICLIST_MCSAD
				}
			}
			if ( gdata(GDATA_LEVEL) == 9 ) {
				music = MUSICLIST_MCHOME0
			}
		}
		if ( gdata(GDATA_AREA) == AREA_ULM_LESON ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCRUIN
			}
		}
		if ( gdata(GDATA_AREA) == AREA_AMUR_CAGE ) {
			if ( gdata(GDATA_LEVEL) <= 2 ) {
				music = MUSICLIST_MCOPENING
			}
		}
		if ( gdata(GDATA_AREA) == AREA_YLVA_LIBRARY ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCTOWN12
			}
		}
		if ( gdata(GDATA_AREA) == AREA_BLIMP ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCTOWN10
			}
		}
		if ( gdata(GDATA_AREA) == AREA_MIRAGE_TOWER ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCSAND
			}
			else {
				music = MUSICLIST_MCCASINO
			}
		}
		if ( gdata(GDATA_AREA) == AREA_RUST_PLAZA ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCPUTI
			}
		}
		if ( gdata(GDATA_AREA) == AREA_GUARDIAN_SHRINE ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCOPENING3
			}
		}
		if ( gdata(GDATA_AREA) == AREA_DOCK ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCRUIN
			}
			else {
				music = MUSICLIST_MCHUGE
			}
			if ( gdata(GDATA_LEVEL) == 70 ) {
				music = MUSICLIST_MCMELAN
			}
		}
		if ( gdata(GDATA_AREA) == AREA_OL_DRAN ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCTOWN11
			}
			if ( gdata(GDATA_LEVEL) == 5 ) {
				music = MUSICLIST_MCOPENING3
			}
		}
		if ( gdata(GDATA_AREA) == AREA_IRMA_THALIA_WORKSHOP ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				music = MUSICLIST_MCMEMORY
			}
		}
	}
	if ( scenemode == FALSE ) {
		if ( music == MUSICLIST_NONE | adata(ADATA_TYPE, gdata(GDATA_AREA)) == MAP_TYPE_WORLD ) {
			music = 86 + gdata(GDATA_DAY) \ 3
		}
		if ( gdata(GDATA_AREA) == AREA_LOST_YLVA ) {
			music = 116 + gdata(GDATA_DAY) \ 3
		}
		if ( gdata(GDATA_AREA) == AREA_AIMWELL ) {
			music = MUSICLIST_MCMARCH2
		}
		if ( gdata(GDATA_AREA) == AREA_DEVIL_CAPE ) {
			music = MUSICLIST_SCENE_MUSIC
		}
	}
	if ( musicloop == 1 ) {
		musicloop = 0
	}
	else {
		musicloop = 65535
	}
	if ( musicprev != music | music == MUSICLIST_SCENE_MUSIC ) {
		musicprev = music
		mmstop
		if ( cfg_music == 1 ) {
			DMSTOP
			DMLOADFNAME exedir + "sound\\gm_on.mid", 0
			DMPLAY 1, 0
		}
		if ( music != MUSICLIST_NONE2 ) {
			musicfolder = exedir + "user\\music\\"
			exist musicfolder + musicfile(music)
			if ( strsize == (-1) ) {
				musicfolder = exedir + "sound\\"
				exist musicfolder + musicfile(music)
				if ( strsize == (-1) ) {
					return
				}
			}
			if ( instr(musicfile(music), 0, ".mp3") != (-1) ) {
				mp3 = 1
			}
			else {
				mp3 = 0
			}
		}
		if ( music != MUSICLIST_NONE2 ) {
			if ( cfg_music == 2 | mp3 == 1 ) {
				mmload musicfolder + musicfile(music), 0, musicloop == 65535
				mmplay 0
			}
			else {
				DMLOADFNAME musicfolder + musicfile(music), 0
				DMPLAY musicloop, 0
			}
		}
	}
	music = MUSICLIST_NONE
	musicloop = 0
	return
	return
	goto *label_0084

#deffunc key_check int key_check_arg1
	if ( ginfo(2) == 0 ) {
		objsel 0
	}
	else {
		key = ""
		objprm 0, ""
		keylog = ""
		await 100
		return
	}
	if ( msgalert == 1 ) {
		if ( cfg_alert > 1 ) {
			repeat cfg_alert
				await 10
				locvar_key_check_p = 0
				repeat 106
					if ( cnt == 32 | cnt == 13 | (cnt >= 65 & cnt <= 90) | (cnt >= 96 & cnt <= 105) ) {
						getkey locvar_key_check_a, cnt
						if ( locvar_key_check_a ) {
							locvar_key_check_p = 1
							break
						}
					}
				loop
				if ( locvar_key_check_p == 0 ) {
					break
				}
			loop
			msgalert = 0
			keylog = ""
			objprm 0, ""
		}
	}
	key = ""
	if ( keylog != "" ) {
		keylog = strmid(keylog, 0, 1)
		if ( peek(keylog, 0) == 13 ) {
			keylog = key_enter
		}
		key = keylog
		keylog = ""
		objprm 0, ""
	}
	mousel = 0
	locvar_key_check_f = 0
	key_tab = 0
	key_escape = 0
	stick locvar_key_check_p, 15
	if ( locvar_key_check_p != 0 ) {
		if ( locvar_key_check_p == 128 ) {
			if ( keywait == 0 ) {
				key = key_cancel
				key_escape = 1
			}
		}
		if ( locvar_key_check_p == 1024 ) {
			key_tab = 1
			key = key_next
		}
	}
	else {
		getkey locvar_key_check_a, 12
		if ( locvar_key_check_a ) {
			key = key_wait
			locvar_key_check_f = 1
		}
		getkey locvar_key_check_a, 45
		if ( locvar_key_check_a ) {
			key = key_get
			locvar_key_check_f = 1
		}
		getkey locvar_key_check_a, 36
		if ( locvar_key_check_a ) {
			locvar_key_check_p = 3
		}
		getkey locvar_key_check_a, 33
		if ( locvar_key_check_a ) {
			locvar_key_check_p = 6
		}
		getkey locvar_key_check_a, 35
		if ( locvar_key_check_a ) {
			locvar_key_check_p = 9
		}
		getkey locvar_key_check_a, 34
		if ( locvar_key_check_a ) {
			locvar_key_check_p = 12
		}
	}
	getkey locvar_key_check_a, 17
	if ( locvar_key_check_a ) {
		key_ctrl = 1
	}
	else {
		key_ctrl = 0
	}
	getkey locvar_key_check_a, 18
	if ( locvar_key_check_a ) {
		key_alt = 1
	}
	else {
		key_alt = 0
	}
	getkey locvar_key_check_a, 16
	if ( locvar_key_check_a ) {
		keybd_wait = 100000
		key_shift = 1
		if ( keywait != 0 ) {
			if ( locvar_key_check_a == 0 ) {
				if ( key_shift == 0 ) {
					keywait = 0
				}
			}
		}
		if ( keywait == 0 ) {
			if ( locvar_key_check_a == 1 ) {
				key = key_cancel
				keywait = 1
			}
		}
	}
	else {
		keywait = 0
		if ( key_shift == 1 ) {
		}
		key_shift = 0
	}
	if ( cfg_joypad ) {
		locvar_key_check_j = 0
		DIGETJOYSTATE locvar_key_check_j, 0
		HMMBITCHECK locvar_key_check_j, 0
		if ( stat ) {
			locvar_key_check_p += 2
		}
		HMMBITCHECK locvar_key_check_j, 1
		if ( stat ) {
			locvar_key_check_p += 8
		}
		HMMBITCHECK locvar_key_check_j, 2
		if ( stat ) {
			locvar_key_check_p += 1
		}
		HMMBITCHECK locvar_key_check_j, 3
		if ( stat ) {
			locvar_key_check_p += 4
		}
		locvar_key_check_a = 0
		repeat 12
			HMMBITCHECK locvar_key_check_j, 4 + cnt
			if ( stat ) {
				locvar_key_check_a = 1
				if ( jkey(cnt) == key_alter ) {
					key_alt = 1
				}
				if ( jkey(cnt) == key_cancel ) {
					key_shift = 1
					if ( locvar_key_check_p != 0 ) {
						keybd_wait = 100000
					}
				}
				if ( locvar_key_check_prevjoy != cnt ) {
					key = jkey(cnt)
					locvar_key_check_prevjoy = cnt
					if ( key == key_esc ) {
						key = key_cancel
						key_escape = 1
					}
					if ( key_check_arg1 == 0 ) {
						locvar_key_check_b = 0
						if ( key == key_fire ) {
							key = key_northeast
							locvar_key_check_b = 1
						}
						if ( key == key_target ) {
							key = key_northwest
							locvar_key_check_b = 1
						}
						if ( key == key_get ) {
							key = key_northeast
							locvar_key_check_b = 1
						}
						if ( key == key_alter ) {
							key = key_northwest
							locvar_key_check_b = 1
						}
						if ( locvar_key_check_b == 0 & key != key_enter & key != key_cancel & key != key_esc ) {
							key = key_identify
						}
					}
				}
			}
		loop
		if ( locvar_key_check_a == 0 ) {
			locvar_key_check_prevjoy = -1
		}
		else {
			if ( key_check_arg1 == 2 ) {
				return
			}
		}
	}
	if ( quickkeywait ) {
		if ( locvar_key_check_p != 0 ) {
			return
		}
		else {
			quickkeywait = 0
		}
	}
	if ( keybd_wait >= 100000 ) {
		if ( key_shift == 0 ) {
			keybd_wait = 1000
		}
	}
	if ( locvar_key_check_p == 1 ) {
		if ( key_alt == 0 ) {
			key = key_west
			locvar_key_check_f = 1
		}
	}
	if ( locvar_key_check_p == 2 ) {
		if ( key_alt == 0 ) {
			key = key_north
			locvar_key_check_f = 1
		}
	}
	if ( locvar_key_check_p == 4 ) {
		if ( key_alt == 0 ) {
			key = key_east
			locvar_key_check_f = 1
		}
	}
	if ( locvar_key_check_p == 8 ) {
		if ( key_alt == 0 ) {
			key = key_south
			locvar_key_check_f = 1
		}
	}
	if ( locvar_key_check_p == 3 ) {
		key = key_northwest
		locvar_key_check_f = 1
	}
	if ( locvar_key_check_p == 6 ) {
		key = key_northeast
		locvar_key_check_f = 1
	}
	if ( locvar_key_check_p == 9 ) {
		key = key_southwest
		locvar_key_check_f = 1
	}
	if ( locvar_key_check_p == 12 ) {
		key = key_southeast
		locvar_key_check_f = 1
	}
	if ( key_check_arg1 == 2 ) {
		return
	}
	if ( locvar_key_check_f ) {
		if ( locvar_key_check_keyactive != key ) {
			locvar_key_check_keyactive = key
		}
		if ( keybd_wait == 0 ) {
			locvar_key_check_keyactive = key
		}
		if ( key_check_arg1 == 1 ) {
			if ( keybd_attacking != 0 ) {
				if ( keybd_wait \ cfg_attackwait != 0 ) {
					key = ""
				}
			}
			else {
				if ( cfg_scroll == 0 ) {
					if ( keybd_wait < cfg_walkwait * cfg_startrun ) {
						if ( keybd_wait \ cfg_walkwait == 0 ) {
						}
						else {
							key = ""
						}
					}
					else {
						running = 1
						if ( keybd_wait < 100000 ) {
							if ( keybd_wait \ cfg_runwait != 0 ) {
								key = ""
							}
						}
					}
				}
				else {
					if ( locvar_key_check_p == 0 ) {
						if ( keybd_wait < 10 ) {
							if ( keybd_wait != 0 ) {
								key = ""
							}
						}
					}
					else {
						if ( keybd_wait > cfg_startrun ) {
							if ( cfg_runscroll == 0 ) {
								if ( keybd_wait \ cfg_runwait == 0 ) {
								}
								else {
									key = ""
								}
							}
							running = 1
						}
					}
				}
			}
		}
		else {
			if ( keybd_wait < 14 ) {
				if ( keybd_wait == 0 | keybd_wait == 7 ) {
				}
				else {
					key = ""
				}
			}
			else {
				if ( keybd_wait < 1000 ) {
					if ( keybd_wait \ 2 != 1 ) {
						key = ""
					}
				}
			}
		}
		keybd_wait++
	}
	else {
		keybd_wait = 0
		keybd_attacking = 0
		running = 0
		locvar_key_check_keyactive = ""
	}
	repeat 10, 48
		getkey locvar_key_check_p, cnt
		if ( locvar_key_check_p ) {
			locvar_key_check_p = (cnt - 48) \ 10
			key = "sc"
			sc = cnt - 48 + (key_shift == 1 | key_ctrl == 1) * 10
			keybd_event cnt, 0, 2
			locvar_key_check_scon = 1
		}
	loop
	if ( locvar_key_check_scon ) {
		key = "sc"
		locvar_key_check_scon = 0
		keylog = ""
		objprm 0, ""
		return
	}
	if ( keyhalt != 0 ) {
		if ( key != "" | keybd_wait != 0 ) {
			key = ""
		}
		else {
			keyhalt = 0
		}
	}
	return

*label_0084
	goto *label_0089

#deffunc keyrelease
	repeat
		await 30
		stick locvar_keyrelease_a, 768
		if ( locvar_keyrelease_a == 0 ) {
			key_check
			if ( key == "" ) {
				break
			}
		}
	loop
	return

#deffunc press int press_arg1
	repeat
		await 20
		key_check
		if ( press_arg1 == 0 ) {
			if ( key != "" ) {
				break
			}
		}
		if ( press_arg1 == 1 ) {
			if ( key == key_enter | key == key_cancel ) {
				break
			}
		}
	loop
	keyhalt = 1
	return

*label_0089
	goto *label_0093

#deffunc bmes str bmes_arg1, int bmes_arg2, int bmes_arg3, int bmes_arg4
	locvar_bmes_pos_x = ginfo(22)
	locvar_bmes_pos_y = ginfo(23)
	locvar_bmes_mes_color = bmes_arg2, bmes_arg3, bmes_arg4
	repeat 3
		locvar_bmes_mes_y = cnt + locvar_bmes_pos_y - 1
		repeat 3
			pos locvar_bmes_pos_x - 1 + cnt, locvar_bmes_mes_y
			mes bmes_arg1
		loop
	loop
	color locvar_bmes_mes_color(0), locvar_bmes_mes_color(1), locvar_bmes_mes_color(2)
	pos locvar_bmes_pos_x, locvar_bmes_pos_y
	mes bmes_arg1
	return

*label_0093
	goto *label_0121

#deffunc talk_conv var talk_conv_arg1, int talk_conv_arg2
	locvar_talk_conv_n = 0
	if ( jp ) {
		locvar_talk_conv_msgtemp = talk_conv_arg1
		talk_conv_arg1 = ""
		repeat 100
			locvar_talk_conv_len = strlen(locvar_talk_conv_msgtemp)
			locvar_talk_conv_p2 = 0
			if ( locvar_talk_conv_len < talk_conv_arg2 ) {
				break
			}
			repeat locvar_talk_conv_len
				locvar_talk_conv_p = peek(locvar_talk_conv_msgtemp, locvar_talk_conv_p2)
				if ( locvar_talk_conv_p2 > locvar_talk_conv_len ) {
					break
				}
				if ( locvar_talk_conv_p >= 129 & locvar_talk_conv_p <= 159 | locvar_talk_conv_p >= 224 & locvar_talk_conv_p <= 252 ) {
					locvar_talk_conv_p = 2
				}
				else {
					locvar_talk_conv_p = 1
				}
				locvar_talk_conv_p2 += locvar_talk_conv_p
				if ( locvar_talk_conv_p2 > talk_conv_arg2 ) {
					locvar_talk_conv_m = strmid(locvar_talk_conv_msgtemp, locvar_talk_conv_p2, 2)
					if ( locvar_talk_conv_m != "。" & locvar_talk_conv_m != "、" & locvar_talk_conv_m != "」" & locvar_talk_conv_m != "』" & locvar_talk_conv_m != "！" & locvar_talk_conv_m != "？" & locvar_talk_conv_m != "…" ) {
					}
					else {
						locvar_talk_conv_p2 += 2
					}
					talk_conv_arg1 += strmid(locvar_talk_conv_msgtemp, 0, locvar_talk_conv_p2) + "\n"
					locvar_talk_conv_n++
					locvar_talk_conv_msgtemp = strmid(locvar_talk_conv_msgtemp, locvar_talk_conv_p2, locvar_talk_conv_len - locvar_talk_conv_p2)
					break
				}
			loop
		loop
		talk_conv_arg1 += locvar_talk_conv_msgtemp
	}
	else {
		locvar_talk_conv_msgtemp = talk_conv_arg1
		talk_conv_arg1 = ""
		repeat 1000
			locvar_talk_conv_len = 0
			repeat 1000
				locvar_talk_conv_p = instr(locvar_talk_conv_msgtemp, 0, " ") + 1
				if ( locvar_talk_conv_p == 0 ) {
					break
				}
				if ( locvar_talk_conv_len + locvar_talk_conv_p > talk_conv_arg2 ) {
					talk_conv_arg1 += "\n"
					locvar_talk_conv_n++
					break
				}
				talk_conv_arg1 += strmid(locvar_talk_conv_msgtemp, 0, locvar_talk_conv_p)
				locvar_talk_conv_len += locvar_talk_conv_p
				locvar_talk_conv_msgtemp = strmid(locvar_talk_conv_msgtemp, locvar_talk_conv_p, strlen(locvar_talk_conv_msgtemp) - locvar_talk_conv_p)
			loop
			if ( locvar_talk_conv_p == 0 ) {
				break
			}
		loop
		talk_conv_arg1 += locvar_talk_conv_msgtemp
	}
	return locvar_talk_conv_n

#deffunc msg_write var msg_write_arg1
	repeat 1
		locvar_msg_write_mp = instr(msg_write_arg1, 0, "♪")
		if ( locvar_msg_write_mp != (-1) ) {
			locvar_msg_write_mark = int(strmid(msg_write_arg1, locvar_msg_write_mp + 2, 1))
			if ( jp ) {
				if ( locvar_msg_write_mark == 0 ) {
					break
				}
			}
			msg_write_arg1 = strmid(msg_write_arg1, 0, locvar_msg_write_mp) + "  " + strmid(msg_write_arg1, locvar_msg_write_mp + 2 + (locvar_msg_write_mark != 0), 9999)
			pos (msglen + locvar_msg_write_mp) * inf_mesfont / 2 + inf_msgx + 7 + en * 3, (inf_msgline - 1) * inf_msgspace + inf_msgy + 5
			gmode 2
			gcopy BUFFER_INF, 600 + locvar_msg_write_mark * 24, 360, 16, 16
			continue cnt
		}
	loop
	color locvar_msg_write_tcol(0), locvar_msg_write_tcol(1), locvar_msg_write_tcol(2)
	pos msglen * inf_mesfont / 2 + inf_msgx + 6, (inf_msgline - 1) * inf_msgspace + inf_msgy + 6
	font lang(cfg_font1, cfg_font2), inf_mesfont - en * 2, 0
	mes msg_write_arg1
	return

#deffunc txtmore
	locvar_txtmore_tmore = 1
	return

#deffunc txtcontinue
	locvar_txtcontinue_tcontinue = 1
	return

#deffunc anime_halt
	key = ""
	objprm 0, ""
	keylog = ""
	redraw 0
	gmode 0
	gsel BUFFER_INF
	pos 672, 504
	gcopy BUFFER_SCREEN, locvar_anime_halt_x, locvar_anime_halt_y, 120, 24
	gsel BUFFER_SCREEN
	repeat 12
		redraw 0
		await 10
		pos locvar_anime_halt_x, locvar_anime_halt_y + 12 - cnt
		gzoom 120, cnt * 2 + 1, 3, 552, 504, 120, 22
		redraw 1
	loop
	press 1
	snd SOUNDLIST_OK1
	repeat 7
		redraw 0
		await 10
		pos locvar_anime_halt_x, locvar_anime_halt_y
		gcopy BUFFER_INF, 672, 504, 120, 24
		if ( cnt != 6 ) {
			pos locvar_anime_halt_x, locvar_anime_halt_y + cnt * 2
			gzoom 120, 22 - cnt * 4, 3, 552, 504, 120, 22
		}
		redraw 1
	loop
	redraw 0
	gmode 2
	return

#deffunc msg_halt
	locvar_anime_halt_x = windoww - 120
	locvar_anime_halt_y = windowh - 22
	anime_halt
	screenupdate = -1
	gosub *screen_draw
	return

#deffunc help_halt
	locvar_anime_halt_x = wx + dx - 140
	locvar_anime_halt_y = wy + dy - 1
	anime_halt
	return

#deffunc txtef int txtef_color
	locvar_msg_write_tcol = 255 - c_col(0, txtef_color), 255 - c_col(1, txtef_color), 255 - c_col(2, txtef_color)
	if ( txtef_color == COLOR_YELLOW ) {
		locvar_txtef_tcolfix = 1
	}
	else {
		locvar_txtef_tcolfix = 0
	}
	return

#deffunc msg_newlog
	if ( cfg_exlog == 0 ) {
		return
	}
	gsel BUFFER_LOG
	gmode 0
	pos 0, msgline \ inf_maxlog * inf_msgspace
	gcopy BUFFER_SCREEN, inf_msgx, inf_msgy + 5 + inf_msgspace * 3 + en * 3, windoww - inf_msgx, inf_msgspace
	gsel BUFFER_SCREEN
	return

#deffunc msg_newline
	msg_newlog
	msglen = 0
	msgline++
	if ( msgline >= inf_maxlog ) {
		msgline -= inf_maxlog
	}
	msg(msgline \ inf_maxlog) = ""
	locvar_talk_conv_p = (windoww - inf_msgx) / 192
	redraw 0
	gmode 0
	pos inf_msgx, inf_msgy + 5
	gcopy BUFFER_SCREEN, inf_msgx, inf_msgy + 5 + inf_msgspace, windoww - inf_msgx, inf_msgspace * 3 + en * 3
	repeat locvar_talk_conv_p + 1
		if ( cnt == locvar_talk_conv_p ) {
			locvar_anime_halt_x = (windoww - inf_msgx) \ 192
		}
		else {
			locvar_anime_halt_x = 192
		}
		pos cnt * 192 + inf_msgx, inf_msgy + 5 + inf_msgspace * 3 + en * 2
		gcopy BUFFER_INF, 496, 536 + msgline \ 4 * inf_msgspace, locvar_anime_halt_x, inf_msgspace
	loop
	gmode 2
	msgtempprev = ""
	return

#deffunc txtnew
	if ( tnew == 0 ) {
		if ( strlen(msg(msgline \ inf_maxlog)) > 4 ) {
			msg_newline
			msglen = 2
		}
	}
	return

#deffunc msg_clear
	msg_len = 0
	msgtemp = ""
	repeat 3
		msg_newline
	loop
	return

#deffunc txt_conv
	redraw 0
	if ( msgtemp == "" ) {
		return
	}
	if ( tcopy ) {
		tcopy = 0
		txtcopy = "" + msgtemp
	}
	if ( tnew == 1 ) {
		if ( msg(msgline \ inf_maxlog) != "" ) {
			if ( cfg_msgtrans ) {
				locvar_talk_conv_p = (windoww - inf_msgx) / 192
				redraw 0
				gmode 4, , , cfg_msgtrans * 20
				repeat locvar_talk_conv_p + 1
					if ( cnt == locvar_talk_conv_p ) {
						locvar_anime_halt_x = (windoww - inf_msgx) \ 192
					}
					else {
						locvar_anime_halt_x = 192
					}
					pos cnt * 192 + inf_msgx, inf_msgy + 5
					gcopy BUFFER_INF, 496, 536, locvar_anime_halt_x, inf_msgspace * 4
				loop
			}
			msg_newline
			tnew = 0
			if ( cfg_msgaddtime ) {
				msgtemp = "[" + gdata(GDATA_MIN) + "] " + msgtemp
			}
			else {
				msglen = 2
			}
		}
	}
	if ( msgdup != 0 ) {
		if ( msgtempprev == msgtemp ) {
			return
		}
		msgtempprev = msgtemp
		msgdup = 0
	}
	if ( jp ) {
		if ( instr(msgtemp, 0, "「") != (-1) ) {
			if ( locvar_txtef_tcolfix == 0 ) {
				locvar_msg_write_tcol = 210, 250, 160
			}
			else {
				locvar_txtef_tcolfix = 0
			}
		}
		repeat
			locvar_talk_conv_len = strlen(msgtemp)
			if ( msglen + 4 > inf_maxmsglen ) {
				if ( msgtemp != "" ) {
					msg_newline
				}
			}
			if ( msglen + locvar_talk_conv_len > inf_maxmsglen ) {
				locvar_talk_conv_p2 = 0
				repeat
					locvar_talk_conv_p = peek(msgtemp, locvar_talk_conv_p2)
					locvar_talk_conv_p2++
					if ( locvar_talk_conv_p > 128 & locvar_talk_conv_p < 160 ) {
						locvar_talk_conv_p2++
					}
					if ( locvar_talk_conv_p > 223 & locvar_talk_conv_p < 253 ) {
						locvar_talk_conv_p2++
					}
					if ( locvar_talk_conv_p2 + msglen > inf_maxmsglen ) {
						if ( locvar_talk_conv_p2 + msglen > inf_maxmsglen + 2 ) {
							break
						}
						locvar_talk_conv_m = strmid(msgtemp, locvar_talk_conv_p2, 2)
						if ( locvar_talk_conv_m != "。" & locvar_talk_conv_m != "、" & locvar_talk_conv_m != "」" & locvar_talk_conv_m != "』" & locvar_talk_conv_m != "！" & locvar_talk_conv_m != "？" & locvar_talk_conv_m != "…" ) {
							break
						}
					}
				loop
				locvar_talk_conv_m = strmid(msgtemp, 0, locvar_talk_conv_p2)
				msg(msgline \ inf_maxlog) += locvar_talk_conv_m
				msg_write locvar_talk_conv_m
				msgtemp = strmid(msgtemp, locvar_talk_conv_p2, locvar_talk_conv_len - locvar_talk_conv_p2)
				if ( msgtemp == "" | msgtemp == " " ) {
					break
				}
				msg_newline
				continue
			}
			break
		loop
		msg(msgline \ inf_maxlog) += msgtemp
		msg_write msgtemp
		msglen += locvar_talk_conv_len
	}
	else {
		if ( locvar_txtcontinue_tcontinue == 0 ) {
			locvar_txt_conv_b = peek(msgtemp, 0)
			if ( instr(msgtemp, 0, "\"") != (-1) ) {
				if ( locvar_txtef_tcolfix == 0 ) {
					locvar_msg_write_tcol = 210, 250, 160
				}
				else {
					locvar_txtef_tcolfix = 0
				}
			}
			if ( locvar_txt_conv_b >= 97 & locvar_txt_conv_b <= 122 ) {
				poke msgtemp, 0, locvar_txt_conv_b - 32
			}
		}
		else {
			locvar_txtcontinue_tcontinue = 0
		}
		msgtemp += " "
		repeat
			await
			locvar_talk_conv_p = instr(msgtemp, 0, " ") + 1
			if ( locvar_talk_conv_p == 0 ) {
				break
			}
			if ( msglen + locvar_talk_conv_p > inf_maxmsglen ) {
				msg_newline
				continue
			}
			locvar_txt_conv_mst = strmid(msgtemp, 0, locvar_talk_conv_p)
			msg(msgline \ inf_maxlog) += locvar_txt_conv_mst
			msg_write locvar_txt_conv_mst
			msglen += locvar_talk_conv_p
			msgtemp = strmid(msgtemp, locvar_talk_conv_p, strlen(msgtemp) - locvar_talk_conv_p)
		loop
		msg(msgline \ inf_maxlog) += msgtemp
		msg_write msgtemp
		msglen += strlen(msgtemp)
	}
	return

*label_0121
	goto *label_0123

#defcfunc name int name_arg1
	if ( name_arg1 == 0 ) {
		if ( gdata(GDATA_TEMPORARY_FLAGS) == 7777 ) {
			return cdatan(CDATAN_NAME, CHARA_PLAYER)
		}
		return lang("あなた", "you")
	}
	if ( synccheck(name_arg1, -1) == 0 ) {
		return lang("何か", "something")
	}
	if ( cdata(CDATA_CONDITION_BLIND, CHARA_PLAYER) != 0 | (cbit(CHARA_BIT_INVISIBLE, name_arg1) == TRUE & cbit(CHARA_BIT_SEE_INVISIBLE, CHARA_PLAYER) == FALSE & cdata(CDATA_CONDITION_WET, name_arg1) == 0) ) {
		return lang("何か", "something")
	}
	if ( en ) {
		locvar_name_s = strmid(cdatan(CDATAN_NAME, name_arg1), 0, 1)
		if ( locvar_name_s == "\"" | locvar_name_s == "<" ) {
			return cdatan(CDATAN_NAME, name_arg1)
		}
		if ( cbit(CHARA_BIT_HAS_NAME, name_arg1) == FALSE ) {
			return "the " + cdatan(CDATAN_NAME, name_arg1)
		}
	}
	return cdatan(CDATAN_NAME, name_arg1)

*label_0123
	goto *label_0138

#defcfunc aln int aln_charid
	if ( aln_charid == CHARA_PLAYER ) {
		return ""
	}
	if ( synccheck(aln_charid, -1) == 0 ) {
		return "それは"
	}
	return "" + cdatan(CDATAN_NAME, aln_charid) + "は"

#defcfunc npcn int npcn_charid
	if ( npcn_charid == CHARA_PLAYER ) {
		return ""
	}
	if ( synccheck(npcn_charid, -1) == 0 ) {
		return "それは"
	}
	return "" + cdatan(CDATAN_NAME, npcn_charid) + "は"

#defcfunc _s int _s_charid, int _s_arg2
	if ( _s_charid < CHARA_PLAYER | _s_charid >= MAX_CHARA_TOTAL ) {
		if ( _s_arg2 ) {
			return "es"
		}
		else {
			return "s"
		}
	}
	if ( _s_charid == CHARA_PLAYER ) {
		return ""
	}
	if ( _s_arg2 ) {
		return "es"
	}
	else {
		return "s"
	}

#defcfunc _s2 int _s2_arg1
	if ( _s2_arg1 > 1 ) {
		return ""
	}
	else {
		return "s"
	}

#defcfunc is2 int is2_arg1
	if ( is2_arg1 > 1 ) {
		return "are"
	}
	else {
		return "is"
	}

#defcfunc is int is_charid
	if ( is_charid < CHARA_PLAYER | is_charid >= MAX_CHARA_TOTAL ) {
		return "is"
	}
	if ( is_charid == CHARA_PLAYER ) {
		return "are"
	}
	return "is"

#defcfunc was int was_charid
	if ( was_charid < CHARA_PLAYER | was_charid >= MAX_CHARA_TOTAL ) {
		return "was"
	}
	if ( was_charid == CHARA_PLAYER ) {
		return "were"
	}
	return "was"

#defcfunc have int have_charid
	if ( have_charid < CHARA_PLAYER | have_charid >= MAX_CHARA_TOTAL ) {
		return "has"
	}
	if ( have_charid == CHARA_PLAYER ) {
		return "have"
	}
	return "has"

#defcfunc does int does_arg1
	if ( does_arg1 == 1 ) {
		return "do"
	}
	else {
		return "does"
	}

#defcfunc he int he_charid, int he_arg2
	if ( he_arg2 ) {
		if ( cdatan(CDATAN_NEWSEX, he_charid) == lang("男性", "male") | cdatan(CDATAN_NEWSEX, he_charid) == lang("なし", "none") ) {
			if ( jp ) {
				return "彼"
			}
			else {
				return "he"
			}
		}
		if ( cdatan(CDATAN_NEWSEX, he_charid) == lang("自称男性", "male") ) {
			if ( jp ) {
				return "彼？"
			}
			else {
				return "he"
			}
		}
		if ( cdatan(CDATAN_NEWSEX, he_charid) == lang("女性", "female") | cdatan(CDATAN_NEWSEX, he_charid) == lang("両性具有", "bisexual") ) {
			if ( jp ) {
				return "彼女"
			}
			else {
				return "she"
			}
		}
		if ( cdatan(CDATAN_NEWSEX, he_charid) == lang("自称女性", "female") ) {
			if ( jp ) {
				return "彼女？"
			}
			else {
				return "he"
			}
		}
		if ( jp ) {
			if ( cdata(CDATA_SEX, he_charid) == 0 ) {
				return "彼"
			}
			else {
				return "彼女"
			}
		}
		if ( cdata(CDATA_SEX, he_charid) == 0 ) {
			return "he"
		}
		else {
			return "she"
		}
	}
	if ( he_charid < CHARA_PLAYER | he_charid >= MAX_CHARA_TOTAL ) {
		return "it"
	}
	if ( synccheck(he_charid, -1) == 0 ) {
		return "it"
	}
	if ( he_charid == CHARA_PLAYER ) {
		return "you"
	}
	if ( cdata(CDATA_SEX, he_charid) == 0 ) {
		return "he"
	}
	return "she"

#defcfunc his int his_charid, int his_arg2
	if ( his_arg2 ) {
		if ( jp ) {
			if ( his_charid == CHARA_PLAYER ) {
				return "あなたの"
			}
		}
		if ( cdatan(CDATAN_NEWSEX, his_charid) == lang("男性", "male") | cdatan(CDATAN_NEWSEX, his_charid) == lang("なし", "none") ) {
			if ( jp ) {
				return "彼の"
			}
			else {
				return "his"
			}
		}
		if ( cdatan(CDATAN_NEWSEX, his_charid) == lang("自称男性", "male") ) {
			if ( jp ) {
				return "彼？の"
			}
			else {
				return "his"
			}
		}
		if ( cdatan(CDATAN_NEWSEX, his_charid) == lang("女性", "female") | cdatan(CDATAN_NEWSEX, his_charid) == lang("両性具有", "bisexual") ) {
			if ( jp ) {
				return "彼女の"
			}
			else {
				return "her"
			}
		}
		if ( cdatan(CDATAN_NEWSEX, his_charid) == lang("自称女性", "female") ) {
			if ( jp ) {
				return "彼女？の"
			}
			else {
				return "her"
			}
		}
		if ( jp ) {
			if ( his_charid == CHARA_PLAYER ) {
				return "あなたの"
			}
			else {
				if ( cdata(CDATA_SEX, his_charid) == 0 ) {
					return "彼の"
				}
				else {
					return "彼女の"
				}
			}
		}
		if ( his_charid == CHARA_PLAYER ) {
			return "your"
		}
		else {
			if ( cdata(CDATA_SEX, his_charid) == 0 ) {
				return "his"
			}
			else {
				return "her"
			}
		}
	}
	if ( his_charid < CHARA_PLAYER | his_charid >= MAX_CHARA_TOTAL ) {
		return "its"
	}
	if ( synccheck(his_charid, -1) == 0 ) {
		return "its"
	}
	if ( his_charid == CHARA_PLAYER ) {
		return "your"
	}
	if ( cdata(CDATA_SEX, his_charid) == 0 ) {
		return "his"
	}
	return "her"

#defcfunc him int him_charid, int him_arg2
	if ( him_arg2 ) {
		if ( cdatan(CDATAN_NEWSEX, him_charid) == lang("男性", "male") | cdatan(CDATAN_NEWSEX, him_charid) == lang("なし", "none") ) {
			if ( jp ) {
				return "彼"
			}
			else {
				return "he"
			}
		}
		if ( cdatan(CDATAN_NEWSEX, him_charid) == lang("自称男性", "male") ) {
			if ( jp ) {
				return "彼？"
			}
			else {
				return "he"
			}
		}
		if ( cdatan(CDATAN_NEWSEX, him_charid) == lang("女性", "female") | cdatan(CDATAN_NEWSEX, him_charid) == lang("両性具有", "bisexual") ) {
			if ( jp ) {
				return "彼女"
			}
			else {
				return "she"
			}
		}
		if ( cdatan(CDATAN_NEWSEX, him_charid) == lang("自称女性", "female") ) {
			if ( jp ) {
				return "彼女？"
			}
			else {
				return "he"
			}
		}
		if ( jp ) {
			if ( cdata(CDATA_SEX, him_charid) == 0 ) {
				return "彼"
			}
			else {
				return "彼女"
			}
		}
		if ( cdata(CDATA_SEX, him_charid) == 0 ) {
			return "him"
		}
		else {
			return "her"
		}
	}
	if ( him_charid < CHARA_PLAYER | him_charid >= MAX_CHARA_TOTAL ) {
		return "it"
	}
	if ( synccheck(him_charid, -1) == 0 ) {
		return "it"
	}
	if ( him_charid == CHARA_PLAYER ) {
		return "yourself"
	}
	if ( cdata(CDATA_SEX, him_charid) == 0 ) {
		return "him"
	}
	return "her"

#defcfunc your int your_charid, int your_arg1
	if ( your_charid < CHARA_PLAYER | your_charid >= MAX_CHARA_TOTAL ) {
		return "'s"
	}
	if ( your_charid == CHARA_PLAYER ) {
		return "r"
	}
	return "'s"

#defcfunc yourself int yourself_charid
	if ( yourself_charid < CHARA_PLAYER | yourself_charid >= MAX_CHARA_TOTAL ) {
		return "itself"
	}
	if ( synccheck(yourself_charid, -1) == 0 ) {
		return "itself"
	}
	if ( yourself_charid == CHARA_PLAYER ) {
		return "yourself"
	}
	if ( cdata(CDATA_SEX, yourself_charid) == 0 ) {
		return "himself"
	}
	return "herself"

*label_0138

#deffunc txt_check int txt_check_arg1
	txtvalid = -1
	if ( txt_check_arg1 == 0 ) {
		if ( cc >= CHARA_PLAYER ) {
			if ( synccheck(cc, -1) | cc == CHARA_PLAYER ) {
				txtvalid = 0
				return
			}
		}
	}
	if ( txt_check_arg1 == 1 ) {
		if ( tc >= CHARA_PLAYER ) {
			if ( synccheck(tc, -1) | tc == CHARA_PLAYER ) {
				txtvalid = 0
				return
			}
		}
	}
	if ( txt_check_arg1 == 2 ) {
		if ( cc == CHARA_PLAYER | cdata(CDATA_RELATION, cc) == RELATION_ALLY ) {
			txtvalid = 0
			return
		}
	}
	if ( txt_check_arg1 == 3 ) {
		if ( cc > CHARA_PLAYER ) {
			if ( synccheck(cc, -1) ) {
				txtvalid = 0
				return
			}
		}
	}
	if ( txt_check_arg1 == 4 ) {
		if ( tc == CHARA_PLAYER ) {
			txtvalid = 0
			return
		}
	}
	if ( txt_check_arg1 == 5 ) {
		if ( tc > CHARA_PLAYER ) {
			if ( synccheck(tc, -1) ) {
				txtvalid = 0
			}
		}
	}
	return

#deffunc txt_select str txt_select_arg1, str txt_select_arg2, str txt_select_arg3, str txt_select_arg4, str txt_select_arg5, str txt_select_arg6, str txt_select_arg7, str txt_select_arg8, str txt_select_arg9
	if ( txtvalid == (-1) ) {
		txtvalid = 0
		return
	}
	if ( hear != 0 ) {
		snd hear
		hear = 0
	}
	if ( txtc == 0 ) {
		msgtemp = txt_select_arg1
		txt_conv
	}
	else {
		if ( txtc == 1 ) {
			msgtemp = txt_select_arg2
			txt_conv
		}
		else {
			if ( txtc == 2 ) {
				msgtemp = txt_select_arg3
				txt_conv
			}
			else {
				if ( txtc == 3 ) {
					msgtemp = txt_select_arg4
					txt_conv
				}
				else {
					if ( txtc == 4 ) {
						msgtemp = txt_select_arg5
						txt_conv
					}
					else {
						if ( txtc == 5 ) {
							msgtemp = txt_select_arg6
							txt_conv
						}
						else {
							if ( txtc == 6 ) {
								msgtemp = txt_select_arg7
								txt_conv
							}
							else {
								if ( txtc == 7 ) {
									msgtemp = txt_select_arg8
									txt_conv
								}
								else {
									msgtemp = txt_select_arg9
									txt_conv
								}
							}
						}
					}
				}
			}
		}
	}
	return
	goto *label_0142

#defcfunc cnvfix int cnvfix_arg1
	if ( cnvfix_arg1 >= 0 ) {
		return "+" + cnvfix_arg1
	}
	else {
		return "" + cnvfix_arg1
	}

*label_0142
	goto *label_0144

#deffunc stxt int stxt_arg1, str stxt_arg2
	if ( stxt_arg1 == 0 | (synccheck(stxt_arg1, -1) & cdata(CDATA_CONDITION_BLIND, CHARA_PLAYER) == 0) ) {
		txt stxt_arg2
	}
	return

*label_0144
	goto *label_0147

#defcfunc cnvdate int cnvdate_arg1, int cnvdate_arg2
	locvar_cnvdate_p = cnvdate_arg1
	locvar_cnvdate_hour = cnvdate_arg1 \ 24
	locvar_cnvdate_day = cnvdate_arg1 / 24 \ 30
	if ( locvar_cnvdate_day == 0 ) {
		locvar_cnvdate_day = 30
		locvar_cnvdate_p -= 24 * 30
	}
	locvar_cnvdate_month = locvar_cnvdate_p / 24 / 30 \ 12
	if ( locvar_cnvdate_month == 0 ) {
		locvar_cnvdate_month = 12
		locvar_cnvdate_p -= 24 * 30 * 12
	}
	locvar_cnvdate_year = locvar_cnvdate_p / 24 / 30 / 12
	if ( jp ) {
		locvar_cnvdate_s = "" + locvar_cnvdate_year + "年" + locvar_cnvdate_month + "月" + locvar_cnvdate_day + "日"
		if ( cnvdate_arg2 == 1 ) {
			locvar_cnvdate_s += "" + locvar_cnvdate_hour + "時"
		}
		if ( cnvdate_arg2 == 2 ) {
			locvar_cnvdate_s = "" + locvar_cnvdate_month + "月" + locvar_cnvdate_day + "日" + locvar_cnvdate_hour + "時"
		}
	}
	else {
		locvar_cnvdate_s = "" + locvar_cnvdate_year + " " + locvar_cnvdate_month + "/" + locvar_cnvdate_day + " "
		if ( cnvdate_arg2 == 1 ) {
			locvar_cnvdate_s += "" + locvar_cnvdate_hour + "h"
		}
		if ( cnvdate_arg2 == 2 ) {
			locvar_cnvdate_s = "" + locvar_cnvdate_month + "/" + locvar_cnvdate_day + " " + locvar_cnvdate_hour + "h"
		}
	}
	return locvar_cnvdate_s

#defcfunc cnvplaytime int cnvplaytime_arg1
	return "" + cnvplaytime_arg1 / 60 / 60 + lang("時間", ":") + cnvplaytime_arg1 / 60 \ 60 + lang("分", ":") + cnvplaytime_arg1 \ 60 + lang("秒", " Sec")

*label_0147
	goto *label_0149

#defcfunc roundmargin int roundmargin_arg1, int roundmargin_arg2
	if ( roundmargin_arg1 > roundmargin_arg2 ) {
		return roundmargin_arg1 - rnd(roundmargin_arg1 - roundmargin_arg2)
	}
	if ( roundmargin_arg1 < roundmargin_arg2 ) {
		return roundmargin_arg1 + rnd(roundmargin_arg2 - roundmargin_arg1)
	}
	return roundmargin_arg1

*label_0149

#deffunc at int at_waittime
	if ( cc == CHARA_PLAYER ) {
		autoturn = 1
		if ( cfg_autoturn == 0 ) {
			await at_waittime
			scrturn++
		}
		if ( cfg_autoturn != 2 | firstautoturn == 1 ) {
			screenupdate = -1
			gosub *screen_draw
		}
		if ( cfg_autoturn == 0 ) {
			redraw 1
		}
	}
	return

#deffunc text_set
	sdim bodyn, 4, 15
	bodyn = "", "頭", "首", "背中", "胴体", "手", "指", "腕", "腰", "足", "遠隔", "矢弾"
	_impression = lang("大嫌い", "Foe"), lang("嫌い", "Hate"), lang("うざい", "Annoying"), lang("普通", "Normal"), lang("好意的", "Amiable"), lang("友達", "Friend"), lang("親友", "Fellow"), lang("魂の友", "Soul Mate"), lang("*Love*", "*Love*")
	_impression2 = lang("*Cat*", "*Cat*"), lang("奔放", "Uninhibited"), lang("対等", "Peer"), lang("素直", "Docile"), lang("従順", "Amenable"), lang("服従", "Subjection"), lang("忠誠", "Fidelity"), lang("*Dog*", "*Dog*")
	_impression3 = lang("普通", "normal"), lang("質のいい肉がとれそうだ", "Looks plump with decent meat"), lang("かなり質のいい肉がとれそうだ", "Looks plump with quality meat"), lang("最高級の肉がとれそうだ", "Looks plump with succulent meat"), lang("質のいい皮がとれそうだ", "The skin is decent grade"), lang("かなり質のいい皮がとれそうだ", "The skin is of high quality"), lang("最高級の皮がとれそうだ", "The skin looks absolutely luxurious"), lang("もしかすると肉が多くとれるかもしれない", "You just might be able to get more meat"), lang("肉が多くとれるかもしれない", "You're likely to get more meat"), lang("きっと肉が多くとれる", "You're certain that you'll get more meat"), lang("もしかすると皮が多くとれるかもしれない", "You just might be able to get more skin"), lang("皮が多くとれるかもしれない", "You're likely to get more skin"), lang("きっと皮が多くとれる", "You're certain that you'll get more skin")
	_impression4 = lang("普通", "normal"), lang("乳の出があまり良くなさそうだ", "Doesn't look too good at producing milk"), lang("乳の出が悪そうだ", "Doesn't look any good at producing milk"), lang("乳の出が非常に悪そうだ", "Looks extremely inept at producing milk"), lang("あまり産卵しなさそうだ", "Doesn't look too good at laying eggs"), lang("なかなか産卵しなさそうだ", "Doesn't look any good at laying eggs"), lang("ほとんど産卵しなさそうだ", "Looks extremely inept at laying eggs"), lang("よく卵を産みそうだ", "Looks adept at laying eggs"), lang("卵を多く産みそうだ", "Looks adept at laying many eggs"), lang("卵をかなり多く産みそうだ", "Eggs are coming out of the wazoo"), lang("乳の出が良さそうだ", "Looks good at producing milk"), lang("乳の出がかなり良さそうだ", "Looks good at producing lots of milk"), lang("乳を大量に出しそうだ", "Simply oozing with milk")
	if ( jp ) {
		_weather = "", "*エーテル*", "雪", "雨", "雷雨"
	}
	if ( en ) {
		_weather = "", "Etherwind", "Snow", "Rain", "Hard rain"
	}
	_destiny = "", "D", "DE", "DES", "DEST", "DESTI", "DESTIN", "DESTINY", ""
	if ( jp ) {
		_biyori = "修行日和", "戦闘日和", "仕事日和", "探索日和", "勉強日和"
	}
	if ( en ) {
		_biyori = "Training-day", "Combat-day", "Jobs-day", "Exploration-day", "Study-day"
	}
	if ( jp ) {
		_dengon = "なし", "協調", "招待", "告白", "応援", "侮辱"
	}
	if ( en ) {
		_dengon = "none", "Cooperation", "Invitation", "Confession", "Cheering", "Contempt"
	}
	if ( jp ) {
		_homename = "洞窟", "森のほったて小屋", "住み心地のいい家", "セレブ邸", "サイバーハウス", "小城", "宮殿"
		_bookself = "紙屑同然の", "素人丸出しの", "ありきたりな", "光るものがある", "いい感じの", "納得いく", "至高の"
		_bookselfs = "紙屑同然の本", "素人丸出しの本", "ありきたりな本", "光るものがある本", "いい感じの本", "納得いく本", "至高の本"
		_furniture = "", "みすぼらしい", "気になる", "いい感じの", "マダム殺しの", "思わず見入りそうな", "マニア向けの", "凄く華麗な", "王家御用達の", "芸術的な", "神々しい", "世界最高の"
		_weight = "超ミニに", "小振りに", "手ごろに", "やや大きく", "どでかく", "かなり巨大に", "化け物サイズに", "人より大きく", "伝説的サイズに", "象より重く"
	}
	else {
		_homename = "cave", "shack", "cozy house", "estate", "cyber house", "small castle", "palace"
		_bookself = "paper scraps", "noob", "commonplace", "good sense", "cool", "satisfied", "masterpiece"
		_bookselfs = "paper scraps book", "noob book", "commonplace book", "good sense book", "cool book", "satisfied book", "masterpiece book"
		_furniture = "", "stupid", "lame", "cool", "madam's favorite", "bewitched", "maniac", "magnificent", "royal", "masterpiece", "heavenly", "godly"
		_weight = "extremely mini", "small", "handy", "rather big", "huge", "pretty huge", "monstrous-size", "bigger than a man", "legendary-size", "heavier than an elephant"
	}
	sdim _tone, 20, 10
	if ( jp ) {
		_reward = "", "装備品", "魔道具", "防具", "武器", "補給品"
	}
	if ( en ) {
		_reward = "", "equipment", "magical goods", "armor", "weapons", "ores", "furnitures"
	}
	if ( jp ) {
		_time = "深夜", "夜明け", "朝", "昼", "宵", "夜", "", ""
	}
	if ( en ) {
		_time = "Midnight", "Dawn", "Morning", "Noon", "Dusk", "Night", "", ""
	}
	if ( jp ) {
		_stats = " 力", " 耐", " 器", " 感", " 習", " 意", " 魔", " 魅"
	}
	if ( en ) {
		_stats = "STR", "CON", "DEX", "PER", "LER", "WIL", "MAG", "CHR"
	}
	if ( jp ) {
		_stats2 = "筋力", "耐久", "器用", "感覚", "習得", "意志", "魔力", "魅力"
	}
	if ( en ) {
		_stats2 = " STR", " CON", " DEX", " PER", " LER", " WIL", " MAG", " CHR"
	}
	if ( jp ) {
		_hunger = "餓死中", "飢　餓", "空　腹", "空　腹", "空　腹", "", "", "", "", "", "満　腹", "満　腹", "食過ぎ"
	}
	if ( en ) {
		_hunger = "Starving!", "Starving", "Hungry!", "Hungry", "Hungry", "", "", "", "", "", "Satisfied", "Satisfied!", "Bloated"
	}
	if ( jp ) {
		_thirsty = "脱水症", "渇　き", "乾　燥", "乾　燥", "乾　燥", "", "", "", "", "", "湿　潤", "湿　潤", "飲過ぎ"
	}
	if ( en ) {
		_thirsty = "Drying!", "Drying", "Thirsty!", "Thirsty", "Thirsty", "", "", "", "", "", "Wetting", "Wetting!", "Distended"
	}
	if ( jp ) {
		_burden = "", "重　荷", "圧　迫", "超　過", "潰れ中"
	}
	if ( en ) {
		_burden = "", "Burden", "Burden!", "Overweight", "Overweight!"
	}
	if ( jp ) {
		_sleep = "睡眠可", "要睡眠", "要睡眠"
	}
	if ( en ) {
		_sleep = "Sleepy", "Need Sleep", "Need Sleep!"
	}
	if ( jp ) {
		_consick = "病　気", "重　病"
	}
	if ( en ) {
		_consick = "Sick", "Very Sick"
	}
	if ( jp ) {
		_conpoison = "　毒", "猛　毒"
	}
	if ( en ) {
		_conpoison = "Poisoned", "Poisoned Bad!"
	}
	if ( jp ) {
		_conmpoison = "魔　漏", "放　出"
	}
	if ( en ) {
		_conmpoison = "MPoison", "Emission"
	}
	if ( jp ) {
		_condim = "朦　朧", "混　濁", "気　絶"
	}
	if ( en ) {
		_condim = "Dim", "Muddled", "Unconscious"
	}
	if ( jp ) {
		_conangry = "激　怒", "狂　乱"
	}
	if ( en ) {
		_conangry = "Fury", "Berserk"
	}
	if ( jp ) {
		_conmatou = "メタル"
	}
	if ( en ) {
		_conmatou = "Metal"
	}
	if ( jp ) {
		_condupli = "杖複製"
	}
	if ( en ) {
		_condupli = "Dupli"
	}
	if ( jp ) {
		_conmuteki = "無　敵"
	}
	if ( en ) {
		_conmuteki = "Muteki"
	}
	if ( jp ) {
		_conjudo = "柔　術"
	}
	if ( en ) {
		_conjudo = "Jiu-jitsu"
	}
	if ( jp ) {
		_conadvance = "高度詠唱"
	}
	if ( en ) {
		_conadvance = "Adv-Cast"
	}
	if ( jp ) {
		_conwash = "洗　脳"
	}
	if ( en ) {
		_conwash = "Brainwash"
	}
	if ( jp ) {
		_conkaen = "怯　み"
	}
	if ( en ) {
		_conkaen = "Wince"
	}
	if ( jp ) {
		_conreiki = "震　え"
	}
	if ( en ) {
		_conreiki = "Chills"
	}
	if ( jp ) {
		_conbleed = "出　血", "出　血", "大出血"
	}
	if ( en ) {
		_conbleed = "Bleeding", "Bleeding!", "Hemorrhage"
	}
	if ( jp ) {
		_coninsane = "不安定", "狂　気", "崩　壊"
	}
	if ( en ) {
		_coninsane = "Unsteady", "Insane", "Paranoia"
	}
	if ( jp ) {
		_condrunk = "酔払い"
	}
	if ( en ) {
		_condrunk = "Drunk"
	}
	if ( jp ) {
		_conwet = "濡　れ"
	}
	if ( en ) {
		_conwet = "Wet"
	}
	if ( jp ) {
		_conoil = "オイル"
	}
	if ( en ) {
		_conoil = "Oil"
	}
	if ( jp ) {
		_coninvert = "転　倒"
	}
	if ( en ) {
		_coninvert = "Invert"
	}
	if ( jp ) {
		_congravity = "重　力"
	}
	if ( en ) {
		_congravity = "Gravity"
	}
	if ( jp ) {
		_consleep = "睡　眠", "爆　睡"
	}
	if ( en ) {
		_consleep = "Sleep", "Deep Sleep"
	}
	if ( jp ) {
		_conblind = "盲　目"
	}
	if ( en ) {
		_conblind = "Blinded"
	}
	if ( jp ) {
		_conparalyze = "麻　痺"
	}
	if ( en ) {
		_conparalyze = "Paralyzed"
	}
	if ( jp ) {
		_conmochi = "呼吸困難", "窒　息"
	}
	if ( en ) {
		_conmochi = "Dyspnea", "Choked"
	}
	if ( jp ) {
		_conconfuse = "混　乱"
	}
	if ( en ) {
		_conconfuse = "Confused"
	}
	if ( jp ) {
		_confear = "恐　怖"
	}
	if ( en ) {
		_confear = "Fear"
	}
	if ( jp ) {
		_conbrowbeat = "畏　縮"
	}
	if ( en ) {
		_conbrowbeat = "Atrophy"
	}
	if ( jp ) {
		_conbind = "束　縛", "不　動"
	}
	if ( en ) {
		_conbind = "Bind", "Immobility"
	}
	if ( jp ) {
		_conash = "灰　化"
	}
	if ( en ) {
		_conash = "Ash body"
	}
	if ( jp ) {
		_conovergods = "神智超越"
	}
	if ( en ) {
		_conovergods = "OverGods"
	}
	if ( jp ) {
		_confatigue = "軽疲労", "疲　労", "過　労"
	}
	if ( en ) {
		_confatigue = "Tired", "Very tired", "VERY tired"
	}
	if ( jp ) {
		_quality = "", "粗悪", "良質", "高品質", "奇跡", "神器", "特別"
	}
	if ( en ) {
		_quality = "", "bad", "good", "great", "miracle", "godly", "special"
	}
	if ( jp ) {
		_resist = "致命的な弱点", "弱点", "耐性なし", "弱い耐性", "普通の耐性", "強い耐性", "素晴らしい耐性"
	}
	if ( en ) {
		_resist = "Criticaly Weak", "Weak", "No Resist", "Little", "Normal", "Strong", "Superb"
	}
	if ( jp ) {
		_mark = "。", "？", "！", ""
	}
	if ( en ) {
		_mark = ".", "?", "!", ""
	}
	if ( jp ) {
		_sex = "男", "女"
	}
	if ( en ) {
		_sex = "Male", "Female"
	}
	if ( jp ) {
		_sex2 = "男", "女"
	}
	if ( en ) {
		_sex2 = "boy", "girl"
	}
	if ( jp ) {
		_onii = "お兄", "お姉"
	}
	if ( jp ) {
		_syujin = "ご主人様", "お嬢様"
	}
	if ( jp ) {
		strhint1 = "ｶｰｿﾙ [選択]  "
		strhint2 = "" + key_pageup + "," + key_pagedown + " [ページ切替]  "
		strhint3 = "Shift,Esc [閉じる]  "
		strhint3b = "Shift,Esc [戻る]  "
		strhint4 = "決定、"
		strhint5 = "" + key_identify + " [既知の情報]  "
		strhint5b = "" + key_mode + " [情報切替]  "
		strhint6 = "p [ポートレイト変更]  "
		strhint7 = "0〜9 [ショートカット]  "
		strhint8 = "* [非表示]　/ [全表示]"
		strmale = "男性"
		strfemale = "女性"
		strthankyou = "ありがとうございます！"
		strbye = "さようなら"
		strbyea = "さよならだ"
		strbaby = "ベイベー！"
		strmore = "(続く)"
		strnogold = "(所持金が足りない！)"
		strinteractfail = "その方向には、操作できる対象はない。"
		invtitle = "", "調べる", "置く", "拾う", "", "食べる", "装備する", "読む", "飲む", "振る", "渡す", "購入する", "売却する", "鑑定する", "使う", "開く", "料理する", "調合", "混ぜる対象", "捧げる", "交換する", "提示する", "取る", "対象の", "入れる", "もらう", "投げる", "盗む", "交換する", "予約する", "　", "　", "画像付与"
		bodyn = "", "頭", "首", "背中", "胴体", "手", "指", "腕", "腰", "足", "遠隔", "矢弾"
		actlistn = "行動", "食事", "読書", "移動", "休息", "採掘", "演奏", "釣り", "採取", "穴掘り", "行動", "行動", "合成", "チャージ", "伐採", "説法", "食事", "舞", "食事", "説得", "ギャグ", "嘘", "脅迫", "歌", "", "執筆", "仕事", "仕事", "仕事", "物乞い"
	}
	else {
		strhint1 = "Cursor [Select]  "
		strhint2 = "" + key_pageup + "," + key_pagedown + " [Page]  "
		strhint3 = "Shift,Esc [Close]  "
		strhint3b = "Shift,Esc [Back]  "
		strhint4 = "Enter,"
		strhint5 = "" + key_identify + " [Known info]  "
		strhint5b = "" + key_mode + " [Mode]  "
		strhint6 = "p [Portrait]  "
		strhint7 = "0~9 [Shortcut]  "
		strhint8 = "* [OFF] / [ALL-ON]"
		strmale = "male"
		strfemale = "female"
		strthankyou = "Thank you very much!"
		strbye = "Bye bye."
		strbyea = "Bye bye."
		strbaby = "Party time!"
		strmore = "(More)"
		strnogold = "(You don't have enough money!)"
		strinteractfail = "There's no valid target in that direction."
		invtitle = "", "Examine", "Drop", "Pick Up", "", "Eat", "Wear", "Read", "Drink", "Zap", "Give", "Buy", "Sell", "Identify", "Use", "Open", "Cook", "Mix", "Mix Target", "Offer", "Trade", "Present", "Take", "Target", "Put", "Take", "Throw", "Pickpocket", "Trade", "Reserve", "　", "　", "Set mark"
		bodyn = "", "Head", "Neck", "Back", "Body", "Hand", "Ring", "Arm", "Waist", "Leg", "Shoot", "Ammo"
		actlistn = "current action", "eating", "reading", "moving", "resting", "mining", "playing", "fishing", "collecting materials", "searching", "current action", "current action", "blend", "charge", "felling", "preaching", "eating", "dance", "eating", "persuasion", "joke", "lie", "intimidation", "song", "", "writing", "work", "work", "work", "begging"
	}
	sdim _cast, 30, 10
	_cast(0) = lang("魔法を詠唱した。", " casts a spell.")
	_cast(1) = lang("糸を飛ばした。", " splits cobweb.")
	_cast(2) = lang("体液を飛ばした。", " spreads body fluid.")
	_cast(3) = lang("触手を伸ばした。", " puts out a tentacle.")
	_cast(4) = lang("視線を飛ばした。", " gazes.")
	_cast(5) = lang("胞子を飛ばした。", " scatters spores.")
	_cast(6) = lang("振動を起こした。", " vibrates.")
	_cast(7) = lang("魔法陣を展開した。", " expands a magical circle.")
	_cast(8) = lang("粉を散布した。", " sprays the powder.")
	_cast(9) = lang("思念を放った。", " shoots the vicious mind.")
	sdim _melee, 20, 3, 13
	if ( jp ) {
		_melee(0, 0) = "殴って", "殴られた。", "手"
	}
	if ( en ) {
		_melee(0, 0) = "punch", "punch", "hand"
	}
	if ( jp ) {
		_melee(0, 3) = "噛んで", "噛みつかれた。", "牙"
	}
	if ( en ) {
		_melee(0, 3) = "bite", "bite", "fang"
	}
	if ( jp ) {
		_melee(0, 4) = "睨んで", "睨まれた。", "眼"
	}
	if ( en ) {
		_melee(0, 4) = "gaze", "gaze", "eye"
	}
	if ( jp ) {
		_melee(0, 1) = "引っ掻き", "引っ掻かれた。", "爪"
	}
	if ( en ) {
		_melee(0, 1) = "claw", "claw", "claw"
	}
	if ( jp ) {
		_melee(0, 5) = "刺し", "刺された。", "針"
	}
	if ( en ) {
		_melee(0, 5) = "sting", "sting", "needle"
	}
	if ( jp ) {
		_melee(0, 6) = "触って", "触られた。", "手"
	}
	if ( en ) {
		_melee(0, 6) = "touch", "touch", "hand"
	}
	if ( jp ) {
		_melee(0, 7) = "胞子で攻撃し", "胞子を飛ばされた。", "胞子"
	}
	if ( en ) {
		_melee(0, 7) = "attack", "attack", "spore"
	}
	if ( jp ) {
		_melee(0, 8) = "打って", "打たれた。", "枝"
	}
	if ( en ) {
		_melee(0, 8) = "bash", "bash", "branch"
	}
	if ( jp ) {
		_melee(0, 9) = "地面に叩きつけ", "地面へ叩きつけられた。", "剛腕"
	}
	if ( en ) {
		_melee(0, 9) = "strike", "strike", "hand"
	}
	if ( jp ) {
		_melee(0, 10) = "体当たりして", "体当たりされた。", "体"
	}
	if ( en ) {
		_melee(0, 10) = "rush", "rush", "body"
	}
	if ( jp ) {
		_melee(0, 11) = "鋏んで", "鋏まれた。", "鋏"
	}
	if ( en ) {
		_melee(0, 11) = "cut", "cut", "scissors"
	}
	if ( jp ) {
		_melee(0, 2) = "蹴り抜いて", "蹴り飛ばされた。", "脚"
	}
	if ( en ) {
		_melee(0, 2) = "kick", "kick", "leg"
	}
	randcolor = 0, 4, 2, 5, 6
	_randcolor = 0, 2, 4, 5, 6, 3
	if ( jp ) {
		_namepotion = "透明な", "緑色の", "青い", "金色の", "茶色い", "赤い"
	}
	if ( en ) {
		_namepotion = "clear", "green", "blue", "gold", "brown", "red"
	}
	if ( jp ) {
		_namespellbook = "分厚い", "苔むした", "真新しい", "豪華な", "古びた", "血の滴る"
	}
	if ( en ) {
		_namespellbook = "thick", "mossy", "clear", "luxurious", "old", "bloody"
	}
	if ( jp ) {
		_namescroll = "かすれた", "苔むした", "ぼろぼろの", "難しそうな", "古びた", "血文字の"
	}
	if ( en ) {
		_namescroll = "blurred", "mossy", "ragged", "boring", "old", "bloody"
	}
	if ( jp ) {
		_namestaff = "鉄の", "つたの", "サファイアの", "金の", "木の", "錆の"
	}
	if ( en ) {
		_namestaff = "iron", "ivy", "sapphire", "golden", "wooden", "rusty"
	}
	if ( jp ) {
		_namering = "鉄の", "緑の", "サファイアの", "金の", "木の", "錆びた"
	}
	if ( en ) {
		_namering = "iron", "green", "sapphire", "golden", "wooden", "rusty"
	}
	if ( jp ) {
		homepage = "http://homepage3.nifty.com/rfish/index.html"
	}
	if ( en ) {
		homepage = "http://homepage3.nifty.com/rfish/index_e.html"
	}
	if ( jp ) {
		strcursed = "" + "呪われた"
	}
	else {
		if ( "cursed" == "" ) {
			strcursed = "" + "呪われた"
		}
		else {
			strcursed = "" + "cursed"
		}
	}
	if ( jp ) {
		strblessed = "" + "祝福された"
	}
	else {
		if ( "blessed" == "" ) {
			strblessed = "" + "祝福された"
		}
		else {
			strblessed = "" + "blessed"
		}
	}
	if ( jp ) {
		stramulet = "" + "首飾り"
	}
	else {
		if ( "amulet" == "" ) {
			stramulet = "" + "首飾り"
		}
		else {
			stramulet = "" + "amulet"
		}
	}
	if ( jp ) {
		strring = "" + "指輪"
	}
	else {
		if ( "ring" == "" ) {
			strring = "" + "指輪"
		}
		else {
			strring = "" + "ring"
		}
	}
	if ( jp ) {
		strpotion = "" + "ポーション"
	}
	else {
		if ( "potion" == "" ) {
			strpotion = "" + "ポーション"
		}
		else {
			strpotion = "" + "potion"
		}
	}
	if ( jp ) {
		strspellbook = "" + "魔法書"
	}
	else {
		if ( "spellbook" == "" ) {
			strspellbook = "" + "魔法書"
		}
		else {
			strspellbook = "" + "spellbook"
		}
	}
	if ( jp ) {
		strscroll = "" + "巻物"
	}
	else {
		if ( "scroll" == "" ) {
			strscroll = "" + "巻物"
		}
		else {
			strscroll = "" + "scroll"
		}
	}
	if ( jp ) {
		strstaff = "" + "魔法棒"
	}
	else {
		if ( "rod" == "" ) {
			strstaff = "" + "魔法棒"
		}
		else {
			strstaff = "" + "rod"
		}
	}
	if ( jp ) {
		strbracketleft = "" + "『"
	}
	else {
		if ( "<" == "" ) {
			strbracketleft = "" + "『"
		}
		else {
			strbracketleft = "" + "<"
		}
	}
	if ( jp ) {
		strbracketright = "" + "』"
	}
	else {
		if ( ">" == "" ) {
			strbracketright = "" + "』"
		}
		else {
			strbracketright = "" + ">"
		}
	}
	if ( jp ) {
		strfix = "" + "修正"
	}
	else {
		if ( "bonus" == "" ) {
			strfix = "" + "修正"
		}
		else {
			strfix = "" + "bonus"
		}
	}
	if ( jp ) {
		strsex = "" + "性別"
	}
	else {
		if ( "sex" == "" ) {
			strsex = "" + "性別"
		}
		else {
			strsex = "" + "sex"
		}
	}
	if ( jp ) {
		strdoomed = "" + "堕落した"
	}
	else {
		if ( "doomed" == "" ) {
			strdoomed = "" + "堕落した"
		}
		else {
			strdoomed = "" + "doomed"
		}
	}
	if ( jp ) {
		strgold = "" + " gold"
	}
	else {
		if ( " gold pieces" == "" ) {
			strgold = "" + " gold"
		}
		else {
			strgold = "" + " gold pieces"
		}
	}
	if ( jp ) {
		strplat = "" + " plat"
	}
	else {
		if ( " platinum pieces" == "" ) {
			strplat = "" + " plat"
		}
		else {
			strplat = "" + " platinum pieces"
		}
	}
	if ( jp ) {
		strweight = "" + "s"
	}
	else {
		if ( "s" == "" ) {
			strweight = "" + "s"
		}
		else {
			strweight = "" + "s"
		}
	}
	if ( jp ) {
		stryes = "" + "ああ"
	}
	else {
		if ( "Yes" == "" ) {
			stryes = "" + "ああ"
		}
		else {
			stryes = "" + "Yes"
		}
	}
	if ( jp ) {
		strno = "" + "いや…"
	}
	else {
		if ( "No.." == "" ) {
			strno = "" + "いや…"
		}
		else {
			strno = "" + "No.."
		}
	}
	if ( jp ) {
		strblank = "" + ""
	}
	else {
		if ( " " == "" ) {
			strblank = "" + ""
		}
		else {
			strblank = "" + " "
		}
	}
	return
	goto *label_0153

#defcfunc elename int elename_ele
	if ( efid == SKILL_SPACT_TOUCH_OF_HUNGER ) {
		return lang("飢えた", "starving")
	}
	if ( efid == SKILL_SPACT_TOUCH_OF_WEAKNESS ) {
		return lang("腐った", "rotten")
	}
	if ( efid == SKILL_SPACT_TOUCH_OF_FEAR ) {
		return lang("恐ろしい", "fearful")
	}
	if ( efid == SKILL_SPACT_TOUCH_OF_SLEEP ) {
		return lang("柔らかい", "silky")
	}
	if ( elename_ele == SKILL_RES_FIRE ) {
		return lang("燃える", "burning")
	}
	if ( elename_ele == SKILL_RES_COLD ) {
		return lang("冷たい", "icy")
	}
	if ( elename_ele == SKILL_RES_LIGHTNING ) {
		return lang("放電する", "electric")
	}
	if ( elename_ele == SKILL_RES_MIND ) {
		return lang("霊的な", "psychic")
	}
	if ( elename_ele == SKILL_RES_NERVE ) {
		return lang("痺れる", "numb")
	}
	if ( elename_ele == SKILL_RES_SOUND ) {
		return lang("震える", "shivering")
	}
	if ( elename_ele == SKILL_RES_POISON ) {
		return lang("毒の", "poisonous")
	}
	if ( elename_ele == SKILL_RES_NETHER ) {
		return lang("地獄の", "infernal")
	}
	if ( elename_ele == SKILL_RES_CHAOS ) {
		return lang("混沌の", "chaotic")
	}
	if ( elename_ele == SKILL_RES_DARKNESS ) {
		return lang("暗黒の", "gloomy")
	}
	if ( elename_ele == SKILL_RESDMG_CUT ) {
		return lang("出血の", "cut")
	}
	if ( elename_ele == SKILL_RESDMG_ETHER ) {
		return lang("エーテルの", "ether")
	}
	return "?"

*label_0153

#deffunc txttargetlevel
	if ( cdata(CDATA_LEVEL, cc) * 20 < cdata(CDATA_LEVEL, tc) ) {
		s = lang("相手が巨人だとすれば、あなたは蟻のフン以下だ。", "If " + he(tc) + " is a giant, you are less than a dropping of an ant.")
		return
	}
	if ( cdata(CDATA_LEVEL, cc) * 10 < cdata(CDATA_LEVEL, tc) ) {
		s = lang("絶対に勝てない相手だ。", cnven(he(tc)) + " can mince you with " + his(tc) + " eyes closed.")
		return
	}
	if ( cdata(CDATA_LEVEL, cc) * 5 < cdata(CDATA_LEVEL, tc) ) {
		s = lang("確実に殺されるだろう。", "You will get killed, a hundred percent sure.")
		return
	}
	if ( cdata(CDATA_LEVEL, cc) * 3 < cdata(CDATA_LEVEL, tc) ) {
		s = lang("奇跡が起きなければ殺されるだろう。", "You will get killed unless miracles happen.")
		return
	}
	if ( cdata(CDATA_LEVEL, cc) * 2 < cdata(CDATA_LEVEL, tc) ) {
		s = lang("少なくとも、あなたの倍は強そうだ。", cnven(he(tc)) + " " + is(tc) + " at least twice stronger than you.")
		return
	}
	if ( cdata(CDATA_LEVEL, cc) * 3 / 2 < cdata(CDATA_LEVEL, tc) ) {
		s = lang("相手はかなり強そうだ。", "The opponent looks quite strong.")
		return
	}
	if ( cdata(CDATA_LEVEL, cc) < cdata(CDATA_LEVEL, tc) ) {
		s = lang("勝てない相手ではない。", "Won't be an easy fight.")
		return
	}
	if ( cdata(CDATA_LEVEL, cc) / 3 * 2 < cdata(CDATA_LEVEL, tc) ) {
		s = lang("たぶん勝てそうだ。", "You will probably win.")
		return
	}
	if ( cdata(CDATA_LEVEL, cc) / 2 < cdata(CDATA_LEVEL, tc) ) {
		s = lang("負ける気はしない。", cnven(he(tc)) + " " + is(tc) + " a easy opponent.")
		return
	}
	if ( cdata(CDATA_LEVEL, cc) / 3 < cdata(CDATA_LEVEL, tc) ) {
		s = lang("目隠ししていても勝てそうだ。", "You bet you can beat " + him(tc) + " with your eyes closed.")
		return
	}
	s = lang("目隠しして座っていても勝てる。", "You can absolutely beat " + him(tc) + " with your eyes closed and arms crossed.")
	return

#deffunc txttargetsp
	sperce = cdata(CDATA_SP, tc) * 100 / cdata(CDATA_MAX_SP, tc)
	if ( cdata(CDATA_SP, tc) < 0 ) {
		s = lang("明らかに疲労困憊だ。[SP " + sperce + "％] ", name(tc) + " " + is(tc) + " utterly spent.[SP " + sperce + " percent]")
		return
	}
	if ( cdata(CDATA_SP, tc) < 25 ) {
		s = lang("疲労を隠す気力もない。[SP " + sperce + "％]", name(tc) + " " + is(tc) + " too exhausted to pay heed to anything else.[SP " + sperce + " percent]")
		return
	}
	if ( cdata(CDATA_SP, tc) < 50 ) {
		s = lang("動きがふらついている。[SP " + sperce + "％]", name(tc) + " " + is(tc) + " struggling to stay upright.[SP " + sperce + " percent]")
		return
	}
	if ( cdata(CDATA_SP, tc) < cdata(CDATA_MAX_SP, tc) / 4 ) {
		s = lang("肩で息をしている。[SP " + sperce + "％]", name(tc) + " " + is(tc) + " panting.[SP " + sperce + " percent]")
		return
	}
	if ( cdata(CDATA_SP, tc) < cdata(CDATA_MAX_SP, tc) / 2 ) {
		s = lang("焦りが表情に出ている。[SP " + sperce + "％]", name(tc) + " " + is(tc) + " looking rather flustered.[SP " + sperce + " percent]")
		return
	}
	if ( cdata(CDATA_SP, tc) < cdata(CDATA_MAX_SP, tc) * 3 / 4 ) {
		s = lang("わずかに呼吸が乱れている。[SP " + sperce + "％]", name(tc) + " " + is(tc) + " slightly out of breath.[SP " + sperce + " percent]")
		return
	}
	s = lang("平然としている。[SP " + sperce + "％]", name(tc) + " " + is(tc) + " unperturbed.[SP " + sperce + " percent]")
	return
	goto *label_0168

#defcfunc sncnv var sncnv_arg1
	return strmid(sncnv_arg1, 0, instr(sncnv_arg1, 0, " ")) + " "

#deffunc sngeneral var sngeneral_arg1
	sngeneral_arg1 = lang("雑貨屋の" + sngeneral_arg1, sncnv(sngeneral_arg1) + "the general vendor")
	return

#deffunc sninn var sninn_arg1
	sninn_arg1 = lang("宿屋の" + sninn_arg1, sncnv(sninn_arg1) + "the Innkeeper")
	return

#deffunc sntrade var sntrade_arg1
	sntrade_arg1 = lang("交易店の" + sntrade_arg1, sncnv(sntrade_arg1) + "the trader")
	return

#deffunc sngoods var sngoods_arg1
	sngoods_arg1 = lang("何でも屋の" + sngoods_arg1, sncnv(sngoods_arg1) + "the goods vendor")
	return

#deffunc snbakery var snbakery_arg1
	snbakery_arg1 = lang("パン屋の" + snbakery_arg1, sncnv(snbakery_arg1) + "the baker")
	return

#deffunc snmagic var snmagic_arg1
	snmagic_arg1 = lang("魔法店の" + snmagic_arg1, sncnv(snmagic_arg1) + "the magic vendor")
	return

#deffunc snarmor var snarmor_arg1
	snarmor_arg1 = lang("武具店の" + snarmor_arg1, sncnv(snarmor_arg1) + "the blacksmith")
	return

#deffunc sntrainer var sntrainer_arg1
	sntrainer_arg1 = lang("ギルドの" + sntrainer_arg1, sncnv(sntrainer_arg1) + "the trainer")
	return

#deffunc snfish var snfish_arg1
	snfish_arg1 = lang("釣具店の" + snfish_arg1, sncnv(snfish_arg1) + "the fisher")
	return

#deffunc snblack var snblack_arg1
	snblack_arg1 = lang("ブラックマーケットの" + snblack_arg1, sncnv(snblack_arg1) + "the blackmarket vendor")
	return

#deffunc snfood var snfood_arg1
	snfood_arg1 = lang("食品店" + snfood_arg1, sncnv(snfood_arg1) + "the food vendor")
	return

*label_0168

#deffunc txtsetlastword
	notesel buff
	noteload exedir + "user\\" + lang("lastwords.txt", "lastwords-e.txt")
	noteget lastword, rnd(noteinfo(0) + 1)
	return

#deffunc txtsetwinword int txtsetwinword_arg1
	repeat 6
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetwinword_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("遂に…！", "Finally!")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("当然の結果だ", "It's a matter of course.")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("おぉぉぉぉ！", "Woooooo!")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("ふっ", "Heh.")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("今日は眠れないな", "I can't sleep tonight.")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("またそんな冗談を", "You're kidding.")
		}
	loop
	return

#deffunc txtsetendword int txtsetendword_count
	repeat 3
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetendword_count
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("ただいま！", "I'm back!")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("今日は眠れないな…", "I can't sleep tonight...")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("冒険はまだ始まったばかりだ！", "My adventure is just beginning!")
		}
	loop
	return

#deffunc txtsetwinwordc int txtsetwinwordc_arg1
	repeat 3
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetwinwordc_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("神は死んだ", "Finally!")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("終わった…", "It's a matter of course.")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("弱すぎなんだけど！", "Woooooo!")
		}
	loop
	return

#deffunc txtsetquiz0 int txtsetquiz0_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．元素の神の名前は？」", "Who is god of Element?")
	repeat txtsetquiz0_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("イツパロトル", "Itzpalt")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("イツパトロル", "Itzpatl")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("イツパルトル", "Itzpait")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("イシパロトル", "Itspalt")
		}
	loop
	return

#deffunc txtsetquiz1 int txtsetquiz1_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で実際にいる魚は？」", "Which is correct name fish?")
	repeat txtsetquiz1_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("サンドボーラー", "sandborer")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("サンドポーラー", "sandboler")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("サントボーラー", "sanbdorer")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("サンドポーラー", "sanbdoler")
		}
	loop
	return

#deffunc txtsetquiz2 int txtsetquiz2_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で一番高価なのは？」", "Which item is most expensive?")
	repeat txtsetquiz2_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("エメラルドの原石", "emerald")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("ミカ", "mika")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("ルビナスの原石", "rubynus")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("金塊", "gold bar")
		}
	loop
	return

#deffunc txtsetquiz3 int txtsetquiz3_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で一番軽量なのは？」", "Which item is most light?")
	repeat txtsetquiz3_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("折れた刃", "broken sword")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("旗", "flag")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("かがり台", "bonfire")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("大地の結晶", "earth crystal")
		}
	loop
	return

#deffunc txtsetquiz4 int txtsetquiz4_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で一番高価なのは？」", "Which item is most expensive?")
	repeat txtsetquiz4_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("癒し手のポーション", "healer potion")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("体力回復のポーション", "healing potion")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("致命傷治癒のポーション", "cure critical wound potion")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("重傷治癒のポーション", "cure major wound potion")
		}
	loop
	return

#deffunc txtsetquiz5 int txtsetquiz5_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．レシマスから帰還したパルミア第三代王は？」", "Who is the third king of Palmia?")
	repeat txtsetquiz5_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("ザシム", "Zashim")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("ゼーム", "Zeome")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("ゼナム", "Zenum")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("ザナム", "Zanam")
		}
	loop
	return

#deffunc txtsetquiz6 int txtsetquiz6_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．レシマスを進むのに必要だった魔石はどれ？」", "Which quest item is key of Lesimas?")
	repeat txtsetquiz6_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("賢者の魔石", "Sage's magic stone")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("隠者の魔石", "Hermit's magic stone")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("王者の魔石", "Ruler's magic Stone")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("死者の魔石", "Lord's magic stone")
		}
	loop
	return

#deffunc txtsetquiz7 int txtsetquiz7_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．異形の森の魔女とも呼ばれるエレアの少女は？」", "Who is listener of wind?")
	repeat txtsetquiz7_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("ラーネイレ", "Larnneire")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("ラーレイネ", "Larnreire")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("ラーレイレ", "Larnneine")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("ラーネレイ", "Larnreine")
		}
	loop
	return

#deffunc txtsetquiz8 int txtsetquiz8_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で最も南にあるのは？」", "Which town in the most south?")
	repeat txtsetquiz8_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("ラーナ", "Larna")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("ヨウィン", "Yowyn")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("ルミエスト", "Lumiest")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("ダルフィ", "Derphy")
		}
	loop
	return

#deffunc txtsetquiz9 int txtsetquiz9_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で最も西にあるのは？」", "Which village in the most west?")
	repeat txtsetquiz9_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("ヴァルム", "Valm")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("クルアルム", "Kurualm")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("メルガス", "Melugas")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("アーク・ベルク", "Arcbelc")
		}
	loop
	return

#deffunc txtsetquiz10 int txtsetquiz10_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．伝説の職人『ガロク』の髪色に一番近いのは？」", "Which color is most close to the hair color of <Garokk>?")
	repeat txtsetquiz10_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("赤色", "Red")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("金色", "Gold")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("灰色", "Gray")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("藍色", "Indigo")
		}
	loop
	return

#deffunc txtsetquiz11 int txtsetquiz11_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で通常、最もレベルの高いゴーレムは？」", "Which golem is higher level?")
	repeat txtsetquiz11_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("スカイゴーレム", "sky golem")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("ミスリルゴーレム", "mithril golem")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("ゴールドゴーレム", "golden golem")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("スティールゴーレム", "steel golem")
		}
	loop
	return

#deffunc txtsetquiz12 int txtsetquiz12_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で死体に毒が含まれていないのは？」", "Which monster is not contain poison in the corpse?")
	repeat txtsetquiz12_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("まだら蜘蛛", "spider")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("サソリ", "scorpion")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("ブラックウィドウ", "black widow")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("パラライザー", "paralyzer")
		}
	loop
	return

#deffunc txtsetquiz13 int txtsetquiz13_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で名前の正確なハウンドは？」", "Which is correct name monster?")
	repeat txtsetquiz13_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("幻惑ハウンド", "illusion hound")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("冥界ハウンド", "hell hound")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("暗黒ハウンド", "cold hound")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("混沌ハウンド", "darkness hound")
		}
	loop
	return

#deffunc txtsetquiz14 int txtsetquiz14_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で通常、最もレベルの高いキャラは？」", "Which human is higher level?")
	repeat txtsetquiz14_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("シスター", "sister")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("アリーナマスター", "arena master")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("バーテンダー", "bartender")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("癒し手", "healer")
		}
	loop
	return

#deffunc txtsetquiz15 int txtsetquiz15_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で一番高価なのは？」", "Which item is most expensive?")
	repeat txtsetquiz15_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("店の権利書", "shop deed")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("博物館の権利書", "museum deed")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("畑の権利書", "farm deed")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("牧場の権利書", "ranch deed")
		}
	loop
	return

#deffunc txtsetquiz16 int txtsetquiz16_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で主能力：感覚を特に鍛えるハーブは？」", "Which herb most grows PER?")
	repeat txtsetquiz16_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("スペンスウィード", "spenseweed")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("マレイロン", "mareilon")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("モージア", "morgia")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("アルローニア", "alraunia")
		}
	loop
	return

#deffunc txtsetquiz17 int txtsetquiz17_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で果実の木から降ってこないのは？」", "Which item not falls down from fruits tree?")
	repeat txtsetquiz17_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("グアバ", "guava")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("さくらんぼ", "cherry")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("苺", "strawberry")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("レモン", "lemon")
		}
	loop
	return

#deffunc txtsetquiz18 int txtsetquiz18_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で魔法書が存在しない魔法は？」", "Which magic is not exist spellbook?")
	repeat txtsetquiz18_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("精神復活", "restore spirit")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("扉生成", "make door")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("酸の海", "acid ground")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("物質感知", "detect objects")
		}
	loop
	return

#deffunc txtsetquiz19 int txtsetquiz19_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．混沌の城《奇形》に住む死霊の神は？」", "Which monster lives in Fort of Chaos <Collapsed>?")
	repeat txtsetquiz19_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("不浄なる者『アズラシズル』", "<Azzrssil>")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("闇の奇形『イスシズル』", "<Issizzle>")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("悪霊神『ウルザシズル』", "<Ulzassil>")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("混沌の翼『エグゾシズル』", "<Exossil>")
		}
	loop
	return

#deffunc txtsetquiz20 int txtsetquiz20_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．九頭竜の城に住む深海の姫の名前は？」", "Which is correct name of turtle in Valm?")
	repeat txtsetquiz20_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("ミヅキ", "<Leiki>")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("シズキ", "<Renki>")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("ミツキ", "<Lenki>")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("ミズキ", "<Leike>")
		}
	loop
	return

#deffunc txtsetquiz21 int txtsetquiz21_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．キミが葬祭の『アヌビス』から回収したものは？」", "Which item you robbed from <Anubis> the master of death?")
	repeat txtsetquiz21_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("太陽のアンク", "Ankh of sun")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("太陽の秤", "Scales of sun")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("太陽のタウク", "Choker of sun")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("太陽の首輪", "Bracelet of sun")
		}
	loop
	return

#deffunc txtsetquiz22 int txtsetquiz22_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．カルーンの孤狼の異名を持つ人物は？」", "Which human's alias is the lonely wolf of Karune?")
	repeat txtsetquiz22_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("カラム", "<Karam>")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("スラン", "<Slan>")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("カイン", "<Caim>")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("レンド", "<Lend>")
		}
	loop
	return

#deffunc txtsetquiz23 int txtsetquiz23_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．魔術士ギルドの番人の名前は？」", "Who is the watchman of mage guild?")
	repeat txtsetquiz23_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("レクサス", "<Lexus>")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("レーナス", "<Lenas>")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("レヴラス", "<Revlus>")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("レイオス", "<Redos>")
		}
	loop
	return

#deffunc txtsetquiz24 int txtsetquiz24_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．サウスティリスの一番東にある村の名前は？」", "Which village in the most east on South Tyris?")
	repeat txtsetquiz24_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("ルードゥス", "Ludus")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("エイレル", "Eirel")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("メルカーン", "Melkawn")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("ルストール", "Ruoza")
		}
	loop
	return

#deffunc txtsetquiz25 int txtsetquiz25_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で一番安価なのは？」", "Which item is cheapest?")
	repeat txtsetquiz25_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("ミカ", "mika")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("エメラルドの原石", "emerald")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("ルビナスの原石", "rubynus")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("金塊", "gold bar")
		}
	loop
	return

#deffunc txtsetquiz26 int txtsetquiz26_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で一番重いのは？」", "Which item is most heavy?")
	repeat txtsetquiz26_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("かがり台", "bonfire")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("旗", "flag")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("折れた刃", "broken sword")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("大地の結晶", "earth crystal")
		}
	loop
	return

#deffunc txtsetquiz27 int txtsetquiz27_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．パルミアの影の異名を持つ人物は？」", "Which human's alias is the shadow of Palmia?")
	repeat txtsetquiz27_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("スラン", "<Slan>")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("カラム", "<Karam>")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("カイン", "<Caim>")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("レンド", "<Lend>")
		}
	loop
	return

#deffunc txtsetquiz28 int txtsetquiz28_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．混沌の城《奇形》に住む死霊の神は？」", "Which monster lives in Fort of Chaos <Hell>?")
	repeat txtsetquiz28_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("悪霊神『ウルザシズル』", "<Ulzassil>")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("闇の奇形『イスシズル』", "<Issizzle>")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("不浄なる者『アズラシズル』", "<Azzrssil>")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("混沌の翼『エグゾシズル』", "<Exossil>")
		}
	loop
	return

#deffunc txtsetquiz29 int txtsetquiz29_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で主能力：魅力を特に鍛えるハーブは？」", "Which herb most grows CHR?")
	repeat txtsetquiz29_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("アルローニア", "alraunia")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("マレイロン", "mareilon")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("モージア", "morgia")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("スペンスウィード", "spenseweed")
		}
	loop
	return

#deffunc txtsetquiz30 int txtsetquiz30_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で最も東にあるのは？」", "Which town in the most east?")
	repeat txtsetquiz30_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("ノイエル", "Noyel")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("ルミエスト", "Lumiest")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("ラーナ", "Larna")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("ダルフィ", "Derphy")
		}
	loop
	return

#deffunc txtsetquiz31 int txtsetquiz31_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．次の中で最も南にあるのは？」", "Which village in the most south?")
	repeat txtsetquiz31_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("アーク・ベルク", "Arcbelc")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("クルアルム", "Kurualm")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("メルガス", "Melugas")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("ヴァルム", "Valm")
		}
	loop
	return

#deffunc txtsetquiz32 int txtsetquiz32_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．レシマスを進むのに必要ない魔石はどれ？」", "Which quest item is not key of Lesimas?")
	repeat txtsetquiz32_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("聖者の魔石", "Saint's magic stone")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("賢者の魔石", "Sage's magic stone")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("愚者の魔石", "Fool's magic stone")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("覇者の魔石", "King's magic stone")
		}
	loop
	return

#deffunc txtsetquiz33 int txtsetquiz33_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．偽りの予言者とパルミア第三代王の関係は？」", "What kind of relationship the false prophet and the third king of Palmia?")
	repeat txtsetquiz33_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("従弟", "cousin")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("兄弟", "brother")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("親友", "confidant")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("親子", "parent and child")
		}
	loop
	return

#deffunc txtsetquiz34 int txtsetquiz34_arg1
	repeat 4
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	txt lang("「Ｑ．魔術士ギルドの調査員の名前は？」", "Who is the reporter of mage guild?")
	repeat txtsetquiz34_arg1
		if ( p(cnt) == 0 ) {
			seitou = cnt
			s(cnt) = lang("レーナス", "<Lenas>")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("レクサス", "<Lexus>")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("レヴラス", "<Revlus>")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("レイオス", "<Redos>")
		}
	loop
	return

#deffunc txtsetnecrom int txtsetnecrom_arg1
	repeat 5
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetnecrom_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("ゾンビ　 ＋ ドラゴンゾンビ", "zombie + dragon zombie")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("猫ゾンビ ＋ マミー", "cat zombie + mummy")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("骸骨戦士 ＋ デッドアイズ", "skeleton + dead-eyes")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("リッチ　 ＋ ネクロドール", "lich + doll")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("やめる", "Cancel")
		}
	loop
	return

#deffunc txtsetadvmes int txtsetadvmes_count
	repeat 6
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetadvmes_count
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("伝言を取り消す", "Please cancel my message.")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("「あなたとは仲良くしておきたい」", "<I want to get along with you>")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("「ぜひ今度わが家に遊びに来てください」", "<Please come to my house to play>")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("「好きですぅ！付き合ってくだぁさい！」", "<I love you!>")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("「頑張ってください、応援しています！」", "<I'm rooting for you!>")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("「お前才能ないよ」", "<You don't have talents of  adventurer.>")
		}
	loop
	return

#deffunc txtsettamer int txtsettamer_arg1
	repeat 6
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsettamer_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("拾い食いの禁止/解除", "Prohibit the eating pick up")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("アイテム拾いの禁止/解除", "Prohibit the picking up items")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("喋り方を変える", "Change the tone")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("特に理由はないが鞭で打つ", "Prohibit the eating pick up")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("逆に鞭で打ってもらう", "Hand over the whip")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("キャンセル", "Cancel")
		}
	loop
	return

#deffunc txtsetwork int txtsetwork_count
	repeat 8
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetwork_count
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("仕事Ａを100ターンやる", "Do work-A for 100 turns")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("仕事Ｂを100ターンやる", "Do work-B for 100 turns")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("仕事Ｃを100ターンやる", "Do work-C for 100 turns")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("仕事Ａを500ターンやる", "Do work-A for 500 turns")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("仕事Ｂを500ターンやる", "Do work-B for 500 turns")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("仕事Ｃを500ターンやる", "Do work-C for 500 turns")
		}
		if ( p(cnt) == 6 ) {
			s(cnt) = lang("軽く整理整頓する", "Stay organized lightly")
		}
		if ( p(cnt) == 7 ) {
			s(cnt) = lang("何もしない", "Cancel")
		}
	loop
	return

#deffunc txtsetshop int txtsetshop_arg1
	repeat 8
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetshop_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("キャンセル", "Cancel")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("何でも屋(デフォルト)", "Goods shop")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("食品店(料理、食料専門)", "Food shop")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("魔法店(巻物、魔法書、杖専門)", "Magic shop")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("武具店(装備専門)", "Blacksmith")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("宿屋(箱、ポーション専門)", "Inn shop")
		}
		if ( p(cnt) == 6 ) {
			s(cnt) = lang("装飾家具店(装飾、家具、樹木専門)", "Decorative arts shop")
		}
		if ( p(cnt) == 7 ) {
			s(cnt) = lang("ジャンク屋(残骸、道具、ガラクタ専門)", "Junk shop")
		}
	loop
	return

#deffunc txtsetshopkazu int txtsetshopkazu_arg1
	repeat 4
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetshopkazu_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("キャンセル", "Cancel")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("制限なし(デフォルト)", "No limit")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("1日15品限定販売(交渉経験+)", "15 items limited sale (trade exp +) ")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("1日5品限定販売(交渉経験++)", "5 items limited sale (trade exp ++) ")
		}
	loop
	return

#deffunc txtsetshopfeat int txtsetshopfeat_arg1
	repeat 6
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetshopfeat_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("キャンセル", "Cancel")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("気品[魅力/客所持金上昇]", "TraitElegance")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("審美眼[交換レート上昇]", "TraitAestheticSense")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("独自販売[毎日独自に稼ぐ]", "TraitProprietarySales")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("提携力[同行時に売買強化]", "TraitTie-up")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("営業笑顔[悩殺攻撃を会得]", "TraitBusiness Smile")
		}
	loop
	return

#deffunc txtsetybank int txtsetybank_arg1
	repeat 6
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetybank_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("キャンセル", "Cancel")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("金貨を取り出す", "Take out gold pieces.")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("10万gold入れる", "Enter 100 thousand gold")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("100万gold入れる", "Enter 1 million gold")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("1000万gold入れる", "Enter 10 million gold")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("1億gold入れる", "Enter 100 million gold")
		}
	loop
	return

#deffunc txtsetride int txtsetride_arg1
	repeat 3
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetride_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("キャンセル", "Cancel")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("乗る", "Prohibit the eating pick up")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("乗せる", "Prohibit the picking up items")
		}
	loop
	return

#deffunc txtsettezca int txtsettezca_arg1
	repeat 3
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsettezca_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("一体どういうこと？", "What happened?")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("なんのつもりだ？", "What do you intend to do?")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("騙したの！？", "You deceived me!?")
		}
	loop
	return

#deffunc txtselectkimoti0 int txtselectkimoti0_count
	repeat 11
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtselectkimoti0_count
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("やっぱりなんでもない", "After all nothing.")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("愛している", "I love you.")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("食べちゃいたい", "You are so cute I could eat you up.")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("大好き", "I like you very much.")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("頼りにしている", "I rely on you.")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("これからが楽しみ", "I look forward to your future.")
		}
		if ( p(cnt) == 6 ) {
			s(cnt) = lang("嫌いじゃない", "I do not hate you.")
		}
		if ( p(cnt) == 7 ) {
			s(cnt) = lang("役立たず", "You are useless.")
		}
		if ( p(cnt) == 8 ) {
			s(cnt) = lang("キモい", "I am you uncomfortable.")
		}
		if ( p(cnt) == 9 ) {
			s(cnt) = lang("大嫌い", "I hate you.")
		}
		if ( p(cnt) == 10 ) {
			if ( cbit(CHARA_BIT_MARRIED, tc) == FALSE ) {
				s(cnt) = lang("【結婚してほしい】", "May I ask for your hand?")
			}
			else {
				s(cnt) = lang("【遺伝子を残したい】", "Let's make a gene.")
			}
		}
	loop
	return

#deffunc txtselectkimoti1 int txtselectkimoti1_count
	repeat 11
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtselectkimoti1_count
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("な、なんでもない！", "No, nothing!")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("最高に可愛い", "You are so cute.")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("心酔しています", "I am devoured by you.")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("すごく格好いい", "You are so cool.")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("心強い", "I am reassured that you are there.")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("期待している", "I am counting on you.")
		}
		if ( p(cnt) == 6 ) {
			s(cnt) = lang("割と好き", "I like you a little.")
		}
		if ( p(cnt) == 7 ) {
			s(cnt) = lang("興味ない", "I am not interested in you.")
		}
		if ( p(cnt) == 8 ) {
			s(cnt) = lang("邪魔", "You are disturbing.")
		}
		if ( p(cnt) == 9 ) {
			s(cnt) = lang("正直憎い", "I have hatred in you.")
		}
		if ( p(cnt) == 10 ) {
			if ( cbit(CHARA_BIT_MARRIED, tc) == FALSE ) {
				s(cnt) = lang("【結婚してほしい】", "May I ask for your hand?")
			}
			else {
				s(cnt) = lang("【遺伝子を残したい】", "Let's make a gene.")
			}
		}
	loop
	return

#deffunc txtselectkimoti2 int txtselectkimoti2_count
	repeat 11
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtselectkimoti2_count
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("…うまく言葉に出来ない", "... I can't speak well.")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("ずっと傍にいて", "I want you to be with me forever.")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("本当に感謝している", "I am really grateful to you.")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("心から尊敬している", "I sincerely respect you.")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("羨ましい", "I'm envious of you.")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("癒される", "I am always healed by you.")
		}
		if ( p(cnt) == 6 ) {
			s(cnt) = lang("仲良くしたい", "I want to get along with you.")
		}
		if ( p(cnt) == 7 ) {
			s(cnt) = lang("期待していない", "I do not expect from you.")
		}
		if ( p(cnt) == 8 ) {
			s(cnt) = lang("うざい", "I'm fed up with you.")
		}
		if ( p(cnt) == 9 ) {
			s(cnt) = lang("恨んでいる", "I have a resentment against you.")
		}
		if ( p(cnt) == 10 ) {
			if ( cbit(CHARA_BIT_MARRIED, tc) == FALSE ) {
				s(cnt) = lang("【結婚してほしい】", "May I ask for your hand?")
			}
			else {
				s(cnt) = lang("【遺伝子を残したい】", "Let's make a gene.")
			}
		}
	loop
	return

#deffunc txtselecttc int txtselecttc_arg1
	repeat 2
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtselecttc_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("タッグ左側", "Left of tag")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("タッグ右側", "Right of tag")
		}
	loop
	return

#deffunc txtselectride int txtselectride_arg1
	repeat 2
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtselectride_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("PC", "Player")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("馬", "Riding")
		}
	loop
	return

#deffunc txtseteyes int txtseteyes_arg1
	repeat 12
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtseteyes_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("特にない", "Nothing")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("火炎だ", "Fire")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("冷気だ", "Cold")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("電撃だ", "Lightning")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("暗黒だ", "Darkness")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("幻惑だ", "Mind")
		}
		if ( p(cnt) == 6 ) {
			s(cnt) = lang("毒だ", "Poison")
		}
		if ( p(cnt) == 7 ) {
			s(cnt) = lang("地獄だ", "Nether")
		}
		if ( p(cnt) == 8 ) {
			s(cnt) = lang("音だ", "Sound")
		}
		if ( p(cnt) == 9 ) {
			s(cnt) = lang("神経だ", "Nerve")
		}
		if ( p(cnt) == 10 ) {
			s(cnt) = lang("混沌だ", "Chaos")
		}
		if ( p(cnt) == 11 ) {
			s(cnt) = lang("魔法だ", "Magic")
		}
	loop
	return

#deffunc txtsetbirth int txtsetbirth_arg1
	repeat 2
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetbirth_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("ありがとう！", "Thanks!")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("（今日誕生日だったっけ…？）", " (My birthday...?) ")
		}
	loop
	return

#deffunc txtsetplant int txtsetplant_count
	repeat 5
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetplant_count
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("防虫剤を置く", "Put an insect repellent")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("傷を補修する", "Repair the wound")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("支柱を立てる", "Make a strut")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("土をほぐす", "Loosen the soil")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("土を根元に寄せる", "Bring soil to the root")
		}
	loop
	return

#deffunc txtsetplantr int txtsetplantr_count
	repeat 5
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetplantr_count
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("雑草を抜く", "Pull out weeds")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("余計な葉を切る", "Cut extra leaves")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("シートで覆う", "Cover with sheet")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("脇芽を摘み取る", "Pick out the side buds")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("魔力を吸わせる", "Give magical power")
		}
	loop
	return

#deffunc txtsetnecro int txtsetnecro_arg1
	repeat 6
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetnecro_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("キャンセル", "Cancel")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("使役アンデッド全回収", "Undead return")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("MP消費/アンデッド強化", "Undead strengthen")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("HP消費/アンデッド回復", "Undead restore")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("防御肉薄＆自爆命令", "Undead bomb")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("使役アンデッド招集", "Undead call")
		}
	loop
	return

#deffunc txtsetmimikaki int txtsetmimikaki_count
	repeat 3
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetmimikaki_count
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("キャンセル", "It's nothing.")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("耳掃除する", "I will clean the inside of your ears.")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("耳掃除してもらう", "Please clean the inside of my ear.")
		}
	loop
	return

#deffunc txtsetypoint int txtsetypoint_count
	repeat 8
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetypoint_count
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("キャンセル", "Cancel")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("カラヴィカちゃん握手権・・・・100ヤカポイント", "Handshake rights of Karavika <100 yaca points>")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("柱アソートパック・・・・・・・300ヤカポイント", "Pillar assorted pack <300 yaca points>")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("墓石コレクション・・・・・・・500ヤカポイント", "Tombstone collection <500 yaca points>")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("おにぎりと緑茶１年分・・・・・1千ヤカポイント", "360 rice balls and green teas <1000 yaca points>")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("超重量インテリアセット・・・・2千ヤカポイント", "Super heavy interior set <2000 yaca points>")
		}
		if ( p(cnt) == 6 ) {
			s(cnt) = lang("固定アーティファクトくじ・・・1万ヤカポイント", "Artifact lottery <10000 yaca points>")
		}
		if ( p(cnt) == 7 ) {
			s(cnt) = lang("特選ハーブ８ダース・・・・・・5万ヤカポイント", "Assorted herbs 8 dozen <50000 yaca points>")
		}
	loop
	return

#deffunc txtsetnefia int txtsetnefia_arg1
	repeat 6
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetnefia_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("難度0.5倍", "Difficulty 0.5 times")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("難度0.7倍", "Difficulty 0.7 times")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("難度0.9倍", "Difficulty 0.9 times")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("難度1.1倍", "Difficulty 1.1 times")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("難度1.3倍", "Difficulty 1.3 times")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("難度1.5倍", "Difficulty 1.5 times")
		}
	loop
	return

#deffunc txtplusbody int txtplusbody_arg1
	repeat 10
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtplusbody_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("キャンセル", "Cancel")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("頭", "bodyHead")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("首", "bodyNeck")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("背中", "bodyBack")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("胴体", "bodyChest")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("手", "bodyHand")
		}
		if ( p(cnt) == 6 ) {
			s(cnt) = lang("指", "bodyFinger")
		}
		if ( p(cnt) == 7 ) {
			s(cnt) = lang("腕", "bodyArm")
		}
		if ( p(cnt) == 8 ) {
			s(cnt) = lang("腰", "bodyWaist")
		}
		if ( p(cnt) == 9 ) {
			s(cnt) = lang("足", "bodyLeg")
		}
	loop
	return

#deffunc txtsettactical int txtsettactical_arg1
	repeat 12
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsettactical_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("キャンセル", "Cancel")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("突撃態勢へ移行", "Onslaught")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("防御態勢へ移行", "Defense")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("迎撃態勢へ移行", "Intercept")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("交渉態勢へ移行", "Talking")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("通常弾に切替", "Normal ammos")
		}
		if ( p(cnt) == 6 ) {
			s(cnt) = lang("バーストに切替", "burst ammos")
		}
		if ( p(cnt) == 7 ) {
			s(cnt) = lang("魔弾に切替", "magic ammos")
		}
		if ( p(cnt) == 8 ) {
			s(cnt) = lang("貫通弾に切替", "piercing ammos")
		}
		if ( p(cnt) == 9 ) {
			s(cnt) = lang("炸裂弾に切替", "explosive ammos")
		}
		if ( p(cnt) == 10 ) {
			s(cnt) = lang("連射弾に切替", "rapid ammos")
		}
		if ( p(cnt) == 11 ) {
			s(cnt) = lang("戦術指示を終了", "END")
		}
	loop
	return

#deffunc txtsetequipw int txtsetequipw_arg1
	repeat 2
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetequipw_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("手", "hand")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("遠隔", "range")
		}
	loop
	return

#deffunc txtsetchocoword int txtsetchocoword_arg1
	repeat 3
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetchocoword_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("チョコレートを溶かす", "I melt the chocolate.")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("チョコレートを食べる", "I eat the chocolate.")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("面倒くさくなってきた", "I became troublesome.")
		}
	loop
	return

#deffunc txtsetchocoword2 int txtsetchocoword2_arg1
	repeat 3
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetchocoword2_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("型に流し込む", "I poured the melting chocolate into a mold.")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("一気に飲み干す", "I drink the melting chocolate.")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("頭から浴びる", "I Bathed from head to the melting chocolate.")
		}
	loop
	return

#deffunc txtsetchocoword3 int txtsetchocoword3_arg1
	repeat 6
		i = cnt
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetchocoword3_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("愛情を込める", "I lovingly into the chocolate.")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("恨みと憎しみを込める", "I put hate into the chocolate..")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("試しに火薬を混ぜてみる", "I try to mix explosives into the chocolate .")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("余った材料を全部混ぜる", "I mix the material left over   into the chocolate.")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("血や唾液その他色々混ぜる", "I mix hair and nails into the chocolate.")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("チョコレートを食べる", "I eat the chocolate.")
		}
	loop
	return
	goto *map_randNameInit

#defcfunc limitmax int limitmax_arg1, int limitmax_arg2
	if ( limitmax_arg1 > limitmax_arg2 ) {
		return limitmax_arg2
	}
	else {
		return limitmax_arg1
	}

*map_randNameInit
	sdim mapnamerd, 20, 2, 5
	mapnamerd(0, 0) = lang("はじまりの", "Beginner's "), lang("安全な", "Safe ")
	mapnamerd(0, 1) = lang("冒険者の", "Adventurer's"), lang("時めきの", "Exciting ")
	mapnamerd(0, 2) = lang("迷いの", "Dangerous "), lang("勇者の", "Servant's ")
	mapnamerd(0, 3) = lang("死の", "Fearful "), lang("闇の", "Shadow ")
	mapnamerd(0, 4) = lang("不帰の", "King's "), lang("混沌の", "Chaotic ")
	return

#defcfunc maplevel int maplevel_arg0
	if ( gdata(GDATA_AREA) == AREA_HOME ) {
		if ( gdata(GDATA_LEVEL) != 1 ) {
			if ( gdata(GDATA_LEVEL) > 0 ) {
				return "B." + (gdata(GDATA_LEVEL) - 1)
			}
			else {
				return "L." + (gdata(GDATA_LEVEL) - 2) * (-1)
			}
		}
	}
	if ( adata(ADATA_TYPE, gdata(GDATA_AREA)) != MAP_TYPE_TOWN ) {
		if ( gdata(GDATA_AREA) != AREA_NT_SOUTH_BORDER & gdata(GDATA_AREA) != AREA_ST_NORTH_BORDER & gdata(GDATA_AREA) != AREA_VALM ) {
			if ( adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_LESIMAS | adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_RANDOM_DUNGEON | adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_QUEST | (mdata(MDATA_TYPE) >= (20 /*!!!@[MAP_TYPE_DUNGEON @@@ MAP_TYPE_DUNGEON_MIN]@!!! */) & mdata(MDATA_TYPE) <= (27 /*!!!@[MAP_TYPE_DUNGEON_MAX @@@ MAP_TYPE_LAKE]@!!! */)) == 1 ) {
				return "" + cnvrank(gdata(GDATA_LEVEL) - adata(ADATA_MIN_LEVEL, gdata(GDATA_AREA)) + 1) + lang("層", "")
			}
		}
	}
	return ""

#defcfunc mapfile int mapfile_mapid
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_VERNIS ) {
		return "vernis"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_PORT_KAPUL ) {
		if ( gdata(GDATA_LEVEL) == 1 ) {
			return "kapul"
		}
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_PORT_KAPUL ) {
		if ( gdata(GDATA_LEVEL) == 3 ) {
			return "fighterguild"
		}
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_YOWYN ) {
		return "yowyn"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_DERPHY ) {
		if ( gdata(GDATA_LEVEL) == 1 ) {
			return "rogueden"
		}
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_DERPHY ) {
		if ( gdata(GDATA_LEVEL) == 3 ) {
			return "thiefguild"
		}
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_PALMIA ) {
		return "palmia"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_NOYEL ) {
		return "noyel"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_LUMIEST ) {
		if ( gdata(GDATA_LEVEL) == 1 ) {
			return "lumiest"
		}
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_LUMIEST ) {
		if ( gdata(GDATA_LEVEL) == 3 ) {
			return "mageguild"
		}
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_EMBASSY ) {
		return "office_1"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_SEMINAR ) {
		if ( gdata(GDATA_LEVEL) == 1 ) {
			return "semi1"
		}
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_SEMINAR ) {
		if ( gdata(GDATA_LEVEL) >= 2 & gdata(GDATA_LEVEL) >= 5 ) {
			return "semi2"
		}
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_EIREL ) {
		return "eirel"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_MELKAWN ) {
		if ( gdata(GDATA_LEVEL) == 1 ) {
			return "melkawn1"
		}
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_MELKAWN ) {
		if ( gdata(GDATA_LEVEL) == 3 ) {
			return "melkawn2"
		}
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_KURUALM ) {
		return "kurualm"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_VALM ) {
		return "valm"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_MELUGAS ) {
		return "melugas"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_ARCBELC ) {
		return "arcbelc"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_LUDUS ) {
		return "ludus"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_ULM_LESON ) {
		return "1iseki"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_YLVA_LIBRARY ) {
		return "3lib"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_BLIMP ) {
		return "4mado"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_AMUR_CAGE ) {
		return "3haka"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == areasagin ) {
		if ( gdata(GDATA_LEVEL) == 1 ) {
			return "3sazin"
		}
	}
	if ( adata(ADATA_ID, mapfile_mapid) == areasagin ) {
		if ( gdata(GDATA_LEVEL) == 60 ) {
			return "4sazin"
		}
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_RUST_PLAZA ) {
		return "5cave"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_GUARDIAN_SHRINE ) {
		return "6defend"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_DOCK ) {
		if ( gdata(GDATA_LEVEL) == 1 ) {
			return "7bship"
		}
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_DOCK ) {
		if ( gdata(GDATA_LEVEL) == 60 ) {
			return "8bship"
		}
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_DOCK ) {
		if ( gdata(GDATA_LEVEL) == 70 ) {
			return "87bship"
		}
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_OL_DRAN ) {
		return "9dran"
	}
	if ( adata(ADATA_ID, mapfile_mapid) == AREA_IRMA_THALIA_WORKSHOP ) {
		return "10dwa"
	}
	return "vernis"

#defcfunc mapname int mapname_mapid, int mapname_arg2
	s = "", ""
	if ( adata(ADATA_ID, mapname_mapid) == AREA_NORTH_TYRIS ) {
		s = lang("ノースティリス", "North Tyris")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_VERNIS ) {
		s = lang("ヴェルニース", "Vernis"), lang("ヴェルニースの街が見える。辺りは活気に満ちている。", "You see Vernis. The mining town is full of liveliness.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_PORT_KAPUL ) {
		s = lang("ポート・カプール", "Port Kapul"), lang("ポート・カプールが見える。港は船で賑わっている。", "You see Port Kapul. The port is crowded with merchants.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_YOWYN ) {
		s = lang("ヨウィン", "Yowyn"), lang("ヨウィンの村が見える。懐かしい土の匂いがする。", "You see a small town, Yowyn. You remember fondly the smell of the soil.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_DERPHY ) {
		s = lang("ダルフィ", "Derphy"), lang("ダルフィの街がある。何やら危険な香りがする。", "You see the infamous rogue's den Derphy.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_PALMIA ) {
		s = lang("パルミア", "Palmia"), lang("パルミアの都がある。都は高い壁に囲われている。", "You see the great city of Palmia. Entire city is surrounded by tall wall.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_TOWER_OF_FIRE ) {
		s = lang("灼熱の塔", "the Tower of Fire")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_CRYPT_OF_THE_DAMNED ) {
		s = lang("死者の洞窟", " the crypt of the damned ")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_ANCIENT_CASTLE ) {
		s = lang("古城", "the Ancient Castle")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_HOME ) {
		s = lang("わが家", "Your Home"), lang("あなたの家だ。", "It's your sweet home.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_DUNGEON ) {
		s = lang("ダンジョン", "Your Dungeon"), lang("あなたのダンジョンだ。", "It's your dungeon.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_LESIMAS ) {
		s = lang("レシマス", "Lesimas"), lang("レシマスの洞窟がある。運命の鼓動を感じる。", "You see the dungeon of Lesimas. The wheel of fortune starts to turn.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_VOID ) {
		s = lang("すくつ", "the Void"), lang("なんだこの場所は…？", "What is this place?")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_WILDERNESS ) {
		s = lang("野外", "Wilderness")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_GRAVEYARD ) {
		s = lang("ルミエスト墓所", "the graveyard"), lang("墓所が見える。辺りは静寂に包まれている…", "You see the graveyard of Lumiest. It's slient. Very silent.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_ARENA ) {
		s = lang("闘技場", "Arena")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_DRAGON_NEST ) {
		s = lang("竜窟", "the Dragon's Nest")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_TRUCE_GROUND ) {
		s = lang("神々の休戦地", "the Truce Ground"), lang("寺院がある。神聖な雰囲気がする。", "You see old shrines. Sacred air surrounds the ground.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_CYBER_DOME ) {
		s = lang("アクリ・テオラ", "Cyber Dome"), lang("何やら奇妙な建物がある。", "You see a very strange building.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_BEAST_FORT ) {
		s = lang("混沌の城《獣》", "Fort of Chaos <Beast>"), lang("不気味な城がある。絶対に入ってはいけない予感がする。(危険度は80階相当)", "You see an unearthly fort. Your inner voice wanrs you to not go there. (Approximate danger level: 80) ")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_MACHINE_FORT ) {
		s = lang("混沌の城《機甲》", "Fort of Chaos <Machine>"), lang("不気味な城がある。絶対に入ってはいけない予感がする。(危険度は80階相当)", "You see an unearthly fort. Your inner voice wanrs you to not go there. (Approximate danger level: 80) ")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_COLLAPSED_FORT ) {
		s = lang("混沌の城《奇形》", "Fort of Chaos <Collapsed>"), lang("不気味な城がある。絶対に入ってはいけない予感がする。(危険度は80階相当)", "You see an unearthly fort. Your inner voice wanrs you to not go there. (Approximate danger level: 80) ")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_PET_ARENA ) {
		s = lang("コロシアム", "Pet Arena")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_MUSEUM ) {
		s = lang("博物館", "My Museum")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_SHOP ) {
		s = lang("店", "Shop")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_CROP ) {
		s = lang("畑", "Crop")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_STORAGE_HOUSE ) {
		s = lang("倉庫", "Storage House")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_RANCH ) {
		s = lang("牧場", "Ranch")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_DISCARDED_RANCH ) {
		s = lang("廃モンスター牧場", "Discarded Ranch")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_SHELTER ) {
		s = lang("シェルター", "Shelter")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_EMBASSY ) {
		s = lang("パルミア大使館", "the Embassy")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_TEST_GROUND ) {
		s = lang("実験場", "Test Ground")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_NOYEL ) {
		s = lang("ノイエル", "Noyel"), lang("ノイエルの村がある。子供たちの笑い声が聞こえる。", "You see Noyel. The laughters of children travel from the playground.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_MIROK_WORKSHOP ) {
		s = lang("工房ミラル・ガロク", "Miral and Garok's Workshop")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_ABODE_OF_WITCH ) {
		s = lang("魔女の住処", "Abode of witch")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_DEVIL_CAPE ) {
		s = lang("悪魔岬", "Devil Cape")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_SHOW_HOUSE ) {
		s = lang("ハウスドーム", "Show House")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_LARNA ) {
		s = lang("ラーナ", "Larna")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_MOUNTAIN_PASS ) {
		s = lang("山道", "the Mountain Pass")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_PUPPY_CAVE ) {
		s = lang("子犬の洞窟", "the Puppy Cave")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_YEEK_NEST ) {
		s = lang("イークの洞窟", "the Yeek's Nest")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_SISTER_MANSION ) {
		s = lang("妹の館", "the mansion of younger sister")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_SEMINAR ) {
		s = lang("冒険ゼミ", "the Adventure Seminar")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_LUMIEST ) {
		s = lang("ルミエスト", "Lumiest"), lang("ルミエストの都が見える。水のせせらぎが聴こえる。", "You see Lumiest. Murmuring of water pleasantly echos.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_PYRAMID ) {
		s = lang("ピラミッド", "the Pyramid")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_MINOTAUR_NEST ) {
		s = lang("ﾐﾉﾀｳﾛｽの巣", "the Minotaur's Nest")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_JAIL ) {
		s = lang("牢獄", "Jail"), lang("収容所がある。入り口は固く閉ざされている。", "You see a prison. The entrance is strictly closed.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_JAIL2 ) {
		s = lang("牢獄", "Jail"), lang("収容所がある。入り口は固く閉ざされている。", "You see a prison. The entrance is strictly closed.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_NT_SOUTH_BORDER ) {
		s = lang("ティリス関所北側", "North Tyris south border")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_SOUTH_TYRIS ) {
		s = lang("サウスティリス", "South Tyris")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_ST_NORTH_BORDER ) {
		s = lang("ティリス関所南側", "South Tyris north border")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_SMOKE_AND_PIPE ) {
		s = lang("煙とパイプ亭", "The smoke and pipe")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_OBLIVION_PALACE ) {
		s = lang("喪失狂宮", "the Oblivion Palace")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_AIMWELL ) {
		s = lang("イムウエル", "Aimwell")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_ZAILE ) {
		s = lang("ザイール", "Zaile"), lang("ザイールの街が見える。辺りは閑散としている。", "You see Zaile. The mining town is quiet.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_SEBI ) {
		s = lang("****", "****"), lang("街らしきものがある。辺りからは異様な雰囲気を感じる。", "There is something that looks like a city. You feel a strange atmosphere from around.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_SOUTH_RASKILIS ) {
		s = lang("ラスキリスの谷間・南", "South Raskilis valley"), lang("谷の奥に街道が見える。", "You see the way to the back of the valley.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_WEST_RASKILIS ) {
		s = lang("ラスキリスの谷間・西", "West Raskilis valley"), lang("谷の奥に街道が見える。なぜか懐かしさと禍々しさを感じる。", "You see the way to the back of the valley. You somehow feel nostalgic and strangeness.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_LOST_YLVA ) {
		s = lang("ロストイルヴァ", "Lost Irva")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_ULM_LESON ) {
		s = lang("ウールム・レゾン", "Ulm-Leson"), lang("森の奥に謎の遺跡が見える。", "You see a ruin in the depths of the forest.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_YLVA_LIBRARY ) {
		s = lang("イルヴァ神立図書館", "Sacred Library of Irva"), lang("山間に図書館がある。表にはイルヴァ神立図書館と書かれている。", "You see the library of gods.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_BLIMP ) {
		s = lang("エウダーナ魔導船", "Eulderna blimp"), lang("巨大な飛行船の周りに大勢の魔法使いの姿が見える。", "You see eulderna magicians around blimp.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_AMUR_CAGE ) {
		s = lang("アムルの闇檻", "Amur-Cage"), lang("湖の中心にぽっかりと空いた闇の中に、かすかな光が見える。", "In the darkness the empty at the center of the lake, you can see the faint light.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_MIRAGE_TOWER ) {
		s = lang("陽牢の塔", "Mirage Tower"), lang("砂漠に塔がそびえたっている。塔の上部が揺らめいて見える。", "In the desert, you can see the tower.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_DOCK ) {
		s = lang("眠れる神艦・船渠", "Dock"), lang("巨大なハッチの隅の方に入り口が見える。", "Entrance can be seen in a corner of the huge hatch.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_RUST_PLAZA ) {
		s = lang("ルストール仙窟", "Rust Plaza"), lang("丘のふもとに入口の小さい洞窟がある。", "In the desert, you can see the cave.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_GUARDIAN_SHRINE ) {
		s = lang("中央神殿", "Shrine of Guardian"), lang("巨城への登り坂のふもとに神殿がある。", "There is a shrine at the foot of the uphill to Cradle of Chaos.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_OL_DRAN ) {
		s = lang("オルドラン", "Ol-dran"), lang("活気溢れる街が見える。天使たちが街の上空を飛んでいる。", "You can see vibrant city. Angels are flying over the city.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_WAR_GROUND ) {
		s = lang("神々の旧戦地", "Old War Ground"), lang("古い寺院がある。神聖な雰囲気の中に何か暗いものを感じる。", "You see old shrines. Sacred air surrounds the ground.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_DRAGON_VOLCANO ) {
		s = lang("セルタ火山", "Dragon's Volcano")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_HARVEST_SHIP ) {
		s = lang("星渡の収穫船", "Harvest Ship")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_HARVEST_SHIP ) {
		if ( gdata(GDATA_LEVEL) == 140 ) {
			s = lang("廃棄処理区画", "Waste compartment")
		}
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_HARVEST_SHIP ) {
		if ( gdata(GDATA_LEVEL) == 141 ) {
			s = lang("生物管理区画", "Biological Area")
		}
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_IRMA_THALIA_WORKSHOP ) {
		s = lang("隠れ工房イルマ・サリム", "Irma and Thalia's Workshop")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_TEST_WORLD ) {
		s = lang("テストワールド", "Test World")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_TW_NORTH_BORDER ) {
		s = lang("テストワールド北関所", "Test World north border")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_CHAOS_CRADLE ) {
		s = lang("混沌の巨城", "Cradle of Chaos"), lang("謎のネフィアだ。とてつもない力を感じる…。", "You see the huge castle. Wheel of fortune starts to turn again.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_REMIDO ) {
		s = lang("レミード遺跡", "Rehmido"), lang("ネフィアと融合した遺跡だ。新たな運命の鼓動を感じる。", "You see the ruin of  Rehmido. The new wheel of fortune starts to turn.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_EIREL ) {
		s = lang("エイレル", "Eirel"), lang("エイレルの街が見える。空気が澄んでいて心が落ち着く。", "You see Eirel. It's atomosphere is restful.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_RUOZA ) {
		s = lang("ルオザ", "Ruoza"), lang("ルオザの地にある難民キャンプが見える。荒んだ雰囲気が伝わってくる。", "You see Ruoza. Refugee camp is located.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_MELKAWN ) {
		s = lang("メルカーン", "Melkawn"), lang("メルカーンの都が見える。各地から商人たちが続々と集まってきている。", "You see Melkawn. The city is alive with merchants.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_KURUALM ) {
		s = lang("クルアルム", "Kurualm"), lang("クルアルムの港が見える。いくつもの貨物船が停泊している。", "You see Port Kapul. The port is crowded with merchants.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_VALM ) {
		s = lang("ヴァルム", "Valm"), lang("ヴァルムの村が見える。海面が光を反射してきらきらと輝いている。", "You see a fishing village,Valm. A beautiful sea stertches.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_MELUGAS ) {
		s = lang("メルガス", "Melugas"), lang("メルガスのイェルス軍前線基地が見える。兵士たちが慌ただしく走りまわっている。", "You see yerles base,Melugas. Soldiers run about hurriedly.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_ARCBELC ) {
		s = lang("アーク・ベルク", "Arcbelc"), lang("アーク・ベルクの街が見える。街には観光客が闊歩している。", "You see Arcbelc. Visitors tour downtown.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_LUDUS ) {
		s = lang("ルードゥス", "Ludus"), lang("ルードゥスの農村が見える。荒れ果てており寂しい感じがする。", "You see a small village,Ludus. Outskirts are in a sad state.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_VALLEY_HADES ) {
		s = lang("黄泉の谷", "Valley of hereafter")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_MACHINERY_FORT ) {
		s = lang("機械要塞", "Machinery fort")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_CHAOS_SHRINE ) {
		s = lang("異形の神殿", "Chaos shrine")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_MELKA_FOREST ) {
		s = lang("メルカ湿林", "the Melka forest")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_GRAVITY_VALLEY ) {
		s = lang("重力谷", "the Gravity valley")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_MOUNTAIN_RUIN ) {
		s = lang("山麓遺跡", "the Mountain foot Ruin")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_MOUNTAIN_PASS_WINDY ) {
		s = lang("風の山道", "the Mountain Pass")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_ANCIENT_GARDEN ) {
		s = lang("古の庭園", "the Ancient Garden")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_DOGGOD_FOREST ) {
		s = lang("犬神の森", "the Forest of DogGod")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_MAID_MANSION ) {
		s = lang("メイド屋敷", "Maid house"), lang("立派な屋敷が見える。", "You see a fine mansion.")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_DOJO ) {
		s = lang("道場", "Doujyou")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_DESTRUCTION_FORT ) {
		s = lang("混沌の城《破壊》", "Fort of Chaos <Destruction>"), lang("不気味な城がある。絶対に入ってはいけない予感がする。(危険度は200階相当)", "You see an unearthly fort. Your inner voice wanrs you to not go there. (Approximate danger level: 200) ")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_WEAPONS_FORT ) {
		s = lang("混沌の城《機皇》", "Fort of Chaos <Weapons>"), lang("不気味な城がある。絶対に入ってはいけない予感がする。(危険度は200階相当)", "You see an unearthly fort. Your inner voice wanrs you to not go there. (Approximate danger level: 200) ")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_HELL_FORT ) {
		s = lang("混沌の城《地獄》", "Fort of Chaos <Hell>"), lang("不気味な城がある。絶対に入ってはいけない予感がする。(危険度は200階相当)", "You see an unearthly fort. Your inner voice wanrs you to not go there. (Approximate danger level: 200) ")
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_QUEST ) {
		if ( gdata(GDATA_QUEST) == QUEST_TYPE_HUNT ) {
			s = lang("街近辺", "The outskirts")
		}
		if ( gdata(GDATA_QUEST) == QUEST_TYPE_HUNTEX | gdata(GDATA_QUEST) == QUEST_TYPE_CONQUER ) {
			s = lang("市街地", "Urban area")
		}
	}
	if ( adata(ADATA_ID, mapname_mapid) == AREA_RANDOM_DUNGEON ) {
		s = mapnamerd(adata(ADATA_NAME, mapname_mapid), limitmax(adata(ADATA_MIN_LEVEL, mapname_mapid) / 5, length2(mapnamerd) - 1))
		if ( adata(ADATA_TYPE, mapname_mapid) == (20 /*!!!@[MAP_TYPE_DUNGEON @@@ MAP_TYPE_DUNGEON_MIN]@!!! */) ) {
			s += lang("洞窟", "Dungeon")
		}
		if ( adata(ADATA_TYPE, mapname_mapid) == MAP_TYPE_FOREST ) {
			s += lang("森", "Forest")
		}
		if ( adata(ADATA_TYPE, mapname_mapid) == MAP_TYPE_TOWER ) {
			s += lang("塔", "Tower")
		}
		if ( adata(ADATA_TYPE, mapname_mapid) == MAP_TYPE_FORT ) {
			s += lang("砦", "Fort")
		}
		if ( adata(ADATA_TYPE, mapname_mapid) == MAP_TYPE_NEST ) {
			s += lang("巣穴", "Nest")
		}
		if ( adata(ADATA_TYPE, mapname_mapid) == MAP_TYPE_CEMETERY ) {
			s += lang("霊園", "Cemetery")
		}
		if ( adata(ADATA_TYPE, mapname_mapid) == MAP_TYPE_MINE ) {
			s += lang("鉱山", "Mine")
		}
		if ( adata(ADATA_TYPE, mapname_mapid) == (27 /*!!!@[MAP_TYPE_DUNGEON_MAX @@@ MAP_TYPE_LAKE]@!!! */) ) {
			s += lang("湖", "Lake")
		}
		if ( adata(ADATA_WAKEUP_NEFIA, mapname_mapid) == 100 ) {
			s += lang("《覚醒》", "Awaken")
		}
	}
	if ( mapname_arg2 == 1 ) {
		if ( adata(ADATA_ID, mapname_mapid) == AREA_SISTER_MANSION | adata(ADATA_ID, mapname_mapid) == AREA_OBLIVION_PALACE | (gdata(GDATA_FLAG_SUB_BEYOND_THE_GENERATIONS) < 8 & adata(ADATA_ID, mapname_mapid) == AREA_IRMA_THALIA_WORKSHOP) ) {
			return ""
		}
		if ( s(1) != "" ) {
			return s(1)
		}
		if ( adata(ADATA_TYPE, mapname_mapid) >= (20 /*!!!@[MAP_TYPE_DUNGEON @@@ MAP_TYPE_DUNGEON_MIN]@!!! */) ) {
			return lang(s + "への入り口がある(入り口の危険度は" + adata(ADATA_MIN_LEVEL, mapname_mapid) + "階相当)。", "You see an entrance leading to " + s + ".(Approximate danger level: " + adata(ADATA_MIN_LEVEL, mapname_mapid) + ") ")
		}
		return lang(s + "がある。", "You see " + s + ".")
	}
	return s
	goto *label_0379

#defcfunc txtbuilding int txtbuilding_arg1, int txtbuilding_arg2
	locvar_txtbuilding_p = bddata(0, txtbuilding_arg1, txtbuilding_arg2)
	locvar_txtbuilding_s = lang(bdrefn(locvar_txtbuilding_p) + "がある。", "You see " + bdrefn(locvar_txtbuilding_p))
	return locvar_txtbuilding_s

#defcfunc txtskillchange int txtskillchange_skillid, int txtskillchange_negative, int txtskillchange_charid
	if ( gdata(GDATA_AREA) == AREA_DOJO | gdata(GDATA_ADVENTURER_ORACLE) != 0 ) {
		return lang("", "")
	}
	if ( txtskillchange_skillid == SKILL_ATTR_LIFE ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "は生命力の上昇を感じた。", name(txtskillchange_charid) + your(txtskillchange_charid) + " life force increases.")
		}
		else {
			return lang(name(txtskillchange_charid) + "は生命力の衰えを感じた。", name(txtskillchange_charid) + your(txtskillchange_charid) + " life force decreases.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_MANA ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "はマナの向上を感じた。", name(txtskillchange_charid) + your(txtskillchange_charid) + " mana increases.")
		}
		else {
			return lang(name(txtskillchange_charid) + "はマナの衰えを感じた。", name(txtskillchange_charid) + your(txtskillchange_charid) + " mana decreases.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_STR ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "はより強くなった。", name(txtskillchange_charid) + your(txtskillchange_charid) + " muscles feel stronger.")
		}
		else {
			return lang(name(txtskillchange_charid) + "は少し贅肉が増えたような気がした。", name(txtskillchange_charid) + your(txtskillchange_charid) + " muscles soften.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_CON ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "は我慢することの快感を知った。", name(txtskillchange_charid) + " begin" + _s(txtskillchange_charid) + " to feel good when being hit hard.")
		}
		else {
			return lang(name(txtskillchange_charid) + "は我慢ができなくなった。", name(txtskillchange_charid) + " lose" + _s(txtskillchange_charid) + " patience.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_DEX ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "は器用になった。", name(txtskillchange_charid) + " become" + _s(txtskillchange_charid) + " dexterous.")
		}
		else {
			return lang(name(txtskillchange_charid) + "は不器用になった。", name(txtskillchange_charid) + " become" + _s(txtskillchange_charid) + " clumsy.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_PER ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "は世界をより身近に感じるようになった。", name(txtskillchange_charid) + " feel" + _s(txtskillchange_charid) + " more in touch with the world.")
		}
		else {
			return lang(name(txtskillchange_charid) + "は感覚のずれを感じた。", name(txtskillchange_charid) + " " + is(txtskillchange_charid) + " getting out of touch with the world")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_LER ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "は急に色々なことを学びたくなった。", name(txtskillchange_charid) + " feel" + _s(txtskillchange_charid) + " studious.")
		}
		else {
			return lang(name(txtskillchange_charid) + "の学習意欲が低下した。", name(txtskillchange_charid) + " lose" + _s(txtskillchange_charid) + " curiosity.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_WIL ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "の意志は固くなった。", name(txtskillchange_charid) + your(txtskillchange_charid) + " will hardens.")
		}
		else {
			return lang(name(txtskillchange_charid) + "は何でもすぐ諦める。", name(txtskillchange_charid) + your(txtskillchange_charid) + " will softens.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_MAG ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "は魔力の上昇を感じた。", name(txtskillchange_charid) + your(txtskillchange_charid) + " magic improves.")
		}
		else {
			return lang(name(txtskillchange_charid) + "は魔力の衰えを感じた。", name(txtskillchange_charid) + your(txtskillchange_charid) + " magic degrades.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_CHA ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "は周囲の視線を心地よく感じる。", name(txtskillchange_charid) + " enjoy" + _s(txtskillchange_charid) + " showing off " + his(txtskillchange_charid) + " body.")
		}
		else {
			return lang(name(txtskillchange_charid) + "は急に人前に出るのが嫌になった。", name(txtskillchange_charid) + " start" + _s(txtskillchange_charid) + " to avoid eyes of people.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_SPD ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "は周りの動きが遅く見えるようになった。", name(txtskillchange_charid) + your(txtskillchange_charid) + " speed increases.")
		}
		else {
			return lang(name(txtskillchange_charid) + "は遅くなった。", name(txtskillchange_charid) + your(txtskillchange_charid) + " speed decreases.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_LUC ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "は幸運になった。", name(txtskillchange_charid) + " become" + _s(txtskillchange_charid) + " lucky.")
		}
		else {
			return lang(name(txtskillchange_charid) + "は不幸になった。", name(txtskillchange_charid) + " become" + _s(txtskillchange_charid) + " unlucky.")
		}
	}
	if ( txtskillchange_negative == 0 ) {
		return lang(name(txtskillchange_charid) + "は" + skillname(txtskillchange_skillid) + "の技術の向上を感じた。", name(txtskillchange_charid) + your(txtskillchange_charid) + " " + skillname(txtskillchange_skillid) + " skill increases.")
	}
	else {
		return lang(name(txtskillchange_charid) + "は" + skillname(txtskillchange_skillid) + "の技術の衰えを感じた。", name(txtskillchange_charid) + your(txtskillchange_charid) + " " + skillname(txtskillchange_skillid) + " skill falls off.")
	}

*label_0379
	goto *item_foodInit

#defcfunc foodname int foodname_arg1, str foodname_arg2, int foodname_arg3, int foodname_arg4
	locvar_foodname_s = foodname_arg2
	if ( foodname_arg1 == 1 ) {
		if ( foodname_arg4 == 0 ) {
			locvar_foodname_n = lang("動物", "beast")
		}
		else {
			locvar_foodname_n = refchara(foodname_arg4, DBSPEC_CHARA_NAME_ORG, 1)
		}
		if ( foodname_arg3 == 1 ) {
			locvar_foodname_p = (lang("グロテスクな" + locvar_foodname_n + "の肉", "grotesque " + locvar_foodname_n + " meat") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("グロテスクな" + locvar_foodname_n + "の肉", "grotesque " + locvar_foodname_n + " meat")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 2 ) {
			locvar_foodname_p = (lang("焼け焦げた" + locvar_foodname_n + "の肉", "charred " + locvar_foodname_n + " meat") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("焼け焦げた" + locvar_foodname_n + "の肉", "charred " + locvar_foodname_n + " meat")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 3 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_n + "のこんがり肉", "roast " + locvar_foodname_n) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_n + "のこんがり肉", "roast " + locvar_foodname_n)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 4 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_n + "肉のオードブル", "deep fried " + locvar_foodname_n) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_n + "肉のオードブル", "deep fried " + locvar_foodname_n)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 5 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_n + "のピリ辛炒め", "skewer grilled " + locvar_foodname_n) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_n + "のピリ辛炒め", "skewer grilled " + locvar_foodname_n)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 6 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_n + "コロッケ", locvar_foodname_n + " croquette") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_n + "コロッケ", locvar_foodname_n + " croquette")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 7 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_n + "のハンバーグ", locvar_foodname_n + " hamburger") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_n + "のハンバーグ", locvar_foodname_n + " hamburger")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 8 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_n + "肉の大葉焼き", locvar_foodname_n + " cutlet") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_n + "肉の大葉焼き", locvar_foodname_n + " cutlet")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 9 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_n + "ステーキ", locvar_foodname_n + " steak") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_n + "ステーキ", locvar_foodname_n + " steak")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 10 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_n + "の肉人形", locvar_foodname_n + " flesh doll") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_n + "の肉人形", locvar_foodname_n + " flesh doll")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		return locvar_foodname_s
	}
	if ( foodname_arg1 == 2 ) {
		if ( locvar_foodname_s == "" ) {
			locvar_foodname_s = lang("野菜", "vegetable")
		}
		if ( foodname_arg3 == 1 ) {
			locvar_foodname_p = (lang("生ごみ同然の" + locvar_foodname_s, "kitchen refuse " + locvar_foodname_s) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("生ごみ同然の" + locvar_foodname_s, "kitchen refuse " + locvar_foodname_s)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 2 ) {
			locvar_foodname_p = (lang("悪臭を放つ" + locvar_foodname_s, "smelly " + locvar_foodname_s) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("悪臭を放つ" + locvar_foodname_s, "smelly " + locvar_foodname_s)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 3 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "のサラダ", locvar_foodname_s + " salad") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "のサラダ", locvar_foodname_s + " salad")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 4 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "の炒め物", "fried " + locvar_foodname_s) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "の炒め物", "fried " + locvar_foodname_s)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 5 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "風味の肉じゃが", locvar_foodname_s + " roll") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "風味の肉じゃが", locvar_foodname_s + " roll")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 6 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "の天ぷら", locvar_foodname_s + " tenpura") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "の天ぷら", locvar_foodname_s + " tenpura")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 7 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "の煮込み", locvar_foodname_s + " gratin") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "の煮込み", locvar_foodname_s + " gratin")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 8 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "シチュー", "meat and " + locvar_foodname_s + " stew") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "シチュー", "meat and " + locvar_foodname_s + " stew")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 9 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "風カレー", locvar_foodname_s + " curry") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "風カレー", locvar_foodname_s + " curry")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		return locvar_foodname_s
	}
	if ( foodname_arg1 == 3 ) {
		if ( locvar_foodname_s == "" ) {
			locvar_foodname_s = lang("果物", "fruit")
		}
		if ( foodname_arg3 == 1 ) {
			locvar_foodname_p = (lang("食べてはならない" + locvar_foodname_s, "dangerous " + locvar_foodname_s) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("食べてはならない" + locvar_foodname_s, "dangerous " + locvar_foodname_s)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 2 ) {
			locvar_foodname_p = (lang("べっちょりした" + locvar_foodname_s, "doubtful " + locvar_foodname_s) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("べっちょりした" + locvar_foodname_s, "doubtful " + locvar_foodname_s)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 3 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "のフルーツサラダ", locvar_foodname_s + " jelly salad") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "のフルーツサラダ", locvar_foodname_s + " jelly salad")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 4 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "のプリン", locvar_foodname_s + " pudding") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "のプリン", locvar_foodname_s + " pudding")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 5 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "シャーベット", locvar_foodname_s + " sherbet") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "シャーベット", locvar_foodname_s + " sherbet")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 6 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "シェイク", locvar_foodname_s + " ice cream") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "シェイク", locvar_foodname_s + " ice cream")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 7 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "クレープ", locvar_foodname_s + " crepe") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "クレープ", locvar_foodname_s + " crepe")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 8 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "フルーツケーキ", locvar_foodname_s + " fruit cake") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "フルーツケーキ", locvar_foodname_s + " fruit cake")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 9 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "パフェ", locvar_foodname_s + " grand parfait") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "パフェ", locvar_foodname_s + " grand parfait")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		return locvar_foodname_s
	}
	if ( foodname_arg1 == 5 ) {
		locvar_foodname_n = lang("麺", "noodle")
		if ( foodname_arg3 == 1 ) {
			locvar_foodname_p = (lang("禁断の" + locvar_foodname_n, "risky " + locvar_foodname_n) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("禁断の" + locvar_foodname_n, "risky " + locvar_foodname_n)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 2 ) {
			locvar_foodname_p = (lang("のびてふにゃった" + locvar_foodname_n, "exhausted " + locvar_foodname_n) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("のびてふにゃった" + locvar_foodname_n, "exhausted " + locvar_foodname_n)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 3 ) {
			locvar_foodname_p = (lang("サラダパスタ", "salad pasta") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("サラダパスタ", "salad pasta")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 4 ) {
			locvar_foodname_p = (lang("うどん", "udon") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("うどん", "udon")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 5 ) {
			locvar_foodname_p = (lang("冷やし蕎麦", "soba") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("冷やし蕎麦", "soba")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 6 ) {
			locvar_foodname_p = (lang("ペペロンチーノ", "peperoncino") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("ペペロンチーノ", "peperoncino")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 7 ) {
			locvar_foodname_p = (lang("カルボナーラ", "carbonara") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("カルボナーラ", "carbonara")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 8 ) {
			locvar_foodname_p = (lang("ラーメン", "ramen") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("ラーメン", "ramen")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 9 ) {
			locvar_foodname_p = (lang("ミートスパゲティ", "meat spaghetti") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("ミートスパゲティ", "meat spaghetti")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		return locvar_foodname_s
	}
	if ( foodname_arg1 == 4 ) {
		if ( locvar_foodname_s == "" ) {
			locvar_foodname_s = lang("お菓子", "candy")
		}
		if ( foodname_arg3 == 1 ) {
			locvar_foodname_p = (lang("原型を留めない" + locvar_foodname_s, "collapsed " + locvar_foodname_s) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("原型を留めない" + locvar_foodname_s, "collapsed " + locvar_foodname_s)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 2 ) {
			locvar_foodname_p = (lang("まずそうな" + locvar_foodname_s, "nasty " + locvar_foodname_s) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("まずそうな" + locvar_foodname_s, "nasty " + locvar_foodname_s)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 3 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "クッキー", locvar_foodname_s + " cookie") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "クッキー", locvar_foodname_s + " cookie")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 4 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "のゼリー", locvar_foodname_s + " jelly") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "のゼリー", locvar_foodname_s + " jelly")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 5 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "パイ", locvar_foodname_s + " pie") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "パイ", locvar_foodname_s + " pie")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 6 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "まんじゅう", locvar_foodname_s + " bun") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "まんじゅう", locvar_foodname_s + " bun")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 7 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "風味のシュークリーム", locvar_foodname_s + " cream puff") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "風味のシュークリーム", locvar_foodname_s + " cream puff")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 8 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "のケーキ", locvar_foodname_s + " cake") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "のケーキ", locvar_foodname_s + " cake")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 9 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "風ザッハトルテ", locvar_foodname_s + " sachertorte") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "風ザッハトルテ", locvar_foodname_s + " sachertorte")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		return locvar_foodname_s
	}
	if ( foodname_arg1 == 6 ) {
		if ( locvar_foodname_s == "" ) {
			locvar_foodname_s = lang("魚", "fish")
		}
		if ( foodname_arg3 == 1 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "の残骸", "leftover " + locvar_foodname_s) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "の残骸", "leftover " + locvar_foodname_s)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 2 ) {
			locvar_foodname_p = (lang("骨だけ残った" + locvar_foodname_s, "bony " + locvar_foodname_s) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("骨だけ残った" + locvar_foodname_s, "bony " + locvar_foodname_s)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 3 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "のフライ", "fried " + locvar_foodname_s) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "のフライ", "fried " + locvar_foodname_s)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 4 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "の煮込み", "stewed " + locvar_foodname_s) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "の煮込み", "stewed " + locvar_foodname_s)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 5 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "スープ", locvar_foodname_s + " soup") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "スープ", locvar_foodname_s + " soup")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 6 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "の天ぷら", locvar_foodname_s + " tenpura") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "の天ぷら", locvar_foodname_s + " tenpura")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 7 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "ソーセージ", locvar_foodname_s + " sausage") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "ソーセージ", locvar_foodname_s + " sausage")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 8 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "の刺身", locvar_foodname_s + " sashimi") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "の刺身", locvar_foodname_s + " sashimi")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 9 ) {
			locvar_foodname_p = (lang("" + locvar_foodname_s + "の活け作り", locvar_foodname_s + " sushi") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("" + locvar_foodname_s + "の活け作り", locvar_foodname_s + " sushi")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		return locvar_foodname_s
	}
	if ( foodname_arg1 == 7 ) {
		locvar_foodname_n = lang("パン", "bread")
		if ( foodname_arg3 == 1 ) {
			locvar_foodname_p = (lang("恐怖の" + locvar_foodname_n, "fearsome " + locvar_foodname_n) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("恐怖の" + locvar_foodname_n, "fearsome " + locvar_foodname_n)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 2 ) {
			locvar_foodname_p = (lang("ガチガチの" + locvar_foodname_n, "hard " + locvar_foodname_n) != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("ガチガチの" + locvar_foodname_n, "hard " + locvar_foodname_n)
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 3 ) {
			locvar_foodname_p = (lang("くるみパン", "walnut bread") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("くるみパン", "walnut bread")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 4 ) {
			locvar_foodname_p = (lang("アップルパイ", "apple pie") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("アップルパイ", "apple pie")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 5 ) {
			locvar_foodname_p = (lang("サンドイッチ", "sandwich") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("サンドイッチ", "sandwich")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 6 ) {
			locvar_foodname_p = (lang("クロワッサン", "croissant") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("クロワッサン", "croissant")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 7 ) {
			locvar_foodname_p = (lang("コロッケパン", "croquette sandwich") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("コロッケパン", "croquette sandwich")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 8 ) {
			locvar_foodname_p = (lang("カレーパン", "chocolate babka") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("カレーパン", "chocolate babka")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 9 ) {
			locvar_foodname_p = (lang("メロンパン", "melon flavored bread") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("メロンパン", "melon flavored bread")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		return locvar_foodname_s
	}
	if ( foodname_arg1 == 8 ) {
		if ( foodname_arg4 == 0 ) {
			locvar_foodname_n = lang("鳥", "animal")
		}
		else {
			locvar_foodname_n = refchara(foodname_arg4, DBSPEC_CHARA_NAME_ORG, 1)
		}
		if ( foodname_arg3 == 1 ) {
			locvar_foodname_p = (lang("グロテスクな" + locvar_foodname_n + "の卵", "grotesque " + locvar_foodname_n + " egg") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("グロテスクな" + locvar_foodname_n + "の卵", "grotesque " + locvar_foodname_n + " egg")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 2 ) {
			locvar_foodname_p = (lang("焦げた" + locvar_foodname_n + "の卵", "overcooked " + locvar_foodname_n + " egg") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("焦げた" + locvar_foodname_n + "の卵", "overcooked " + locvar_foodname_n + " egg")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 3 ) {
			locvar_foodname_p = (lang(locvar_foodname_n + "の卵の目玉焼き", "fried " + locvar_foodname_n + " egg") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang(locvar_foodname_n + "の卵の目玉焼き", "fried " + locvar_foodname_n + " egg")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 4 ) {
			locvar_foodname_p = (lang(locvar_foodname_n + "風味のキッシュ", locvar_foodname_n + " egg toast") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang(locvar_foodname_n + "風味のキッシュ", locvar_foodname_n + " egg toast")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 5 ) {
			locvar_foodname_p = (lang("半熟" + locvar_foodname_n, "soft boiled " + locvar_foodname_n + " egg") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("半熟" + locvar_foodname_n, "soft boiled " + locvar_foodname_n + " egg")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 6 ) {
			locvar_foodname_p = (lang(locvar_foodname_n + "の卵入りスープ", "soup with " + locvar_foodname_n + " egg") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang(locvar_foodname_n + "の卵入りスープ", "soup with " + locvar_foodname_n + " egg")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 7 ) {
			locvar_foodname_p = (lang("熟成" + locvar_foodname_n + "チーズ", "mature " + locvar_foodname_n + " cheeze") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang("熟成" + locvar_foodname_n + "チーズ", "mature " + locvar_foodname_n + " cheeze")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 8 ) {
			locvar_foodname_p = (lang(locvar_foodname_n + "のレアチーズケーキ", locvar_foodname_n + " cheeze cake") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang(locvar_foodname_n + "のレアチーズケーキ", locvar_foodname_n + " cheeze cake")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		if ( foodname_arg3 == 9 ) {
			locvar_foodname_p = (lang(locvar_foodname_n + "風オムライス", locvar_foodname_n + " omelet") != "") + ("" != "") + ("" != "")
			locvar_foodname_p = foodname_arg4 \ locvar_foodname_p
			if ( locvar_foodname_p == 0 ) {
				return lang(locvar_foodname_n + "風オムライス", locvar_foodname_n + " omelet")
			}
			else {
				if ( locvar_foodname_p == 1 ) {
					return ""
				}
				else {
					return ""
				}
			}
		}
		return locvar_foodname_s
	}
	return locvar_foodname_s

*item_foodInit
	dim picfood, 10, 9
	picfood(0, FOOD_TYPE_EGG) = xy2pic(32, 6), xy2pic(17, 24), xy2pic(16, 24), xy2pic(28, 22), xy2pic(29, 22), xy2pic(30, 22), xy2pic(31, 22), xy2pic(32, 22), xy2pic(0, 23), xy2pic(1, 23)
	picfood(0, FOOD_TYPE_MEAT) = xy2pic(32, 6), xy2pic(18, 24), xy2pic(20, 22), xy2pic(21, 22), xy2pic(22, 22), xy2pic(23, 22), xy2pic(24, 22), xy2pic(25, 22), xy2pic(26, 22), xy2pic(27, 22)
	picfood(0, FOOD_TYPE_VEGETABLE) = xy2pic(32, 6), xy2pic(19, 24), xy2pic(20, 24), xy2pic(2, 23), xy2pic(3, 23), xy2pic(4, 23), xy2pic(13, 23), xy2pic(7, 23), xy2pic(8, 23), xy2pic(9, 23)
	picfood(0, FOOD_TYPE_FRUIT) = xy2pic(32, 6), xy2pic(21, 24), xy2pic(22, 24), xy2pic(0, 24), xy2pic(1, 24), xy2pic(2, 24), xy2pic(3, 24), xy2pic(4, 24), xy2pic(5, 24), xy2pic(6, 24)
	picfood(0, FOOD_TYPE_SWEET) = xy2pic(32, 6), xy2pic(23, 24), xy2pic(24, 24), xy2pic(24, 23), xy2pic(25, 23), xy2pic(26, 23), xy2pic(27, 23), xy2pic(28, 23), xy2pic(29, 23), xy2pic(30, 23)
	picfood(0, FOOD_TYPE_PASTA) = xy2pic(32, 6), xy2pic(25, 24), xy2pic(26, 24), xy2pic(17, 23), xy2pic(18, 23), xy2pic(19, 23), xy2pic(20, 23), xy2pic(21, 23), xy2pic(22, 23), xy2pic(23, 23)
	picfood(0, FOOD_TYPE_FISH) = xy2pic(32, 6), xy2pic(27, 24), xy2pic(28, 24), xy2pic(10, 23), xy2pic(11, 23), xy2pic(12, 23), xy2pic(13, 23), xy2pic(14, 23), xy2pic(15, 23), xy2pic(16, 23)
	picfood(0, FOOD_TYPE_BREAD) = xy2pic(32, 6), xy2pic(7, 24), xy2pic(8, 24), xy2pic(9, 24), xy2pic(10, 24), xy2pic(11, 24), xy2pic(12, 24), xy2pic(13, 24), xy2pic(14, 24), xy2pic(15, 24)
	return
	goto *convert_word

#defcfunc _yoro int _yoro_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "よろしくお願いします", "どうぞ、よろしくです", "", "", ""
			locvar__yoro_p = 1 + ("どうぞ、よろしくです" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yoro_arg1)
		}
		else {
			locvar__yoro__tone = "よろしくお願いしますわ", "よろしくです", "", "", ""
			locvar__yoro_p = 1 + ("よろしくです" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yoro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "よろしく頼むぜ", "よろしくな", "", "", ""
			locvar__yoro_p = 1 + ("よろしくな" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yoro_arg1)
		}
		else {
			locvar__yoro__tone = "よろしくね", "よろしくな", "", "", ""
			locvar__yoro_p = 1 + ("よろしくな" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yoro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "よろしくね", "よろしくお願いするよ", "", "", ""
			locvar__yoro_p = 1 + ("よろしくお願いするよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yoro_arg1)
		}
		else {
			locvar__yoro__tone = "よろしくねっ", "よろしく〜", "", "", ""
			locvar__yoro_p = 1 + ("よろしく〜" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yoro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "よろしく…", "今後とも、よろしく…", "", "", ""
			locvar__yoro_p = 1 + ("今後とも、よろしく…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yoro_arg1)
		}
		else {
			locvar__yoro__tone = "よろしくね…", "よろ…", "", "", ""
			locvar__yoro_p = 1 + ("よろ…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yoro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "よろしく頼もう", "よろしく頼むぞよ", "", "", ""
			locvar__yoro_p = 1 + ("よろしく頼むぞよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yoro_arg1)
		}
		else {
			locvar__yoro__tone = "よろしく頼むぞよ", "よろしく頼むぞな", "", "", ""
			locvar__yoro_p = 1 + ("よろしく頼むぞな" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yoro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "よしなに", "よろしく頼むでござる", "", "", ""
			locvar__yoro_p = 1 + ("よろしく頼むでござる" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yoro_arg1)
		}
		else {
			locvar__yoro__tone = "よろしくでござりまする", "どうぞよしなに", "", "", ""
			locvar__yoro_p = 1 + ("どうぞよしなに" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yoro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "よろしくッス", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yoro_arg1)
		}
		else {
			locvar__yoro__tone = "よろしくにゃの", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yoro_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _dozo int _dozo_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "はい、どうぞ", "お待ちどうさまです", "", "", ""
			locvar__yoro_p = 1 + ("お待ちどうさまです" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dozo_arg1)
		}
		else {
			locvar__yoro__tone = "はい、どうぞ", "注文の品ですわ", "", "", ""
			locvar__yoro_p = 1 + ("注文の品ですわ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dozo_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ほらよ", "ほれ", "", "", ""
			locvar__yoro_p = 1 + ("ほれ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dozo_arg1)
		}
		else {
			locvar__yoro__tone = "ほら", "待たせたね", "", "", ""
			locvar__yoro_p = 1 + ("待たせたね" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dozo_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "はい、お待ち", "さあ、どうぞ", "", "", ""
			locvar__yoro_p = 1 + ("さあ、どうぞ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dozo_arg1)
		}
		else {
			locvar__yoro__tone = "さあ、どうぞ", "お待ちどうさま", "", "", ""
			locvar__yoro_p = 1 + ("お待ちどうさま" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dozo_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ほら…", "待たせたな…", "", "", ""
			locvar__yoro_p = 1 + ("待たせたな…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dozo_arg1)
		}
		else {
			locvar__yoro__tone = "はい…", "どうぞ…", "", "", ""
			locvar__yoro_p = 1 + ("どうぞ…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dozo_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ほうれ", "ほれ、受け取りたまえ", "", "", ""
			locvar__yoro_p = 1 + ("ほれ、受け取りたまえ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dozo_arg1)
		}
		else {
			locvar__yoro__tone = "ほれ、受け取るが良い", "ほれ、待たせたのう", "", "", ""
			locvar__yoro_p = 1 + ("ほれ、待たせたのう" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dozo_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "お待たせ申した", "待たせたでござる", "", "", ""
			locvar__yoro_p = 1 + ("待たせたでござる" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dozo_arg1)
		}
		else {
			locvar__yoro__tone = "お待たせ致しました", "ささ、どうぞ", "", "", ""
			locvar__yoro_p = 1 + ("ささ、どうぞ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dozo_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "お待たせッス", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dozo_arg1)
		}
		else {
			locvar__yoro__tone = "お待たせにゃん", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dozo_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _thanks int _thanks_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "感謝します", "ありがとうございます", "", "", ""
			locvar__yoro_p = 1 + ("ありがとうございます" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_thanks_arg1)
		}
		else {
			locvar__yoro__tone = "感謝します", "ありがとうございます", "", "", ""
			locvar__yoro_p = 1 + ("ありがとうございます" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_thanks_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ありがとよ", "ありがたい", "", "", ""
			locvar__yoro_p = 1 + ("ありがたい" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_thanks_arg1)
		}
		else {
			locvar__yoro__tone = "礼を言うよ", "ありがたいね", "", "", ""
			locvar__yoro_p = 1 + ("ありがたいね" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_thanks_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ありがとう", "感謝するよ", "", "", ""
			locvar__yoro_p = 1 + ("感謝するよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_thanks_arg1)
		}
		else {
			locvar__yoro__tone = "ありがとう〜", "感謝するわ", "", "", ""
			locvar__yoro_p = 1 + ("感謝するわ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_thanks_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "礼を言う…", "感謝する…", "", "", ""
			locvar__yoro_p = 1 + ("感謝する…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_thanks_arg1)
		}
		else {
			locvar__yoro__tone = "ありがと…", "礼を言うわ…", "", "", ""
			locvar__yoro_p = 1 + ("礼を言うわ…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_thanks_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "礼を申すぞ", "感謝してつかわす", "", "", ""
			locvar__yoro_p = 1 + ("感謝してつかわす" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_thanks_arg1)
		}
		else {
			locvar__yoro__tone = "くるしゅうない", "礼をいってつかわす", "", "", ""
			locvar__yoro_p = 1 + ("礼をいってつかわす" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_thanks_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "かたじけない", "恩に着る", "", "", ""
			locvar__yoro_p = 1 + ("恩に着る" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_thanks_arg1)
		}
		else {
			locvar__yoro__tone = "ありがたや", "お礼申し上げます", "", "", ""
			locvar__yoro_p = 1 + ("お礼申し上げます" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_thanks_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "アザーッス", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_thanks_arg1)
		}
		else {
			locvar__yoro__tone = "にゃりーん", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_thanks_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _birth int _birth_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "おめでとうございます", "お誕生日おめでとう", "", "", ""
			locvar__yoro_p = 1 + ("お誕生日おめでとう" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_birth_arg1)
		}
		else {
			locvar__yoro__tone = "おめでとうございます", "お誕生日おめでとう", "", "", ""
			locvar__yoro_p = 1 + ("お誕生日おめでとう" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_birth_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "おめでとさん", "おめでとよ", "", "", ""
			locvar__yoro_p = 1 + ("おめでとよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_birth_arg1)
		}
		else {
			locvar__yoro__tone = "誕生日おめでと", "めでたいね", "", "", ""
			locvar__yoro_p = 1 + ("めでたいね" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_birth_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "めでたいなぁ", "誕生日おめでとう", "", "", ""
			locvar__yoro_p = 1 + ("誕生日おめでとう" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_birth_arg1)
		}
		else {
			locvar__yoro__tone = "おめでと〜", "おめでとうですね", "", "", ""
			locvar__yoro_p = 1 + ("おめでとうですね" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_birth_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "おめでとう…", "誕生日…おめでとう", "", "", ""
			locvar__yoro_p = 1 + ("誕生日…おめでとう" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_birth_arg1)
		}
		else {
			locvar__yoro__tone = "おめでと…", "誕生日おめでと…", "", "", ""
			locvar__yoro_p = 1 + ("誕生日おめでと…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_birth_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "めでたいぞ", "めでたいのう", "", "", ""
			locvar__yoro_p = 1 + ("めでたいのう" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_birth_arg1)
		}
		else {
			locvar__yoro__tone = "これはめでたい", "おめでとうですわ", "", "", ""
			locvar__yoro_p = 1 + ("おめでとうですわ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_birth_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "めでたいでござる", "誕生日を祝おうぞ", "", "", ""
			locvar__yoro_p = 1 + ("誕生日を祝おうぞ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_birth_arg1)
		}
		else {
			locvar__yoro__tone = "めでたや", "おめでとうござりまする", "", "", ""
			locvar__yoro_p = 1 + ("おめでとうござりまする" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_birth_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "おめでとッス", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_birth_arg1)
		}
		else {
			locvar__yoro__tone = "おめでとミャ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_birth_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _rob int _rob_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "悪いことは言わない。おやめなさい", "止めてください。きっと後悔しますよ", "", "", ""
			locvar__yoro_p = 1 + ("止めてください。きっと後悔しますよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_rob_arg1)
		}
		else {
			locvar__yoro__tone = "止めてくださいませ", "こういう時のために、傭兵に金をかけているのです", "", "", ""
			locvar__yoro_p = 1 + ("こういう時のために、傭兵に金をかけているのです" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_rob_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "なんだ、貴様賊だったのか", "馬鹿な奴だ。後になって謝っても遅いぞ", "", "", ""
			locvar__yoro_p = 1 + ("馬鹿な奴だ。後になって謝っても遅いぞ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_rob_arg1)
		}
		else {
			locvar__yoro__tone = "ふん、返り討ちにしてくれるよ", "ごろつき風情に何が出来る", "", "", ""
			locvar__yoro_p = 1 + ("ごろつき風情に何が出来る" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_rob_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "おい、傭兵さんたち、このごろつきを追い払ってくれ", "馬鹿な真似をするな。こっちには屈強の傭兵がいるんだぞ", "", "", ""
			locvar__yoro_p = 1 + ("馬鹿な真似をするな。こっちには屈強の傭兵がいるんだぞ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_rob_arg1)
		}
		else {
			locvar__yoro__tone = "やめて", "傭兵さんたち〜出番ですよ", "", "", ""
			locvar__yoro_p = 1 + ("傭兵さんたち〜出番ですよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_rob_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "甘く見られたものだ…", "この護衛の数が見えないのか…", "", "", ""
			locvar__yoro_p = 1 + ("この護衛の数が見えないのか…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_rob_arg1)
		}
		else {
			locvar__yoro__tone = "おやめ…", "愚かな試みよ…", "", "", ""
			locvar__yoro_p = 1 + ("愚かな試みよ…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_rob_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "なんたる無礼者か", "ほほほ、こやつめ", "", "", ""
			locvar__yoro_p = 1 + ("ほほほ、こやつめ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_rob_arg1)
		}
		else {
			locvar__yoro__tone = "下賤の者どもの分際で", "ほほほ、殺してあげなさい", "", "", ""
			locvar__yoro_p = 1 + ("ほほほ、殺してあげなさい" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_rob_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "何をするでござるか", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_rob_arg1)
		}
		else {
			locvar__yoro__tone = "ご無体な", "まあ、お戯れが過ぎますわ", "", "", ""
			locvar__yoro_p = 1 + ("まあ、お戯れが過ぎますわ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_rob_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "見損なったッス", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_rob_arg1)
		}
		else {
			locvar__yoro__tone = "にゃりーん", "ふしゃー！", "", "", ""
			locvar__yoro_p = 1 + ("ふしゃー！" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_rob_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _ka int _ka_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ですか", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ka_arg1)
		}
		else {
			locvar__yoro__tone = "ですか", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ka_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "かよ", "か", "", "", ""
			locvar__yoro_p = 1 + ("か" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ka_arg1)
		}
		else {
			locvar__yoro__tone = "かい", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ka_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "かい", "なの", "", "", ""
			locvar__yoro_p = 1 + ("なの" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ka_arg1)
		}
		else {
			locvar__yoro__tone = "なの", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ka_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "か…", "かよ…", "", "", ""
			locvar__yoro_p = 1 + ("かよ…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ka_arg1)
		}
		else {
			locvar__yoro__tone = "なの…", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ka_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "かのう", "であるか", "", "", ""
			locvar__yoro_p = 1 + ("であるか" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ka_arg1)
		}
		else {
			locvar__yoro__tone = "であるか", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ka_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "でござるか", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ka_arg1)
		}
		else {
			locvar__yoro__tone = "でござりまするか", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ka_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ッスか", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ka_arg1)
		}
		else {
			locvar__yoro__tone = "かにゃ", "かニャン", "", "", ""
			locvar__yoro_p = 1 + ("かニャン" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ka_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _da int _da_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "です", "ですね", "", "", ""
			locvar__yoro_p = 1 + ("ですね" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_da_arg1)
		}
		else {
			locvar__yoro__tone = "ですわ", "です", "", "", ""
			locvar__yoro_p = 1 + ("です" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_da_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "だぜ", "だ", "", "", ""
			locvar__yoro_p = 1 + ("だ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_da_arg1)
		}
		else {
			locvar__yoro__tone = "ね", "よ", "", "", ""
			locvar__yoro_p = 1 + ("よ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_da_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "だよ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_da_arg1)
		}
		else {
			locvar__yoro__tone = "だわ", "よ", "", "", ""
			locvar__yoro_p = 1 + ("よ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_da_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "だ…", "さ…", "", "", ""
			locvar__yoro_p = 1 + ("さ…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_da_arg1)
		}
		else {
			locvar__yoro__tone = "よ…", "ね…", "", "", ""
			locvar__yoro_p = 1 + ("ね…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_da_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "じゃ", "でおじゃる", "", "", ""
			locvar__yoro_p = 1 + ("でおじゃる" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_da_arg1)
		}
		else {
			locvar__yoro__tone = "じゃ", "でおじゃるぞ", "", "", ""
			locvar__yoro_p = 1 + ("でおじゃるぞ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_da_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "でござる", "でござるよ", "", "", ""
			locvar__yoro_p = 1 + ("でござるよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_da_arg1)
		}
		else {
			locvar__yoro__tone = "でござりまする", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_da_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ッス", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_da_arg1)
		}
		else {
			locvar__yoro__tone = "みゃん", "ミャ", "", "", ""
			locvar__yoro_p = 1 + ("ミャ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_da_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _nda int _nda_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "のです", "んです", "", "", ""
			locvar__yoro_p = 1 + ("んです" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_nda_arg1)
		}
		else {
			locvar__yoro__tone = "のですわ", "のです", "", "", ""
			locvar__yoro_p = 1 + ("のです" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_nda_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "", "んだ", "", "", ""
			locvar__yoro_p = 1 + ("んだ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_nda_arg1)
		}
		else {
			locvar__yoro__tone = "の", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_nda_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "んだよ", "んだ", "", "", ""
			locvar__yoro_p = 1 + ("んだ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_nda_arg1)
		}
		else {
			locvar__yoro__tone = "わ", "のよ", "", "", ""
			locvar__yoro_p = 1 + ("のよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_nda_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "…", "んだ…", "", "", ""
			locvar__yoro_p = 1 + ("んだ…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_nda_arg1)
		}
		else {
			locvar__yoro__tone = "の…", "わ…", "", "", ""
			locvar__yoro_p = 1 + ("わ…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_nda_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "のじゃ", "のだぞよ", "", "", ""
			locvar__yoro_p = 1 + ("のだぞよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_nda_arg1)
		}
		else {
			locvar__yoro__tone = "のじゃわ", "のだぞよ", "", "", ""
			locvar__yoro_p = 1 + ("のだぞよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_nda_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "のでござる", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_nda_arg1)
		}
		else {
			locvar__yoro__tone = "のでございます", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_nda_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "んだッス", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_nda_arg1)
		}
		else {
			locvar__yoro__tone = "のニャ", "のにゃん", "", "", ""
			locvar__yoro_p = 1 + ("のにゃん" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_nda_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _noka int _noka_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "のですか", "んですか", "", "", ""
			locvar__yoro_p = 1 + ("んですか" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_noka_arg1)
		}
		else {
			locvar__yoro__tone = "のですか", "んですか", "", "", ""
			locvar__yoro_p = 1 + ("んですか" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_noka_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "のか", "のだな", "", "", ""
			locvar__yoro_p = 1 + ("のだな" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_noka_arg1)
		}
		else {
			locvar__yoro__tone = "の", "のかい", "", "", ""
			locvar__yoro_p = 1 + ("のかい" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_noka_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "のかい", "の", "", "", ""
			locvar__yoro_p = 1 + ("の" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_noka_arg1)
		}
		else {
			locvar__yoro__tone = "の", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_noka_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "のか…", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_noka_arg1)
		}
		else {
			locvar__yoro__tone = "の…", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_noka_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "のかのう", "のだな", "", "", ""
			locvar__yoro_p = 1 + ("のだな" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_noka_arg1)
		}
		else {
			locvar__yoro__tone = "のかね", "のだな", "", "", ""
			locvar__yoro_p = 1 + ("のだな" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_noka_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "のでござるか", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_noka_arg1)
		}
		else {
			locvar__yoro__tone = "のでございます", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_noka_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "のッスか", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_noka_arg1)
		}
		else {
			locvar__yoro__tone = "にゃんか", "ニャン", "", "", ""
			locvar__yoro_p = 1 + ("ニャン" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_noka_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _kana int _kana_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "でしょうか", "ですか", "", "", ""
			locvar__yoro_p = 1 + ("ですか" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kana_arg1)
		}
		else {
			locvar__yoro__tone = "かしら", "でしょう", "", "", ""
			locvar__yoro_p = 1 + ("でしょう" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kana_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "か", "かい", "", "", ""
			locvar__yoro_p = 1 + ("かい" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kana_arg1)
		}
		else {
			locvar__yoro__tone = "か", "かい", "", "", ""
			locvar__yoro_p = 1 + ("かい" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kana_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "かな", "かなぁ", "", "", ""
			locvar__yoro_p = 1 + ("かなぁ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kana_arg1)
		}
		else {
			locvar__yoro__tone = "かな", "かなー", "", "", ""
			locvar__yoro_p = 1 + ("かなー" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kana_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "かな…", "か…", "", "", ""
			locvar__yoro_p = 1 + ("か…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kana_arg1)
		}
		else {
			locvar__yoro__tone = "かな…", "か…", "", "", ""
			locvar__yoro_p = 1 + ("か…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kana_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "かのう", "かの", "", "", ""
			locvar__yoro_p = 1 + ("かの" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kana_arg1)
		}
		else {
			locvar__yoro__tone = "かのう", "かの", "", "", ""
			locvar__yoro_p = 1 + ("かの" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kana_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "でござるか", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kana_arg1)
		}
		else {
			locvar__yoro__tone = "でございますか", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kana_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ッスか", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kana_arg1)
		}
		else {
			locvar__yoro__tone = "かにゃん", "かニャ", "", "", ""
			locvar__yoro_p = 1 + ("かニャ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kana_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _kimi int _kimi_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "貴方", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kimi_arg1)
		}
		else {
			locvar__yoro__tone = "貴方", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kimi_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "お前", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kimi_arg1)
		}
		else {
			locvar__yoro__tone = "お前", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kimi_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "君", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kimi_arg1)
		}
		else {
			locvar__yoro__tone = "君", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kimi_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "君", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kimi_arg1)
		}
		else {
			locvar__yoro__tone = "君", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kimi_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "お主", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kimi_arg1)
		}
		else {
			locvar__yoro__tone = "お主", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kimi_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "そこもと", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kimi_arg1)
		}
		else {
			locvar__yoro__tone = "そなた様", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kimi_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "アンタ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kimi_arg1)
		}
		else {
			locvar__yoro__tone = "あにゃた", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kimi_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _miruna int _miruna_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "み、見ないでください…", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_miruna_arg1)
		}
		else {
			locvar__yoro__tone = "うぅ…見ないでください…", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_miruna_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "くっ…！見るなっ！", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_miruna_arg1)
		}
		else {
			locvar__yoro__tone = "見るなっ！見るなぁぁ…！！", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_miruna_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ごめん…こっち見ないで！", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_miruna_arg1)
		}
		else {
			locvar__yoro__tone = "ひっ！？駄目っ…！", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_miruna_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "わ、わああああっ…！", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_miruna_arg1)
		}
		else {
			locvar__yoro__tone = "いやぁぁあ…！", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_miruna_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ううっ…なんということ…", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_miruna_arg1)
		}
		else {
			locvar__yoro__tone = "み…見世物ではないぞよ…！", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_miruna_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "なんたる不覚ッ…！", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_miruna_arg1)
		}
		else {
			locvar__yoro__tone = "ど、どうか見ないでくださいまし…！", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_miruna_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "み…見ないでほしいッス…", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_miruna_arg1)
		}
		else {
			locvar__yoro__tone = "見るにゃあああ…！", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_miruna_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _aisite int _aisite_puncmark
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "無言で優しく微笑んだ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aisite_puncmark)
		}
		else {
			locvar__yoro__tone = "無言で優しく微笑んだ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aisite_puncmark)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "照れくさそうにそっぽを向いた", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aisite_puncmark)
		}
		else {
			locvar__yoro__tone = "照れくさそうにそっぽを向いた", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aisite_puncmark)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "茶化しながら肩を寄せてきた", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aisite_puncmark)
		}
		else {
			locvar__yoro__tone = "茶化しながら肩を寄せてきた", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aisite_puncmark)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "真っ赤になった頬に手を当てている…", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aisite_puncmark)
		}
		else {
			locvar__yoro__tone = "真っ赤になった頬に手を当てている…", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aisite_puncmark)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "自慢げに胸を張った", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aisite_puncmark)
		}
		else {
			locvar__yoro__tone = "自慢げに胸を張った", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aisite_puncmark)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "感動のあまり涙目になった", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aisite_puncmark)
		}
		else {
			locvar__yoro__tone = "感動のあまり涙目になった", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aisite_puncmark)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "だらしのない笑みを浮かべた", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aisite_puncmark)
		}
		else {
			locvar__yoro__tone = "だらしのない笑みを浮かべた", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aisite_puncmark)
		}
	}
	return locvar__yoro__tone

#defcfunc _ru int _ru_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ます", "ますよ", "", "", ""
			locvar__yoro_p = 1 + ("ますよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ru_arg1)
		}
		else {
			locvar__yoro__tone = "ますわ", "ますの", "", "", ""
			locvar__yoro_p = 1 + ("ますの" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ru_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "るぜ", "るぞ", "", "", ""
			locvar__yoro_p = 1 + ("るぞ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ru_arg1)
		}
		else {
			locvar__yoro__tone = "るわ", "るよ", "", "", ""
			locvar__yoro_p = 1 + ("るよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ru_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "るよ", "るね", "", "", ""
			locvar__yoro_p = 1 + ("るね" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ru_arg1)
		}
		else {
			locvar__yoro__tone = "るの", "るわ", "", "", ""
			locvar__yoro_p = 1 + ("るわ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ru_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "る…", "るが…", "", "", ""
			locvar__yoro_p = 1 + ("るが…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ru_arg1)
		}
		else {
			locvar__yoro__tone = "る…", "るわ…", "", "", ""
			locvar__yoro_p = 1 + ("るわ…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ru_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "るぞよ", "るぞ", "", "", ""
			locvar__yoro_p = 1 + ("るぞ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ru_arg1)
		}
		else {
			locvar__yoro__tone = "るぞよ", "るぞ", "", "", ""
			locvar__yoro_p = 1 + ("るぞ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ru_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "るでござる", "るでござるよ", "", "", ""
			locvar__yoro_p = 1 + ("るでござるよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ru_arg1)
		}
		else {
			locvar__yoro__tone = "るのでございます", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ru_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "るッス", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ru_arg1)
		}
		else {
			locvar__yoro__tone = "るのニャ", "るにゃん", "", "", ""
			locvar__yoro_p = 1 + ("るにゃん" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ru_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _tanomu int _tanomu_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "お願いします", "頼みます", "", "", ""
			locvar__yoro_p = 1 + ("頼みます" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_tanomu_arg1)
		}
		else {
			locvar__yoro__tone = "お願いしますわ", "頼みますわ", "", "", ""
			locvar__yoro_p = 1 + ("頼みますわ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_tanomu_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "頼む", "頼むな", "", "", ""
			locvar__yoro_p = 1 + ("頼むな" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_tanomu_arg1)
		}
		else {
			locvar__yoro__tone = "頼むよ", "頼む", "", "", ""
			locvar__yoro_p = 1 + ("頼む" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_tanomu_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "頼むね", "頼むよ", "", "", ""
			locvar__yoro_p = 1 + ("頼むよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_tanomu_arg1)
		}
		else {
			locvar__yoro__tone = "頼むわ", "頼むね", "", "", ""
			locvar__yoro_p = 1 + ("頼むね" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_tanomu_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "頼む…", "頼むぞ…", "", "", ""
			locvar__yoro_p = 1 + ("頼むぞ…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_tanomu_arg1)
		}
		else {
			locvar__yoro__tone = "頼むわ…", "頼むよ…", "", "", ""
			locvar__yoro_p = 1 + ("頼むよ…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_tanomu_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "頼むぞよ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_tanomu_arg1)
		}
		else {
			locvar__yoro__tone = "頼むぞよ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_tanomu_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "頼み申す", "頼むでござる", "", "", ""
			locvar__yoro_p = 1 + ("頼むでござる" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_tanomu_arg1)
		}
		else {
			locvar__yoro__tone = "お頼み申し上げます", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_tanomu_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "頼むッス", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_tanomu_arg1)
		}
		else {
			locvar__yoro__tone = "おねがいにゃ", "おねがいニャン", "", "", ""
			locvar__yoro_p = 1 + ("おねがいニャン" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_tanomu_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _ore int _ore_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "私", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ore_arg1)
		}
		else {
			locvar__yoro__tone = "私", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ore_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "俺", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ore_arg1)
		}
		else {
			locvar__yoro__tone = "あたし", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ore_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "僕", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ore_arg1)
		}
		else {
			locvar__yoro__tone = "わたし", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ore_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "自分", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ore_arg1)
		}
		else {
			locvar__yoro__tone = "自分", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ore_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "麻呂", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ore_arg1)
		}
		else {
			locvar__yoro__tone = "わらわ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ore_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "拙者", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ore_arg1)
		}
		else {
			locvar__yoro__tone = "手前", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ore_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "あっし", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ore_arg1)
		}
		else {
			locvar__yoro__tone = "みゅー", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ore_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _ga int _ga_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ですが", "ですけど", "", "", ""
			locvar__yoro_p = 1 + ("ですけど" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ga_arg1)
		}
		else {
			locvar__yoro__tone = "ですが", "ですけど", "", "", ""
			locvar__yoro_p = 1 + ("ですけど" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ga_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "が", "がな", "", "", ""
			locvar__yoro_p = 1 + ("がな" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ga_arg1)
		}
		else {
			locvar__yoro__tone = "が", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ga_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "けど", "が", "", "", ""
			locvar__yoro_p = 1 + ("が" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ga_arg1)
		}
		else {
			locvar__yoro__tone = "が", "けど", "", "", ""
			locvar__yoro_p = 1 + ("けど" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ga_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "が…", "けど…", "", "", ""
			locvar__yoro_p = 1 + ("けど…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ga_arg1)
		}
		else {
			locvar__yoro__tone = "が…", "けど…", "", "", ""
			locvar__yoro_p = 1 + ("けど…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ga_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "であるが", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ga_arg1)
		}
		else {
			locvar__yoro__tone = "であるが", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ga_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "でござるが", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ga_arg1)
		}
		else {
			locvar__yoro__tone = "でございますが", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ga_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ッスけど", "ッスが", "", "", ""
			locvar__yoro_p = 1 + ("ッスが" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ga_arg1)
		}
		else {
			locvar__yoro__tone = "ニャけど", "にゃが", "", "", ""
			locvar__yoro_p = 1 + ("にゃが" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ga_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _dana int _dana_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ですね", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dana_arg1)
		}
		else {
			locvar__yoro__tone = "ですわね", "ですね", "", "", ""
			locvar__yoro_p = 1 + ("ですね" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dana_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "だな", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dana_arg1)
		}
		else {
			locvar__yoro__tone = "だね", "ね", "", "", ""
			locvar__yoro_p = 1 + ("ね" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dana_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "だね", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dana_arg1)
		}
		else {
			locvar__yoro__tone = "ね", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dana_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "だな…", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dana_arg1)
		}
		else {
			locvar__yoro__tone = "だね…", "ね…", "", "", ""
			locvar__yoro_p = 1 + ("ね…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dana_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "であるな", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dana_arg1)
		}
		else {
			locvar__yoro__tone = "であるな", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dana_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "でござるな", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dana_arg1)
		}
		else {
			locvar__yoro__tone = "でございますね", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dana_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ッスね", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dana_arg1)
		}
		else {
			locvar__yoro__tone = "にゃ", "みゃ", "", "", ""
			locvar__yoro_p = 1 + ("みゃ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_dana_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _siro int _siro_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "しなさい", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_siro_arg1)
		}
		else {
			locvar__yoro__tone = "しなさいな", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_siro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "しろ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_siro_arg1)
		}
		else {
			locvar__yoro__tone = "して", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_siro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "してよ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_siro_arg1)
		}
		else {
			locvar__yoro__tone = "してね", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_siro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "してくれ…", "…", "", "", ""
			locvar__yoro_p = 1 + ("…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_siro_arg1)
		}
		else {
			locvar__yoro__tone = "してよ…", "…", "", "", ""
			locvar__yoro_p = 1 + ("…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_siro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "してつかわせ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_siro_arg1)
		}
		else {
			locvar__yoro__tone = "してつかわせ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_siro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "して頂きたいでござる", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_siro_arg1)
		}
		else {
			locvar__yoro__tone = "してくださいませ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_siro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "しろッス", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_siro_arg1)
		}
		else {
			locvar__yoro__tone = "するにゃ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_siro_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _kure int _kure_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ください", "くださいよ", "", "", ""
			locvar__yoro_p = 1 + ("くださいよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kure_arg1)
		}
		else {
			locvar__yoro__tone = "くださいな", "ください", "", "", ""
			locvar__yoro_p = 1 + ("ください" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kure_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "くれ", "くれよ", "", "", ""
			locvar__yoro_p = 1 + ("くれよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kure_arg1)
		}
		else {
			locvar__yoro__tone = "くれ", "よ", "", "", ""
			locvar__yoro_p = 1 + ("よ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kure_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ね", "よ", "", "", ""
			locvar__yoro_p = 1 + ("よ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kure_arg1)
		}
		else {
			locvar__yoro__tone = "ね", "ね", "", "", ""
			locvar__yoro_p = 1 + ("ね" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kure_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "くれ…", "…", "", "", ""
			locvar__yoro_p = 1 + ("…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kure_arg1)
		}
		else {
			locvar__yoro__tone = "よ…", "…", "", "", ""
			locvar__yoro_p = 1 + ("…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kure_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "つかわせ", "たもれ", "", "", ""
			locvar__yoro_p = 1 + ("たもれ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kure_arg1)
		}
		else {
			locvar__yoro__tone = "つかわせ", "たもれ", "", "", ""
			locvar__yoro_p = 1 + ("たもれ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kure_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "頂きたいでござる", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kure_arg1)
		}
		else {
			locvar__yoro__tone = "くださいませ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kure_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "くれッス", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kure_arg1)
		}
		else {
			locvar__yoro__tone = "にゃ", "みゃ", "", "", ""
			locvar__yoro_p = 1 + ("みゃ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_kure_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _daro int _daro_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "でしょう", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_daro_arg1)
		}
		else {
			locvar__yoro__tone = "でしょう", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_daro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "だろ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_daro_arg1)
		}
		else {
			locvar__yoro__tone = "だろうね", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_daro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "だろうね", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_daro_arg1)
		}
		else {
			locvar__yoro__tone = "でしょ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_daro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "だろ…", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_daro_arg1)
		}
		else {
			locvar__yoro__tone = "でしょ…", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_daro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "であろう", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_daro_arg1)
		}
		else {
			locvar__yoro__tone = "であろうな", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_daro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "でござろうな", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_daro_arg1)
		}
		else {
			locvar__yoro__tone = "でございましょう", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_daro_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ッスね", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_daro_arg1)
		}
		else {
			locvar__yoro__tone = "にゃ", "みゃ", "", "", ""
			locvar__yoro_p = 1 + ("みゃ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_daro_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _yo int _yo_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ですよ", "です", "", "", ""
			locvar__yoro_p = 1 + ("です" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yo_arg1)
		}
		else {
			locvar__yoro__tone = "ですよ", "です", "", "", ""
			locvar__yoro_p = 1 + ("です" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yo_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ぜ", "ぞ", "", "", ""
			locvar__yoro_p = 1 + ("ぞ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yo_arg1)
		}
		else {
			locvar__yoro__tone = "わ", "よ", "", "", ""
			locvar__yoro_p = 1 + ("よ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yo_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "よ", "ぞ", "", "", ""
			locvar__yoro_p = 1 + ("ぞ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yo_arg1)
		}
		else {
			locvar__yoro__tone = "わよ", "わ", "", "", ""
			locvar__yoro_p = 1 + ("わ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yo_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "…", "ぞ…", "", "", ""
			locvar__yoro_p = 1 + ("ぞ…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yo_arg1)
		}
		else {
			locvar__yoro__tone = "わ…", "…", "", "", ""
			locvar__yoro_p = 1 + ("…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yo_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "であろう", "でおじゃる", "", "", ""
			locvar__yoro_p = 1 + ("でおじゃる" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yo_arg1)
		}
		else {
			locvar__yoro__tone = "であろうぞ", "でおじゃる", "", "", ""
			locvar__yoro_p = 1 + ("でおじゃる" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yo_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "でござろう", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yo_arg1)
		}
		else {
			locvar__yoro__tone = "でございますわ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yo_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ッスよ", "ッス", "", "", ""
			locvar__yoro_p = 1 + ("ッス" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yo_arg1)
		}
		else {
			locvar__yoro__tone = "にゃぁ", "みゃぁ", "", "", ""
			locvar__yoro_p = 1 + ("みゃぁ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_yo_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _aru int _aru_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "あります", "ありますね", "", "", ""
			locvar__yoro_p = 1 + ("ありますね" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aru_arg1)
		}
		else {
			locvar__yoro__tone = "あります", "ありますわ", "", "", ""
			locvar__yoro_p = 1 + ("ありますわ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aru_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ある", "あるな", "", "", ""
			locvar__yoro_p = 1 + ("あるな" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aru_arg1)
		}
		else {
			locvar__yoro__tone = "あるね", "あるよ", "", "", ""
			locvar__yoro_p = 1 + ("あるよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aru_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "あるね", "あるよ", "", "", ""
			locvar__yoro_p = 1 + ("あるよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aru_arg1)
		}
		else {
			locvar__yoro__tone = "あるわ", "あるわね", "", "", ""
			locvar__yoro_p = 1 + ("あるわね" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aru_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ある…", "あるぞ…", "", "", ""
			locvar__yoro_p = 1 + ("あるぞ…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aru_arg1)
		}
		else {
			locvar__yoro__tone = "あるわ…", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aru_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "あろう", "おじゃる", "", "", ""
			locvar__yoro_p = 1 + ("おじゃる" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aru_arg1)
		}
		else {
			locvar__yoro__tone = "あろう", "おじゃる", "", "", ""
			locvar__yoro_p = 1 + ("おじゃる" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aru_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "あるでござる", "あるでござるな", "", "", ""
			locvar__yoro_p = 1 + ("あるでござるな" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aru_arg1)
		}
		else {
			locvar__yoro__tone = "ございます", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aru_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "あるッスよ", "あるッス", "", "", ""
			locvar__yoro_p = 1 + ("あるッス" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aru_arg1)
		}
		else {
			locvar__yoro__tone = "あにゅ", "あみぅ", "", "", ""
			locvar__yoro_p = 1 + ("あみぅ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_aru_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _u int _u_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "います", "いますよ", "", "", ""
			locvar__yoro_p = 1 + ("いますよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_u_arg1)
		}
		else {
			locvar__yoro__tone = "いますわ", "います", "", "", ""
			locvar__yoro_p = 1 + ("います" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_u_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "うぜ", "うぞ", "", "", ""
			locvar__yoro_p = 1 + ("うぞ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_u_arg1)
		}
		else {
			locvar__yoro__tone = "うわ", "うよ", "", "", ""
			locvar__yoro_p = 1 + ("うよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_u_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "うよ", "う", "", "", ""
			locvar__yoro_p = 1 + ("う" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_u_arg1)
		}
		else {
			locvar__yoro__tone = "うわ", "う", "", "", ""
			locvar__yoro_p = 1 + ("う" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_u_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "う…", "うぞ…", "", "", ""
			locvar__yoro_p = 1 + ("うぞ…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_u_arg1)
		}
		else {
			locvar__yoro__tone = "うわ…", "う…", "", "", ""
			locvar__yoro_p = 1 + ("う…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_u_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "うぞよ", "うぞ", "", "", ""
			locvar__yoro_p = 1 + ("うぞ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_u_arg1)
		}
		else {
			locvar__yoro__tone = "うぞよ", "うぞ", "", "", ""
			locvar__yoro_p = 1 + ("うぞ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_u_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "うでござる", "うでござるよ", "", "", ""
			locvar__yoro_p = 1 + ("うでござるよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_u_arg1)
		}
		else {
			locvar__yoro__tone = "うでございます", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_u_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "うッスよ", "うッス", "", "", ""
			locvar__yoro_p = 1 + ("うッス" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_u_arg1)
		}
		else {
			locvar__yoro__tone = "うにぁ", "うみぁ", "", "", ""
			locvar__yoro_p = 1 + ("うみぁ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_u_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _na int _na_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ですね", "です", "", "", ""
			locvar__yoro_p = 1 + ("です" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_na_arg1)
		}
		else {
			locvar__yoro__tone = "ですわ", "ですね", "", "", ""
			locvar__yoro_p = 1 + ("ですね" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_na_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ぜ", "な", "", "", ""
			locvar__yoro_p = 1 + ("な" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_na_arg1)
		}
		else {
			locvar__yoro__tone = "ね", "な", "", "", ""
			locvar__yoro_p = 1 + ("な" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_na_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ね", "なぁ", "", "", ""
			locvar__yoro_p = 1 + ("なぁ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_na_arg1)
		}
		else {
			locvar__yoro__tone = "わ", "わね", "", "", ""
			locvar__yoro_p = 1 + ("わね" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_na_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "…", "な…", "", "", ""
			locvar__yoro_p = 1 + ("な…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_na_arg1)
		}
		else {
			locvar__yoro__tone = "…", "わ…", "", "", ""
			locvar__yoro_p = 1 + ("わ…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_na_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "でおじゃるな", "のう", "", "", ""
			locvar__yoro_p = 1 + ("のう" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_na_arg1)
		}
		else {
			locvar__yoro__tone = "でおじゃるな", "のう", "", "", ""
			locvar__yoro_p = 1 + ("のう" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_na_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "でござるな", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_na_arg1)
		}
		else {
			locvar__yoro__tone = "でございますわ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_na_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ッスね", "ッス", "", "", ""
			locvar__yoro_p = 1 + ("ッス" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_na_arg1)
		}
		else {
			locvar__yoro__tone = "ニァ", "ミァ", "", "", ""
			locvar__yoro_p = 1 + ("ミァ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_na_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _ta int _ta_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "ました", "ましたね", "", "", ""
			locvar__yoro_p = 1 + ("ましたね" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ta_arg1)
		}
		else {
			locvar__yoro__tone = "ました", "ましたわ", "", "", ""
			locvar__yoro_p = 1 + ("ましたわ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ta_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "た", "たな", "", "", ""
			locvar__yoro_p = 1 + ("たな" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ta_arg1)
		}
		else {
			locvar__yoro__tone = "たね", "たよ", "", "", ""
			locvar__yoro_p = 1 + ("たよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ta_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "たね", "たよ", "", "", ""
			locvar__yoro_p = 1 + ("たよ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ta_arg1)
		}
		else {
			locvar__yoro__tone = "たよ", "たね", "", "", ""
			locvar__yoro_p = 1 + ("たね" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ta_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "た…", "たぞ…", "", "", ""
			locvar__yoro_p = 1 + ("たぞ…" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ta_arg1)
		}
		else {
			locvar__yoro__tone = "たわ…", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ta_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "たぞよ", "たぞな", "", "", ""
			locvar__yoro_p = 1 + ("たぞな" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ta_arg1)
		}
		else {
			locvar__yoro__tone = "たぞよ", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ta_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "たでござる", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ta_arg1)
		}
		else {
			locvar__yoro__tone = "ましてございます", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ta_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "たッスよ", "たッス", "", "", ""
			locvar__yoro_p = 1 + ("たッス" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ta_arg1)
		}
		else {
			locvar__yoro__tone = "たにゃぁ", "たみゃぁ", "", "", ""
			locvar__yoro_p = 1 + ("たみゃぁ" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_ta_arg1)
		}
	}
	return locvar__yoro__tone

#defcfunc _trick int _trick_arg1
	if ( cdata(CDATA_TONE, tc) == 0 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "トリック・オア・トリート？", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_trick_arg1)
		}
		else {
			locvar__yoro__tone = "トリック・オア・トリート？", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_trick_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 1 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "菓子をだせ！イタズラされたいのか！", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_trick_arg1)
		}
		else {
			locvar__yoro__tone = "イタズラされるか大人しくお菓子をわたすか、えらべ！", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_trick_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 2 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "イタズラしちゃうぞー。", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_trick_arg1)
		}
		else {
			locvar__yoro__tone = "お菓子ちょうだいっ！", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_trick_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 3 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "お菓子ください…。", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_trick_arg1)
		}
		else {
			locvar__yoro__tone = "お菓子くださいな…。", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_trick_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 4 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "菓子は用意できておるか。", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_trick_arg1)
		}
		else {
			locvar__yoro__tone = "菓子の用意はできておるのかえ？", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_trick_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 5 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "菓子を頂戴しにまいった！", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_trick_arg1)
		}
		else {
			locvar__yoro__tone = "菓子を頂きとうござりまする。", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_trick_arg1)
		}
	}
	if ( cdata(CDATA_TONE, tc) == 6 ) {
		if ( cdata(CDATA_TONE_SEX, tc) == 1 ) {
			locvar__yoro__tone = "お菓子ほしいッス。", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_trick_arg1)
		}
		else {
			locvar__yoro__tone = "お菓子ほしいのにゃー。", "", "", "", ""
			locvar__yoro_p = 1 + ("" != "") + ("" != "") + ("" != "") + ("" != "")
			locvar__yoro__tone = locvar__yoro__tone(rnd(locvar__yoro_p)) + _mark(_trick_arg1)
		}
	}
	return locvar__yoro__tone

*convert_word
	repeat 30
		await
		p = instr(buff, 0, "{"), instr(buff, p, "}"), strlen(buff)
		if ( p == (-1) ) {
			break
		}
		s = strmid(buff, p + 1, p(1) - 1), strmid(buff, 0, p), strmid(buff, p + p(1) + 1, p(2) - p(1) - p)
		repeat 1
			if ( s == "ref" ) {
				if ( talkref == 1 ) {
					s = lang("" + gdata(GDATA_GUEST), "" + gdata(GDATA_GUEST) + " guest" + _s2(gdata(GDATA_GUEST)))
					break
				}
			}
			if ( s == "you" ) {
				s = _kimi(3)
				break
			}
			if ( s == "player" ) {
				s = cdatan(CDATAN_NAME, CHARA_PLAYER)
				break
			}
			if ( s == "aka" ) {
				s = cdatan(CDATAN_AKA, CHARA_PLAYER)
				break
			}
			if ( s == "npc" ) {
				s = cdatan(CDATAN_NAME, tc)
				break
			}
			if ( s == "nptc" ) {
				s = cdatan(CDATAN_NAME, tc)
				break
			}
			if ( s == "npcc" ) {
				s = cdatan(CDATAN_NAME, cc)
				break
			}
			if ( s == "me" ) {
				s = _ore(3)
				break
			}
			if ( s == "ある" ) {
				s = _aru(3)
				break
			}
			if ( s == "う" ) {
				s = _u(3)
				break
			}
			if ( s == "が" ) {
				s = _ga(3)
				break
			}
			if ( s == "か" ) {
				s = _ka(3)
				break
			}
			if ( s == "かな" ) {
				s = _kana(3)
				break
			}
			if ( s == "だ" ) {
				s = _da(3)
				break
			}
			if ( s == "よ" ) {
				s = _yo(3)
				break
			}
			if ( s == "だな" ) {
				s = _dana(3)
				break
			}
			if ( s == "だろ" ) {
				s = _daro(3)
				break
			}
			if ( s == "る" ) {
				s = _ru(3)
				break
			}
			if ( s == "のだ" ) {
				s = _nda(3)
				break
			}
			if ( s == "な" ) {
				s = _na(3)
				break
			}
			if ( s == "くれ" ) {
				s = _kure(3)
				break
			}
			if ( s == "しろ" ) {
				s = _siro(3)
				break
			}
			if ( s == "見るな" ) {
				s = _miruna(3)
				break
			}
			if ( s == "onii" ) {
				if ( jp ) {
					if ( cdata(CDATA_SEX, CHARA_PLAYER) == 0 ) {
						s = "お兄"
					}
					if ( cdata(CDATA_SEX, CHARA_PLAYER) == 1 ) {
						s = "お姉"
					}
					break
				}
			}
			if ( s == "syujin" ) {
				if ( jp ) {
					if ( cdata(CDATA_SEX, CHARA_PLAYER) == 0 ) {
						s = "ご主人様"
					}
					if ( cdata(CDATA_SEX, CHARA_PLAYER) == 1 ) {
						s = "お嬢様"
					}
					break
				}
			}
			if ( s == "sex" ) {
				if ( jp ) {
					if ( cdata(CDATA_SEX, CHARA_PLAYER) == 0 ) {
						s = "男"
					}
					if ( cdata(CDATA_SEX, CHARA_PLAYER) == 1 ) {
						s = "女"
					}
					break
				}
				else {
					if ( cdata(CDATA_SEX, CHARA_PLAYER) == 0 ) {
						s = "boy"
					}
					if ( cdata(CDATA_SEX, CHARA_PLAYER) == 1 ) {
						s = "girl"
					}
					break
				}
			}
			if ( s == "Basic" ) {
				cdata(CDATA_EMO_ICON, chatc) = 0
				s = ""
				break
			}
			if ( s == "Embarrassment" ) {
				cdata(CDATA_EMO_ICON, chatc) = 26 + 100 * 3
				s = ""
				break
			}
			if ( s == "Fun" ) {
				cdata(CDATA_EMO_ICON, chatc) = 6 + 100 * 3
				s = ""
				break
			}
			if ( s == "Happy" ) {
				cdata(CDATA_EMO_ICON, chatc) = 17 + 100 * 3
				s = ""
				break
			}
			if ( s == "Angry" ) {
				cdata(CDATA_EMO_ICON, chatc) = 18 + 100 * 3
				s = ""
				break
			}
			if ( s == "Question" ) {
				cdata(CDATA_EMO_ICON, chatc) = 21 + 100 * 3
				s = ""
				break
			}
			if ( s == "se0" ) {
				snd SOUNDLIST_USER_SE00
				s = ""
				break
			}
			if ( s == "se1" ) {
				snd SOUNDLIST_USER_SE01
				s = ""
				break
			}
			if ( s == "se2" ) {
				snd SOUNDLIST_USER_SE02
				s = ""
				break
			}
			if ( s == "se3" ) {
				snd SOUNDLIST_USER_SE03
				s = ""
				break
			}
			if ( s == "se4" ) {
				snd SOUNDLIST_USER_SE04
				s = ""
				break
			}
			if ( s == "se5" ) {
				snd SOUNDLIST_USER_SE05
				s = ""
				break
			}
			if ( s == "se6" ) {
				snd SOUNDLIST_USER_SE06
				s = ""
				break
			}
			if ( s == "se7" ) {
				snd SOUNDLIST_USER_SE07
				s = ""
				break
			}
			if ( s == "se8" ) {
				snd SOUNDLIST_USER_SE08
				s = ""
				break
			}
			if ( s == "se9" ) {
				snd SOUNDLIST_USER_SE09
				s = ""
				break
			}
			if ( s == "se10" ) {
				snd SOUNDLIST_USER_SE10
				s = ""
				break
			}
			if ( s == "se11" ) {
				snd SOUNDLIST_USER_SE11
				s = ""
				break
			}
			if ( s == "se12" ) {
				snd SOUNDLIST_USER_SE12
				s = ""
				break
			}
			if ( s == "se13" ) {
				snd SOUNDLIST_USER_SE13
				s = ""
				break
			}
			if ( s == "se14" ) {
				snd SOUNDLIST_USER_SE14
				s = ""
				break
			}
			if ( s == "se15" ) {
				snd SOUNDLIST_USER_SE15
				s = ""
				break
			}
			if ( s == "se16" ) {
				snd SOUNDLIST_USER_SE16
				s = ""
				break
			}
			if ( s == "se17" ) {
				snd SOUNDLIST_USER_SE17
				s = ""
				break
			}
			if ( s == "se18" ) {
				snd SOUNDLIST_USER_SE18
				s = ""
				break
			}
			if ( s == "se19" ) {
				snd SOUNDLIST_USER_SE19
				s = ""
				break
			}
			if ( s == "se20" ) {
				snd SOUNDLIST_USER_SE20
				s = ""
				break
			}
			if ( s == "se21" ) {
				snd SOUNDLIST_USER_SE21
				s = ""
				break
			}
			if ( s == "se22" ) {
				snd SOUNDLIST_USER_SE22
				s = ""
				break
			}
			if ( s == "se23" ) {
				snd SOUNDLIST_USER_SE23
				s = ""
				break
			}
			if ( s == "se24" ) {
				snd SOUNDLIST_USER_SE24
				s = ""
				break
			}
			if ( s == "se25" ) {
				snd SOUNDLIST_USER_SE25
				s = ""
				break
			}
			if ( s == "se26" ) {
				snd SOUNDLIST_USER_SE26
				s = ""
				break
			}
			if ( s == "se27" ) {
				snd SOUNDLIST_USER_SE27
				s = ""
				break
			}
			if ( s == "se28" ) {
				snd SOUNDLIST_USER_SE28
				s = ""
				break
			}
			if ( s == "se29" ) {
				snd SOUNDLIST_USER_SE29
				s = ""
				break
			}
			if ( s == "se30" ) {
				snd SOUNDLIST_USER_SE30
				s = ""
				break
			}
			if ( s == "se31" ) {
				snd SOUNDLIST_USER_SE31
				s = ""
				break
			}
			if ( s == "se32" ) {
				snd SOUNDLIST_USER_SE32
				s = ""
				break
			}
			if ( s == "se33" ) {
				snd SOUNDLIST_USER_SE33
				s = ""
				break
			}
			if ( s == "se34" ) {
				snd SOUNDLIST_USER_SE34
				s = ""
				break
			}
			if ( s == "se35" ) {
				snd SOUNDLIST_USER_SE35
				s = ""
				break
			}
			if ( s == "se36" ) {
				snd SOUNDLIST_USER_SE36
				s = ""
				break
			}
			if ( s == "se37" ) {
				snd SOUNDLIST_USER_SE37
				s = ""
				break
			}
			if ( s == "se38" ) {
				snd SOUNDLIST_USER_SE38
				s = ""
				break
			}
			if ( s == "se39" ) {
				snd SOUNDLIST_USER_SE39
				s = ""
				break
			}
			if ( s == "se40" ) {
				snd SOUNDLIST_USER_SE40
				s = ""
				break
			}
			if ( s == "se41" ) {
				snd SOUNDLIST_USER_SE41
				s = ""
				break
			}
			if ( s == "se42" ) {
				snd SOUNDLIST_USER_SE42
				s = ""
				break
			}
			if ( s == "se43" ) {
				snd SOUNDLIST_USER_SE43
				s = ""
				break
			}
			if ( s == "se44" ) {
				snd SOUNDLIST_USER_SE44
				s = ""
				break
			}
			if ( s == "se45" ) {
				snd SOUNDLIST_USER_SE45
				s = ""
				break
			}
			if ( s == "se46" ) {
				snd SOUNDLIST_USER_SE46
				s = ""
				break
			}
			if ( s == "se47" ) {
				snd SOUNDLIST_USER_SE47
				s = ""
				break
			}
			if ( s == "se48" ) {
				snd SOUNDLIST_USER_SE48
				s = ""
				break
			}
			if ( s == "se49" ) {
				snd SOUNDLIST_USER_SE49
				s = ""
				break
			}
			if ( s == "se50" ) {
				snd SOUNDLIST_USER_SE50
				s = ""
				break
			}
			if ( s == "se51" ) {
				snd SOUNDLIST_USER_SE51
				s = ""
				break
			}
			if ( s == "se52" ) {
				snd SOUNDLIST_USER_SE52
				s = ""
				break
			}
			if ( s == "se53" ) {
				snd SOUNDLIST_USER_SE53
				s = ""
				break
			}
			if ( s == "se54" ) {
				snd SOUNDLIST_USER_SE54
				s = ""
				break
			}
			if ( s == "se55" ) {
				snd SOUNDLIST_USER_SE55
				s = ""
				break
			}
			if ( s == "se56" ) {
				snd SOUNDLIST_USER_SE56
				s = ""
				break
			}
			if ( s == "se57" ) {
				snd SOUNDLIST_USER_SE57
				s = ""
				break
			}
			if ( s == "se58" ) {
				snd SOUNDLIST_USER_SE58
				s = ""
				break
			}
			if ( s == "se59" ) {
				snd SOUNDLIST_USER_SE59
				s = ""
				break
			}
			if ( s == "se60" ) {
				snd SOUNDLIST_USER_SE60
				s = ""
				break
			}
			if ( s == "se61" ) {
				snd SOUNDLIST_USER_SE61
				s = ""
				break
			}
			if ( s == "se62" ) {
				snd SOUNDLIST_USER_SE62
				s = ""
				break
			}
			if ( s == "se63" ) {
				snd SOUNDLIST_USER_SE63
				s = ""
				break
			}
			if ( s == "se64" ) {
				snd SOUNDLIST_USER_SE64
				s = ""
				break
			}
			if ( s == "se65" ) {
				snd SOUNDLIST_USER_SE65
				s = ""
				break
			}
			if ( s == "se66" ) {
				snd SOUNDLIST_USER_SE66
				s = ""
				break
			}
			if ( s == "se67" ) {
				snd SOUNDLIST_USER_SE67
				s = ""
				break
			}
			if ( s == "se68" ) {
				snd SOUNDLIST_USER_SE68
				s = ""
				break
			}
			if ( s == "se69" ) {
				snd SOUNDLIST_USER_SE69
				s = ""
				break
			}
			if ( s == "se70" ) {
				snd SOUNDLIST_USER_SE70
				s = ""
				break
			}
			if ( s == "se71" ) {
				snd SOUNDLIST_USER_SE71
				s = ""
				break
			}
			if ( s == "se72" ) {
				snd SOUNDLIST_USER_SE72
				s = ""
				break
			}
			if ( s == "se73" ) {
				snd SOUNDLIST_USER_SE73
				s = ""
				break
			}
			if ( s == "se74" ) {
				snd SOUNDLIST_USER_SE74
				s = ""
				break
			}
			if ( s == "se75" ) {
				snd SOUNDLIST_USER_SE75
				s = ""
				break
			}
			if ( s == "se76" ) {
				snd SOUNDLIST_USER_SE76
				s = ""
				break
			}
			if ( s == "se77" ) {
				snd SOUNDLIST_USER_SE77
				s = ""
				break
			}
			if ( s == "se78" ) {
				snd SOUNDLIST_USER_SE78
				s = ""
				break
			}
			if ( s == "se79" ) {
				snd SOUNDLIST_USER_SE79
				s = ""
				break
			}
			if ( s == "se80" ) {
				snd SOUNDLIST_USER_SE80
				s = ""
				break
			}
			if ( s == "se81" ) {
				snd SOUNDLIST_USER_SE81
				s = ""
				break
			}
			if ( s == "se82" ) {
				snd SOUNDLIST_USER_SE82
				s = ""
				break
			}
			if ( s == "se83" ) {
				snd SOUNDLIST_USER_SE83
				s = ""
				break
			}
			if ( s == "se84" ) {
				snd SOUNDLIST_USER_SE84
				s = ""
				break
			}
			if ( s == "se85" ) {
				snd SOUNDLIST_USER_SE85
				s = ""
				break
			}
			if ( s == "se86" ) {
				snd SOUNDLIST_USER_SE86
				s = ""
				break
			}
			if ( s == "se87" ) {
				snd SOUNDLIST_USER_SE87
				s = ""
				break
			}
			if ( s == "se88" ) {
				snd SOUNDLIST_USER_SE88
				s = ""
				break
			}
			if ( s == "se89" ) {
				snd SOUNDLIST_USER_SE89
				s = ""
				break
			}
			if ( s == "se90" ) {
				snd SOUNDLIST_USER_SE90
				s = ""
				break
			}
			if ( s == "se91" ) {
				snd SOUNDLIST_USER_SE91
				s = ""
				break
			}
			if ( s == "se92" ) {
				snd SOUNDLIST_USER_SE92
				s = ""
				break
			}
			if ( s == "se93" ) {
				snd SOUNDLIST_USER_SE93
				s = ""
				break
			}
			if ( s == "se94" ) {
				snd SOUNDLIST_USER_SE94
				s = ""
				break
			}
			if ( s == "se95" ) {
				snd SOUNDLIST_USER_SE95
				s = ""
				break
			}
			if ( s == "se96" ) {
				snd SOUNDLIST_USER_SE96
				s = ""
				break
			}
			if ( s == "se97" ) {
				snd SOUNDLIST_USER_SE97
				s = ""
				break
			}
			if ( s == "se98" ) {
				snd SOUNDLIST_USER_SE98
				s = ""
				break
			}
			if ( s == "se99" ) {
				snd SOUNDLIST_USER_SE99
				s = ""
				break
			}
			s = "Unknown Code"
		loop
		buff = s(1) + s + s(2)
	loop
	if ( gdata(GDATA_CUSTOM_TEXT_DIALOG) == 1 ) {
		txt buff
	}
	gdata(GDATA_CUSTOM_TEXT_DIALOG) = 0
	return

*convert_talk
	buff = strmid(buff, p, instr(buff, p, "%END"))
	if ( noteinfo(0) <= 1 ) {
		noteload exedir + "data\\talk.txt"
		p = instr(buff, 0, "%DEFAULT," + lang("JP", "EN"))
		buff = strmid(buff, p, instr(buff, p, "%END"))
	}
	notedel 0
	p = rnd(noteinfo(0))
	noteget s, p
	buff = s
	gosub *convert_word
	return

*spec_talk
	buff = ""
	notesel buff
	noteload exedir + "data\\talk.txt"
	p = instr(buff, 0, valn + "," + lang("JP", "EN"))
	gosub *convert_talk
	return

*random_talk
	buff = ""
	notesel buff
	noteload exedir + "data\\talk.txt"
	p = -1
	repeat 1
		if ( cdata(CDATA_ROLE, tc) == ROLE_MAID ) {
			if ( gdata(GDATA_GUEST) > 0 ) {
				talkref = 1
				p = instr(buff, 0, "%MAID," + lang("JP", "EN"))
				break
			}
		}
		if ( cdata(CDATA_INTEREST, tc) <= 0 ) {
			p = instr(buff, 0, "%BORED," + lang("JP", "EN"))
			break
		}
		if ( tc < MAX_CHARA_FOLLOWER | cbit(CHARA_BIT_LIVESTOCK, tc) == TRUE ) {
			p = instr(buff, 0, "%ALLY_DEFAULT," + lang("JP", "EN"))
			break
		}
		if ( cdata(CDATA_ID, tc) == CREATURE_ID_YOUNGER_SISTER2 ) {
			if ( gdata(GDATA_MONTH) == 4 ) {
				p = instr(buff, 0, "%ASISTER," + lang("JP", "EN"))
				break
			}
			else {
				p = instr(buff, 0, "%SISTER," + lang("JP", "EN"))
				break
			}
		}
		if ( cdata(CDATA_ID, tc) == CREATURE_ID_SHOPKEEPER_CROW ) {
			if ( adata(ADATA_ID, gdata(GDATA_AREA)) != AREA_SHOP ) {
				p = instr(buff, 0, "%CROW," + lang("JP", "EN"))
				break
			}
		}
		if ( cdata(CDATA_ID, tc) == CREATURE_ID_DEVOTEE_OF_OBLIVION ) {
			p = instr(buff, 0, "%OBLIVION," + lang("JP", "EN"))
			break
		}
		if ( cdata(CDATA_ID, tc) == CREATURE_ID_DETECTIVE | cdata(CDATA_ID, tc) == CREATURE_ID_WEREWOLF_DETECTIVE ) {
			p = instr(buff, 0, "%DETECTIVE," + lang("JP", "EN"))
			break
		}
		if ( gdata(GDATA_AREA) == AREA_WAR_GROUND ) {
			p = instr(buff, 0, "%SENTI," + lang("JP", "EN"))
			break
		}
		if ( cdata(CDATA_ID, tc) == CREATURE_ID_SILVER_WOLF | cdata(CDATA_ID, tc) == CREATURE_ID_TWINTAIL ) {
			p = instr(buff, 0, "%PRAY," + lang("JP", "EN"))
			break
		}
		if ( cdata(CDATA_ID, tc) == CREATURE_ID_PROSTITUTE ) {
			p = instr(buff, 0, "%BITCH," + lang("JP", "EN"))
			break
		}
		if ( cdata(CDATA_ROLE, tc) == ROLE_SHOP_NOYEL ) {
			if ( gdata(GDATA_MONTH) == 4 ) {
				p = instr(buff, 0, "%AMOYER," + lang("JP", "EN"))
				break
			}
			else {
				p = instr(buff, 0, "%MOYER," + lang("JP", "EN"))
				break
			}
		}
		if ( cdata(CDATA_ID, tc) == CREATURE_ID_AILE_THE_ATTENDANT ) {
			if ( gdata(GDATA_MONTH) == 4 ) {
				p = instr(buff, 0, "%AAILE," + lang("JP", "EN"))
				break
			}
			else {
				p = instr(buff, 0, "%AILE," + lang("JP", "EN"))
				break
			}
		}
		if ( cdata(CDATA_ROLE, tc) == ROLE_SLAVER ) {
			if ( gdata(GDATA_MONTH) == 4 ) {
				p = instr(buff, 0, "%ASLAVEKEEPER," + lang("JP", "EN"))
				break
			}
			else {
				p = instr(buff, 0, "%SLAVEKEEPER," + lang("JP", "EN"))
				break
			}
		}
		if ( gdata(GDATA_AREA) == AREA_ZAILE ) {
			p = instr(buff, 0, "%ZAILE," + lang("JP", "EN"))
			break
		}
		if ( gdata(GDATA_FLAG_SUB_BEYOND_THE_GENERATIONS) > 9 ) {
			if ( gdata(GDATA_FLAG_MAIN) >= 394 ) {
				if ( rnd(40) == 0 ) {
					p = instr(buff, 0, "%DAIN," + lang("JP", "EN"))
					break
				}
			}
		}
		if ( gdata(GDATA_AREA) == AREA_GUARDIAN_SHRINE ) {
			p = instr(buff, 0, "%DEFEND," + lang("JP", "EN"))
			break
		}
		if ( gdata(GDATA_AREA) == AREA_ULM_LESON ) {
			p = instr(buff, 0, "%SUMMON," + lang("JP", "EN"))
			break
		}
		if ( gdata(GDATA_AREA) == AREA_OL_DRAN ) {
			p = instr(buff, 0, "%DRAN," + lang("JP", "EN"))
			break
		}
		if ( gdata(GDATA_AREA) == AREA_DOCK ) {
			if ( gdata(GDATA_LEVEL) == 70 ) {
				if ( cdata(CDATA_ID, tc) == CREATURE_ID_WORKER_02 ) {
					p = instr(buff, 0, "%BSHIP7R," + lang("JP", "EN"))
					break
				}
			}
		}
		if ( gdata(GDATA_AREA) == AREA_DOCK ) {
			if ( gdata(GDATA_LEVEL) == 70 ) {
				p = instr(buff, 0, "%BSHIP7," + lang("JP", "EN"))
				break
			}
		}
		if ( gdata(GDATA_AREA) == AREA_DOCK ) {
			p = instr(buff, 0, "%BSHIP," + lang("JP", "EN"))
			break
		}
		if ( gdata(GDATA_AREA) == AREA_BLIMP ) {
			p = instr(buff, 0, "%MADOU," + lang("JP", "EN"))
			break
		}
		if ( gdata(GDATA_AREA) == AREA_MIRAGE_TOWER ) {
			p = instr(buff, 0, "%SAZIN," + lang("JP", "EN"))
			break
		}
		if ( gdata(GDATA_AREA) == AREA_RUST_PLAZA ) {
			p = instr(buff, 0, "%CAVE," + lang("JP", "EN"))
			break
		}
		if ( cdata(CDATA_ROLE, tc) >= (1000 /*!!!@[ROLE_SHOP_MIN @@@ ROLE_SHOP_WEAPON]@!!! */) & cdata(CDATA_ROLE, tc) < (2000 /*!!!@[ROLE_GUEST_BEGGAR @@@ ROLE_GUEST_MIN]@!!! */) | cdata(CDATA_ROLE, tc) == ROLE_GUEST_MERCHANT ) {
			if ( rnd(3) ) {
				if ( gdata(GDATA_MONTH) == 4 ) {
					p = instr(buff, 0, "%ASHOPKEEPER," + lang("JP", "EN"))
					break
				}
				else {
					p = instr(buff, 0, "%SHOPKEEPER," + lang("JP", "EN"))
					break
				}
			}
		}
		if ( cdata(CDATA_IMPRESSION, tc) >= 100 ) {
			if ( rnd(3) == 0 ) {
				if ( gdata(GDATA_MONTH) == 4 ) {
					p = instr(buff, 0, "%ARUMOR,LOOT," + lang("JP", "EN"))
					break
				}
				else {
					p = instr(buff, 0, "%RUMOR,LOOT," + lang("JP", "EN"))
					break
				}
			}
		}
		if ( adata(ADATA_FESTIVAL, gdata(GDATA_AREA)) ) {
			if ( gdata(GDATA_AREA) == AREA_NOYEL ) {
				if ( rnd(3) ) {
					p = instr(buff, 0, "%FEST," + gdata(GDATA_AREA) + "," + lang("JP", "EN"))
					break
				}
			}
		}
		if ( adata(ADATA_FESTIVAL, gdata(GDATA_AREA)) ) {
			if ( gdata(GDATA_AREA) == AREA_LUDUS ) {
				if ( rnd(3) ) {
					p = instr(buff, 0, "%FEST," + gdata(GDATA_AREA) + "," + lang("JP", "EN"))
					break
				}
			}
		}
		if ( rnd(3) ) {
			if ( gdata(GDATA_MONTH) == 4 ) {
				p = instr(buff, 0, "%AAREA," + gdata(GDATA_AREA) + "," + lang("JP", "EN"))
				break
			}
			else {
				p = instr(buff, 0, "%AREA," + gdata(GDATA_AREA) + "," + lang("JP", "EN"))
				break
			}
		}
		if ( gdata(GDATA_WORLD) == AREA_LOST_YLVA ) {
			p = instr(buff, 0, "%HEAVEN," + lang("JP", "EN"))
			break
		}
		if ( rnd(2) ) {
			if ( gdata(GDATA_MONTH) == 4 ) {
				p = instr(buff, 0, "%APERSONALITY," + cdata(CDATA_PERSONALITY, tc) + "," + lang("JP", "EN"))
				break
			}
			else {
				p = instr(buff, 0, "%PERSONALITY," + cdata(CDATA_PERSONALITY, tc) + "," + lang("JP", "EN"))
				break
			}
		}
	loop
	if ( p == (-1) ) {
		if ( gdata(GDATA_MONTH) == 4 ) {
			p = instr(buff, 0, "%ADEFAULT," + lang("JP", "EN"))
		}
		else {
			p = instr(buff, 0, "%DEFAULT," + lang("JP", "EN"))
		}
	}
	gosub *convert_talk
	return
	goto *quest_info

#defcfunc cnvweight int cnvweight_arg1
	locvar_cnvweight_s = "" + abs(cnvweight_arg1) / 1000 + "." + abs(cnvweight_arg1) \ 1000 / 100 + "" + strweight
	return locvar_cnvweight_s

#defcfunc fltname int fltname_type
	if ( fltname_type == 60001 ) {
		return lang("井戸", "well")
	}
	if ( fltname_type == 57000 ) {
		return lang("食べ物", "food")
	}
	if ( fltname_type == 56000 ) {
		return lang("杖", "rods")
	}
	if ( fltname_type == 53000 ) {
		return lang("巻物", "scrolls")
	}
	if ( fltname_type == 52000 ) {
		return lang("ポーション", "potions")
	}
	if ( fltname_type == 64000 ) {
		return lang("ジャンク", "junks")
	}
	if ( fltname_type == 77000 ) {
		return lang("鉱石", "ores")
	}
	if ( fltname_type == 60000 ) {
		return lang("家具", "furniture")
	}
	if ( fltname_type == 25000 ) {
		return lang("矢弾", "ammos")
	}
	if ( fltname_type == 55000 ) {
		return lang("書物", "books")
	}
	if ( fltname_type == 72000 ) {
		return lang("箱", "boxes")
	}
	if ( fltname_type == 62000 ) {
		return lang("残骸", "remains")
	}
	return lang("不明", "Unknown")

*quest_info
	if ( gdata(GDATA_FLAG_MAIN) < 210 ) {
		noteadd lang("@QM[第一部 エーテルの風]", "@QM[Act1. Etherwind]")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 210 & gdata(GDATA_FLAG_MAIN) < 350 ) {
		noteadd lang("@QM[第二部 災厄の影]", "@QM[Act2.Shade of disaster]")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 350 & gdata(GDATA_FLAG_MAIN) < 1010 ) {
		noteadd lang("@QM[第三部 永遠の盟約]", "@QM[Act3.Eternal League]")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 1010 ) {
		noteadd lang("@QM[後日談　旅路の最果て]", "@QM[After story.Farthest of journey]")
	}
	noteadd lang("@QM<進行度：" + gdata(GDATA_FLAG_MAIN) + ">", "@QM<Progress " + gdata(GDATA_FLAG_MAIN) + ">")
	if ( gdata(GDATA_FLAG_MAIN) >= 0 & gdata(GDATA_FLAG_MAIN) < 30 ) {
		s1 = lang("ヴェルニースの南にあるネフィアの迷宮群のひとつ《レシマス》で、何かが見つかるかもしれない。", "I should check the dungeon called Lesimas. It's located south of Vernis.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 30 & gdata(GDATA_FLAG_MAIN) < 50 ) {
		s1 = lang("致命傷を負った斥候に、パルミアのジャビ王へ書簡を渡すよう頼まれた。パルミアには、ヴェルニースから東の街道を進めば辿り着ける。", "The injured scout asked me to devliver a letter to the king of Palmia. Palmia is located east of Vernis.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 50 & gdata(GDATA_FLAG_MAIN) < 60 ) {
		s1 = lang("ジャビ王によると、仕事が欲しい時は城の図書館にいるエリステアを訪ねればいいようだ。", "Eristia will have some tasks for me if I want to work for Palmia. She's in the library of the castle.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 60 & gdata(GDATA_FLAG_MAIN) < 100 ) {
		s1 = lang("レシマスに赴き、冒険者カラムという人物を探すよう依頼された。彼は最低でもレシマスの16階より先の階層にいるらしい。", "Eristia asked to look for an adventurer called Karam in the dungeon of Lesimas. He was on the 16th level of the dungeon the last time he sent a report. I may have to go deeper if I am to find him.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 100 & gdata(GDATA_FLAG_MAIN) < 110 ) {
		s1 = lang("瀕死のカラムから得た情報を、パルミアのエリステアに伝えなければならない。", "I need to bring information Karam gave me to Eristia at once.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 110 & gdata(GDATA_FLAG_MAIN) < 125 ) {
		s1 = lang("レシマス最下層の封印を解く為に必要な三つの魔石の入手を依頼された。賢者の魔石は《灼熱の塔》に、愚者の魔石は《死者の洞窟》に、覇者の魔石は《古城》にある。", "I need to find 3 magic stones to break the seal of Lesimas. They can be found at the Tower of Fire, the crypt of the damned and the Ancient Castle")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 125 & gdata(GDATA_FLAG_MAIN) < 180 ) {
		s1 = lang("三つの魔石の力で最下層の封印を解き、レシマスの秘宝を持ち帰るようエリステアに依頼された。", "With 3 magic stones I have, I need to get to the deepest level of Lesimas and break the seal. Then bring back an item called Hidden Artifact of Lesimas, whatever it is.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 180 & gdata(GDATA_FLAG_MAIN) < 210 ) {
		s1 = lang("サウスティリスがあなたを呼んでいる。", "South Tyris calls me.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 210 & gdata(GDATA_FLAG_MAIN) < 220 ) {
		s1 = lang("サウスティリス中央部にある古代ネフィア《レミード遺跡》で、何かが見つかるかもしれない。", "I should check the dungeon called Rehmido. It's located center of Southteiris.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 220 & gdata(GDATA_FLAG_MAIN) < 221 ) {
		s1 = lang("メルガスのラボにいるガベラという男に接触しよう。", "I should contact Gavela in the lab of Melugas .")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 223 & gdata(GDATA_FLAG_MAIN) < 250 ) {
		s1 = lang("カードキーを発行してもらう代わりに依頼品を持ってくるようにガベラに言われている。", "I was told to bring out Gavela request instead take out a card key.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 250 & gdata(GDATA_FLAG_MAIN) < 266 ) {
		s1 = lang("サウスティリス中央部にある古代ネフィア《レミード遺跡》に潜り調査部隊と合流しよう。", "I have to join forces of investigation in the  Rehmido.")
	}
	if ( gdata(GDATA_FLAG_MAIN) == 266 | gdata(GDATA_FLAG_MAIN) == 281 ) {
		s1 = lang("ガベラに呼ばれている。一度メルガスへ行こう。", "I have been called to Gavela. I have to go to Melugas once.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 267 & gdata(GDATA_FLAG_MAIN) < 281 ) {
		s1 = lang("サウスティリス中央部にある古代ネフィア《レミード遺跡》に潜り調査部隊と合流しよう。", "I have to join forces of investigation in the  Rehmido.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 282 & gdata(GDATA_FLAG_MAIN) < 290 ) {
		s1 = lang("サウスティリス中央部にある古代ネフィア《レミード遺跡》に潜り調査部隊と合流しよう。", "I have to join forces of investigation in the  Rehmido.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 290 & gdata(GDATA_FLAG_MAIN) < 295 ) {
		s1 = lang("レミード最下層の怪物を倒せないかガベラに相談してみよう。", "I will have to talk Gavela to kill the monster in the bottom layer of Rehmido .")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 295 & gdata(GDATA_FLAG_MAIN) < 320 ) {
		s1 = lang("エイレル南東の山岳地帯に行き、超高純度のエーテルを回収しガベラに渡そう。", "I went to the mountains of southeast Eirel to recover very high concentrations ether, and pass to Gavela.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 320 & gdata(GDATA_FLAG_MAIN) < 340 ) {
		s1 = lang("レミード遺跡最下層の怪物を倒そう。", "I will beat the monster in the bottom layer of Rehmido.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 340 & gdata(GDATA_FLAG_MAIN) < 345 ) {
		s1 = lang("制圧した遺跡内を調査しよう。", "I need more search in Rehmido.")
	}
	if ( gdata(GDATA_FLAG_MAIN) == 345 ) {
		s1 = lang("地上へ帰ろう。", "I should return to ground.")
	}
	if ( gdata(GDATA_FLAG_MAIN) == 350 ) {
		s1 = lang("ノースティリスは今どうなっているだろう？関所を通過して様子を見に行こう。", "I will go to see the state of North Tyris through the north border.")
	}
	if ( gdata(GDATA_FLAG_MAIN) == 355 ) {
		s1 = lang("パルミアで情報収集でもしようか。", "I am going to collect information at Palmia.")
	}
	if ( gdata(GDATA_FLAG_MAIN) == 360 | gdata(GDATA_FLAG_MAIN) == 361 ) {
		s1 = lang("パルミアのエリステアと話をしてみよう。", "I should return to ground.")
	}
	if ( gdata(GDATA_FLAG_MAIN) == 362 ) {
		s1 = lang("ポート・カプールの船長に紹介状を見せよう。", "I should return to ground.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 363 & gdata(GDATA_FLAG_MAIN) < 365 ) {
		s1 = lang("浮遊大陸にある西の森の遺跡に人が集まっているらしい。", "continue to be....")
	}
	if ( gdata(GDATA_FLAG_MAIN) == 365 ) {
		s1 = lang("帰る方法を探そう。", "I should return to Tyris.")
	}
	if ( gdata(GDATA_FLAG_MAIN) == 366 ) {
		s1 = lang("メルガスでガベラに話をきこう。", "I should contact Gavela in the lab of Melugas.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 367 & gdata(GDATA_FLAG_MAIN) < 370 ) {
		s1 = lang("古の庭園からメルガストでロストイルヴァへ行き、調査してまわろう。", "I should research in LostIrva.")
	}
	if ( gdata(GDATA_FLAG_MAIN) == 370 ) {
		s1 = lang("ロストイルヴァの調査をしつつ神の間を目指そう。", "I should research in LostIrva.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 370 & gdata(GDATA_FLAG_MAIN) < 400 ) {
		s1 = lang("混沌の巨城の最深層、神の間を目指そう。", "I should aim for the bottom of Cradle of Chaos.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 378 & gdata(GDATA_FLAG_MAIN) < 382 ) {
		s1 = lang("一度、エリステアに銀熊のことを報告しよう。", "I need to bring information of the silver bear to Eristia at once.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 382 & gdata(GDATA_FLAG_MAIN) < 394 ) {
		s1 = lang("混沌の巨城の最深層、神の間を目指そう。", "I should aim for the bottom of Cradle of Chaos.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 394 & gdata(GDATA_FLAG_MAIN) < 396 ) {
		s1 = lang("ノルンの言うとおりにノースティリスと往復が出来るのか確かめよう。", "I will ascertain whether I can back and forth with the NorthTyris.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 396 & gdata(GDATA_FLAG_MAIN) < 398 ) {
		s1 = lang("サウスティリスの方向から、何かに呼ばれているような感覚がする。", "I feel like has been called by something from SouthTyris.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 398 & gdata(GDATA_FLAG_MAIN) < 400 ) {
		s1 = lang("海底から城が浮上し、世界が狂気に包まれようとしている。城へはサウスティリス南西のヴァルムから行ける。", "Castle has emerged from the sea floor, the world is about to be wrapped in madness. I can go to the castle from Valm of SouthTyris southwest.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 400 & gdata(GDATA_FLAG_MAIN) < 440 ) {
		s1 = lang("パルミアのエリステアから依頼を受けよう。", "Sorry, this is untranslated sentence.")
	}
	if ( gdata(GDATA_FLAG_SUB_REGULUS_ZANAN) > 0 & gdata(GDATA_FLAG_SUB_REGULUS_ZANAN) < 100 ) {
		s1 = lang("関所にいるエユルとともに生体兵器を殲滅しよう。", "Sorry, this is untranslated sentence.")
	}
	if ( gdata(GDATA_FLAG_SUB_REGULUS_ZANAN) >= 100 & gdata(GDATA_FLAG_SUB_REGULUS_ZANAN) < 1000 ) {
		s1 = lang("生体兵器の殲滅をエリステアに報告しよう。", "Sorry, this is untranslated sentence.")
	}
	if ( gdata(GDATA_FLAG_SUB_REGULUS_MAYROON) > 0 & gdata(GDATA_FLAG_SUB_REGULUS_MAYROON) < 100 ) {
		s1 = lang("ノイエルにいるマルカとともにメイルーンへ悪魔討伐に向かおう。", "Sorry, this is untranslated sentence.")
	}
	if ( gdata(GDATA_FLAG_SUB_REGULUS_MAYROON) >= 100 & gdata(GDATA_FLAG_SUB_REGULUS_MAYROON) < 1000 ) {
		s1 = lang("メイルーンの悪魔の討伐をエリステアに報告しよう。", "Sorry, this is untranslated sentence.")
	}
	if ( gdata(GDATA_FLAG_SUB_REGULUS_EULDERNA) > 0 & gdata(GDATA_FLAG_SUB_REGULUS_EULDERNA) < 100 ) {
		s1 = lang("ロストイルヴァの魔導船にいるライゼルとともにエウダーナへ悪魔討伐に向かおう。", "Sorry, this is untranslated sentence.")
	}
	if ( gdata(GDATA_FLAG_SUB_REGULUS_EULDERNA) >= 100 & gdata(GDATA_FLAG_SUB_REGULUS_EULDERNA) < 1000 ) {
		s1 = lang("エウダーナの悪魔の討伐をエリステアに報告しよう。", "Sorry, this is untranslated sentence.")
	}
	if ( gdata(GDATA_FLAG_SUB_REGULUS_KIKKASU) > 0 & gdata(GDATA_FLAG_SUB_REGULUS_KIKKASU) < 100 ) {
		s1 = lang("ロストイルヴァ北端に存在する神艦から傭兵と一緒にキッカスへ悪魔討伐に向かおう。", "Sorry, this is untranslated sentence.")
	}
	if ( gdata(GDATA_FLAG_SUB_REGULUS_KIKKASU) >= 100 & gdata(GDATA_FLAG_SUB_REGULUS_KIKKASU) < 1000 ) {
		s1 = lang("キッカスの悪魔の討伐をエリステアに報告しよう。", "Sorry, this is untranslated sentence.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 440 & gdata(GDATA_FLAG_MAIN) < 455 ) {
		s1 = lang("メルガスへ行き依頼を確認しよう。", "I have to go to Melugas once.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 455 & gdata(GDATA_FLAG_MAIN) < 480 ) {
		s1 = lang("混沌の巨城、10階の敵を倒そう。 ", "Sorry, this is untranslated sentence.")
	}
	if ( gdata(GDATA_FLAG_MAIN) == 480 ) {
		s1 = lang("悪魔の討伐をガベラに報告しよう。", "I should report to Gavela in the lab of Melugas.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 490 & gdata(GDATA_FLAG_MAIN) < 685 ) {
		s1 = lang("混沌の巨城の最深層、神の間を目指そう。", "I should aim for the bottom of Cradle of Chaos.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 685 & gdata(GDATA_FLAG_MAIN) < 695 ) {
		s1 = lang("神立図書館でソピアーと話そう。", "I have to talk with <Sophia> at Sacred Library of Irva.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 695 & gdata(GDATA_FLAG_MAIN) < 700 ) {
		s1 = lang("混沌の巨城の最深層、神の間を目指そう。", "I should aim for the bottom of Cradle of Chaos.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 700 & gdata(GDATA_FLAG_MAIN) < 720 ) {
		s1 = lang("混沌の神を倒す時が来た。", "It is time to beat the god of chaos.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 720 & gdata(GDATA_FLAG_MAIN) < 760 ) {
		s1 = lang("混沌の超児を無力化しよう。", "I have to disable Chaos Child.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 760 & gdata(GDATA_FLAG_MAIN) < 770 ) {
		s1 = lang("ロストイルヴァは平和になっただろうか？", "If I become a spare time, I will do request of Norne.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 770 & gdata(GDATA_FLAG_MAIN) < 780 ) {
		s1 = lang("気が向いたらノルンの頼み通りヴェルニースに向かおう。", "If I become a spare time, I will do request of Norne.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 780 & gdata(GDATA_FLAG_MAIN) < 850 ) {
		s1 = lang("ロイターと接触して世界を行き来しつつ、探索していこう。", "Let's explore while traveling around the world by speaking with <Loyter>.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 850 & gdata(GDATA_FLAG_MAIN) < 950 ) {
		s1 = lang("ロイターと接触して世界を行き来しつつ、探索していこう。", "Let's explore while traveling around the world by speaking with <Loyter>.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 820 & gdata(GDATA_FLAG_MAIN) < 850 ) {
		s1 = lang("混沌の巨城の最深層、神の間を再び目指そう。", "I should aim for the bottom of Cradle of Chaos again.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 850 & gdata(GDATA_FLAG_MAIN) < 1000 ) {
		s1 = lang("最後まであきらめずに戦おう。", "I will fight until the end without giving up.")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 1000 & gdata(GDATA_FLAG_MAIN) < 1010 ) {
		s1 = lang("帰ろう…。", "I'm going home...")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 1010 ) {
		s1 = lang("（開発中）オルフェは今どこに？ＬＦ計画とは？", "Under development.")
	}
	talk_conv s1, 40 - en * 4
	buff += s1
	if ( gdata(GDATA_FLAG_SUB_NINE_HEAD_DRAGON) > 0 & gdata(GDATA_FLAG_SUB_NINE_HEAD_DRAGON) < 3 ) {
		noteadd ""
		s0 = lang("(ミヅキは落ち込んでいないだろうか？時間のある時にでも、九頭竜の城へ様子を見に行こう)", "If I have time, I would like to visit Deep-sea castle to comfort <Abyss Princess>.")
		talk_conv s0, 40 - en * 4
		buff += s0
	}
	noteadd ""
	return

*quest_info2
	if ( val == 0 ) {
		noteadd ""
		noteadd lang("@QM[サブクエスト]", "@QM[Sub Quest]")
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_SLIME) != 0 ) {
		s = lang("ぬいぐるみを守れ！ Lv6相当", "Putit attacks Lv6")
		p = gdata(GDATA_FLAG_SUB_SLIME)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ヴェルニースのミシェスに、スライムの退治を頼まれた。スライムの巣窟は、ミシェスの家のすぐ南の家のようだ。", "Miches of Vernis asked me to investigate the house just south of her home.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("ヴェルニースのミシェスに頼まれたスライムの退治を完了した。あとは報告するだけだ。", "I've wiped out the putit's nest. I have to visit Miches of Vernis to report it.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_ROGUE) != 0 ) {
		s = lang("お酒泥棒 Lv2相当", "Thieves' hideout Lv2")
		p = gdata(GDATA_FLAG_SUB_ROGUE)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ヴェルニースのシーナが勤める酒場に、酒泥棒が頻出しているらしい。盗賊団を壊滅させてシーナに報告しよう。", "Bandits have been stealing things in Vernis. I need to find and destroy their hideout.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("酒樽を盗んでいたごろつき団を殲滅した。あとはヴェルニースのシーナに報告するだけだ。", "Those bandits are no more. All I have to do now is bring the news to Shena of Vernis.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_DOG) != 0 ) {
		s = lang("迷子の子犬 Lv4相当", "Puppy's cave Lv4")
		p = gdata(GDATA_FLAG_SUB_DOG)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ヴェルニースのリリアンに、迷子の子犬ポピーを捜すよう頼まれた。どうやら子犬はヴェルニースのすぐ東にある洞窟にいるらしい。", "Rilian of Vernis asked me to find her puppy named poppy in the puppy's cave located east of Vernis.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_NIGHTMARE) != 0 ) {
		s = lang("実験場のナイトメア Lv50相当", "Nightmare Lv50")
		p = gdata(GDATA_FLAG_SUB_NIGHTMARE)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ヴェルニースのロイターに金になる仕事を持ちかけられた。何やら危険な仕事のようだ。万全の準備を整えてからロイターに話し掛けよう。", "Loyter of Vernis has a dangerous, yet highly profitable job for me. I need to prepare well before talking to him again.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("実験場の全ての敵を殲滅しなければならない。", "I need to eliminate all of the monsters in the test ground.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 3 ) {
			s1 = lang("実験を生き延びて完了させた。ヴェルニースのロイターに報告しよう。", "I've survived the nightmare. Now to meet Loyer of Vernis to receive the reward.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_MOTHER) != 0 ) {
		s = lang("エーテル病を治せ Lv20相当", "Pael and her mom Lv20")
		p = gdata(GDATA_FLAG_SUB_MOTHER)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ノイエルのパエルにエーテル抗体を渡した。母親の容態に変化があらわれるのを待とう。", "Pael's mother is suffering from Ether Disease and I gave Pael a potion of cure corruption in Noyel. Let's wait until the condition of her mother changes.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("ノイエルのパエルの母親の容態が変わったようだ。今度見舞いにいったほうがいいかもしれない。", "There's a change in the condition of Pael's mother. I should go check her when I have time.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 3 ) {
			s1 = lang("ノイエルのパエルにエーテル抗体を渡した。母親の容態に変化があらわれるのを待とう。", "Pael's mother is suffering from Ether Disease and I gave Pael a potion of cure corruption in Noyel. Let's wait until the condition of her mother changes.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 4 ) {
			s1 = lang("ノイエルのパエルの母親の容態が変わったようだ。今度見舞いにいったほうがいいかもしれない。", "There's a change in the condition of Pael's mother. I should go check her when I have time.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 5 ) {
			s1 = lang("ノイエルのパエルにエーテル抗体を渡した。母親の容態に変化があらわれるのを待とう。", "Pael's mother is suffering from Ether Disease and I gave Pael a potion of cure corruption in Noyel. Let's wait until the condition of her mother changes.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 6 ) {
			s1 = lang("ノイエルのパエルの母親の容態が変わったようだ。今度見舞いにいったほうがいいかもしれない。", "There's a change in the condition of Pael's mother. I should go check her when I have time.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 7 ) {
			s1 = lang("ノイエルのパエルにエーテル抗体を渡した。母親の容態に変化があらわれるのを待とう。", "Pael's mother is suffering from Ether Disease and I gave Pael a potion of cure corruption in Noyel. Let's wait until the condition of her mother changes.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 8 ) {
			s1 = lang("ノイエルのパエルの母親の容態が変わったようだ。今度見舞いにいったほうがいいかもしれない。", "There's a change in the condition of Pael's mother. I should go check her when I have time.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 9 ) {
			s1 = lang("ノイエルのパエルにエーテル抗体を渡した。母親の容態に変化があらわれるのを待とう。", "Pael's mother is suffering from Ether Disease and I gave Pael a potion of cure corruption in Noyel. Let's wait until the condition of her mother changes.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 10 ) {
			s1 = lang("ノイエルのパエルの母親の容態が変わったようだ。今度見舞いにいったほうがいいかもしれない。", "There's a change in the condition of Pael's mother. I should go check her when I have time.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_WIFE) != 0 ) {
		s = lang("嫁泥棒 Lv3相当", "Wife collector LV3")
		p = gdata(GDATA_FLAG_SUB_WIFE)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("カプールのラファエロに嫁を持ってくるよう頼まれた。なんという下劣な男だ。", "I was asked by Raphael of Port Kapul to bring my wife. What a moron.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_CAT) != 0 ) {
		s = lang("猫退治 Lv25相当", "Cat house Lv25")
		p = gdata(GDATA_FLAG_SUB_CAT)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ヨウィンのタムに、家の猫退治を依頼された。家は南の畑のあたりにあるそうだ。", "Tam of Yowyn asked me to eliminate the cats in his house. The house is located southern part of Yowyn.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("タムの家の中の猫を退治した。あとはヨウィンでタムに報告するだけだ。", "I've freed Tam's house from the cats. To get the reward, I need to speak Tam again in Yowyn.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_WAR) != 0 ) {
		s = lang("防衛戦線の死闘 Lv17相当", "Defense line Lv17")
		p = gdata(GDATA_FLAG_SUB_WAR)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ヨウィンのギルバート大佐に、ジューア解放軍の援護を求められた。準備が整い次第、大佐に話し掛けよう。", "Carnel Gilbert of Yowyn asked me to help the Juere freedom force fight the Yerles Army. I should speak to him again when I'm ready.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("イェルスの防衛軍を殲滅しなければならない。", "I need to destroy the Yerles Army.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 3 ) {
			s1 = lang("防衛線を見事に突破した。ヨウィンのギルバート大佐に報告しよう。", "I've won the war. Now to bring the good news to carnel Gilbert.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_YEEK) != 0 ) {
		s = lang("騎士昇格試験の手伝い Lv8相当", "Novice knightLv8")
		p = gdata(GDATA_FLAG_SUB_YEEK)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ヨウィンのアインクに騎士昇格試験の手伝いを頼まれた。ヨウィンの西にあるイークの洞窟に住むイークの首領を倒せばいいそうだ。", "Ainc of Yowyn asked me to help his promotion task. I need to enter the Yeek's dungeon which is located west of Yowyn and kill the head.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("イークの首領を無事討伐した。ヨウィンのアインクに報告しよう。", "I've defeated the head of Yeek. I should head back to Yowyn and report to Ainc.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_KAMIKAZE) != 0 ) {
		s = lang("カミカゼ特攻隊 Lv14相当", "Kamikaze attack Lv14")
		p = gdata(GDATA_FLAG_SUB_KAMIKAZE)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("カプールのアーノルドに、カミカゼ特攻隊に耐えるパルミア軍への援軍を頼まれた。準備が整い次第、アーノルドに話し掛けよう。", "Arnord of Port Kapul asked me to help the isolated Palmian 10th regiment from massive Kamikaze attacks. I should prepare and speak to Arnord when ready.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("パルミア軍が撤退を完了するまでの間、カミカゼ特攻隊の猛攻に耐えなければならない。パルミア軍が撤退したら、知らせが入るはずだ。", "I have to hold the battle line to gain time while the Palmian army retreats. A messenger will inform me when it's done.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 3 ) {
			s1 = lang("カミカゼ特攻隊の猛攻に耐えきった。カプールのアーノルドに報告しよう。", "I survived the kamikaze attack. I have to bring the good news to Arnord of Port Kapul.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_MIAS_DREAM) != 0 ) {
		s = lang("ミーアの夢 Lv1相当", "Mia's dream Lv1")
		p = gdata(GDATA_FLAG_SUB_MIAS_DREAM)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("パルミアのミーアは、稀少猫シルバーキャットが欲しいらしい。なんとか捕まえて、ミーアに渡そう。", "Mia of Palmia wants a silver cat, a very rare cat. If I happen to capture one, I should bring it to Mia.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_VEIN) != 0 ) {
		s = lang("幻の絵本 Lv12相当", "Rare books Lv12")
		p = gdata(GDATA_FLAG_SUB_VEIN)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ルミエストのレントンが、レイチェルという童話作家によって描かれた絵本を探している。絵本は全部で4巻あるらしい。全て見つけたら、レントンに報告しよう。", "Renton of Lumiest is looking for the fairy tale books written by Rachael. I should bring it to him if I happen to find one. There're total of 4 books in the series.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_PYRAMID) != 0 ) {
		s = lang("ピラミッドからの挑戦状 Lv16相当", "Pyramid trial Lv16")
		p = gdata(GDATA_FLAG_SUB_PYRAMID)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ピラミッドに出入りする資格を得た。ピラミッドはカプールの北にあり、中には古代の秘宝が眠っているといわれている。", "I've got a invitation to the pyramid. The pyramid is located north of Port Kapul and it is rumored that it holds great treasure.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_NUKE) != 0 ) {
		s = lang("パルミアに赤い花を Lv14相当", "Red blossom in Palmia Lv14")
		p = gdata(GDATA_FLAG_SUB_NUKE)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ダルフィのノエルにパルミアの街に爆弾をしかけるように依頼された。爆弾をパルミアの宿屋の部屋にあるぬいぐるみにしかけよう。", "Noel of Derphy asked me to set up a bomb in Palmia. I need to place it right on the teddy bear in the inn.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("見事にパルミアを壊滅させた。あとはダルフィのノエルの元に戻り、報告するだけだ。", "I have successfully destroyed Palmia. Now all I need to report back to Noel in Derphy.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_BIOLOGIST) != 0 ) {
		s = lang("生化学者の野望 Lv5相当", "Ambitious scientist Lv5")
		p = gdata(GDATA_FLAG_SUB_BIOLOGIST)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == gdata(GDATA_FLAG_SUB_BIOLOGIST) * (gdata(GDATA_FLAG_SUB_BIOLOGIST) < 6) + (gdata(GDATA_FLAG_SUB_BIOLOGIST) == 0) ) {
			s1 = lang("カプールのイコールに、実験用の生物5体の捕獲を頼まれた。依頼品、モンスターボールに捕獲したものでなくてはならない。あと" + (6 - gdata(GDATA_FLAG_SUB_BIOLOGIST)) + "個の捕獲済みモンスターボールを届ける必要がある。", "Icolle of Port Kapul asked me to bring 5 filled monster balls. I still need to bring him " + (6 - gdata(GDATA_FLAG_SUB_BIOLOGIST)) + " of them.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_SEWER) != 0 ) {
		s = lang("下水道大作戦 Lv23相当", "Sewer sweeping Lv23")
		p = gdata(GDATA_FLAG_SUB_SEWER)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ルミエストのバルザックに、下水道の清掃を頼まれた。下水道の入り口は宿屋の近くにあるみたいだ。", "Balzak of Lumiest wants me to sweep the entire sewer. I can find the entrance to the sewer around the inn.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("下水道の大掃除を完了した。あとはルミエストのバルザックに報告するだけだ。", "I've finished sweeping the sewer. I need to report it to Balzak of Lumiest.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_GUILD_MAGE) != 0 ) {
		s = lang("魔術士ギルド審査", "Joining the Mages Guild")
		p = gdata(GDATA_FLAG_SUB_GUILD_MAGE)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("魔術士ギルドに加入するには、ルミエストのメイジギルドの納入箱に、解読済みの古書物を納入し、ギルドポイントを貯めた後、ギルドの番人に話しかけなければならない。審査をクリアするには、あと" + gdata(GDATA_FLAG_GUILD_MAGE_NORMA) + "ギルドポイントを獲得する必要がある。", "To join the Mages Guild, I need to gather " + gdata(GDATA_FLAG_GUILD_MAGE_NORMA) + " more guild points and talk to the guild guard in Lumiest. I can earn the guild points by collecting ancients books, decrypt them, and put them into the delivery box near the guild guard.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_GUILD_THIEF) != 0 ) {
		s = lang("盗賊ギルド審査", "Joining the Thieves Guild")
		p = gdata(GDATA_FLAG_SUB_GUILD_THIEF)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("盗賊ギルドに加入するには、税金を4ヶ月以上滞納した状態で、ダルフィのギルドの番人に話しかける必要がある。", "To join the Thieves Guild, I need to not pay tax for 4 months, that means I'll be a criminal for sure.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_GUILD_FIGHTER) != 0 ) {
		s = lang("戦士ギルド審査", "Joining the Fighters Guild")
		p = gdata(GDATA_FLAG_SUB_GUILD_FIGHTER)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("戦士ギルドに加入するには、" + refchara(gdata(GDATA_FLAG_GUILD_FIGHTER_THIEF), DBSPEC_CHARA_NAME_ORG, 1) + "をあと" + gdata(GDATA_FLAG_GUILD_FIGHTER_NORMA) + "匹討伐してから、カプールのギルドの番人に話しかける必要がある。", "To join the Fighters Guild, I need to slay " + gdata(GDATA_FLAG_GUILD_FIGHTER_NORMA) + " more " + refchara(gdata(GDATA_FLAG_GUILD_FIGHTER_THIEF), DBSPEC_CHARA_NAME_ORG, 1) + " and talk to the guild guard in Port Kapul.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_MAGE_1) != 0 ) {
		s = lang("魔術士ギルドノルマ", "The Mages Guild quota")
		p = gdata(GDATA_FLAG_SUB_MAGE_1)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("魔術士ギルドのランクを上げるためには、ルミエストのメイジギルドの納入箱に、解読済みの古書物を納入し、ギルドポイントを貯めた後、ギルドの番人に話しかけなければならない。ランク上昇のためには、あと" + gdata(GDATA_FLAG_GUILD_MAGE_NORMA) + "ギルドポイントを獲得する必要がある。", "To raise the rank in the Mages Guild, you need to gather " + gdata(GDATA_FLAG_GUILD_MAGE_NORMA) + " more guild points and talk to the guard in Lumiest. I can earn the guild points by collecting ancients books, decrypt them, and put them into the delivery box near the guild guard.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_FIGHTER_1) != 0 ) {
		s = lang("戦士ギルドノルマ", "The Fighters Guild quota")
		p = gdata(GDATA_FLAG_SUB_FIGHTER_1)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("戦士ギルドのランクを上げるためには、" + refchara(gdata(GDATA_FLAG_GUILD_FIGHTER_THIEF), DBSPEC_CHARA_NAME_ORG, 1) + "をあと" + gdata(GDATA_FLAG_GUILD_FIGHTER_NORMA) + "匹討伐してから、カプールのギルドの番人に話しかける必要がある。", "To raise the rank in the Fighters Guild, I need to slay " + gdata(GDATA_FLAG_GUILD_FIGHTER_NORMA) + " more " + refchara(gdata(GDATA_FLAG_GUILD_FIGHTER_THIEF), DBSPEC_CHARA_NAME_ORG, 1) + " and talk to the guild guard in Port Kapul.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_THIEF_1) != 0 ) {
		s = lang("盗賊ギルドノルマ", "The Thieves Guild quota")
		p = gdata(GDATA_FLAG_SUB_THIEF_1)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("盗賊ギルドのランクを上げるためには、あと金貨" + gdata(GDATA_FLAG_GUILD_THIEF_NORMA) + "枚分の盗品を売りさばき、ダルフィのギルドの番人に話しかける必要がある。", "To raise the rank in the Thieves Guild, I need to sell stolen goods worth total of " + gdata(GDATA_FLAG_GUILD_THIEF_NORMA) + " gold pices and talk to the guild guard in Derphy.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_MINOTAUR) != 0 ) {
		s = lang("ミノタウロスの王 Lv24相当", "Minotaur king Lv24")
		p = gdata(GDATA_FLAG_SUB_MINOTAUR)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("パルミアのコネリー少将に、ミノタウロスの首領の退治を頼まれた。ミノタウロスの巣窟は、ヨウィンの南にあるみたいだ。", "General Conery wants me to hunt the chief of minotaur. The nest is located south of Yowyn.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("ミノタウロスの首領を無事討伐した。パルミアのコネリー少将に報告しよう。", "I've killed the chief of minotaur. I should head back to Palmia and speak to General Conery.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_DADDY) != 0 ) {
		s = lang("リトルシスター Lv30相当", "Little sister Lv30")
		p = gdata(GDATA_FLAG_SUB_DADDY)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("アクリ・テオラの謎の科学者に、リトルシスターを連れてくるよう頼まれた。捕獲するためには、ビッグダディを倒し、捕獲玉をリトルにぶつける必要がある。現在のリトルシスター殺害" + gdata(GDATA_SISTER_KILLED) + "回、引き渡し" + gdata(GDATA_SISTER_SAVED) + "回、報酬受け取り" + gdata(GDATA_SISTER_REWARD) + "回。", "A strange scientist asked me to bring little sisters to her. To capture a little sister, I need to kill Big Daddy first then throw the little ball at her.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_FALLEN_PRINCESS) != 0 ) {
		s = lang("堕ちた皇女 Lv80相当", "Fallen princess Lv80")
		p = gdata(GDATA_FLAG_SUB_FALLEN_PRINCESS)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("煙とパイプ亭でシルヴィア皇女に魅力的な男を連れてくるよう依頼された。魅力100くらいあれば大丈夫だろうか。", "I received the request of the princess Silvia in the smoke and pipe.I have to take an attractive man to the smoke and pipe.It will be enough if charm is over 100.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("煙とパイプ亭のシルヴィア皇女の様子がおかしいが…とりあえずまた魅力的な男を連れていってみようか。魅力150くらいあれば大丈夫だろう。", "Preincess Silvia behavior is something strange. For the time being, I decided to take another attractive man once again.It will be enough if charm is over 150.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 3 ) {
			s1 = lang("煙とパイプ亭のシルヴィア皇女は誰が誰なのか区別もつかない様子だ。下手に話しかけると誰かと見間違われかねない。", "Princess Silvia is mentally deranged and it seems she cannot distinguish between people.If I speak to her now, may be mistaken for someone. ")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_LOST_KITTY) != 0 ) {
		s = lang("迷子の子猫ちゃん Lv5相当", "Lost kitty Lv5")
		p = gdata(GDATA_FLAG_SUB_LOST_KITTY)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("エイレルの犬のおまわりさんに、迷子の子猫を保護して連れてくるよう頼まれた。", "Dog cop of Eirel asked me to take care of stray cat.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_DIVERSIONARY_TACTICS) != 0 ) {
		s = lang("陽動作戦 Lv60相当", "Demonstration Lv60")
		p = gdata(GDATA_FLAG_SUB_DIVERSIONARY_TACTICS)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("エイレルでミーリスにエウダーナ部隊の注意を惹くよう依頼された。万全の準備を整えてからミーリスに話し掛けよう。", "At the Eirel, Milis requests for me to draw the attentions of Eulderna troops.I should talk to Milis with perfect preparation. ")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("注意を惹くのはいいが、別に全て倒してしまってもかまわんのだろう。", "It is easy to draw their attention. But it seems no problem if I kill all of them.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 3 ) {
			s1 = lang("全滅させたので陽動する必要もなくなった。エイレルのミーリスに報告しよう。", "Since I annihilated the enemy, there is no need to draw attention any more. I'll report to Milis in Eirel.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_JUERES_IMPERTINENCE) != 0 ) {
		s = lang("ジューアのくせに生意気だ Lv50相当", "Control of underground passage Lv50")
		p = gdata(GDATA_FLAG_SUB_JUERES_IMPERTINENCE)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("メルガスのオービルに、地下通路を占拠しているジューア軍の殲滅を依頼された。階段から地下へ降りよう。", "I received the Orville's request in Melugas. I have to delete the Juere army occupying the underground passage of this base.I will get down from stairs to underground.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("ジューア軍を殲滅した。あとはメルガスでオービルに報告するだけだ。", "I annihilated the Juere army.Remaining work is only the report to Orville in Melugas.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_PIRATE_HUNTING) != 0 ) {
		s = lang("海賊狩り Lv100相当", "Pirate huntting Lv100")
		p = gdata(GDATA_FLAG_SUB_PIRATE_HUNTING)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("クルアルムのザナードと海賊狩りをすることになった。海賊を倒して宝を頂こう。", "I decided to hunt the pirates together with Zernard waiting at the harbor of Kurualm.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("クルアルムのザナードと海賊狩りをすることになった。海賊を倒して宝を頂こう。", "I decided to hunt the pirates together with Zernard waiting at the harbor of Kurualm.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 3 ) {
			s1 = lang("海賊団長を討ち取った。クルアルムのザナードに報告しよう。", "I hunt pirate chief.I report to Zernard in Kurualm.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_UNPAID_COMPENSATION) != 0 ) {
		s = lang("払われなかった報酬 Lv2相当", "Resentment of remuneration Lv2")
		p = gdata(GDATA_FLAG_SUB_UNPAID_COMPENSATION)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("アーク・ベルクのメファンに街の子供をさらってくるよう依頼された。こんな依頼、無理に達成する必要はない。", "Mefan of Arcbelc asked me to kidnap town children. Maybe or maybe not do it.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_THE_RESULT_OF_REVENGE) != 0 ) {
		s = lang("復讐の果てに Lv40相当", "Revenge mountain Lv40")
		p = gdata(GDATA_FLAG_SUB_THE_RESULT_OF_REVENGE)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ルオザのたけのこに、山にいるきのこの殲滅を依頼された。魔法の階段から山へ乗り込もう。", "Bamboo Sprout of Ruoza asked me to anihilate the Mushrooms in the mountain. Magic stairs lead there.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("きのこたちを滅ぼした。あとはルオザでたけのこに報告するだけだ。", "Mushrooms anihilated. I need to talk Bamboo Sprout in Ruoza again. ")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_MANSION_FOR_SALE) != 0 ) {
		s = lang("屋敷売り出し中！ Lv70相当", "Maid and house Lv70")
		p = gdata(GDATA_FLAG_SUB_MANSION_FOR_SALE)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("メルカーンのルーネに金貨200万枚を見せてみよう。", "I will show 2,000,000 gp Lune of Melkawn.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("屋敷を持ち主から買い取ろう。持ち主はルードゥスにいる。", "If you purchase the maid house, I need to meet the owner who resides in Ludus.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_PRINCESS_COMPANION) != 0 ) {
		s = lang("姫の話し相手 Lv1相当", "Companion of Princess Lv1")
		p = gdata(GDATA_FLAG_SUB_PRINCESS_COMPANION)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ヴァルムの浜辺から亀に連れられて城へ行ってみよう。", "The turtle will lead me to a castle from Valm beach.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_H_SISTER) != 0 ) {
		s = lang("えっちないもうと Lv80相当", "Removal of sister Lv80")
		p = gdata(GDATA_FLAG_SUB_H_SISTER)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ルードゥスの姉から地下室に住み着いた妹の退治を頼まれた。", "Older Sister in Ludus asked me to eliminate the sister who squatting in the Basement.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("妹ヒットマンを退治した。あとはルードゥスの姉に報告するだけだ。", "I eliminated the target. I need to refer to Old Sister.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_STRUGGLE_AGAINST_INSANITY) != 0 ) {
		s = lang("狂気との戦い Lv30相当", "Struggle against insanity Lv30")
		p = gdata(GDATA_FLAG_SUB_STRUGGLE_AGAINST_INSANITY)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == gdata(GDATA_FLAG_SUB_STRUGGLE_AGAINST_INSANITY) * (gdata(GDATA_FLAG_SUB_STRUGGLE_AGAINST_INSANITY) < 10) + (gdata(GDATA_FLAG_SUB_STRUGGLE_AGAINST_INSANITY) == 0) ) {
			s1 = lang("メルカーンのカイルに、ユニコーンの角を調達してくるよう頼まれた。あと" + (10 - gdata(GDATA_FLAG_SUB_STRUGGLE_AGAINST_INSANITY)) + "個のユニコーンの角を届ける必要がある。", "Kyle of Melkawn asks for unicorn horns. I still need to bring him " + (10 - gdata(GDATA_FLAG_SUB_STRUGGLE_AGAINST_INSANITY)) + " of them.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_MONOCHROME_DELIVERY_SERVICE) != 0 ) {
		s = lang("モノクロ定期便 Lv10相当", "Outrageous revenge Lv2")
		p = gdata(GDATA_FLAG_SUB_MONOCHROME_DELIVERY_SERVICE)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ちゃんと手紙を届けてあげよう。", "I'll send a letter properly.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_MONOCHROME_DELIVERY_SERVICE) != 0 ) {
		s = lang("モノクロ定期便 Lv10相当", "Outrageous revenge Lv2")
		p = gdata(GDATA_FLAG_SUB_MONOCHROME_DELIVERY_SERVICE)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("ちゃんと手紙を届けてあげよう。", "I'll send a letter properly.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_MONOCHROME_DELIVERY_SERVICE) != 0 ) {
		s = lang("モノクロ定期便 Lv10相当", "Outrageous revenge Lv2")
		p = gdata(GDATA_FLAG_SUB_MONOCHROME_DELIVERY_SERVICE)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 3 ) {
			s1 = lang("ちゃんと手紙を届けてあげよう。", "I'll send a letter properly.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_LAW_OF_NINJAS) != 0 ) {
		s = lang("忍者の掟 Lv120相当", "Rule of Ninja Lv120")
		p = gdata(GDATA_FLAG_SUB_LAW_OF_NINJAS)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("クルアルムの影羅に忍者軍団の殲滅を依頼された。影羅に連れられて忍者屋敷まで行こう。", "Eila in Kurualm asked me to anihilate the ninja corps. Eila will lead me there.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("クルアルムの影羅に忍者軍団の殲滅を依頼された。影羅に連れられて忍者屋敷まで行こう。", "Eila in Kurualm asked me to anihilate the ninja corps. Eila will lead me there.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 3 ) {
			s1 = lang("殲滅はしたが、なんだか嫌な予感がする。クルアルムの影羅に報告しよう。", "Ninja corps successfully anihilated but I have some strange feeling. I need to refer to Eila.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_GUILD_WARS1) != 0 ) {
		s = lang("ギルドウォーズ Lv40相当", "Guild quest Lv40")
		p = gdata(GDATA_FLAG_SUB_GUILD_WARS1)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("魔術士ギルドのマスターから、他のギルドのマスターをどちらか片方倒すように頼まれた。", "The guild master told me to assassinate the master of either of the other two guilds.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("あとは魔術士ギルドのマスターに報告するだけだ。", "I have to visit the master of the guild that I belong to report.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_GUILD_WARS3) != 0 ) {
		s = lang("ギルドウォーズ Lv40相当", "Guild quest Lv40")
		p = gdata(GDATA_FLAG_SUB_GUILD_WARS3)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("戦士ギルドのマスターから、他のギルドのマスターをどちらか片方倒すように頼まれた。", "The guild master told me to assassinate the master of either of the other two guilds.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("あとは戦士ギルドのマスターに報告するだけだ。", "I have to visit the master of the guild that I belong to report.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_GUILD_WARS2) != 0 ) {
		s = lang("ギルドウォーズ Lv40相当", "Guild quest Lv40")
		p = gdata(GDATA_FLAG_SUB_GUILD_WARS2)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("盗賊ギルドのマスターから、他のギルドのマスターをどちらか片方倒すように頼まれた。", "The guild master told me to assassinate the master of either of the other two guilds.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("あとは盗賊ギルドのマスターに報告するだけだ。", "I have to visit the master of the guild that I belong to report.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_DOGS_TAIL) != 0 ) {
		s = lang("犬の尻尾 Lv150相当", "Dog tail Lv150")
		p = gdata(GDATA_FLAG_SUB_DOGS_TAIL)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("エイレルのナプラスから、犬神の森にいるエストークの尻尾を持ってくるように頼まれた。犬神の森はサウスティリス南西にある。", "Naplus of Eirel asked me to bring the tail of Estork living in the Forest of DogGod which lies in South West of South Tyris")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 3 ) {
			s1 = lang("あとはエイレルのナプラスに報告するだけだ。", "I have to visit Naplus of Eirel to report.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_THE_LIFE_IN_THIS_WORLD) != 0 ) {
		s = lang("この世界に生きる者 Lv50相当", "Live in this world Lv50")
		p = gdata(GDATA_FLAG_SUB_THE_LIFE_IN_THIS_WORLD)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == gdata(GDATA_FLAG_SUB_THE_LIFE_IN_THIS_WORLD) * (gdata(GDATA_FLAG_SUB_THE_LIFE_IN_THIS_WORLD) < 20) + (gdata(GDATA_FLAG_SUB_THE_LIFE_IN_THIS_WORLD) == 0) ) {
			s1 = lang("魔女の住処でシズルに" + gdata(GDATA_FLAG_SUB_THE_LIFE_IN_THIS_WORLD) * 50 + "種類以上のカードが入ったデッキを見せよう。", "I have to show Ssil " + gdata(GDATA_FLAG_SUB_THE_LIFE_IN_THIS_WORLD) * 50 + " type card.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_THE_TRUE_APPEARANCE) != 0 ) {
		s = lang("ありのままの姿を Lv40相当", "Insect curse Lv40")
		p = gdata(GDATA_FLAG_SUB_THE_TRUE_APPEARANCE)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == gdata(GDATA_FLAG_SUB_THE_TRUE_APPEARANCE) * (gdata(GDATA_FLAG_SUB_THE_TRUE_APPEARANCE) < 5) + (gdata(GDATA_FLAG_SUB_THE_TRUE_APPEARANCE) == 0) ) {
			s1 = lang("神立図書館のマリアからアイテム集めを頼まれている。", "The guild master told me to assassinate the master of either of the other two guilds.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 5 ) {
			s1 = lang("神立図書館のアリスに薬をあげよう。", "The guild master told me to assassinate the master of either of the other two guilds.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 6 ) {
			s1 = lang("あとはマリアから報酬をもらうだけだが…これでよかったのだろうか。", "The guild master told me to assassinate the master of either of the other two guilds.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_THE_ABYSS_OF_MAGIC) != 0 ) {
		s = lang("魔術の深淵 Lv130相当", " Lv130")
		p = gdata(GDATA_FLAG_SUB_THE_ABYSS_OF_MAGIC)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("気が向いたら魔導船でネインに話しかけてみようか。", "The guild master told me to assassinate the master of either of the other two guilds.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("魔導船でネインからあるモンスターを連れてくるように頼まれた。魔法回路が刻まれた擬似生命体らしいが、名称不明だ。", "The guild master told me to assassinate the master of either of the other two guilds.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_THE_DISTANT_SEA_OF_STARS) != 0 ) {
		s = lang("遥かなる星の海から Lv140相当", "From the sea of stars Lv140")
		p = gdata(GDATA_FLAG_SUB_THE_DISTANT_SEA_OF_STARS)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("陽牢の塔にいるガージンドに依頼の詳細を聞こう。", "The guild master told me to assassinate the master of either of the other two guilds.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("陽牢の塔にいるガージンドから基地の宇宙生物の排除を頼まれている。基地は塔から南東にあるらしい。", "The guild master told me to assassinate the master of either of the other two guilds.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 3 ) {
			s1 = lang("宇宙生物の排除が完了した。陽牢の塔にいるガージンドに報告しよう。", "The guild master told me to assassinate the master of either of the other two guilds.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_URCAGUARY_THE_TENACIOUS_GEM) != 0 ) {
		s = lang("剛石のウリカグアル Lv150相当", "Mission from Urcaguary Lv150")
		p = gdata(GDATA_FLAG_SUB_URCAGUARY_THE_TENACIOUS_GEM)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("オルドランにいるウリカグアルから靴下30枚の調達と泥棒の成敗を頼まれている。泥棒の正体を突き止めるには靴下が必要だろう。", "The guild master told me to assassinate the master of either of the other two guilds.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == gdata(GDATA_FLAG_SUB_URCAGUARY_THE_TENACIOUS_GEM) * (gdata(GDATA_FLAG_SUB_URCAGUARY_THE_TENACIOUS_GEM) < 33) + (gdata(GDATA_FLAG_SUB_URCAGUARY_THE_TENACIOUS_GEM) == 0) + (gdata(GDATA_FLAG_SUB_URCAGUARY_THE_TENACIOUS_GEM) == 1) ) {
			s1 = lang("オルドランにいるウリカグアルから靴下30枚の調達を頼まれている。あと" + (32 - gdata(GDATA_FLAG_SUB_URCAGUARY_THE_TENACIOUS_GEM)) + "枚の靴下を届ける必要がある。", "Kyle of Melkawn asks for unicorn horns. I still need to bring him " + (10 - gdata(GDATA_FLAG_SUB_STRUGGLE_AGAINST_INSANITY)) + " of them.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( gdata(GDATA_FLAG_SUB_SOPHIA_THE_WISE) != 0 ) {
		p = 0
		if ( gdata(GDATA_FLAG_SUB_SOPHIA_THE_WISE) != 0 ) {
			s = lang("叡智のソピアー Lv150相当", "Mission from Sophia Lv150")
			p = gdata(GDATA_FLAG_SUB_SOPHIA_THE_WISE)
			if ( val == 1 ) {
				if ( p >= 1000 ) {
					noteadd lang("[達成]", "[Done]") + s
				}
			}
		}
		if ( gdata(GDATA_FLAG_SUB_SOPHIA_THE_WISE) \ 2 == 0 ) {
			if ( val == 0 ) {
				if ( p == gdata(GDATA_FLAG_SUB_SOPHIA_THE_WISE) ) {
					s1 = lang("神立図書館にいるソピアーに" + gdata(GDATA_FLAG_SUB_SOPHIA_THE_WISE_YEAR) + "年" + gdata(GDATA_FLAG_SUB_SOPHIA_THE_WISE_MONTH) + "月" + gdata(GDATA_FLAG_SUB_SOPHIA_THE_WISE_DAY) + "日の午後14時半から15時までの間に話しかけよう。", "The guild master told me to assassinate the master of either of the other two guilds.")
					talk_conv s1, 40 - en * 4
					buff += "(" + s + ")\n" + s1
					noteadd ""
				}
			}
		}
		if ( gdata(GDATA_FLAG_SUB_SOPHIA_THE_WISE) \ 2 != 0 ) {
			if ( val == 0 ) {
				if ( p == gdata(GDATA_FLAG_SUB_SOPHIA_THE_WISE) ) {
					s1 = lang("神立図書館にいるソピアーに手伝えることはないか尋ねよう。", "The guild master told me to assassinate the master of either of the other two guilds.")
					talk_conv s1, 40 - en * 4
					buff += "(" + s + ")\n" + s1
					noteadd ""
				}
			}
		}
	}
	if ( gdata(GDATA_FLAG_SUB_AMURDAD) != 0 ) {
		p = 0
		if ( gdata(GDATA_FLAG_SUB_AMURDAD) != 0 ) {
			s = lang("永遠のネヘルタード Lv150相当", "Mission from Amurdad Lv150")
			p = gdata(GDATA_FLAG_SUB_AMURDAD)
			if ( val == 1 ) {
				if ( p >= 1000 ) {
					noteadd lang("[達成]", "[Done]") + s
				}
			}
		}
		if ( gdata(GDATA_FLAG_SUB_AMURDAD) \ 10 == 1 ) {
			if ( val == 0 ) {
				if ( p == gdata(GDATA_FLAG_SUB_AMURDAD) ) {
					s1 = lang("闇檻にいるネヘルタードから依頼されている。", "I have been asked by Amurdad in Amur-Cage.")
					talk_conv s1, 40 - en * 4
					buff += "(" + s + ")\n" + s1
					noteadd ""
				}
			}
		}
		if ( gdata(GDATA_FLAG_SUB_AMURDAD) \ 10 == 2 ) {
			if ( val == 0 ) {
				if ( p == gdata(GDATA_FLAG_SUB_AMURDAD) ) {
					s1 = lang("闇檻にいるネヘルタードに依頼の達成を報告しよう。", "I will report the achievement to Amurdad in Amur-Cage.")
					talk_conv s1, 40 - en * 4
					buff += "(" + s + ")\n" + s1
					noteadd ""
				}
			}
		}
		if ( gdata(GDATA_FLAG_SUB_AMURDAD) >= 10 & gdata(GDATA_FLAG_SUB_AMURDAD) \ 10 == 0 ) {
			if ( val == 0 ) {
				if ( p == gdata(GDATA_FLAG_SUB_AMURDAD) ) {
					s1 = lang("ネヘルタードから依頼があれば連絡が入ることになっている。", "Amurdad will contact me if anything happens.")
					talk_conv s1, 40 - en * 4
					buff += "(" + s + ")\n" + s1
					noteadd ""
				}
			}
		}
	}
	if ( gdata(GDATA_FLAG_SUB_MISSION_FROM_GARZIEM) != 0 ) {
		p = 0
		if ( gdata(GDATA_FLAG_SUB_MISSION_FROM_GARZIEM) != 0 ) {
			s = lang("鉄騎のガルジエム Lv150相当", "Mission from Garziem Lv150")
			p = gdata(GDATA_FLAG_SUB_MISSION_FROM_GARZIEM)
			if ( val == 1 ) {
				if ( p >= 1000 ) {
					noteadd lang("[達成]", "[Done]") + s
				}
			}
		}
		if ( gdata(GDATA_FLAG_SUB_MISSION_FROM_GARZIEM) \ 10 == 0 ) {
			if ( val == 0 ) {
				if ( p == gdata(GDATA_FLAG_SUB_MISSION_FROM_GARZIEM) ) {
					s1 = lang("ガルジエムから何かあれば連絡が入ることになっている。", "Garziem will contact me if anything happens.")
					talk_conv s1, 40 - en * 4
					buff += "(" + s + ")\n" + s1
					noteadd ""
				}
			}
		}
		if ( gdata(GDATA_FLAG_SUB_MISSION_FROM_GARZIEM) \ 10 == 1 ) {
			if ( val == 0 ) {
				if ( p == gdata(GDATA_FLAG_SUB_MISSION_FROM_GARZIEM) ) {
					s1 = lang("神艦にいるガルジエムから作業機械の暴走を解決するよう要請された。", "I was asked to solve the runaway of workers from Garziem.")
					talk_conv s1, 40 - en * 4
					buff += "(" + s + ")\n" + s1
					noteadd ""
				}
			}
		}
		if ( gdata(GDATA_FLAG_SUB_MISSION_FROM_GARZIEM) \ 10 >= 2 & gdata(GDATA_FLAG_SUB_MISSION_FROM_GARZIEM) \ 10 <= 6 ) {
			if ( val == 0 ) {
				if ( p == gdata(GDATA_FLAG_SUB_MISSION_FROM_GARZIEM) ) {
					s1 = lang("神艦の作業区画に潜入して仕事をしつつ、作業機械の暴走を止める方法を探そう。", "I have to find a way to stop the runaway of workers while infiltrating the work area of dock and working.")
					talk_conv s1, 40 - en * 4
					buff += "(" + s + ")\n" + s1
					noteadd ""
				}
			}
		}
	}
	if ( gdata(GDATA_FLAG_SUB_KARAVIKA_OF_SONG_AND_DANCE) != 0 ) {
		p = 0
		if ( gdata(GDATA_FLAG_SUB_KARAVIKA_OF_SONG_AND_DANCE) != 0 ) {
			s = lang("歌踊のカラヴィカ Lv150相当", "Mission from Karavika Lv150")
			p = gdata(GDATA_FLAG_SUB_KARAVIKA_OF_SONG_AND_DANCE)
			if ( val == 1 ) {
				if ( p >= 1000 ) {
					noteadd lang("[達成]", "[Done]") + s
				}
			}
		}
		if ( gdata(GDATA_FLAG_SUB_KARAVIKA_OF_SONG_AND_DANCE) \ 3 == 0 ) {
			if ( val == 0 ) {
				if ( p == gdata(GDATA_FLAG_SUB_KARAVIKA_OF_SONG_AND_DANCE) ) {
					s1 = lang("なんとかコンサートを守り抜いた。オルドランのカラヴィカに報酬を貰おう。", "I could protect the concert.I will get reward from Karavika.")
					talk_conv s1, 40 - en * 4
					buff += "(" + s + ")\n" + s1
					noteadd ""
				}
			}
		}
		if ( gdata(GDATA_FLAG_SUB_KARAVIKA_OF_SONG_AND_DANCE) \ 3 != 0 ) {
			if ( val == 0 ) {
				if ( p == gdata(GDATA_FLAG_SUB_KARAVIKA_OF_SONG_AND_DANCE) ) {
					s1 = lang("オルドランのカラヴィカは、月末にコンサートを開催している。だが警備員が不足しがちのようだ。", "Karavika holds a concert at the end of the month. But security guards tend to be short.")
					talk_conv s1, 40 - en * 4
					buff += "(" + s + ")\n" + s1
					noteadd ""
				}
			}
		}
	}
	if ( gdata(GDATA_FLAG_SUB_ARASIEL_OF_THE_SANDSTORM) != 0 ) {
		p = 0
		if ( gdata(GDATA_FLAG_SUB_ARASIEL_OF_THE_SANDSTORM) != 0 ) {
			s = lang("砂嵐のラシエル Lv150相当", "Mission from Arasiel Lv150")
			p = gdata(GDATA_FLAG_SUB_ARASIEL_OF_THE_SANDSTORM)
			if ( val == 1 ) {
				if ( p >= 1000 ) {
					noteadd lang("[達成]", "[Done]") + s
				}
			}
		}
		if ( gdata(GDATA_FLAG_SUB_ARASIEL_OF_THE_SANDSTORM_CREATURE) != 0 ) {
			if ( val == 0 ) {
				if ( p == gdata(GDATA_FLAG_SUB_ARASIEL_OF_THE_SANDSTORM) ) {
					s1 = lang("陽牢の塔にいるラシエルが" + refchara(gdata(GDATA_FLAG_SUB_ARASIEL_OF_THE_SANDSTORM_CREATURE), DBSPEC_CHARA_NAME_ORG, 1) + "を欲しがっているようだ。", "I need to hand " + refchara(gdata(GDATA_FLAG_SUB_ARASIEL_OF_THE_SANDSTORM_CREATURE), DBSPEC_CHARA_NAME_ORG, 1) + " to Arasiel.")
					talk_conv s1, 40 - en * 4
					buff += "(" + s + ")\n" + s1
					noteadd ""
				}
			}
		}
		if ( gdata(GDATA_FLAG_SUB_ARASIEL_OF_THE_SANDSTORM_CREATURE) == 0 ) {
			if ( val == 0 ) {
				if ( p == gdata(GDATA_FLAG_SUB_ARASIEL_OF_THE_SANDSTORM) ) {
					s1 = lang("陽牢の塔にいるラシエルからの指令を待とう。", "I need to wait the mission from Arasiel.")
					talk_conv s1, 40 - en * 4
					buff += "(" + s + ")\n" + s1
					noteadd ""
				}
			}
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_BEYOND_THE_GENERATIONS) != 0 ) {
		s = lang("幾百もの世を越えて Lv20相当", "Beyond the generations Lv20")
		p = gdata(GDATA_FLAG_SUB_BEYOND_THE_GENERATIONS)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ルストール仙窟のイルマが武具作成の技法についての情報を知りたがっている。", "The guild master told me to assassinate the master of either of the other two guilds.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("武具作成の技法についてはサリムが知っているようだ。だが親友くらいに仲良くならないと教えてもらえないだろう。", "I have to visit the master of the guild that I belong to report.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 3 ) {
			s1 = lang("イルマと話し短剣を丘長のダインに見せよう。", "I have to visit the master of the guild that I belong to report.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 4 ) {
			s1 = lang("イルマと話し短剣を丘長のダインに見せよう。", "I have to visit the master of the guild that I belong to report.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 5 ) {
			s1 = lang("イルマとサリムに結果を報告しよう。", "I have to visit the master of the guild that I belong to report.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 6 ) {
			s1 = lang("イルマとサリムに結果を報告しよう。", "I have to visit the master of the guild that I belong to report.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 7 ) {
			s1 = lang("日を改めてまたルストール仙窟を訪れよう。", "I have to visit the master of the guild that I belong to report.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 8 ) {
			s1 = lang("ルストール仙窟真北の山のふもとにある廃屋でイルマ・サリムと合流しよう。", "I have to visit the master of the guild that I belong to report.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 9 ) {
			s1 = lang("ルストール仙窟真北の山のふもとにある廃屋でイルマ・サリムと合流しよう。", "I have to visit the master of the guild that I belong to report.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_WHEN_THE_FLAME_BURNS_OUT) != 0 ) {
		s = lang("炎、燃え尽きる時 Lv160相当", "Ancient fire dragon Lv160")
		p = gdata(GDATA_FLAG_SUB_WHEN_THE_FLAME_BURNS_OUT)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ウールム・レゾンのスピファルにドラゴン討伐を頼まれた。対象のドラゴンはウールム・レゾン南の火山に住んでいるらしい。", "The dragon hunter Spipha wants me to hunt the ancient fire dragon. The nest is located south of Ulm-Leson.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("討伐対象と思われるドラゴンを無事討伐した。ウールム・レゾンのスピファルに報告しよう。", "I've killed the ancient fire dragon. I should head back to Ulm-Leson and speak to the dragon hunter Spipha.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_LEOLD_JOB_STAGE) != 0 ) {
		s = lang("更なる高みを Lv" + gdata(GDATA_FLAG_LEOLD_JOB_TIER) + "相当", "Reach new heights Lv" + gdata(GDATA_FLAG_LEOLD_JOB_TIER) + " ")
		p = gdata(GDATA_FLAG_LEOLD_JOB_STAGE)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("目標はレベル" + gdata(GDATA_FLAG_LEOLD_JOB_TIER) + "以上の敵モンスターの撃破だ。", "The ordeal is to defeat an enemy monster above the level " + gdata(GDATA_FLAG_LEOLD_JOB_TIER) + ".")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("目標レベル以上の敵モンスターを倒した。レオルドに報告しよう。", "I defeated enemy monsters above the target level. Let's report to Leold.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( gdata(GDATA_FLAG_SUB_RESEARCH_DESTRUCTION_CRISIS) != 0 ) {
		s = lang("調査隊壊滅の危機 Lv180相当", "Researcher crisis Lv180")
		p = gdata(GDATA_FLAG_SUB_RESEARCH_DESTRUCTION_CRISIS)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[達成]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ザイールのアレンに、ラスキリスから仲間を連れ戻してくるよう依頼された。", "Allen of Zaile asked me to take back researcher from Raskilis.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	return

*quest_item
	noteadd lang("[古びたお守り]", "[An old talisman]")
	if ( gdata(GDATA_FLAG_MAIN) >= 830 ) {
		noteadd lang("[エルシアの首飾り]", "Elsian Necklace")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 830 ) {
		noteadd lang("[クイーン・セドナの乗船券]", "Boarding ticket of Queen Sedona")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 30 & gdata(GDATA_FLAG_MAIN) < 50 ) {
		noteadd lang("[ジャビ王への書簡]", "A letter to the king")
	}
	if ( gdata(GDATA_FLAG_MAIN_FOOL) != 0 ) {
		noteadd lang("[愚者の魔石]", "Fool's magic stone")
	}
	if ( gdata(GDATA_FLAG_MAIN_KING) != 0 ) {
		noteadd lang("[覇者の魔石]", "King's magic stone")
	}
	if ( gdata(GDATA_FLAG_MAIN_SAGE) != 0 ) {
		noteadd lang("[賢者の魔石]", "Sage's magic stone")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 180 & gdata(GDATA_FLAG_MAIN) < 370 ) {
		noteadd lang("[常闇の眼]", "Origin of Vice")
	}
	if ( gdata(GDATA_FLAG_MAIN_DATA_CHIP) == 1 ) {
		noteadd lang("[データチップ]", "Data chip")
	}
	if ( gdata(GDATA_FLAG_MAIN_CHAOS_WINGS) == 1 ) {
		noteadd lang("[混沌の翼]", "Chaos wings")
	}
	if ( gdata(GDATA_FLAG_MAIN_ANKH) == 1 ) {
		noteadd lang("[太陽のアンク]", "Ankh of sun")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 250 ) {
		noteadd lang("[カードキー]", "Card key")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 266 ) {
		noteadd lang("[データレジスタ]", "Data register")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 300 & gdata(GDATA_FLAG_MAIN) < 320 ) {
		noteadd lang("[回収用カプセル]", "Capsule for collect")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 320 & gdata(GDATA_FLAG_MAIN) < 350 ) {
		noteadd lang("[エーテルブラスター]", "Ether blaster")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 455 ) {
		noteadd lang("[Ｄジャマー]", "Distortion jammer")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 362 ) {
		noteadd lang("[紹介状]", "Letter of introduction")
	}
	if ( gdata(GDATA_FLAG_SUB_MONOCHROME_DELIVERY_SERVICE) != 0 ) {
		noteadd lang("[手紙]", "letter")
	}
	if ( gdata(GDATA_FLAG_SUB_BEYOND_THE_GENERATIONS) == 4 ) {
		noteadd lang("[イルマの短剣]", "Irma's Dagger")
	}
	if ( gdata(GDATA_FLAG_SUB_DOGS_TAIL) >= 3 & gdata(GDATA_FLAG_SUB_DOGS_TAIL) < 1000 ) {
		noteadd lang("[エストークの尻尾]", "Tail of Estork")
	}
	if ( gdata(GDATA_FLAG_SUB_THE_TRUE_APPEARANCE) == 5 ) {
		noteadd lang("[特殊変異治療薬]", "EX mutation treatment")
	}
	if ( gdata(GDATA_FLAG_SUB_MANYTIA_THE_ADVENTURE_MERCHANT) > 0 ) {
		noteadd lang("[階段の鍵]", "Stairs key")
	}
	if ( gdata(GDATA_FLAG_MAIN_CHAOS_CRADLE_25) >= 1000 ) {
		noteadd lang("[錆びついた鈴]", "Rusted bell")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 695 & gdata(GDATA_FLAG_MAIN) < 845 ) {
		noteadd lang("[来光の牙]", "Origin of Light")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 780 ) {
		noteadd lang("[記憶の灯]", "Light of memory")
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 820 ) {
		noteadd lang("[アカシックネットワーク]", "Akashic Network")
	}
	return

*talk_quest_load
	notesel buffboard
	sdim buff2
	p = instr(buffboard, 0, s + "," + lang("JP", "EN"))
	buff2 = strmid(buffboard, p, instr(buffboard, p, "%END"))
	notesel buff2
	if ( noteinfo(0) <= 1 ) {
		buff2 = "no txt"
		return
	}
	p = rnd(noteinfo(0) - 1) + 1
	noteget buff2, p
	p = instr(buff2, 0, ":")
	s(3) = strmid(buff2, 0, p)
	if ( val == 2 ) {
		notesel buff
		return
	}
	buff2 = strmid(buff2, p + 1, strlen(buff2) - p - 1)
	if ( val != 2 ) {
		buff = buff2
	}
	return

*talk_quest
	randomize qdata(QDATA_CLIENT, rq) + 1
	if ( qdata(QDATA_MAP, rq) == gdata(GDATA_AREA) ) {
		if ( gdata(GDATA_LEVEL) == 1 ) {
			qname(rq) = cdatan(CDATAN_NAME, qdata(QDATA_CLIENT, rq))
		}
	}
	if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_DELIVER ) {
		if ( qdata(QDATA_MAP, qdata((10 /*!!!@[QDATA_DEST_CLIENT @@@ QDATA_ENCOUNTER]@!!! */), rq)) == gdata(GDATA_AREA) ) {
			if ( gdata(GDATA_LEVEL) == 1 ) {
				qname(qdata((10 /*!!!@[QDATA_DEST_CLIENT @@@ QDATA_ENCOUNTER]@!!! */), rq)) = cdatan(CDATAN_NAME, qdata(QDATA_CLIENT, qdata((10 /*!!!@[QDATA_DEST_CLIENT @@@ QDATA_ENCOUNTER]@!!! */), rq)))
			}
		}
	}
	s(6) = ""
	s(5) = lang("金貨" + qdata(QDATA_REWARD, rq) + "枚", "" + qdata(QDATA_REWARD, rq) + " gold pieces")
	if ( qdata(QDATA_REWARD_ITEM, rq) != (0 /*!!!@[FILTER_NOTHING @@@ FILTER_NOTHING @@@ QUEST_REWARD_NONE]@!!! */) ) {
		if ( qdata(QDATA_REWARD_ITEM, rq) < FILTER_WEAPON ) {
			s(5) += lang("と", " and ") + _reward(qdata(QDATA_REWARD_ITEM, rq))
		}
		else {
			s(5) += lang("と", " and ") + fltname(qdata(QDATA_REWARD_ITEM, rq))
		}
	}
	if ( qdata(QDATA_DEADLINE, rq) == (-1) ) {
		nquestdate = lang("即時", "-")
	}
	else {
		nquestdate = "" + qdata(QDATA_DEADLINE, rq) + lang("日", "d")
	}
	if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_HARVEST ) {
		s = "%HARVEST"
		gosub *talk_quest_load
		s(10) = "" + cnvweight(qdata(QDATA_PARAM1, rq))
		s(11) = mapname(qdata(QDATA_MAP, rq))
		s(4) = lang("" + s(10) + "の作物の納入", "Gather harvests weight " + s(10) + ".")
		if ( gdata(GDATA_QUEST_REF) == rq ) {
			s(4) += lang("(現在", " (Now ") + cnvweight(qdata(QDATA_PARAM2, rq)) + ")"
		}
		s(6) = s(4)
	}
	if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_MINEFIELD ) {
		s = "%TRAP," + qdata(QDATA_VAR, rq)
		gosub *talk_quest_load
		s(10) = "" + qdata(QDATA_PARAM1, rq) + lang("個", " places")
		s(11) = mapname(qdata(QDATA_MAP, rq))
		s(4) = lang("" + s(10) + "の罠の撤去", "Remove trap at " + s(10) + ".")
		if ( gdata(GDATA_QUEST_REF) == rq ) {
			s(4) += lang("(現在", " (Now ") + qdata(QDATA_PARAM2, rq) + ")"
		}
		s(6) = s(4)
	}
	if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_PARTY ) {
		s = "%PARTY"
		gosub *talk_quest_load
		s(10) = "" + qdata(QDATA_PARAM1, rq) + lang("ポイント", " points")
		s(11) = mapname(qdata(QDATA_MAP, rq))
		s(4) = lang("" + s(10) + "の獲得", "Gather " + s(10) + ".")
		if ( gdata(GDATA_QUEST_REF) == rq ) {
			s(4) += lang("(現在", " (Now ") + qdata(QDATA_PARAM2, rq) + ")"
		}
		s(6) = s(4)
	}
	if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_ESCORT ) {
		s = "%ESCORT," + qdata(QDATA_VAR, rq)
		gosub *talk_quest_load
		s(11) = "" + mapname(qdata(QDATA_PARAM1, rq))
		s(4) = lang("クライアントを" + s(11), "Escort the client to " + s(11) + ".")
		s(6) = s(4) + lang("まで護衛", "")
	}
	if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_HUNT ) {
		s = "%HUNT"
		gosub *talk_quest_load
		s(4) = lang("全ての敵の殲滅", "Eliminate monsters.")
		s(6) = s(4)
	}
	if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_SUPPLY ) {
		s = "%SUPPLY"
		gosub *talk_quest_load
		s(4) = cnvarticle(cnvitemname(qdata(QDATA_DEST_ITEM, rq)))
		s(6) = lang(s(4) + "の納入", "Give " + s(4) + " to the client.")
	}
	if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_DELIVER ) {
		s = "%DELIVER," + qdata(QDATA_PARAM1, rq)
		gosub *talk_quest_load
		s(10) = cnvarticle(cnvitemname(qdata(QDATA_DEST_ITEM, rq)))
		s(11) = "" + mapname(qdata(QDATA_MAP, qdata((10 /*!!!@[QDATA_DEST_CLIENT @@@ QDATA_ENCOUNTER]@!!! */), rq)))
		s(12) = "" + qname(qdata((10 /*!!!@[QDATA_DEST_CLIENT @@@ QDATA_ENCOUNTER]@!!! */), rq))
		if ( iorgweight(qdata(QDATA_DEST_ITEM, rq)) > 50000 ) {
			s(10) += lang("(凄く重い)", "(Heavy!)")
		}
		s(4) = lang("" + s(11) + "に住む" + s(12) + "に" + s(10), "Deliver " + s(10) + " to " + s(12) + " who lives in " + s(11) + ".")
		s(6) = s(4) + lang("を配達", "")
	}
	if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_COOK ) {
		s = "%COOK," + qdata(QDATA_PARAM1, rq)
		if ( rnd(6) == 0 ) {
			s = "%COOK,GENERAL"
		}
		gosub *talk_quest_load
		s(4) = cnvarticle(foodname(qdata(QDATA_PARAM1, rq), "", qdata(QDATA_PARAM2, rq)))
		s(6) = lang(s(4) + "の納入", "Give " + s(4) + " to the client.")
	}
	if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_CONQUER ) {
		s = "%CONQUER"
		gosub *talk_quest_load
		s(4) = refchara(qdata(QDATA_PARAM1, rq), DBSPEC_CHARA_NAME_ORG, 1)
		if ( qdata(QDATA_PARAM1, rq) == 343 ) {
			s(4) = lang("正体不明の存在", "unknown monster")
		}
		s(10) = "" + qdata(QDATA_LEVEL, rq) * 10 / 6
		s(6) = lang(s(4) + "の討伐", "Slay " + s(4) + ".")
	}
	if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_HUNTEX ) {
		s = "%HUNTEX"
		gosub *talk_quest_load
		s(4) = refchara(qdata(QDATA_PARAM1, rq), DBSPEC_CHARA_NAME_ORG, 1)
		s(10) = "" + qdata(QDATA_LEVEL, rq) * 3 / 2
		s(6) = lang("全ての敵の殲滅", "Eliminate monsters")
	}
	if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_COLLECT ) {
		s = "%COLLECT"
		gosub *talk_quest_load
		s(10) = cnvarticle(cnvitemname(qdata(QDATA_DEST_ITEM, rq)))
		s(11) = "" + mapname(qdata(QDATA_MAP, rq))
		if ( gdata(GDATA_AREA) == qdata(QDATA_MAP, rq) & gdata(GDATA_LEVEL) == 1 ) {
			s(12) = "" + cdatan(CDATAN_NAME, qdata((10 /*!!!@[QDATA_DEST_CLIENT @@@ QDATA_ENCOUNTER]@!!! */), rq))
		}
		else {
			s(12) = lang(s(11) + "に住む人物", "the target in " + s(11))
		}
		if ( iorgweight(qdata(QDATA_DEST_ITEM, rq)) > 50000 ) {
			s(10) += lang("(凄く重い)", "(Heavy!)")
		}
		s(4) = lang("依頼人のために" + s(12) + "から" + s(10), "Acquire " + s(10) + " from " + s(12) + " for the client.")
		s(6) = s(4) + lang("を調達", "")
	}
	gosub *talktxt_conv
	if ( val == 1 ) {
		buff = lang(_kimi(3) + "に頼みたいことがある" + _nda(), "") + buff
		if ( qdata(QDATA_DEADLINE, rq) != (-1) ) {
			buff += lang("期限は残り" + qdata(QDATA_DEADLINE, rq) + "日" + _da(), " You have " + qdata(QDATA_DEADLINE, rq) + " days to perform the task. ")
		}
		buff += lang("依頼を受けてくれるの" + _kana(1), "How about it?")
	}
	if ( val == 2 ) {
		if ( qdata(QDATA_STATE, rq) == QUEST_STATE_SUCCESS ) {
			buff += "@QC[" + lang("依頼 完了", "Complete") + "]" + s(3) + "\n"
		}
		else {
			buff += "@QL[" + lang("依頼", "Job") + "] " + s(3) + "\n"
		}
		buff += lang("依頼: ", "Client  : ") + qname(rq) + "\n"
		buff += lang("場所: ", "Location: ") + mapname(qdata(QDATA_MAP, rq)) + "\n"
		buff += lang("期限: ", "Deadline: ")
		if ( qdata(QDATA_DEADLINE, rq) != (-1) ) {
			buff += lang("残り", "")
		}
		buff += nquestdate + "\n"
		s(5) = lang("報酬: ", "Reward  : ") + s(5)
		talk_conv s(5), 40 - en * 10
		buff += s(5) + "\n"
		if ( qdata(QDATA_STATE, rq) == QUEST_STATE_SUCCESS ) {
			s(4) = lang("内容: あとは報告するだけだ。", "Detail  : Report to the client.")
		}
		else {
			s(4) = lang("内容: ", "Detail  : ") + s(6)
		}
		talk_conv s(4), 40 - en * 10
		buff += s(4) + "\n"
	}
	if ( val == 3 ) {
		buff = lang("依頼を無事終わらせたよう" + _dana() + _thanks(2), "You've done well. Thanks. Here's your reward.")
		if ( int(s(5)) != 0 ) {
			txt lang("報酬の" + s(5) + "を受けとって" + _kure(), "")
		}
		if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_HARVEST ) {
			if ( qdata(QDATA_PARAM1, rq) * 125 / 100 < qdata(QDATA_PARAM2, rq) ) {
				buff += lang("予想以上にいい働きだったから、幾らか色を付けておいた" + _yo(), "I've added some extra coins since you worked really hard.")
			}
		}
		if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_MINEFIELD ) {
			if ( qdata(QDATA_PARAM1, rq) * 150 / 100 < qdata(QDATA_PARAM2, rq) ) {
				buff += lang("予想以上にいい働きだったから、おまけをあげる" + _yo(), "I've added bronze coin since you worked really hard.")
			}
		}
		if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_PARTY ) {
			if ( qdata(QDATA_PARAM1, rq) * 150 / 100 < qdata(QDATA_PARAM2, rq) ) {
				buff += lang("予想以上の盛り上がりだったから、おまけをあげる" + _yo(), "The party was terrific! I'll give you these tickets as an extra bonus.")
			}
		}
	}
	randomize
	return

*talktxt_conv
	repeat 20
		await
		p = instr(buff, 0, "{"), instr(buff, p, "}"), strlen(buff)
		if ( p == (-1) ) {
			break
		}
		s = strmid(buff, p + 1, p(1) - 1), strmid(buff, 0, p), strmid(buff, p + p(1) + 1, p(2) - p(1) - p)
		repeat 1
			if ( s == "client" ) {
				s = s(12)
				break
			}
			if ( s == "map" ) {
				s = s(11)
				break
			}
			if ( s == "ref" ) {
				s = s(10)
				break
			}
			if ( s == "you" ) {
				s = _kimi(3)
				break
			}
			if ( s == "me" ) {
				s = _ore(3)
				break
			}
			if ( s == "reward" ) {
				s = s(5)
				break
			}
			if ( s == "objective" ) {
				s = s(4)
				break
			}
			if ( s == "deadline" ) {
				s = nquestdate
				break
			}
			if ( s == "player" ) {
				s = cdatan(CDATAN_NAME, CHARA_PLAYER)
				break
			}
			if ( s == "aka" ) {
				s = cdatan(CDATAN_AKA, CHARA_PLAYER)
				break
			}
			if ( s == "npc" ) {
				s = cdatan(CDATAN_NAME, tc)
				break
			}
			if ( s == "ある" ) {
				s = _aru(3)
				break
			}
			if ( s == "う" ) {
				s = _u(3)
				break
			}
			if ( s == "か" ) {
				s = _ka(3)
				break
			}
			if ( s == "が" ) {
				s = _ga(3)
				break
			}
			if ( s == "かな" ) {
				s = _kana(3)
				break
			}
			if ( s == "だ" ) {
				s = _da(3)
				break
			}
			if ( s == "よ" ) {
				s = _yo(3)
				break
			}
			if ( s == "た" ) {
				s = _ta(3)
				break
			}
			if ( s == "だな" ) {
				s = _dana(3)
				break
			}
			if ( s == "だろ" ) {
				s = _daro(3)
				break
			}
			if ( s == "たのむ" ) {
				s = _tanomu(3)
				break
			}
			if ( s == "る" ) {
				s = _ru(3)
				break
			}
			if ( s == "のだ" ) {
				s = _nda(3)
				break
			}
			if ( s == "な" ) {
				s = _na(3)
				break
			}
			if ( s == "くれ" ) {
				s = _kure(3)
				break
			}
			if ( s == "見るな" ) {
				s = _miruna(3)
				break
			}
			if ( s == "onii" ) {
				if ( jp ) {
					if ( cdata(CDATA_SEX, CHARA_PLAYER) == 0 ) {
						s = "お兄"
					}
					if ( cdata(CDATA_SEX, CHARA_PLAYER) == 1 ) {
						s = "お姉"
					}
					break
				}
			}
			if ( s == "syujin" ) {
				if ( jp ) {
					if ( cdata(CDATA_SEX, CHARA_PLAYER) == 0 ) {
						s = "ご主人様"
					}
					if ( cdata(CDATA_SEX, CHARA_PLAYER) == 1 ) {
						s = "お嬢様"
					}
					break
				}
			}
			if ( s == "sex" ) {
				if ( jp ) {
					if ( cdata(CDATA_SEX, CHARA_PLAYER) == 0 ) {
						s = "男"
					}
					if ( cdata(CDATA_SEX, CHARA_PLAYER) == 1 ) {
						s = "女"
					}
					break
				}
				else {
					if ( cdata(CDATA_SEX, CHARA_PLAYER) == 0 ) {
						s = "boy"
					}
					if ( cdata(CDATA_SEX, CHARA_PLAYER) == 1 ) {
						s = "girl"
					}
					break
				}
			}
			s = "Unknown Code"
		loop
		buff = s(1) + s + s(2)
	loop
	return
	goto *label_0432

#deffunc addnews2 str addnews2_arg1, int addnews2_arg2
	locvar_addnews2_n = addnews2_arg1
	if ( addnews2_arg2 ) {
		txtef COLOR_FRESH
		txt "[News] " + locvar_addnews2_n
	}
	talk_conv locvar_addnews2_n, 38 - en * 5
	newsbuff += locvar_addnews2_n + "\n"
	return

#deffunc addnewstopic str addnewstopic_arg1, str addnewstopic_arg2
	addnews2 addnewstopic_arg1 + " " + gdata(GDATA_YEAR) + "/" + gdata(GDATA_MONTH) + "/" + gdata(GDATA_DAY) + " h" + gdata(GDATA_HOUR) + "" + " " + addnewstopic_arg2
	return

#deffunc addnews int addnews_arg1, int addnews_arg2
	if ( addnews_arg1 == 0 ) {
		addnews2 valn
		newsbuff += "\n"
		return
	}
	if ( addnews_arg1 == 1 ) {
		addnewstopic "@01", lang("アイテム発見", "Discovery")
		addnews2 lang(cdatan(CDATAN_AKA, addnews_arg2) + "は" + mapname(cdata(CDATA_AREA, addnews_arg2)) + "にて" + valn + "を入手した。", cdatan(CDATAN_AKA, addnews_arg2) + " has discovered " + valn + " in " + mapname(cdata(CDATA_AREA, addnews_arg2)) + "."), 1
	}
	if ( addnews_arg1 == 2 ) {
		addnewstopic "@02", lang("新たなる力", "Growth")
		addnews2 lang(cdatan(CDATAN_AKA, addnews_arg2) + "は経験をつみ、レベル" + cdata(CDATA_LEVEL, addnews_arg2) + "になった。", cdatan(CDATAN_AKA, addnews_arg2) + " has gained experience and achieved level " + cdata(CDATA_LEVEL, addnews_arg2) + "."), 1
	}
	if ( addnews_arg1 == 3 ) {
		addnewstopic "@02", lang("怪我からの復帰", "Recovery from injury")
		addnews2 lang(cdatan(CDATAN_AKA, addnews_arg2) + "は怪我から回復した。", cdatan(CDATAN_AKA, addnews_arg2) + " has fully recovered from injury."), 1
	}
	if ( addnews_arg1 == 4 ) {
		addnewstopic "@03", lang("クエストの達成", "Accomplishment")
		addnews2 lang(cdatan(CDATAN_AKA, addnews_arg2) + "はクエストを達成し、" + val + "の名声を手にした。", cdatan(CDATAN_AKA, addnews_arg2) + " has finished a quest and gained " + val + " fame."), 1
	}
	if ( addnews_arg1 == 5 ) {
		addnewstopic "@04", lang("引退", "Retirement")
		addnews2 lang(cdatan(CDATAN_AKA, addnews_arg2) + "は自分の力の限界を悟り引退した。", cdatan(CDATAN_AKA, addnews_arg2) + " realized the limitations and retired."), 1
	}
	newsbuff += "\n"
	return

*label_0432
	goto *system_init

#deffunc txtgod int txtgod_godid, int txtgod_flavor
	if ( txtgod_godid == GOD_EYTH ) {
		if ( txtgod_flavor != GOD_TEXT_WIP ) {
			return
		}
	}
	txtef COLOR_YELLOW
	procid = (procid + 1) \ 4
	proclist(procid) = "god text" + " ct:" + ct
	if ( txtgod_flavor == GOD_TEXT_RANDOM ) {
		if ( txtgod_godid == GOD_MANI ) {
			txt lang("「お前も体を機械化したらどうだ？」", cnvtalk("You should mechanize your body.")), lang("「あまり昔のことで弄らないでくれないか」", cnvtalk("Always behave true to my name.")), lang("「焦るな。すぐに機械が全てを支配する時代が来る」", cnvtalk("No need to hurry. The day machines dominate the world is much closer than you think."))
		}
		if ( txtgod_godid == GOD_LULWY ) {
			txt lang("「みじめなブタども」", cnvtalk("Pathetic pigs.")), lang("「マニ？その名を再び口にしたらミンチよ、子猫ちゃん」", cnvtalk("Mani? Say that name again and I'll mince you, kitty.")), lang("「前の下僕は、八つ裂きにしてシルフ達の餌にしたわ。髪型がちょっと気に食わなかったから。アハハ！」", cnvtalk("I've teared the former servant limb from limb to feed the sylphs. I just didn't like his hair style. Ahaha!")), lang("「私の子供達は風の声、何事にも縛られてはいけない。オマエもよ」", cnvtalk("My children are the voices of the wind, never tied to anything."))
		}
		if ( txtgod_godid == GOD_ITZPALT ) {
			if ( rnd(3) ) {
				txt lang("「汝油断することなかれ」", cnvtalk("Idleness is the devil's workshop.")), lang("「我々の抱える痛みを、定命の者が理解することはないであろう」", cnvtalk("You mortals will never understand the pain we hold.")), lang("「我が名はイツパロトル。元素の起源にて、最古の炎を従えし王、全ての神の主なり」", cnvtalk("My name is Itzpalt. I am the origin of elements, the king that bears the earliest flame and the master of all the Gods."))
			}
			else {
				txt lang("「神々の戦いに終わりはない。来るべき時は、汝も我が軍門の元で働いてもらうであろう」", cnvtalk("God's war never end. In times to come, you shall be a warrior of my faction."))
			}
		}
		if ( txtgod_godid == GOD_YACATECT ) {
			txt lang("「もうかりまっかー？」", cnvtalk("You making money?")), lang("「はんじょー♪はんじょー♪しょーばいはんじょー♪」", cnvtalk("Business~ Money~ Wealth~ ...")), lang("「商売は経験とヒラメキと情熱や！」", cnvtalk("Business is about experience, insight, and passion!"))
		}
		if ( txtgod_godid == GOD_EHEKATL ) {
			txt lang("「たらばがに！」", cnvtalk("Coconut crab!"))
		}
		if ( txtgod_godid == GOD_OPATOS ) {
			txt lang("「フハハハハ」", cnvtalk("Muwahaha."))
		}
		if ( txtgod_godid == GOD_JURE ) {
			txt lang("「な、なによバカ！」", cnvtalk("W-What? Silly!")), lang("「私はこの仕事に向いているのかなあ」", cnvtalk("Am I really suitable for this job?"))
		}
		if ( txtgod_godid == GOD_KUMIROMI ) {
			txt lang("「木々のさえずり…森の命が奏でる歌…耳をすませば…」", cnvtalk("Twitter of trees...song weaved by forests...if you strain your ears....")), lang("「争いごとは…醜い」", cnvtalk("This conflict between Gods...ugly.")), lang("「僕のエヘカトル…今はもう…かつての面影さえない」", cnvtalk("My Ehekatl...you are not what you used to be...")), lang("「僕は与えよう…君たちが奪う以上のものを」", cnvtalk("I will give...more than you spoil..."))
		}
	}
	if ( txtgod_flavor == GOD_TEXT_WIP ) {
		if ( txtgod_godid == GOD_EYTH ) {
			txt lang("「神は言っている。まだそちらへ行く運命ではないと（開発中）」", cnvtalk("In development."))
		}
		if ( txtgod_godid == GOD_MANI ) {
			txt lang("「やめておけ、この先はまだ作成されていない」", cnvtalk("In development."))
		}
		if ( txtgod_godid == GOD_LULWY ) {
			txt lang("「アハハ！残念だったわねぇ、この先は開発中なのよ」", cnvtalk("In development."))
		}
		if ( txtgod_godid == GOD_ITZPALT ) {
			txt lang("「汝に我が助言を授けよう。ここより先は未だ創造されておらぬ」", cnvtalk("In development."))
		}
		if ( txtgod_godid == GOD_EHEKATL ) {
			txt lang("「まだ開発中らしいよ！よ！」", cnvtalk("In development."))
		}
		if ( txtgod_godid == GOD_OPATOS ) {
			txt lang("「フウッハハハハー！フハハッハアアアアアー！！開発中」", cnvtalk("In development."))
		}
		if ( txtgod_godid == GOD_JURE ) {
			txt lang("「ちょ…バカっ！ま、待ちなさいよ…そっちはまだ開発中なのよ！」", cnvtalk("In development."))
		}
		if ( txtgod_godid == GOD_YACATECT ) {
			txt lang("「まだあかんよ〜。今は開発中なんやて！」", cnvtalk("In development."))
		}
		if ( txtgod_godid == GOD_KUMIROMI ) {
			txt lang("「まだ開発中…。駄目…いけない…」", cnvtalk("In development."))
		}
		snd SOUNDLIST_FAIL1
	}
	if ( txtgod_flavor == GOD_TEXT_KILL ) {
		if ( txtgod_godid == GOD_MANI ) {
			txt lang("「いいぞ」", cnvtalk("Nice kill.")), lang("「分解してみたくならないか？」", cnvtalk("Don't you want to decompose it?")), lang("「その魂なら質の良い機械が組めそうだ」", cnvtalk("Ah, this soul could be a good component for a new machine."))
		}
		if ( txtgod_godid == GOD_LULWY ) {
			txt lang("「不潔ね。血を拭いなさいよ」", cnvtalk("How dirty. Wipe the blood off your hands.")), lang("「アハハ！ミンチミンチィ！」", cnvtalk("Aha! Mince! Mince!.")), lang("「まあ、いけない子猫ちゃん」", cnvtalk("Bad kitty."))
		}
		if ( txtgod_godid == GOD_ITZPALT ) {
			txt lang("「なかなかのものだ」", cnvtalk("Impressive.")), lang("「そして魂は元素へと還る」", cnvtalk("And so the soul returns to the element.")), lang("「高らかに我が名を唱えよ。屍に炎と安息を」", cnvtalk("Chant my name proudly. Flame and eternal rest for the dead."))
		}
		if ( txtgod_godid == GOD_EHEKATL ) {
			txt lang("「もっと！もっと！」", cnvtalk("More! More!")), lang("「死んじゃったよ！たよ！」", cnvtalk("It's dead! Dead!")), lang("「うっみゅーうみゅうみゅ」", cnvtalk("Meoow mew mew."))
		}
		if ( txtgod_godid == GOD_OPATOS ) {
			txt lang("「フハハハ！」", cnvtalk("Mwahaha!")), lang("「逝け！逝け！フハハハッ！」", cnvtalk("Die! Die! Mwahahaha!")), lang("「フハーン！」", cnvtalk("Muhan!"))
		}
		if ( txtgod_godid == GOD_JURE ) {
			txt lang("「や、やるじゃない」", cnvtalk("N-Not bad, for you")), lang("「や、やめてよ。気持ち悪い」", cnvtalk("S-Stop it. Disgusting...")), lang("「こっち来ないで！」", cnvtalk("Don't look at me!"))
		}
		if ( txtgod_godid == GOD_YACATECT ) {
			txt lang("「ああ〜もったいないわぁ」", cnvtalk("Aah, what a waste...")), lang("「ようやった！お姉ちゃん感激やで」", cnvtalk("You did it! I'm inspired by you~!")), lang("「じぶん、なかなかやるなぁ」", cnvtalk("We're pretty good..."))
		}
		if ( txtgod_godid == GOD_KUMIROMI ) {
			txt lang("「汚れたね」", cnvtalk("You got dirty.")), lang("「ほどほどに」", cnvtalk("Don't kill too much.")), lang("「…これが…君の望んでいた結果？」", cnvtalk("...are you satisfied now?"))
		}
	}
	if ( txtgod_flavor == GOD_TEXT_SLEEP ) {
		if ( txtgod_godid == GOD_MANI ) {
			txt lang("「短い命の多くを無駄な眠りに費やすとは、生身の体とは不自由なものだ。だが今はそう、休むがいい。また私に仕えるために」", cnvtalk("Flesh and blood, how pathetic to waste much of your limited life sleeping. But rest well for now, for you will need to serve me again."))
		}
		if ( txtgod_godid == GOD_LULWY ) {
			txt lang("「いいわ、少しの間だけ首枷を外してあげる。存分に休息を楽しみなさい」", cnvtalk("Fine, I'll unshackle you for a little while. Enjoy your sleep. But remember kitty, if you cheat on me in your dream, you'll never see a daylight again."))
		}
		if ( txtgod_godid == GOD_ITZPALT ) {
			txt lang("「旅の疲れを癒すがよい。我が消えることなき紅蓮の炎が、夜のとばりに紛れる邪なる者から汝を守るであろう」", cnvtalk("Relieve your fatigue. May the eternal flame protects you from filthy beings that crawl in the shroud of night."))
		}
		if ( txtgod_godid == GOD_EHEKATL ) {
			txt lang("「寝るの？本当に寝るの？おやつみ！」", cnvtalk("Are you going to sleep? Really sleepy? Good night!"))
		}
		if ( txtgod_godid == GOD_OPATOS ) {
			txt lang("「フハハハハ。付いて行くぞぉ、夢の中までも」", cnvtalk("Muwahaha! I'll be following you, to your dream."))
		}
		if ( txtgod_godid == GOD_JURE ) {
			txt lang("「お、おやすみのキスなんて…絶対にやだからね！」", cnvtalk("I-I'll never give you a good night kiss...ever!"))
		}
		if ( txtgod_godid == GOD_YACATECT ) {
			txt lang("「100gpで子守唄を歌ってやろか…って、なんやもう寝てしもうたんかい！」", cnvtalk("I'll sing you a lullaby for 100gp...hey, what? You're already asleep?!"))
		}
		if ( txtgod_godid == GOD_KUMIROMI ) {
			txt lang("「おやすみ…明日…また朗らかな芽を吹いておくれ」", cnvtalk("Good night...May a bright sprout brought forth tomorrow... "))
		}
	}
	if ( txtgod_flavor == GOD_TEXT_WELCOME ) {
		if ( txtgod_godid == GOD_MANI ) {
			txt lang("「戻ってきたか。案外ホネのある奴だな」", cnvtalk("Ah, you've returned. You're tougher than I thought."))
		}
		if ( txtgod_godid == GOD_LULWY ) {
			txt lang("「どこホッツキ歩いてたのよ。もっと調教が必要ね」", cnvtalk("Where were you until now? You need more breaking, it seems."))
		}
		if ( txtgod_godid == GOD_ITZPALT ) {
			txt lang("「定命の者よ、よくぞ戻ってきた」", cnvtalk("And so the mortal returns. You shall serve me again."))
		}
		if ( txtgod_godid == GOD_EHEKATL ) {
			txt lang("「みゃみゃ？帰って来たの？来たの？たくさん待ってたよ！」", cnvtalk("Weeee♪ You are back? You are back!"))
		}
		if ( txtgod_godid == GOD_OPATOS ) {
			txt lang("「フハハハハハ！！おかえり」", cnvtalk("Muwahahahahaha! Welcome back."))
		}
		if ( txtgod_godid == GOD_JURE ) {
			txt lang("「べ、別にアンタが帰ってくるのを待ってたんじゃないからね！」", cnvtalk("N-no...I-I wasn't looking for you! Silly!"))
		}
		if ( txtgod_godid == GOD_YACATECT ) {
			txt lang("「やっと帰ってきたんやな！さぁ、今日もバリバリ稼ぐんやで！」", cnvtalk("You finally came back! Let's get to work making money!"))
		}
		if ( txtgod_godid == GOD_KUMIROMI ) {
			txt lang("「おかえり…待っていた」", cnvtalk("Welcome back...I was...waiting for you."))
		}
	}
	if ( txtgod_flavor == GOD_TEXT_JOIN ) {
		if ( txtgod_godid == GOD_MANI ) {
			txt lang("「入信者か。私の名を貶めないよう励むがいい」", cnvtalk("Oh, someone comes to me finally. Devote yourself to my tasks, you'll be rewarded greatly, maybe."))
		}
		if ( txtgod_godid == GOD_LULWY ) {
			txt lang("「私を選んだのは正解よ。たっぷり可愛がってあげるわ、子猫ちゃん」", cnvtalk("You know, you've made a right choice. I will treat you with great love, little kitty."))
		}
		if ( txtgod_godid == GOD_ITZPALT ) {
			txt lang("「我が期待に応えて見せよ」", cnvtalk("Do not fail me, servant."))
		}
		if ( txtgod_godid == GOD_EHEKATL ) {
			txt lang("「わ〜ほんとに信じてくれるの？くれるの？」", cnvtalk("Weee! You really have faith in me? Do you really?"))
		}
		if ( txtgod_godid == GOD_OPATOS ) {
			txt lang("「フハッハハハハ。逃がさんぞ！」", cnvtalk("Muwahahahahaha. You're mine!"))
		}
		if ( txtgod_godid == GOD_JURE ) {
			txt lang("「べ、別にアンタの活躍なんて期待してないんだからねっ」", cnvtalk("I-I don't expect you to be my servant...I-I r-really don't, you silly!"))
		}
		if ( txtgod_godid == GOD_YACATECT ) {
			txt lang("「よっしゃ！ウチが面倒みたるっ！」", cnvtalk("OK! OK! I'll look after you!"))
		}
		if ( txtgod_godid == GOD_KUMIROMI ) {
			txt lang("「よくきたね…期待…しているよ」", cnvtalk("Welcome...I have...expectations on you..."))
		}
	}
	if ( txtgod_flavor == GOD_TEXT_BETRAY ) {
		if ( txtgod_godid == GOD_MANI ) {
			txt lang("「やってくれたな。裏切り者め！」", cnvtalk("Great, a trator."))
		}
		if ( txtgod_godid == GOD_LULWY ) {
			txt lang("「アハハ。馬鹿ね。私なしで生きていくの？」", cnvtalk("Huh, fool. A life without me is all but empty."))
		}
		if ( txtgod_godid == GOD_ITZPALT ) {
			txt lang("「我を裏切ると？愚かなり」", cnvtalk("Remember mortal, a betrayal is not something I can forgive."))
		}
		if ( txtgod_godid == GOD_EHEKATL ) {
			txt lang("「うみみやゅっ！裏切っちゃうの？ちゃうの？」", cnvtalk("Mewmewmew! Really betray me? Really betray me?"))
		}
		if ( txtgod_godid == GOD_OPATOS ) {
			txt lang("「フフッフフッフハハハハハ！」", cnvtalk("Muwahahahahahahaha!"))
		}
		if ( txtgod_godid == GOD_JURE ) {
			txt lang("「な、何よ。アンタなんか、いなくたって寂しくないんだからね！」", cnvtalk("I-I don't miss you. I-I really don't!"))
		}
		if ( txtgod_godid == GOD_YACATECT ) {
			txt lang("「ウチもナメられたもんや！」", cnvtalk("You, taking me lightly ?!"))
		}
		if ( txtgod_godid == GOD_KUMIROMI ) {
			txt lang("「裏切り…許さない…」", cnvtalk("A trator...I can't...tolerate...."))
		}
	}
	if ( txtgod_flavor == GOD_TEXT_TAKE_OVER ) {
		if ( txtgod_godid == GOD_MANI ) {
			txt lang("「やるじゃないか。見直したよ」", cnvtalk("Well done. After all, you might be useful than I thought."))
		}
		if ( txtgod_godid == GOD_LULWY ) {
			txt lang("「褒めてあげるわ。私の可愛い小さなお人形さん」", cnvtalk("Oh my little puppet, you serve me well."))
		}
		if ( txtgod_godid == GOD_ITZPALT ) {
			txt lang("「良し。汝の行いは覚えておこう」", cnvtalk("Impressive. Your action shall be remembered."))
		}
		if ( txtgod_godid == GOD_EHEKATL ) {
			txt lang("「わおっ♪嬉しい！好き！大好き！」", cnvtalk("Weeee! I'm so happy. I like you! I like you!"))
		}
		if ( txtgod_godid == GOD_OPATOS ) {
			txt lang("「フハハッ、いいぞいいぞ」", cnvtalk("Muwahaha muwaha. Good. Good!"))
		}
		if ( txtgod_godid == GOD_JURE ) {
			txt lang("「な、なによ。ほ、褒めてなんかあげないわよ！」", cnvtalk("W-What? I-I'm not gonna praise you. I'm not!"))
		}
		if ( txtgod_godid == GOD_YACATECT ) {
			txt lang("「その調子や！ドンドン行こかー！」", cnvtalk("Good job, just like that! Keep it up!"))
		}
		if ( txtgod_godid == GOD_KUMIROMI ) {
			txt lang("「よくやった…ほんとに…」", cnvtalk("Good work...truly..."))
		}
	}
	if ( txtgod_flavor == GOD_TEXT_TAKE_OVER_FAIL ) {
		if ( txtgod_godid == GOD_MANI ) {
			txt lang("「馬鹿にしてくれたじゃないか」", cnvtalk("Heh, Nice try."))
		}
		if ( txtgod_godid == GOD_LULWY ) {
			txt lang("「やってくれたわね、ゴミの分際で。お仕置きよ」", cnvtalk("Bad bad puppy. I need to punish you."))
		}
		if ( txtgod_godid == GOD_ITZPALT ) {
			txt lang("「汝の愚かな試みの代償を味わうがよい」", cnvtalk("You shall pay a painful price for your foolish try."))
		}
		if ( txtgod_godid == GOD_EHEKATL ) {
			txt lang("「バカバカバカ！バカ！」", cnvtalk("Stupid stupid! Stupid!"))
		}
		if ( txtgod_godid == GOD_OPATOS ) {
			txt lang("「フハハハハッ、弱い弱い」", cnvtalk("Muwahahahaha! Weak! Weak!"))
		}
		if ( txtgod_godid == GOD_JURE ) {
			txt lang("「な、なにするのよ！」", cnvtalk("W-What have you done!"))
		}
		if ( txtgod_godid == GOD_YACATECT ) {
			txt lang("「ふふ、残念やったな！」", cnvtalk("Yeah, too bad for you~!"))
		}
		if ( txtgod_godid == GOD_KUMIROMI ) {
			txt lang("「敵には…容赦しない…絶対」", cnvtalk("I...will have no mercy..for enemies...absolutely."))
		}
	}
	if ( txtgod_flavor == GOD_TEXT_OFFER_GREAT ) {
		if ( txtgod_godid == GOD_MANI ) {
			txt lang("「なかなかの贈り物だ」", cnvtalk("Cool. I like it."))
		}
		if ( txtgod_godid == GOD_LULWY ) {
			txt lang("「あら、気の利いたものをくれるわね。下心でもあるの？」", cnvtalk("Oh, such a nice gift. Do you have a secret intention or something?"))
		}
		if ( txtgod_godid == GOD_ITZPALT ) {
			txt lang("「汝の贈り物に感謝しよう」", cnvtalk("I appriciate it, mortal."))
		}
		if ( txtgod_godid == GOD_EHEKATL ) {
			txt lang("「うみみゃぁ！」", cnvtalk("Mew mew mew meow!"))
		}
		if ( txtgod_godid == GOD_OPATOS ) {
			txt lang("「フッハッハハー！」", cnvtalk("Muwahahahahaha!"))
		}
		if ( txtgod_godid == GOD_JURE ) {
			txt lang("「べ、別に嬉しくなんかないんだからねっ！」", cnvtalk("I-I'm not that pleased. I-I'm not, you silly!"))
		}
		if ( txtgod_godid == GOD_YACATECT ) {
			txt lang("「ふぅむ…なかなかええの選んだやんか」", cnvtalk("Mm, not a bad choice you made there."))
		}
		if ( txtgod_godid == GOD_KUMIROMI ) {
			txt lang("「ありがたい…とてもいいよ…これ」", cnvtalk("This is...very good....Thank you."))
		}
	}
	if ( txtgod_flavor == GOD_TEXT_GIFT ) {
		txtmore
		if ( txtgod_godid == GOD_MANI ) {
			txt lang("「お前は忠実なるシモベだ。これを有効に使うがいい」", cnvtalk("You've been a faithful servant of me. Here, use it wisely."))
		}
		if ( txtgod_godid == GOD_LULWY ) {
			txt lang("「下僕のオマエにご褒美よ。大事に使いなさい。」", cnvtalk("My dear little kitty, you deserve a reward, don't you think?"))
		}
		if ( txtgod_godid == GOD_ITZPALT ) {
			txt lang("「汝の忠誠に応え、贈り物を授けよう」", cnvtalk("To answer your loyalty, you shall have this reward."))
		}
		if ( txtgod_godid == GOD_EHEKATL ) {
			txt lang("「これあげるぅ…大切にしてね！…してね！」", cnvtalk("Here's a gift! For you! Mewmew!"))
		}
		if ( txtgod_godid == GOD_OPATOS ) {
			txt lang("「フハハハァ！受け取れィ」", cnvtalk("Muwahahahaha, take it!"))
		}
		if ( txtgod_godid == GOD_JURE ) {
			txt lang("「ア、アンタのためにしてあげるんじゃないんだからっ」", cnvtalk("I-I'm not giving it to you as my gratitude! I-I r-really am not! Silly!"))
		}
		if ( txtgod_godid == GOD_YACATECT ) {
			txt lang("「よぉーし！ウチがええもんやるで！」", cnvtalk("Yeah~! I'll give you something good!"))
		}
		if ( txtgod_godid == GOD_KUMIROMI ) {
			txt lang("「いいもの…あげる…」", cnvtalk("Here...there's something for...you..."))
		}
	}
	if ( txtgod_flavor == GOD_TEXT_LIKE ) {
		if ( txtgod_godid == GOD_MANI ) {
			txt lang("「お前はまさに信者の模範だな」", cnvtalk("Truly, you are an ideal believer. I'm impressed."))
		}
		if ( txtgod_godid == GOD_LULWY ) {
			txt lang("「どこまでも私のために尽くしなさい。オマエは私の一番の奴隷なんだから」", cnvtalk("Serve me to the end of this pathetic world, for you are my dearest slave."))
		}
		if ( txtgod_godid == GOD_ITZPALT ) {
			txt lang("「我が名を語るに相応しい者が絶えて久しい。汝ならば、あるいは…」", cnvtalk("Long gone those worthy to bear my name are. But perhaps..."))
		}
		if ( txtgod_godid == GOD_EHEKATL ) {
			txt lang("「どきどきどき。君のこと、好きだよ。だよ！」", cnvtalk("My heart aches! I think I like you...I guess!"))
		}
		if ( txtgod_godid == GOD_OPATOS ) {
			txt lang("「フハァッハハハハハハ！愉快愉快！」", cnvtalk("Mwahaha haha! Fun! Fun!"))
		}
		if ( txtgod_godid == GOD_JURE ) {
			txt lang("「や、やめてよ。アンタのことなんか、大好きじゃないんだからねっ。バカ！」", cnvtalk("N-No! Cut it! I-I don't love you. Stupid!"))
		}
		if ( txtgod_godid == GOD_YACATECT ) {
			txt lang("「よっしゃよっしゃ！最高やで！」", cnvtalk("Alright, awesome! You're the best!"))
		}
		if ( txtgod_godid == GOD_KUMIROMI ) {
			txt lang("「君は…大切なしもべだ…」", cnvtalk("You are...my precious valet..."))
		}
	}
	if ( txtgod_flavor == GOD_TEXT_LOVE ) {
		if ( txtgod_godid == GOD_MANI ) {
			txt lang("「お前は最愛のシモベだ。その魂を私に捧げろ。お前を必ず守ってみせよう」", cnvtalk("Sacrifice your very soul to me and I shall protect you with my name."))
		}
		if ( txtgod_godid == GOD_LULWY ) {
			txt lang("「私に従え。全てを委ねろ。オマエの綺麗な顔を傷つけるブタどもは、私がミンチにしてあげるわ」", cnvtalk("Obey me and surrender everything. I shall mince all the pigs that try to hurt your beautiful face, my kitty."))
		}
		if ( txtgod_godid == GOD_ITZPALT ) {
			txt lang("「見事なり、定命の者よ。汝を、我が信頼に値する唯一の存在として認めよう」", cnvtalk("Very impressive, mortal. You shall be the one worthy to carry my name."))
		}
		if ( txtgod_godid == GOD_EHEKATL ) {
			txt lang("「好き！好き好き好きっ！だいすき！君とは死ぬまでずっと一緒だよ。だよ！」", cnvtalk("I love you! Love you! You will be with me forever...promise!"))
		}
		if ( txtgod_godid == GOD_OPATOS ) {
			txt lang("「ファハハハハハハハハハハハハハー！フワハァー！」", cnvtalk("Muwahahahaha! Mwaaaahahaha!"))
		}
		if ( txtgod_godid == GOD_JURE ) {
			txt lang("「べ、別にアンタのこと愛してなんかいないんだからっ。あたしの傍から離れたらしょうちしないからねっ！このバカぁ…！」", cnvtalk("I-I'm not falling l-love with you! D-don't you never ever leave me...okay? You stupid...!"))
		}
		if ( txtgod_godid == GOD_YACATECT ) {
			txt lang("「なぁ…実はウチな…どうもあんたのこと…す…好……わああああああ！ちゃうねん！やっぱりなんでもあらへん！！」", cnvtalk("Hey...the truth is, I...you...for some reason, I think I li....lik...aaa, nevermind! It's nothing!"))
		}
		if ( txtgod_godid == GOD_KUMIROMI ) {
			txt lang("「ずっと一緒…だよね？…もう離さない…君が死ぬまで」", cnvtalk(""))
		}
	}
	return

*system_init
	tmset
	time_warn = timeGetTime() / 1000
	time_begin = timeGetTime() / 1000
	procid = (procid + 1) \ 4
	proclist(procid) = "system_init" + " ct:" + ct
	exist exedir + "config.txt"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "config.txt", exedir + "config.txt"
	}
	exist exedir + "user\\export.txt"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "export.txt", exedir + "user\\export.txt"
	}
	exist exedir + "user\\lastwords.txt"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "lastwords.txt", exedir + "user\\lastwords.txt"
	}
	exist exedir + "user\\lastwords-e.txt"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "lastwords-e.txt", exedir + "user\\lastwords-e.txt"
	}
	exist exedir + "user\\music\\musiclist.txt"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "musiclist.txt", exedir + "user\\music\\musiclist.txt"
	}
	exist exedir + "user\\graphic\\face1.bmp"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "face1.bmp", exedir + "user\\graphic\\face1.bmp"
	}
	gosub *mutexobj
	sdim s, 160, 40
	dim p, 100
	dim rtval, 10
	sdim rtvaln, 50, 10
	sdim key_select, 2, 20
	sdim buff, 10000
	gosub *config_init
	gosub *config_loadCore
	gosub *config_load
	gosub *screen_init
	if ( cfg_fullscreen ) {
		chgdisp 1, windoww, windowh
		bgscr 0, windoww, windowh, 0, 0
		width windoww, windowh, 0, 0
	}
	else {
		screen 0, windoww, windowh, 0, windowx, windowy
	}
	gsel BUFFER_SCREEN
	redraw 0
	color 0
	boxf
	redraw 1
	onkey gosub *esc_check
	onkey 0
	onexit goto *exit_game
	buffer BUFFER_INF, 1440, 800
	picload exedir + "\\graphic\\interface" + devfile + ".bmp", 1
	buffer BUFFER_BUF, windoww, windowh
	cfg_exlog = 1
	if ( cfg_exlog ) {
		buffer BUFFER_LOG, windoww, windowh
		p = windoww / 192
		repeat inf_maxlog
			cnt2 = cnt
			repeat p + 1
				if ( cnt == p ) {
					x = (windoww - inf_msgx) \ 192
				}
				else {
					x = 192
				}
				pos cnt * 192, cnt2 * inf_msgspace
				gcopy BUFFER_INF, 496, 536 + cnt2 \ 4 * inf_msgspace, x, inf_msgspace
			loop
		loop
		gsel BUFFER_SCREEN
	}
	procid = (procid + 1) \ 4
	proclist(procid) = "Init buffer" + " ct:" + ct
	folder = exedir + "user\\graphic\\"
	buffer BUFFER_ITEM, 33 * 48, 38 * 48
	picload exedir + "\\graphic\\item" + devfile + ".bmp", 1
	if ( inf_tiles != 48 ) {
		pos 0, 0
		gzoom 33 * inf_tiles, 38 * inf_tiles, 1, 0, 0, 33 * 48, 38 * 48
	}
	buffer BUFFER_MAP, 33 * inf_tiles, 34 * inf_tiles
	buffer BUFFER_MAP_S, 33 * inf_tiles, 34 * inf_tiles
	buffer BUFFER_PIC, 24, 24
	buffer BUFFER_PIC2, 24, 24
	procid = (procid + 1) \ 4
	proclist(procid) = "dim" + " ct:" + ct
	dim initeq, 2, 50
	dup eqhelm, initeq(0, 0)
	dup eqweapon1, initeq(0, 1)
	dup eqshield, initeq(0, 2)
	dup eqrange, initeq(0, 3)
	dup eqammo, initeq(0, 4)
	dup eqweapon2, initeq(0, 5)
	dup eqarmor, initeq(0, 6)
	dup eqglove, initeq(0, 7)
	dup eqboots, initeq(0, 8)
	dup eqcloack, initeq(0, 9)
	dup eqgirdle, initeq(0, 10)
	dup eqring1, initeq(0, 11)
	dup eqring2, initeq(0, 12)
	dup eqamulet1, initeq(0, 13)
	dup eqamulet2, initeq(0, 14)
	dim cmapdata, 5, 400
	dim fixeditemenc, 10 * 2
	dim dir, 5
	dim dblist, 2, 1499
	dim unlist, 1499
	sdim csv, 1000, 40
	sdim filemod
	sdim csvbuff, 10000
	sdim csvidx, 100, 40
	sdim inputlog, 100
	sdim key, 20
	sdim keylog, 20
	sdim msg, 120, inf_maxlog
	sdim msgtemp, 1000
	sdim msgref, 200
	sdim randn1, 30, 20
	sdim randn2, 30, 20
	sdim select, 200
	dim n, 40
	dim rtval, 10
	dim list, 3, 500
	sdim listn, 40, 2, 500
	dim invctrl, 2
	sdim promptl, 50, 3, 20
	sdim description, 1000, 3
	sdim file, 1000
	sdim folder, 1000
	sdim msgtempprev
	dim mef, 9, 200
	dim adata, 40, 500
	dim qdata, 20, 500
	sdim qname, 40, 500
	dim gdata, 1000
	dim genetemp, 1000
	sdim gdatan, 40, 50
	dim mdatatmp, 100
	dim mdata, 100
	sdim mdatan, 20, 2
	sdim cdatan, 40, 10, 245
	sdim s1, 1000
	dim cdata, 500, 245
	dim sdata, 1200, 245
	dim spell, 200
	dim spells, 200
	dim spact, 500
	dim mat, 400
	dim inv, 70, 5480
	dim trait, 500
	dim itemmemory, 3, 1499
	dim npcmemory, 2, 1499
	dim recipememory, 1899
	dim invmark, 35
	dim commark, 3
	dim feat, 5
	sdim iname, 40
	dim val, 10
	sdim valn, 50, 10
	dim dirchk, 3, 2
	dirchk(0, 0) = -1, 0, 1
	dirchk(0, 1) = 1, 0, -1
	dim chatval, 5
	dim evlist, 10
	dim matneed, 20
	dim pcc, 30, 20
	maxrain = windoww * windowh / 3500
	dim rainx, maxrain * 2
	dim rainy, maxrain * 2
	sdim fltnrace
	dim card, 4, 1500
	dim deck, 1500
	gosub *sRefDefine
	gosub *bRefDefine
	gosub *mRefDefine
	dim rdata, 30, 20
	dup roomexist, rdata(0, 0)
	dup roomx, rdata(0, 1)
	dup roomy, rdata(0, 2)
	dup roomwidth, rdata(0, 3)
	dup roomheight, rdata(0, 4)
	dup roomexit, rdata(0, 5)
	dup roomexitmax, rdata(0, 6)
	dup roomentrancex, rdata(0, 7)
	dup roomentrancey, rdata(0, 8)
	dim idata, 8
	dim dirxy, 2, 4
	dirxy(0, 3) = 0, -1
	dirxy(0, 0) = 0, 1
	dirxy(0, 1) = -1, 0
	dirxy(0, 2) = 1, 0
	dim c_col, 3, 30
	c_col(0, COLOR_DEFAULT) = 0, 0, 0
	c_col(0, COLOR_GREEN) = 80, 0, 80
	c_col(0, COLOR_RED) = 0, 100, 100
	c_col(0, COLOR_BLUE) = 80, 80, 0
	c_col(0, COLOR_BROWN) = 0, 40, 80
	c_col(0, COLOR_YELLOW) = 0, 0, 80
	c_col(0, COLOR_BLACK) = 100, 101, 102
	c_col(0, COLOR_PURPLE) = 70, 100, 40
	c_col(0, COLOR_SKY_BLUE) = 100, 50, 50
	c_col(0, COLOR_PINK) = 0, 60, 70
	c_col(0, COLOR_ORANGE) = 20, 40, 100
	c_col(0, COLOR_WHITE) = 10, 10, 10
	c_col(0, COLOR_FRESH) = 30, 40, 70
	c_col(0, COLOR_DARK_GREEN) = 150, 20, 150
	c_col(0, COLOR_GRAY) = 50, 50, 50
	c_col(0, COLOR_LIGHT_RED) = 0, 30, 30
	c_col(0, COLOR_LIGHT_BLUE) = 30, 30, 0
	c_col(0, COLOR_LIGHT_PURPLE) = 30, 60, 0
	c_col(0, COLOR_LIGHT_GREEN) = 40, 0, 40
	c_col(0, COLOR_TALK) = 45, 5, 95
	c_col(0, COLOR_LIGHT_BLUE2) = 255, 100, 1
	c_col(0, COLOR_RED2) = 0, 200, 200
	c_col(0, COLOR_LIME) = 90, 60, 250
	c_col(0, COLOR_DARK_GRAY) = 150, 150, 150
	c_col(0, COLOR_YELLOW2) = 0, 0, 200
	c_col(0, COLOR_PURPLE2) = 80, 150, 0
	c_col(0, COLOR_LIGHT_BROWN) = 90, 110, 130
	c_col(0, COLOR_DARK_GRAY2) = 180, 180, 180
	c_col(0, COLOR_DARK_GRAY3) = 230, 230, 230
	c_col(0, COLOR_LIGHT_BLUE3) = 0, 150, 150
	dim dirchk, 3, 2
	dirchk(0, 0) = -1, 0, 1
	dirchk(0, 1) = 1, 0, -1
	dim val_skill, 5
	sdim valn_skill, 40, 3
	dim cs_posbk, 4
	dim floorstack, 400
	sdim key_list, 2, 20
	sdim playerheader, 100
	sdim artifactlocation
	sdim newsbuff
	sdim soundfile, 30, 294
	sdim musicfile, 30, 136 + 5
	dim slight, inf_screenw + 4, inf_screenh + 4
	dim slightbk, inf_screenw + 4, inf_screenh + 4
	gsel BUFFER_INF
	gmode 0
	redraw 0
	color 1, 1, 1
	font lang(cfg_font1, cfg_font2), 15 - en * 2, 0
	repeat 18
		pos cnt * 24 + 72, 30
		gcopy BUFFER_INF, 0, 30, 24, 18
		pos cnt * 24 + 77, 31
		color 50, 60, 80
		bmes key_select(cnt), 250, 240, 230
	loop
	gsel BUFFER_SCREEN
	gmode 2
	text_set
	notesel msg_log
	repeat inf_maxlog - 2
		noteadd ""
	loop
	noteadd lang("■メッセージログ", "<Message Log>")
	noteadd lang("過去の20行分のメッセージが表示されます。", "Past 20 message lines are logged.")
	fmode = 10
	gosub *game_ctrlFile
	tc = CHARA_PLAYER
	locvar_msg_write_tcol = 255, 255, 255
	invctrl = 0, 0
	pos -40, -40
	mesbox keylog, 0, 0, 1, 10
	sdim buffboard
	notesel buffboard
	noteload exedir + "data\\board.txt"
	sdim filter_item
	sdim rffilter_item
	sdim ioriginalnameref
	sdim ioriginalnameref2
	sdim iknownnameref
	sdim ialphanameref
	dim irandomname, 1499
	dim icolref
	dim keybd_st, 256
	dim trate, 9
	sdim filtern
	sdim filter_creature
	sdim netbuf, 20000
	gosub *del_userNpc
	gosub *del_userTemp
	gosub *db_setFilterRace
	gosub *db_setFilterCreature
	gosub *db_setFilterItem
	gosub *chip_init
	gosub *building_init
	gosub *setArea
	gosub *setCellObj
	gosub *random_titleInit
	gdata(GDATA_RAND_SEED_A) = rnd(800) + 2
	gdata(GDATA_RAND_SEED_B) = rnd(200) + 2
	gosub *god_init
	gosub *db_setItem
	gosub *trait_init
	gosub *rank_init
	gosub *politics_init
	gosub *item_materialInit
	gosub *item_egoInit
	gosub *item_encInit
	gosub *convertartifact_WEND1
	gosub *item_foodInit
	gosub *recipe_init
	gosub *fish_init
	gosub *map_randNameInit
	gosub *setHome
	gosub *label_0003
	gosub *userNpc_update
	if ( cfg_music == 1 ) {
		DMINIT
		if ( stat == 0 ) {
			cfg_music = 2
		}
	}
	if ( cfg_sound == 1 ) {
		DSINIT
		if ( stat == 0 ) {
			cfg_sound = 2
		}
	}
	if ( cfg_joypad == 1 ) {
		DIINIT
		DIGETJOYNUM
		if ( stat == 0 ) {
			cfg_joypad = 0
		}
	}
	gosub *sound_init
	gosub *music_init
	mainskill = 173, 106, 108
	dim cycle, 15, 5
	sdim cyclekey, 5, 15
	cycle(0, 0) = 1, 2, 5, 7, 8, 9, 14, 15, 17, 26, -1
	cycle(0, 1) = 1, 5, 7, 8, 14, -1
	cycle(0, 2) = 10, 25, -1
	cycle(0, 3) = 22, 24, -1
	cycle(0, 4) = 2, -1
	cyclemax = 9, 4, 1, 1, 0
	shadowmap = 0, 9, 10, 5, 12, 7, 0, 1, 11, 0, 6, 3, 8, 4, 2, 0, 0
	lastctrl = 1
	dim invicon, 40
	sdim invkey, 4, 40
	invkey = "", "" + key_inventory, "" + key_drop, "", "", "" + key_eat, "", "" + key_read, "" + key_drink, "" + key_zap, "", "", "", "", "" + key_use, "" + key_open, "", "" + key_dip
	invkey(26) = "" + key_throw
	invicon = -1, 7, 8, -1, -1, 2, -1, 3, 0, 1, 17, -1, -1, -1, 5, 4, -1, 6, -1, -1, -1, -1, 17, -1, 17, 17, 18, -1, -1, -1
	if ( cfg_autonumlock ) {
		GetKeyboardState keybd_st
		if ( peek(keybd_st, 144) == 1 ) {
			keybd_event 144
			keybd_event 144, 0, 2
		}
	}
	goto *game_init

*exit_game
	if ( cfg_music == 1 ) {
		DMEND
	}
	if ( cfg_sound == 1 ) {
		DSEND
	}
	if ( ieopen ) {
		delcom ie_event
		delcom ie
	}
	if ( cfg_autonumlock ) {
		keybd_event 144
		keybd_event 144, 0, 2
	}
	if ( mutex_handle != 0 ) {
		CloseHandle mutex_handle
	}
	end

*exit_game_error
	if ( errorhack > 1 ) {
		goto *exit_game
	}
	else {
		errorhack++
	}
	buf = "HspError " + wparam + " WinError " + GetLastError() + " Ver " + int(double("6.05") * 1000) + " Mode " + mode + "\n"
	buf += "efId " + efid + " efP " + efp + " Area " + gdata(GDATA_AREA) + "/" + gdata(GDATA_LEVEL) + "\n"
	buf += "ci "
	if ( ci < 200 ) {
		buf += "0"
		if ( ci >= 0 ) {
			buf += "#" + inv(INV_ITEM_ID, ci)
		}
	}
	if ( ci >= 5080 ) {
		buf += "-1"
		if ( ci < 5480 ) {
			buf += "#" + inv(INV_ITEM_ID, ci)
		}
	}
	if ( ci >= 200 ) {
		if ( ci < 5080 ) {
			buf += "" + ((ci - 200) / 20 + 1)
			buf += "#" + inv(INV_ITEM_ID, ci)
		}
	}
	buf += " ti "
	if ( ti < 200 ) {
		buf += "0"
		if ( ti >= 0 ) {
			buf += "#" + inv(INV_ITEM_ID, ti)
		}
	}
	if ( ti >= 5080 ) {
		buf += "-1"
		if ( ti < 5480 ) {
			buf += "#" + inv(INV_ITEM_ID, ti)
		}
	}
	if ( ti >= 200 ) {
		if ( ti < 5080 ) {
			buf += "" + ((ti - 200) / 20 + 1)
			buf += "#" + inv(INV_ITEM_ID, ti)
		}
	}
	buf += " cc " + cc
	if ( cc >= CHARA_PLAYER & cc < MAX_CHARA_TOTAL ) {
		buf += "#" + cdata(CDATA_ID, cc)
	}
	buf += " tc " + tc
	if ( tc >= CHARA_PLAYER & tc < MAX_CHARA_TOTAL ) {
		buf += "#" + cdata(CDATA_ID, tc)
	}
	buf += " rc " + rc
	if ( rc >= CHARA_PLAYER & rc < MAX_CHARA_TOTAL ) {
		buf += "#" + cdata(CDATA_ID, rc)
	}
	buf += "\n"
	repeat 4
		buf += "" + (3 - cnt) + ". " + proclist((procid + cnt + 1) \ 4) + "\n"
	loop
	repeat 245
		if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
			continue
		}
		if ( cdata(CDATA_X, cnt) < 0 | cdata(CDATA_X, cnt) >= mdata(MDATA_WIDTH) | cdata(CDATA_Y, cnt) < 0 | cdata(CDATA_Y, cnt) >= mdata(MDATA_HEIGHT) ) {
			buf += "* invalid chara position " + cnt + "#" + cdata(CDATA_ID, cnt) + "(" + cdata(CDATA_X, cnt) + "/" + cdata(CDATA_Y, cnt) + ") max(" + mdata(MDATA_WIDTH) + "/" + mdata(MDATA_HEIGHT) + ")\n"
		}
	loop
	repeat 400, 5080
		if ( mode == MODELIST_SHOP ) {
			break
		}
		if ( inv(INV_ITEM_NUM, cnt) <= 0 ) {
			continue
		}
		if ( inv(INV_ITEM_X, cnt) < 0 | inv(INV_ITEM_X, cnt) >= mdata(MDATA_WIDTH) | inv(INV_ITEM_Y, cnt) < 0 | inv(INV_ITEM_Y, cnt) >= mdata(MDATA_HEIGHT) ) {
			buf += "* invalid item position " + cnt + "#" + inv(INV_ITEM_ID, cnt) + "(" + inv(INV_ITEM_X, cnt) + "/" + inv(INV_ITEM_Y, cnt) + ") max(" + mdata(MDATA_WIDTH) + "/" + mdata(MDATA_HEIGHT) + ")\n"
		}
	loop
	if ( characreatehack ) {
		buf += "* error in function:chara_create:#" + (characreatehack - 1) + "\n"
	}
	if ( itemcreatehack ) {
		buf += "* error in function:item_create:#" + (itemcreatehack - 1) + "\n"
	}
	if ( chararefreshhack ) {
		buf += "* error in function:charaRefresh\n"
	}
	if ( itemnamehack ) {
		buf += "* error in function:itemName:#" + (itemnamehack - 1) + "\n"
	}
	if ( screendrawhack ) {
		buf += "* error in function:screen_draw:" + screendrawhack + "\n"
	}
	if ( gdata(GDATA_AREA) == AREA_SHOW_HOUSE ) {
		buf += "* (possibly)invalid show room:#" + usermapid + "\n"
	}
	if ( ci < 0 ) {
		buf += "* ci is below 0\n"
	}
	if ( ci >= 5480 ) {
		buf += "* ci is above max\n"
	}
	if ( ti < 0 ) {
		buf += "* ti is below 0\n"
	}
	if ( ti >= 5480 ) {
		buf += "* ti is above max\n"
	}
	if ( cc < CHARA_PLAYER ) {
		buf += "* cc is below 0\n"
	}
	if ( cc >= MAX_CHARA_TOTAL ) {
		buf += "* cc is above max\n"
	}
	if ( tc < CHARA_PLAYER ) {
		buf += "* tc is below 0\n"
	}
	if ( tc >= MAX_CHARA_TOTAL ) {
		buf += "* tc is above max\n"
	}
	if ( rc < CHARA_PLAYER ) {
		buf += "* rc is below 0\n"
	}
	if ( rc >= MAX_CHARA_TOTAL ) {
		buf += "* rc is above max\n"
	}
	if ( jp ) {
		buf += "\n\nどのようなことをしてエラーが出たのか、再現性の有無、状況のわかるスクリーンショット、本家開発版との比較結果などの情報を確認・整理してください。そのうえでElona板の開発スレにバグ報告用テンプレに沿って報告して頂けると、原因の特定ができて助かります。起きたことを簡潔に述べる、エラー文のみを報告する、程度では解決する見込みはほとんどありません。"
	}
	else {
		buf += "\n\nSorry."
	}
	notesel buf
	notesave exedir + "error.txt"
	if ( 0 ) {
		dialog buf
		await 5000
		goto *main_init
	}
	else {
		exec exedir + "error.txt", 16
	}
	goto *exit_game
	goto *label_0448
































































































































































































































































