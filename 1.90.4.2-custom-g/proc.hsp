#defcfunc efstatusfix int efstatusfix_arg1, int efstatusfix_arg2, int efstatusfix_arg3, int efstatusfix_arg4
	if ( efstatus <= (-2) ) {
		return efstatusfix_arg1
	}
	if ( efstatus == (-1) ) {
		return efstatusfix_arg2
	}
	if ( efstatus == 0 ) {
		return efstatusfix_arg3
	}
	return efstatusfix_arg4

*randomSite
	if ( map(cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 6) == 0 ) {
		return 0
	}
	if ( (feat(1) >= CELL_FEATURE_SAMPLING_SPOT_DETECTION & feat(1) <= CELL_FEATURE_SAMPLING_SPOT_GARDENING) == 0 ) {
		return 0
	}
	atxspot = ATX_FIELD1
	atxlv = gdata(GDATA_LEVEL)
	if ( mdata(MDATA_TYPE) == MAP_TYPE_DUNGEON ) {
		atxspot = ATX_DUNGEON1
	}
	if ( mdata(MDATA_TYPE) == MAP_TYPE_TOWER ) {
		atxspot = ATX_BUILDING1
	}
	if ( mdata(MDATA_TYPE) == MAP_TYPE_FOREST ) {
		atxspot = ATX_FOREST1
	}
	if ( mdata(MDATA_TYPE) == MAP_TYPE_FORT ) {
		atxspot = ATX_BUILDING1
	}
	if ( mdata(MDATA_TYPE) == MAP_TYPE_NEST ) {
		atxspot = ATX_REMAIN1
	}
	if ( mdata(MDATA_TYPE) == MAP_TYPE_CEMETERY ) {
		atxspot = ATX_FOREST1
	}
	if ( mdata(MDATA_TYPE) == MAP_TYPE_MINE ) {
		atxspot = ATX_MINE1
	}
	if ( mdata(MDATA_TYPE) == MAP_TYPE_LAKE ) {
		atxspot = ATX_WATER1
	}
	if ( mdata(MDATA_TYPE) == MAP_TYPE_WORLD ) {
		atxlv = cdata(CDATA_LEVEL, CHARA_PLAYER) / 2 + rnd(10)
		if ( atxlv > 30 ) {
			atxlv = 30 + rnd(rnd(atxlv - 30) + 1)
		}
		if ( 4 <= gdata(GDATA_WORLD_TILE) & gdata(GDATA_WORLD_TILE) < 9 ) {
			atxspot = ATX_FOREST1
		}
		if ( 264 <= gdata(GDATA_WORLD_TILE) & gdata(GDATA_WORLD_TILE) < 363 ) {
			atxspot = ATX_FIELD1
		}
		if ( 9 <= gdata(GDATA_WORLD_TILE) & gdata(GDATA_WORLD_TILE) < 13 ) {
			atxspot = ATX_FOREST1
		}
		if ( 13 <= gdata(GDATA_WORLD_TILE) & gdata(GDATA_WORLD_TILE) < 17 ) {
			atxspot = ATX_FIELD1
		}
	}
	cell_featread cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER)
	if ( feat(1) == CELL_FEATURE_SAMPLING_SPOT_DETECTION ) {
		if ( mdata(MDATA_TYPE) == MAP_TYPE_DUNGEON ) {
			atxspot = ATX_DUNGEON1
		}
		if ( mdata(MDATA_TYPE) == MAP_TYPE_TOWER ) {
			atxspot = ATX_BUILDING1
		}
		if ( mdata(MDATA_TYPE) == MAP_TYPE_FOREST ) {
			atxspot = ATX_FOREST1
		}
		if ( mdata(MDATA_TYPE) == MAP_TYPE_FORT ) {
			atxspot = ATX_BUILDING1
		}
		if ( mdata(MDATA_TYPE) == MAP_TYPE_NEST ) {
			atxspot = ATX_REMAIN1
		}
		if ( mdata(MDATA_TYPE) == MAP_TYPE_CEMETERY ) {
			atxspot = ATX_FOREST1
		}
		if ( mdata(MDATA_TYPE) == MAP_TYPE_MINE ) {
			atxspot = ATX_MINE1
		}
		if ( mdata(MDATA_TYPE) == MAP_TYPE_LAKE ) {
			atxspot = ATX_WATER1
		}
	}
	if ( feat(1) == CELL_FEATURE_SAMPLING_SPOT_GENE_ENGINEER ) {
		atxspot = ATX_REMAIN1
	}
	if ( feat(1) == CELL_FEATURE_SAMPLING_SPOT_FISHING ) {
		atxspot = ATX_WATER1
	}
	if ( feat(1) == CELL_FEATURE_SAMPLING_SPOT_MINING ) {
		atxspot = ATX_MINE1
	}
	if ( feat(1) == CELL_FEATURE_SAMPLING_SPOT_GARDENING ) {
		atxspot = ATX_BUSH1
	}
	repeat 12
		if ( atxspot == ATX_MINE1 ) {
			if ( sdata(SKILL_NORMAL_MINING, CHARA_PLAYER) * 2 + 5 > rnd(atxlv + 1) | rnd(10) == 0 ) {
				matgetmain random_material(atxlv, 0), 1, 1
				matgetmain random_material(atxlv, 0), 1, 1
				matgetmain random_material(atxlv, 0), 1, 1
			}
			else {
				txt lang("çÃå@Ç…é∏îsÇµÇΩÅB", "Your mining attempt fails.")
			}
			skillexp SKILL_NORMAL_MINING, CHARA_PLAYER, 50
			gdata(GDATA_GATHERING_ATTEMPS)++
		}
		if ( atxspot == ATX_WATER1 ) {
			if ( sdata(SKILL_NORMAL_FISHING, CHARA_PLAYER) * 2 + 5 > rnd(atxlv + 1) | rnd(10) == 0 ) {
				matgetmain random_material(atxlv, 0), 1, 2
				matgetmain random_material(atxlv, 0), 1, 2
				matgetmain random_material(atxlv, 0), 1, 2
			}
			else {
				txt lang("íﬁÇËÇ…é∏îsÇµÇΩÅB", "Your fishing attempt fails.")
			}
			skillexp SKILL_NORMAL_FISHING, CHARA_PLAYER, 50
			gdata(GDATA_GATHERING_ATTEMPS)++
		}
		if ( atxspot == ATX_BUSH1 ) {
			if ( sdata(SKILL_NORMAL_GARDENING, CHARA_PLAYER) * 2 + 5 > rnd(atxlv + 1) | rnd(10) == 0 ) {
				matgetmain random_material(atxlv, 0), 1, 3
				matgetmain random_material(atxlv, 0), 1, 3
				matgetmain random_material(atxlv, 0), 1, 3
			}
			else {
				txt lang("çÃéÊÇ…é∏îsÇµÇΩÅB", "Your searching attempt fails.")
			}
			skillexp SKILL_NORMAL_GARDENING, CHARA_PLAYER, 50
			gdata(GDATA_GATHERING_ATTEMPS)++
		}
		if ( atxspot == ATX_REMAIN1 ) {
			if ( sdata(SKILL_NORMAL_GENE_ENGINEER, CHARA_PLAYER) * 2 + 5 > rnd(atxlv + 1) | rnd(10) == 0 ) {
				matgetmain random_material(atxlv, 0), 1, 4
				matgetmain random_material(atxlv, 0), 1, 4
				matgetmain random_material(atxlv, 0), 1, 4
			}
			else {
				txt lang("âÒé˚Ç…é∏îsÇµÇΩÅB", "Your searching attempt fails.")
			}
			skillexp SKILL_NORMAL_GENE_ENGINEER, CHARA_PLAYER, 50
			gdata(GDATA_GATHERING_ATTEMPS)++
		}
		if ( atxspot == ATX_RANDOM | atxspot == ATX_BUILDING1 | atxspot == ATX_FOREST1 | atxspot == ATX_DUNGEON1 ) {
			if ( sdata(SKILL_NORMAL_DETECTION, CHARA_PLAYER) * 2 + 5 > rnd(atxlv + 1) | rnd(10) == 0 ) {
				matgetmain random_material(atxlv, 0), 1, 5
				matgetmain random_material(atxlv, 0), 1, 5
				matgetmain random_material(atxlv, 0), 1, 5
			}
			else {
				txt lang("íTçıÇ…é∏îsÇµÇΩÅB", "Your searching attempt fails.")
			}
			skillexp SKILL_NORMAL_DETECTION, CHARA_PLAYER, 50
			gdata(GDATA_GATHERING_ATTEMPS)++
		}
		if ( rnd(5 + trait(TRAIT_RACE_BONUS_MATERIAL) * 2) + 4 < gdata(GDATA_GATHERING_ATTEMPS) ) {
			if ( feat(1) != CELL_FEATURE_SAMPLING_SPOT_MINING & feat(1) != CELL_FEATURE_SAMPLING_SPOT_FISHING & feat(1) != CELL_FEATURE_SAMPLING_SPOT_GARDENING ) {
				snd SOUNDLIST_DIG2
			}
			s = lang("Ç‡Ç§âΩÇ‡Ç»Ç¢ÅB", "You can't find anything else.")
			if ( feat(1) == CELL_FEATURE_SAMPLING_SPOT_FISHING ) {
				snd SOUNDLIST_WATER
				snd SOUNDLIST_FISH_CAST
				s = lang("êÚÇÕä±è„Ç™Ç¡ÇΩÅB", "The spring has dried up.")
			}
			if ( feat(1) == CELL_FEATURE_SAMPLING_SPOT_MINING ) {
				snd SOUNDLIST_DIG1
				s = lang("çzêŒÇå@ÇËÇ¬Ç≠ÇµÇΩÅB", "There's no more ore around.")
			}
			if ( feat(1) == CELL_FEATURE_SAMPLING_SPOT_GARDENING ) {
				snd SOUNDLIST_BUSH1
				s = lang("Ç‡Ç§ñ⁄Ç⁄ÇµÇ¢êAï®ÇÕå©ìñÇΩÇÁÇ»Ç¢ÅB", "There are no more plants around.")
			}
			await 300
			txt s
			gdata(GDATA_GATHERING_ATTEMPS) = 0
			if ( feat(1) != CELL_FEATURE_DOWNSTAIRS & feat(1) != CELL_FEATURE_UPSTAIRS ) {
				map(cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 6) = 0
			}
			break
		}
	loop
	autosave2 = 1 * (gdata(GDATA_AREA) != AREA_SHOW_HOUSE)
	return

*disarmTrap
	if ( feat(2) != CELL_SUB_FEATURE_TRAP_HOSTILE_BLADE_STRINGS & feat(2) != CELL_SUB_FEATURE_TRAP_PITFALL ) {
		skillexp SKILL_NORMAL_DISARM_TRAP, cc, 50
		if ( sdata(SKILL_ATTR_LER, cc) > rnd(10000) ) {
			skillexp SKILL_NORMAL_DISARM_TRAP, cc, 50
		}
	}
	cell_featset movx, movy, 0
	txt lang("„©ÇâèúÇµÇΩÅB", "The trap was disarmed.")
	if ( gdata(GDATA_QUEST) == QUEST_TYPE_MINEFIELD ) {
		if ( feat(2) == CELL_SUB_FEATURE_TRAP_QUEST_MINE | feat(2) == CELL_SUB_FEATURE_TRAP_QUEST_PITFALL ) {
			snd SOUNDLIST_DIG2
			qdata(QDATA_PARAM2, gdata(GDATA_QUEST_REF))++
			txtef COLOR_GREEN
			txt lang("ìPãéçœÇ›", "Removed ") + "(" + qdata(QDATA_PARAM2, gdata(GDATA_QUEST_REF)) + ") " + lang("ìPãéÉmÉãÉ}", "Quota ") + "(" + qdata(QDATA_PARAM1, gdata(GDATA_QUEST_REF)) + ")"
		}
	}
	return

*procMove
	if ( cfg_scroll ) {
		if ( cc == CHARA_PLAYER ) {
			gosub *screen_scroll
		}
	}
	map(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 1) = 0
	cdata(CDATA_X, cc) = cdata(CDATA_X_NEW, cc)
	cdata(CDATA_Y, cc) = cdata(CDATA_Y_NEW, cc)
	map(cdata(CDATA_X_NEW, cc), cdata(CDATA_Y_NEW, cc), 1) = cc + 1
	if ( cc == CHARA_PLAYER ) {
		if ( gdata(GDATA_RIDER) != 0 ) {
			cdata(CDATA_X, gdata(GDATA_RIDER)) = cdata(CDATA_X, CHARA_PLAYER)
			cdata(CDATA_Y, gdata(GDATA_RIDER)) = cdata(CDATA_Y, CHARA_PLAYER)
		}
	}
	if ( cdata(CDATA_IN_TAGTEAM, cc) == (-1) ) {
		if ( cdata(CDATA_IN_TAGTEAM, cc) != 0 ) {
			cdata(CDATA_X, cdata(CDATA_TAGTEAM_PARTNER, cc)) = cdata(CDATA_X, cc)
			cdata(CDATA_Y, cdata(CDATA_TAGTEAM_PARTNER, cc)) = cdata(CDATA_Y, cc)
		}
	}
	movx = cdata(CDATA_X, cc)
	movy = cdata(CDATA_Y, cc)
	if ( map(movx, movy, 6) != 0 ) {
		cell_featread movx, movy
		if ( feat(1) == CELL_FEATURE_TRAP ) {
			if ( feat(2) == CELL_SUB_FEATURE_TRAP_QUEST_MINE ) {
				if ( cbit(CHARA_BIT_FLOAT, cc) == 1 & cdata(CDATA_CONDITION_GRAVITY, cc) == 0 | cbit(CHARA_BIT_IMMUNE_MINE, cc) == 1 | findbuff(cc, BUFF_GRAVITY_ACCEL) != (-1) ) {
					return
				}
				if ( feat(3) != 0 ) {
					if ( cc >= MAX_CHARA_FOLLOWER ) {
						return
					}
				}
			}
			if ( feat(2) == CELL_SUB_FEATURE_TRAP_BLADE_STRINGS | feat(2) == CELL_SUB_FEATURE_TRAP_HOSTILE_BLADE_STRINGS ) {
				if ( cbit(CHARA_BIT_FLOAT, cc) == 1 & cdata(CDATA_CONDITION_GRAVITY, cc) == 0 | findbuff(cc, BUFF_GRAVITY_ACCEL) != (-1) ) {
					return
				}
				if ( feat(3) != 0 ) {
					if ( cc >= MAX_CHARA_FOLLOWER ) {
						return
					}
				}
			}
			if ( feat(2) == CELL_SUB_FEATURE_TRAP_QUEST_PITFALL | feat(2) == CELL_SUB_FEATURE_TRAP_PITFALL ) {
				if ( cbit(CHARA_BIT_FLOAT, cc) == 1 & cdata(CDATA_CONDITION_GRAVITY, cc) == 0 | findbuff(cc, BUFF_GRAVITY_ACCEL) != (-1) ) {
					return
				}
				if ( feat(3) != 0 ) {
					if ( cc >= MAX_CHARA_FOLLOWER ) {
						return
					}
				}
			}
			if ( feat(0) != tile_trap & cc == CHARA_PLAYER ) {
				gosub *calcSearch
				if ( stat == 1 ) {
					refx = movx
					refy = movy
					gosub *revealTrap
					feat(0) = tile_trap
				}
			}
			refdiff = 100 + gdata(GDATA_LEVEL) * 3 + gdata(STARTING_GDATA_FLAG + 379) * 3
			if ( feat(0) == tile_trap ) {
				refdiff = refdiff / 3
				if ( sdata(SKILL_NORMAL_DISARM_TRAP, cc) != 0 ) {
					gosub *calcDisarm
					if ( stat == 1 ) {
						gosub *disarmTrap
						return
					}
					else {
						txt lang("âèúÇ…é∏îsÇµÇΩÅB", name(cc) + " fail" + _s(cc) + " to disarm the trap.")
					}
				}
			}
			gosub *calcTrap
			if ( stat == 1 ) {
				if ( synccheck(cc, -1) ) {
					txt lang(name(cc) + "ÇÕ„©ÇîÇØÇΩÅB", name(cc) + " evade" + _s(cc) + " a trap.")
				}
				if ( cc == CHARA_PLAYER ) {
					refx = movx
					refy = movy
					gosub *revealTrap
				}
			}
			else {
				if ( cc == CHARA_PLAYER ) {
					refx = movx
					refy = movy
					gosub *revealTrap
					snd SOUNDLIST_TRAP1
				}
				efsource = 5
				if ( synccheck(cc, -1) ) {
					txt lang(aln(cc) + "„©Ç…Ç©Ç©Ç¡ÇΩÅI", name(cc) + " activate" + _s(cc) + " a trap!")
				}
				if ( feat(2) == CELL_SUB_FEATURE_TRAP_BLIND ) {
					if ( synccheck(cc, -1) ) {
						txt lang("ñnÇ™ï¨Ç´èoÇµÇΩÅB", "Gallons of ink spreads.")
					}
					cell_featset movx, movy, 0
					dmgcon cc, CONDITION_BLIND, 100 + gdata(GDATA_LEVEL) * 2
				}
				if ( feat(2) == CELL_SUB_FEATURE_TRAP_PARALYZE ) {
					if ( synccheck(cc, -1) ) {
						txt lang("éhåÉìIÇ»ìıÇ¢Ç™ÇΩÇæÇÊÇ§ÅB", "Stimulative gas spreads.")
					}
					cell_featset movx, movy, 0
					dmgcon cc, CONDITION_PARALYZE, 100 + gdata(GDATA_LEVEL) * 2
				}
				if ( feat(2) == CELL_SUB_FEATURE_TRAP_CONFUSION ) {
					if ( synccheck(cc, -1) ) {
						txt lang("èLÇ¢ìıÇ¢Ç™ÇΩÇøÇ±ÇﬂÇΩÅB", "Smelly gas spreads.")
					}
					cell_featset movx, movy, 0
					dmgcon cc, CONDITION_CONFUSE, 100 + gdata(GDATA_LEVEL) * 2
				}
				if ( feat(2) == CELL_SUB_FEATURE_TRAP_TELEPORT ) {
					cell_featset movx, movy, 0
					if ( encfind(cc, ENCHANT_PREVENT_TELEPORT) != (-1) ) {
						if ( synccheck(cc, -1) ) {
							txt_noteleport
						}
						return
					}
					repeat 200
						cdata(CDATA_X_NEW, cc) = rnd(mdata(MDATA_WIDTH) - 2) + 1
						cdata(CDATA_Y_NEW, cc) = rnd(mdata(MDATA_HEIGHT) - 2) + 1
						cell_check cdata(CDATA_X_NEW, cc), cdata(CDATA_Y_NEW, cc)
						if ( cellaccess == 1 ) {
							if ( synccheck(cc, -1) ) {
								snd SOUNDLIST_TELEPORT1
								txt lang(name(cc) + "ÇÕìÀëRè¡Ç¶ÇΩÅB", "Suddenly, " + name(cc) + " disappear" + _s(cc) + ".")
							}
							rowactend cc
							redraw 0
							gosub *screen_draw
							break
						}
					loop
					goto *procMove
				}
				if ( feat(2) == CELL_SUB_FEATURE_TRAP_IMPALEMENT ) {
					if ( synccheck(cc, -1) ) {
						txt lang("ëÑÇ™ínñ Ç©ÇÁîÚÇ—èoÇµÇΩÅB", "Several spears fly out from the ground.")
					}
					if ( cbit(CHARA_BIT_FLOAT, cc) == 1 & cdata(CDATA_CONDITION_GRAVITY, cc) == 0 | findbuff(cc, BUFF_GRAVITY_ACCEL) != (-1) ) {
						if ( synccheck(cc, -1) ) {
							txtmore
							txt lang("ÇµÇ©Çµ" + name(cc) + "Ç…ÇÕìÕÇ©Ç»Ç©Ç¡ÇΩÅB", "But they don't reach " + name(cc) + ".")
						}
					}
					else {
						cell_featset movx, movy, 0
						dmghp cc, rnd(gdata(GDATA_LEVEL) * 2 + 10), DAMAGE_FROM_TRAP
					}
				}
				if ( feat(2) == CELL_SUB_FEATURE_TRAP_POISON ) {
					if ( synccheck(cc, -1) ) {
						txt lang("ì≈ÉKÉXÇ™ï¨Ç´èoÇµÇΩÅB", "Poisonous gas spreads.")
					}
					cell_featset movx, movy, 0
					dmgcon cc, CONDITION_POISON, 100 + gdata(GDATA_LEVEL) * 2
				}
				if ( feat(2) == CELL_SUB_FEATURE_TRAP_SLEEP ) {
					if ( synccheck(cc, -1) ) {
						txt lang("ç√ñ∞ÉKÉXÇ™ï¨Ç´èoÇµÇΩÅB", "Sleeping gas spreads.")
					}
					cell_featset movx, movy, 0
					dmgcon cc, CONDITION_SLEEP, 100 + gdata(GDATA_LEVEL) * 2
				}
				if ( feat(2) == CELL_SUB_FEATURE_TRAP_QUEST_MINE | feat(2) == CELL_SUB_FEATURE_TRAP_MINE ) {
					txtef COLOR_SKY_BLUE
					txt lang(" *É`ÉÖÉhÅ[ÉìÅI* ", " *kabooom* ")
					aniref = 0
					animeid = ANIMATION_BALL
					anix = movx
					aniy = movy
					gosub *anime
					if ( feat(2) == CELL_SUB_FEATURE_TRAP_QUEST_MINE ) {
						dmghp cc, 50 + limit(rnd(gdata(GDATA_LEVEL) + gdata(STARTING_GDATA_FLAG + 379) + 1) * 5, 1, 99999), DAMAGE_FROM_TRAP
					}
					if ( feat(2) == CELL_SUB_FEATURE_TRAP_MINE ) {
						dmghp cc, 50 + limit(rnd(gdata(GDATA_LEVEL) + 1) * 5, 1, 99999), DAMAGE_FROM_CHARA
					}
					if ( gdata(GDATA_QUEST) == QUEST_TYPE_MINEFIELD ) {
						if ( feat(2) == CELL_SUB_FEATURE_TRAP_QUEST_MINE ) {
							qdata(QDATA_PARAM2, gdata(GDATA_QUEST_REF))++
							txtef COLOR_GREEN
							txt lang("ìPãéçœÇ›", "Removed ") + "(" + qdata(QDATA_PARAM2, gdata(GDATA_QUEST_REF)) + ") " + lang("ìPãéÉmÉãÉ}", "Quota ") + "(" + qdata(QDATA_PARAM1, gdata(GDATA_QUEST_REF)) + ")"
						}
					}
					cell_featset movx, movy, 0
				}
				if ( feat(2) == CELL_SUB_FEATURE_TRAP_BLADE_STRINGS | feat(2) == CELL_SUB_FEATURE_TRAP_HOSTILE_BLADE_STRINGS ) {
					txtef COLOR_SKY_BLUE
					txt lang(name(cc) + "ÇÕâsÇ¢éÖÇ…ìÀÇ¡çûÇÒÇæÅB", name(cc) + " " + was(cc) + " torn up in the sharp strings.")
					snd SOUNDLIST_STAB
					if ( feat(2) == CELL_SUB_FEATURE_TRAP_HOSTILE_BLADE_STRINGS ) {
						hostileaction CHARA_PLAYER, cc
					}
					cell_featset movx, movy, 0
					dmghp cc, limit(sdata(SKILL_ATTR_SPD, cc) / 2 + limit(rnd(gdata(GDATA_LEVEL) + 1) * 2, 1, 9999) - cdata(CDATA_PV, cc), 1, 9999), DAMAGE_FROM_TRAP
				}
				if ( feat(2) == CELL_SUB_FEATURE_TRAP_QUEST_PITFALL | feat(2) == CELL_SUB_FEATURE_TRAP_PITFALL ) {
					txtef COLOR_SKY_BLUE
					txt lang(name(cc) + "ÇÕóéÇ∆ÇµåäÇ…ì]Ç™ÇËóéÇøÇΩÅB", name(cc) + " fell into the pitfall trap.")
					snd SOUNDLIST_SNOW
					if ( feat(2) == CELL_SUB_FEATURE_TRAP_QUEST_PITFALL ) {
						dmghp cc, limit((gdata(GDATA_LEVEL) + gdata(STARTING_GDATA_FLAG + 379)) / 2 + limit(rnd(gdata(GDATA_LEVEL) + gdata(STARTING_GDATA_FLAG + 379) + 1) * 2, 1, 9999) - cdata(CDATA_DV, cc), 2, 9999), DAMAGE_FROM_TRAP
					}
					if ( feat(2) == CELL_SUB_FEATURE_TRAP_PITFALL ) {
						dmghp cc, limit(gdata(GDATA_LEVEL) / 2 + limit(rnd(gdata(GDATA_LEVEL) + 1) * 2, 1, 9999) - cdata(CDATA_DV, cc), 2, 9999), DAMAGE_FROM_CHARA
					}
					if ( cdata(CDATA_CONDITION_INVERT, cc) < 2 ) {
						cdata(CDATA_CONDITION_INVERT, cc) = 2
					}
					if ( gdata(GDATA_QUEST) == QUEST_TYPE_MINEFIELD ) {
						if ( feat(2) == CELL_SUB_FEATURE_TRAP_QUEST_PITFALL ) {
							qdata(QDATA_PARAM2, gdata(GDATA_QUEST_REF))++
							txtef COLOR_GREEN
							txt lang("ìPãéçœÇ›", "Removed ") + "(" + qdata(QDATA_PARAM2, gdata(GDATA_QUEST_REF)) + ") " + lang("ìPãéÉmÉãÉ}", "Quota ") + "(" + qdata(QDATA_PARAM1, gdata(GDATA_QUEST_REF)) + ")"
						}
					}
					cell_featset movx, movy, 0
				}
				efsource = 0
			}
		}
	}
	return

*perform
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_PERFORM
		cdata(CDATA_ACTION_PERIOD, cc) = 61
		if ( ens > 0 ) {
			cdata(CDATA_ACTION_PERIOD, cc) = 121
		}
		if ( ens == 0 ) {
			cdata(CDATA_ITEM_USING, cc) = ci
		}
		cdata(CDATA_PERFORM_SCORE, cc) = 40
		cdata(CDATA_PERFORM_GOLD, cc) = 0
		performtips = 0
		return
	}
	if ( cdata(CDATA_ID, cc) == CREATURE_ID_KARAVIKA ) {
		if ( cdata(CDATA_ALLIED, cc) == 0 ) {
			ens = 1
		}
	}
	if ( ens > 0 ) {
		ensci = limit(100 + ens, 100, 300)
	}
	else {
		ensci = inv(INV_ITEM_PARAM1, ci)
	}
	if ( inv(INV_ITEM_ID, ci) == ITEM_ID_MELODYUS ) {
		ensci = limit((sdata(SKILL_NORMAL_PERFORMER, cc) + 1) / 3, 5, 250)
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
		ci = cdata(CDATA_ITEM_USING, cc)
		if ( cdata(CDATA_ACTION_PERIOD, cc) \ 10 == 0 ) {
			if ( synccheck(cc, -1) ) {
				if ( rnd(2) == 0 ) {
					txtef COLOR_BLUE
					if ( inv(INV_ITEM_ID, ci) == ITEM_ID_OCARINA | inv(INV_ITEM_ID, ci) == ITEM_ID_RECORDER | inv(INV_ITEM_ID, ci) == ITEM_ID_PAN_FLUTE ) {
						txt lang("Àﬂ€∞ÅÙ ", "*Zip*"), lang("Ãﬂµ∞ÅÙ ", "*Zingo*"), lang("Œﬂ∞ÅÙ ", "*Yowl*")
					}
					if ( inv(INV_ITEM_ID, ci) == ITEM_ID_SERPENT | inv(INV_ITEM_ID, ci) == ITEM_ID_HORN ) {
						txt lang("Ãﬁµ›ÅÙ ", "*Blare*"), lang("Ãﬁµ∞ÅÙ ", "*Howl*"), lang("Œﬁµ∞ÅÙ ", "*Puff*")
					}
					if ( inv(INV_ITEM_ID, ci) == ITEM_ID_HARMONICA ) {
						txt lang("Œﬂ∞ÅÙ ", "*Twang*"), lang("ÀﬂÆ∞ÅÙ ", "*Whizz*"), lang(" ﬂ∞ÅÙ ", "*Puff*"), lang("Ãﬂµ∞ÅÙ ", "*Twang*")
					}
					if ( inv(INV_ITEM_ID, ci) == ITEM_ID_UPRIGHT_PIANO | inv(INV_ITEM_ID, ci) == ITEM_ID_GOULDS_PIANO | inv(INV_ITEM_ID, ci) == ITEM_ID_GRAND_PIANO ) {
						txt lang("ºﬁ¨›ÅÙ ", "*Cha*"), lang("¡¨◊◊ÅÙ ", "*Dan*"), lang("¿ﬁ∞›ÅÙ ", "*Tiki*")
					}
					if ( inv(INV_ITEM_ID, ci) == ITEM_ID_STRADIVARIUS ) {
						txt lang("∑≤∞ÅÙ ", "*Zip*"), lang("∑€∞ÅÙ ", "*Plunk*"), lang("∑∫ÅÙ ", "*Ping*")
					}
					if ( inv(INV_ITEM_ID, ci) == ITEM_ID_HARP | inv(INV_ITEM_ID, ci) == ITEM_ID_LUTE ) {
						txt lang("¡¨◊›ÅÙ ", "*Tiki*"), lang("Œﬂ€›ÅÙ ", "*Plunk*"), lang("Œﬂ€€ÅÙ ", "*Ding*")
					}
					if ( inv(INV_ITEM_ID, ci) == ITEM_ID_WADAIKO ) {
						txt lang("ƒﬁ›ƒﬁ›ÅÙ ", "*Bam*"), lang("∂Ø∂ÅÙ ", "*Rat-a-tat*"), lang("ƒﬁ∫ƒﬁ›ÅÙ ", "*Bash*"), lang("ƒﬁ∫ƒﬁ∫ÅÙ ", "*Bump*")
					}
				}
				if ( rnd(10) == 0 ) {
					if ( cdata(CDATA_ID, cc) == CREATURE_ID_KARAVIKA ) {
						if ( rnd(2) == 0 ) {
							txtef COLOR_YELLOW
							txt lang(" ÅÙêUÇËï‘ÇÍÇŒè¡Ç¶ÇƒÇ¢Ç≠ë´ê’Å@ÂÚÇπÇƒÇ¢Ç≠évÇ¢èoÅÙ ", "*Lulu*"), lang(" ÅÙååÇìfÇ´Ç»Ç™ÇÁÅ@èÊÇËâzÇ¶ÇΩì˙ÅXÇ‡ÅÙ ", "*Laaa*"), lang(" ÅÙê∏àÍîtÅ@ãπÇ…çèÇ›çûÇÒÇ≈ÅÙ ", "*Lulu*"), lang(" ÅÙåNÇ∆ñlÇÃå¸Ç©Ç§êÊÇÕà·Ç§ÇØÇÍÇ«ÅÙ ", "*Lulu*"), lang(" ÅÙñæì˙ÇÕñlÇÁÇÃäJëÒínÅÙ ", "*Lala*"), lang(" ÅÙñlÇÁÇÕñæì˙ÇÃäJëÒé“ÅÙ ", "*Lala*")
						}
						else {
							txtef COLOR_YELLOW
							txt lang(" ÅÙèÓîMÇ™ã∞ï|èƒÇ´êsÇ≠ÇµÇƒÅÙ ", "*Lala*"), lang(" ÅÙå¸Ç©Ç¢ïóÇ‡Å@ïsà¿ÇÃâeÇ‡ÅÙ ", "*Lala*"), lang(" ÅÙñYÇÍÇΩÇÕÇ∏ÇÃñÒë©Ç™ëhÇÈÅÙ ", "*Lala*"), lang(" ÅÙñ≤ÇÃécä[Ç‡Å@äæÇÃåãèªÇ‡Å@êVÇΩÇ»ìπÇÃëbÇæÇ©ÇÁÅÙ ", "*Lala*"), lang(" ÅÙÇªÇÍÇ≈Ç‡ëOÇ÷Å@ëOÇ÷êiÇﬁÇÃÇ≥ÅÙ ", "*Lala*")
						}
					}
				}
				if ( ens > 0 ) {
					if ( rnd(5) == 0 ) {
						txtef COLOR_YELLOW
						txt lang("◊◊◊ÅÙ ", "*Lulu*"), lang("◊∞ÅÙ ", "*Laaa*"), lang("ŸŸŸÅÙ ", "*Lala*")
					}
				}
				txtef COLOR_BLUE
				txt lang("Å`ÅÙ ", "*Cha*")
			}
		}
		if ( cdata(CDATA_ACTION_PERIOD, cc) \ 20 == 0 ) {
			gold = 0
			make_sound cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 5, 1, 1, cc
			repeat MAX_CHARA_TOTAL
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 >= cdata(CDATA_INTEREST_RENEW, cnt) ) {
					cdata(CDATA_INTEREST, cnt) = 100
				}
				if ( synccheck(cc, -1) ) {
					if ( cdata(CDATA_SYNC, cnt) != msync ) {
						continue
					}
				}
				else {
					if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), cdata(CDATA_X, cnt), cdata(CDATA_Y, cnt)) > 3 ) {
						continue
					}
				}
				if ( cdata(CDATA_INTEREST, cnt) <= 0 ) {
					continue
				}
				if ( cdata(CDATA_CONDITION_SLEEP, cnt) > 0 ) {
					continue
				}
				if ( cdata(CDATA_CONDITION_DIM, cnt) >= 60 ) {
					continue
				}
				if ( cbit(CHARA_BIT_NECRO, cnt) == 1 ) {
					continue
				}
				x = cdata(CDATA_X, cnt)
				y = cdata(CDATA_Y, cnt)
				if ( map(x, y, 1) == 0 ) {
					continue
				}
				tc = cnt
				if ( tc == cc ) {
					continue
				}
				if ( cdata(CDATA_RELATION, tc) == (-3) ) {
					if ( cdata(CDATA_AI_AGGRO, tc) == 0 ) {
						if ( synccheck(tc, -1) ) {
							txt lang(name(tc) + "ÇÕåÉì{ÇµÇΩÅB", name(tc) + " get" + _s(tc) + " angry.")
						}
					}
					cdata(CDATA_AI_AGGRO, tc) = 30
					continue
				}
				if ( cc == CHARA_PLAYER ) {
					cdata(CDATA_INTEREST, tc) -= rnd(15)
					cdata(CDATA_INTEREST_RENEW, tc) = gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 + 12
				}
				if ( sdata(SKILL_NORMAL_PERFORMER, cc) + ens / 2 < cdata(CDATA_LEVEL, tc) / 2 ) {
					if ( cdata(CDATA_ID, cc) != CREATURE_ID_KARAVIKA ) {
						if ( tc >= MAX_CHARA_FOLLOWER ) {
							if ( rnd(3) == 0 ) {
								cdata(CDATA_PERFORM_SCORE, cc) -= cdata(CDATA_LEVEL, tc) / 2
								txtef COLOR_SKY_BLUE
								txt lang("Åuà¯Ç¡çûÇﬂÅIÅv", cnvtalk("Boo boo!")), lang("ÅuÇ§ÇÈÇ≥Ç¢ÅIÅv", cnvtalk("Shut it!")), lang("Åuâ∫éËÇ¡Ç“ÅIÅv", cnvtalk("What are you doing!")), lang("ÅuâΩÇÃÇ¬Ç‡ÇËÇæÅIÅv", cnvtalk("You can't play shit."))
								txt lang("" + name(tc) + "ÇÕêŒÇìäÇ∞ÇΩÅB", name(tc) + " throw" + _s(tc) + " a rock.")
								dmg = rnd(cdata(CDATA_LEVEL, tc) + 1) + 1
								if ( cdata(CDATA_ID, tc) == CREATURE_ID_LOYTER_THE_CRIMSON_OF_ZANAN ) {
									dmg = cdata(CDATA_LEVEL, tc) * 2 + rnd(100)
								}
								dmghp cc, dmg, DAMAGE_FROM_PERFORM
								if ( cdata(CDATA_EXIST, cc) == CHAR_STATE_DEAD ) {
									break
								}
								continue
							}
						}
					}
				}
				if ( cdata(CDATA_INTEREST, tc) <= 0 ) {
					if ( synccheck(cc, -1) ) {
						if ( cdata(CDATA_ID, cc) != CREATURE_ID_KARAVIKA ) {
							txtef COLOR_SKY_BLUE
							txt lang("ÅuñOÇ´ÇΩÅv", cnvtalk("Boring.")), lang("ÅuëOÇ…Ç‡íÆÇ¢ÇΩÇÊÅv", cnvtalk("I've heard this before.")), lang("ÅuÇ‹ÇΩÇ±ÇÃã»Ç©ÅcÅv", cnvtalk("This song again?"))
						}
					}
					cdata(CDATA_INTEREST, tc) = 0
					continue
				}
				if ( rnd(3) == 0 ) {
					if ( cdata(CDATA_INTEREST, tc) > 0 ) {
						p = limit((cdata(CDATA_PERFORM_SCORE, cc) * (100 + ensci) / 100 + ens / 5) * 2, 0, cdata(CDATA_LEVEL, tc) * 5)
						if ( tc < MAX_CHARA_FOLLOWER ) {
							p = rnd(limit(p, 1, 100)) + 1
						}
						if ( cdata(CDATA_ROLE, tc) >= ROLE_SHOP_MIN & cdata(CDATA_ROLE, tc) < ROLE_GUEST_MIN | cdata(CDATA_ROLE, tc) == ROLE_GUEST_MERCHANT ) {
							p /= 10
						}
						if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) == 1 | cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) == 1 | cbit(CHARA_BIT_SUMMONED, tc) == 1 ) {
							p = limit((p + 1) / 5 + 1, 1, 3000)
						}
						if ( p > cdata(CDATA_GOLD, tc) ) {
							p = cdata(CDATA_GOLD, tc)
						}
						cdata(CDATA_GOLD, tc) -= p
						cdata(CDATA_GOLD, cc) += p
						gold += p
						if ( cc == CHARA_PLAYER ) {
							cdata(CDATA_INTEREST, tc) -= 20
							cdata(CDATA_INTEREST_RENEW, tc) = gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 + 12
						}
					}
				}
				if ( cdata(CDATA_LEVEL, tc) > sdata(SKILL_NORMAL_PERFORMER, cc) + ens ) {
					continue
				}
				p = rnd(cdata(CDATA_LEVEL, tc) + 1) + 1
				if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) == 1 | cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) == 1 | cbit(CHARA_BIT_SUMMONED, tc) == 1 ) {
					p = limit((p + 1) / 5 + 1, 1, 30)
				}
				if ( rnd(sdata(SKILL_NORMAL_PERFORMER, cc) + 1) + ens > rnd(cdata(CDATA_LEVEL, tc) * 2 + 1) ) {
					if ( gdata(GDATA_QUEST) == QUEST_TYPE_PARTY ) {
						if ( tc >= 57 ) {
							cdata(CDATA_IMPRESSION, tc) += rnd(3)
							calcpartyscore
						}
					}
					if ( rnd(2) == 0 ) {
						cdata(CDATA_PERFORM_SCORE, cc) += p
					}
					else {
						if ( rnd(6) == 0 ) {
							cdata(CDATA_PERFORM_SCORE, cc) -= p
						}
					}
				}
				if ( encfindspec(ci, 60) != (-1) ) {
					if ( rnd(15) == 0 ) {
						dmgcon tc, CONDITION_DRUNK, 500
					}
				}
				if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) == 1 | cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) == 1 | cbit(CHARA_BIT_SUMMONED, tc) == 1 ) {
					continue
				}
				if ( rnd(sdata(SKILL_NORMAL_PERFORMER, cc) + 1) + ens > rnd(cdata(CDATA_LEVEL, tc) * 5 + 1) ) {
					if ( rnd(3) == 0 ) {
						if ( synccheck(cc, -1) ) {
							txtef COLOR_SKY_BLUE
							txt lang(name(tc) + "ÇÕäΩê∫Çè„Ç∞ÇΩÅB", name(tc) + " clap" + _s(tc) + "."), lang(name(tc) + "ÇÕñ⁄ÇãPÇ©ÇπÇΩÅB", name(tc) + " listen" + _s(tc) + " to " + name(cc) + your(cc) + " music joyfully."), lang("ÅuÉuÉâÉ{Å[Åv", cnvtalk("Bravo!")), lang("ÅuÇ¢Ç¢ÇºÅIÅv", cnvtalk("Nice song.")), lang(name(tc) + "ÇÕÇ§Ç¡Ç∆ÇËÇµÇΩÅB", cnvtalk("Scut!")), lang(name(tc) + "ÇÕ" + name(cc) + "ÇÃââëtÇñJÇﬂèÃÇ¶ÇΩÅB", name(tc) + " " + is(tc) + " excited!")
						}
						if ( cc == CHARA_PLAYER ) {
							if ( tc >= MAX_CHARA_FOLLOWER ) {
								if ( rnd(performtips * 2 + 4) == 0 ) {
									x = limit(cdata(CDATA_X, cc) - 1 + rnd(3), 0, mdata(MDATA_WIDTH) - 1)
									y = limit(cdata(CDATA_Y, cc) - 1 + rnd(3), 0, mdata(MDATA_HEIGHT) - 1)
									cell_check x, y
									if ( cellaccess == 0 ) {
										continue
									}
									if ( fov_los(cdata(CDATA_X, tc), cdata(CDATA_Y, tc), x, y) == 0 ) {
										continue
									}
									if ( ens > 50 ) {
										flt calcobjlv(cdata(CDATA_PERFORM_SCORE, cc) / 10 + ens / 5), calcfixlv(FIX_QUALITY_GREAT + (rnd(3) == 0))
									}
									if ( ens > 0 & ens <= 50 ) {
										flt calcobjlv(cdata(CDATA_PERFORM_SCORE, cc) / 10 + ens / 5), calcfixlv(FIX_QUALITY_GREAT + (rnd(20) == 0))
									}
									if ( ens == 0 ) {
										if ( encfindspec(ci, 49) != (-1) ) {
											flt calcobjlv(cdata(CDATA_PERFORM_SCORE, cc) / 8), calcfixlv(FIX_QUALITY_GREAT + (rnd(4) == 0))
										}
										else {
											flt calcobjlv(cdata(CDATA_PERFORM_SCORE, cc) / 10), calcfixlv(FIX_QUALITY_GREAT)
										}
									}
									flttypemajor = fsetperform(rnd(length(fsetperform)))
									dbid = 0
									if ( gdata(GDATA_QUEST) == QUEST_TYPE_PARTY ) {
										if ( rnd(150) == 0 ) {
											dbid = ITEM_ID_SAFE
										}
										if ( rnd(200) == 0 ) {
											dbid = ITEM_ID_SMALL_MEDAL
										}
										if ( cdata(CDATA_LEVEL, tc) > 30 ) {
											if ( rnd(1000) == 0 ) {
												dbid = ITEM_ID_NAIL_STRADIVARIUS
											}
										}
										if ( cdata(CDATA_LEVEL, tc) > 15 ) {
											if ( rnd(800) == 0 ) {
												dbid = ITEM_ID_KILL_KILL_PIANO
											}
										}
										if ( cdata(CDATA_LEVEL, tc) > 10 ) {
											if ( rnd(600) == 0 ) {
												dbid = ITEM_ID_ALUD
											}
										}
									}
									else {
										if ( rnd(10) == 0 ) {
											dbid = ITEM_ID_MUSIC_TICKET
										}
										if ( rnd(250) == 0 ) {
											dbid = ITEM_ID_PLATINUM_COIN
										}
									}
									itemcreate -1, dbid, x, y, 1
									if ( stat != 0 ) {
										inv(INV_ITEM_NUM, ci)--
										cell_refresh inv(INV_ITEM_X, ci), inv(INV_ITEM_Y, ci)
										ccbk = cc
										cc = tc
										animeid = ANIMATION_THROW
										aniref = inv(INV_ITEM_PIC, ci), inv(INV_ITEM_COL, ci)
										anix = inv(INV_ITEM_X, ci)
										aniy = inv(INV_ITEM_Y, ci)
										gosub *anime
										cc = ccbk
										inv(INV_ITEM_NUM, ci)++
										cell_refresh inv(INV_ITEM_X, ci), inv(INV_ITEM_Y, ci)
										performtips++
									}
								}
							}
						}
					}
				}
			loop
			if ( gold != 0 ) {
				cdata(CDATA_PERFORM_GOLD, cc) += gold
				if ( synccheck(cc, -1) ) {
					snd SOUNDLIST_GETGOLD1
				}
			}
		}
		return
	}
	repeat 1
		if ( cc != CHARA_PLAYER ) {
			break
		}
		if ( cdata(CDATA_PERFORM_SCORE, cc) < 0 ) {
			txt lang("Ç‹ÇÈÇ≈ë ñ⁄ÇæÅc", "It is a waste of time.")
			break
		}
		if ( cdata(CDATA_PERFORM_SCORE, cc) < 20 ) {
			txt lang("ïsï]ÇæÇ¡ÇΩÅc", "Almost everyone ignores you.")
			break
		}
		if ( cdata(CDATA_PERFORM_SCORE, cc) < 40 ) {
			txt lang("Ç‡Ç¡Ç∆ó˚èKÇµÇ»Ç≠ÇƒÇÕÅc", "You need to practice a lot more.")
			break
		}
		if ( cdata(CDATA_PERFORM_SCORE, cc) == 40 ) {
			txt lang("ââëtÇèIÇ¶ÇΩÅB", "You finish your performance.")
			break
		}
		if ( cdata(CDATA_PERFORM_SCORE, cc) < 60 ) {
			txt lang("Ç¢Ç‹Ç¢ÇøÇæÅB", "Not good.")
			break
		}
		if ( cdata(CDATA_PERFORM_SCORE, cc) < 80 ) {
			txt lang("éËÇ≤ÇΩÇ¶Ç™Ç†Ç¡ÇΩÅB", "People seem to like your performance.")
			break
		}
		if ( cdata(CDATA_PERFORM_SCORE, cc) < 100 ) {
			txt lang("î[ìæÇ≈Ç´ÇÈââëtÇ™Ç≈Ç´ÇΩÅB", "Your performance is successful.")
			break
		}
		if ( cdata(CDATA_PERFORM_SCORE, cc) < 120 ) {
			txt lang("ëÂê∑ãµÇæÅI", "Wonderful!")
			break
		}
		if ( cdata(CDATA_PERFORM_SCORE, cc) < 150 ) {
			txt lang("ëfê∞ÇÁÇµÇ¢ÅI", "Great performance. Everyone cheers you.")
			break
		}
		txt lang("óéjÇ…écÇÈñºââÇæÅI", "A Legendary stage!")
		break
	loop
	if ( cdata(CDATA_PERFORM_SCORE, cc) > 40 ) {
		cdata(CDATA_PERFORM_SCORE, cc) = cdata(CDATA_PERFORM_SCORE, cc) * (100 + ensci / 5) / 100
	}
	if ( cdata(CDATA_PERFORM_GOLD, cc) != 0 ) {

		/********** ORIGINAL - BEGINNING **********

		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕçáåv " + cdata(CDATA_PERFORM_GOLD, cc) + strgold + "ÇÃÇ®Ç–ÇÀÇËÇñ·Ç¡ÇΩÅB", "The audience gives " + name(cc) + " total of " + cdata(CDATA_PERFORM_GOLD, cc) + " gold pieces.")
		}

		 ********** ORIGINAL - ENDING **********/

		/********** ANNA CUSTOM - BEGINNING **********/ // Share Gold For Group Performance.

		if ( synccheck(cc, -1) ) {
			if ( TweakData(TWEAK_GAMEPLAY_SHARED_PERFORMANCE_GOLD, TWEAK_CATEGORY_GAMEPLAY) == 1 & EnsembleStart == 1 ) {
				TCount1 = 1

				repeat MAX_CHARA_FOLLOWER
					if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
						continue
					}
					if ( cnt == CHARA_PLAYER ) {
						continue
					}
					if ( sdata(SKILL_NORMAL_PERFORMER, cnt) > 0 ) {
						TCount1++
					}
				loop
				repeat MAX_CHARA_FOLLOWER
					if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
						continue
					}
					if ( cnt == CHARA_PLAYER ) {
						continue
					}
					if ( sdata(SKILL_NORMAL_PERFORMER, cnt) > 0 ) {
						cdata(CDATA_GOLD, cnt) += cdata(CDATA_PERFORM_GOLD, cc) / TCount1
						cdata(CDATA_GOLD, CHARA_PLAYER) -= cdata(CDATA_PERFORM_GOLD, cc) / TCount1
					}
				loop

				txt lang(name(cc) + "ÇÕçáåv " + cdata(CDATA_PERFORM_GOLD, cc) + strgold + "ÇÃÇ®Ç–ÇÀÇËÇñ·Ç¡ÇΩÅB", "The audience gives your party a total of " + cdata(CDATA_PERFORM_GOLD, cc) + " gold pieces. You keep " + cdata(CDATA_PERFORM_GOLD, cc)/TCount1 + " and share the rest with your allies.")
				EnsembleStart = 0
			}
			else {
				txt lang(name(cc) + "ÇÕçáåv " + cdata(CDATA_PERFORM_GOLD, cc) + strgold + "ÇÃÇ®Ç–ÇÀÇËÇñ·Ç¡ÇΩÅB", "The audience gives " + name(cc) + " total of " + cdata(CDATA_PERFORM_GOLD, cc) + " gold pieces.")
			}
		}

		/********** ANNA CUSTOM - ENDING **********/

	}
	rew1 = limit(cdata(CDATA_PERFORM_SCORE, cc) - sdata(SKILL_NORMAL_PERFORMER, cc) - ens + 20, 1, 800)
	skillexp SKILL_NORMAL_PERFORMER, cc, rew1, 0, 0
	if ( cdata(CDATA_ID, cc) == CREATURE_ID_BARD | cdata(CDATA_ID, cc) == CREATURE_ID_KARAVIKA ) {
		skillexp SKILL_NORMAL_PERFORMER, cc, rew1, 0, 0
	}
	if ( cc == CHARA_PLAYER ) {
		if ( ens > 0 ) {
			repeat MAX_CHARA_TOTAL
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( cc == cnt ) {
					continue
				}
				if ( cc < MAX_CHARA_FOLLOWER ) {
					if ( cnt >= MAX_CHARA_FOLLOWER ) {
						continue
					}
					else {
						if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, tc) ) {
							continue
						}
					}
				}
				tc = cnt
				dx = cdata(CDATA_X, tc)
				dy = cdata(CDATA_Y, tc)
				if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
					continue
				}
				if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
					continue
				}
				rew1 = limit(cdata(CDATA_PERFORM_SCORE, cc) - sdata(SKILL_NORMAL_PERFORMER, tc) - ens + 20, 1, 800)
				if ( rew1 > 0 ) {
					skillexp SKILL_NORMAL_PERFORMER, tc, rew1, 0, 0
				}
			loop
			ens = 0
		}
	}
	rowactend cc
	ensci = 0
	return

*perform_dance
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕóxÇËénÇﬂÇΩÅB", name(cc) + " start" + _s(cc) + " dancing.")
		}
		cdata(CDATA_ROW_ACT, cc) = ACTION_PERFORM_DANCE
		cdata(CDATA_ACTION_PERIOD, cc) = 4
		if ( cc == CHARA_PLAYER ) {
			if ( mdatan(MDATAN_NAME) == lang("ÉpÅ[ÉeÉBÅ[èÍ", "Party Room") ) {
				cdata(CDATA_ACTION_PERIOD, cc) = 41
			}
		}
		cdata(CDATA_PERFORM_SCORE, cc) = 60
		cdata(CDATA_PERFORM_GOLD, cc) = 0
		performtips = 0
		return
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
		if ( cdata(CDATA_ACTION_PERIOD, cc) \ 20 == 0 ) {
			gold = 0
			make_sound cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 5, 1, 1, cc
			repeat MAX_CHARA_TOTAL
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 >= cdata(CDATA_INTEREST_RENEW, cnt) ) {
					cdata(CDATA_INTEREST, cnt) = 100
				}
				if ( synccheck(cc, -1) ) {
					if ( cdata(CDATA_SYNC, cnt) != msync ) {
						continue
					}
				}
				else {
					if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), cdata(CDATA_X, cnt), cdata(CDATA_Y, cnt)) > 3 ) {
						continue
					}
				}
				if ( cdata(CDATA_INTEREST, cnt) <= 0 ) {
					continue
				}
				if ( cdata(CDATA_CONDITION_SLEEP, cnt) > 0 ) {
					continue
				}
				if ( cdata(CDATA_CONDITION_BLIND, cnt) > 0 ) {
					continue
				}
				if ( cdata(CDATA_CONDITION_DIM, cnt) >= 60 ) {
					continue
				}
				if ( cbit(CHARA_BIT_NECRO, cnt) == 1 ) {
					continue
				}
				x = cdata(CDATA_X, cnt)
				y = cdata(CDATA_Y, cnt)
				if ( map(x, y, 1) == 0 ) {
					continue
				}
				tc = cnt
				if ( tc == cc ) {
					continue
				}
				if ( cc == CHARA_PLAYER ) {
					cdata(CDATA_INTEREST, tc) -= rnd(15)
					cdata(CDATA_INTEREST_RENEW, tc) = gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 + 12
				}
				if ( cdata(CDATA_INTEREST, tc) <= 0 ) {
					if ( synccheck(cc, -1) ) {
						txtef COLOR_SKY_BLUE
						txt lang("ÅuñOÇ´ÇΩÅv", cnvtalk("Boring.")), lang("ÅuÇ‡Ç§ÇªÇÃóxÇËÇÕÇ¢Ç¢ÇÊÅv", cnvtalk("I've heard this before.")), lang("ÅuÇ‹ÇæóxÇÈÇÃÇ©ÅcÅv", cnvtalk("You're still dancing?"))
					}
					cdata(CDATA_INTEREST, tc) = 0
					continue
				}
				if ( rnd(3) == 0 ) {
					if ( cdata(CDATA_INTEREST, tc) > 0 ) {
						p = limit(cdata(CDATA_PERFORM_SCORE, cc), 0, cdata(CDATA_LEVEL, tc) * 2)
						if ( tc < MAX_CHARA_FOLLOWER ) {
							p = 1
						}
						if ( cdata(CDATA_ROLE, tc) >= ROLE_SHOP_MIN & cdata(CDATA_ROLE, tc) < ROLE_GUEST_MIN | cdata(CDATA_ROLE, tc) == ROLE_GUEST_MERCHANT ) {
							p /= 100
						}
						if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) == 1 | cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) == 1 | cbit(CHARA_BIT_SUMMONED, tc) == 1 ) {
							p = limit((p + 1) / 5 + 1, 1, 3000)
						}
						if ( p > cdata(CDATA_GOLD, tc) ) {
							p = cdata(CDATA_GOLD, tc)
						}
						cdata(CDATA_GOLD, tc) -= p
						cdata(CDATA_GOLD, cc) += p
						gold += p
						if ( cc == CHARA_PLAYER ) {
							cdata(CDATA_INTEREST, tc) -= 20
							cdata(CDATA_INTEREST_RENEW, tc) = gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 + 12
						}
					}
				}
				if ( cdata(CDATA_LEVEL, tc) * 4 > sdata(SKILL_ATTR_CHA, cc) ) {
					continue
				}
				p = rnd(cdata(CDATA_LEVEL, tc) / 2 + 2) + cdata(CDATA_LEVEL, tc) + 5
				if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) == 1 | cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) == 1 | cbit(CHARA_BIT_SUMMONED, tc) == 1 ) {
					p = limit((p + 1) / 5 + 1, 1, 30)
				}
				if ( rnd(sdata(SKILL_ATTR_CHA, cc) + 1) > rnd(cdata(CDATA_LEVEL, tc) * 4 + 5) ) {
					if ( gdata(GDATA_QUEST) == QUEST_TYPE_PARTY ) {
						if ( tc >= 57 ) {
							if ( cdata(CDATA_IMPRESSION, tc) < 53 ) {
								cdata(CDATA_IMPRESSION, tc) += 2 + rnd(10)
								calcpartyscore
							}
						}
					}
					cdata(CDATA_PERFORM_SCORE, cc) += p
				}
			loop
			if ( gold > 0 ) {
				cdata(CDATA_PERFORM_GOLD, cc) += gold
				if ( synccheck(cc, -1) ) {
					snd SOUNDLIST_GETGOLD1
				}
			}
		}
		return
	}
	if ( cdata(CDATA_PERFORM_GOLD, cc) != 0 ) {

		/********** ORIGINAL - BEGINNING **********

		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕçáåv " + cdata(CDATA_PERFORM_GOLD, cc) + strgold + "ÇÃÇ®Ç–ÇÀÇËÇñ·Ç¡ÇΩÅB", "The audience gives " + name(cc) + " total of " + cdata(CDATA_PERFORM_GOLD, cc) + " gold pieces.")
		}

		 ********** ORIGINAL - ENDING **********/

		/********** ANNA CUSTOM - BEGINNING **********/ // Share Gold For Group Performance.

		if ( synccheck(cc, -1) ) {
			if ( TweakData(TWEAK_GAMEPLAY_SHARED_PERFORMANCE_GOLD, TWEAK_CATEGORY_GAMEPLAY) == 1 & EnsembleStart == 1 ) {
				TCount1 = 1

				repeat MAX_CHARA_FOLLOWER
					if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
						continue
					}
					if ( cnt == CHARA_PLAYER ) {
						continue
					}
					if ( sdata(SKILL_NORMAL_PERFORMER, cnt) > 0 ) {
						TCount1++
					}
				loop
				repeat MAX_CHARA_FOLLOWER
					if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
						continue
					}
					if ( cnt == CHARA_PLAYER ) {
						continue
					}
					if ( sdata(SKILL_NORMAL_PERFORMER, cnt) > 0 ) {
						cdata(CDATA_GOLD, cnt) += cdata(CDATA_PERFORM_GOLD, cc)/TCount1
						cdata(CDATA_GOLD, CHARA_PLAYER) -= cdata(CDATA_PERFORM_GOLD, cc)/TCount1
					}
				loop

				txt lang(name(cc) + "ÇÕçáåv " + cdata(CDATA_PERFORM_GOLD, cc) + strgold + "ÇÃÇ®Ç–ÇÀÇËÇñ·Ç¡ÇΩÅB", "The audience gives your party a total of " + cdata(CDATA_PERFORM_GOLD, cc) + " gold pieces. You keep " + cdata(CDATA_PERFORM_GOLD, cc)/TCount1 + " and share the rest with your allies.")
				EnsembleStart = 0
			}
			else {
				txt lang(name(cc) + "ÇÕçáåv " + cdata(CDATA_PERFORM_GOLD, cc) + strgold + "ÇÃÇ®Ç–ÇÀÇËÇñ·Ç¡ÇΩÅB", "The audience gives " + name(cc) + " total of " + cdata(CDATA_PERFORM_GOLD, cc) + " gold pieces.")
			}
		}

		/********** ANNA CUSTOM - ENDING **********/

	}
	if ( cdata(CDATA_PERFORM_SCORE, cc) != 0 ) {
		rew1 = limit(cdata(CDATA_PERFORM_SCORE, cc) - sdata(SKILL_ATTR_CHA, cc), 10, 100)
		skillexp SKILL_ATTR_CHA, cc, rew1, 0, 0
	}
	snd SOUNDLIST_PRAY1
	animeload ANIMATION_GOLDENSTORM, cc
	rowactend cc
	repeat MAX_CHARA_TOTAL
		if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
			continue
		}
		if ( cdata(CDATA_RELATION, cc) == 10 | cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_RELATION, cnt) == 10 | cnt == CHARA_PLAYER ) {
				continue
			}
		}
		if ( cdata(CDATA_INTEREST, cnt) <= 0 ) {
			continue
		}
		if ( cdata(CDATA_CONDITION_SLEEP, cnt) > 0 ) {
			continue
		}
		if ( cdata(CDATA_CONDITION_BLIND, cnt) > 0 ) {
			continue
		}
		if ( cdata(CDATA_CONDITION_DIM, cnt) >= 60 ) {
			continue
		}
		if ( cbit(CHARA_BIT_NECRO, cnt) == 1 ) {
			continue
		}
		if ( cc == cnt ) {
			continue
		}
		tc = cnt
		dx = cdata(CDATA_X, tc)
		dy = cdata(CDATA_Y, tc)
		if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
			continue
		}
		if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
			continue
		}
		if ( cdata(CDATA_ALLIED, cc) == 0 ) {
			if ( tc == CHARA_PLAYER ) {
				dmgsp CHARA_PLAYER, rnd(10) + 10
			}
		}
		if ( tc != CHARA_PLAYER ) {
			if ( cdata(CDATA_ALLIED, cc) == 0 | cdata(CDATA_ALLIED, tc) == 0 ) {
				dmgspt tc, rnd(10) + 10
			}
		}
		if ( cdata(CDATA_CONDITION_PARALYZE, tc) == (-1) ) {
			txt lang(name(tc) + "ÇÕóéÇøíÖÇ¢ÇƒÇ¢ÇÈÅB", name(tc) + " come" + _s(tc) + " to " + yourself(tc) + " again.")
			continue
		}
		if ( rnd(sdata(SKILL_ATTR_CHA, cc) + cdata(CDATA_IMPRESSION, tc)) >= rnd(sdata(SKILL_ATTR_WIL, tc)) ) {
			snd SOUNDLIST_PRAY1
			cdata(CDATA_EMO_ICON, tc) = 17 + 100 * 3
			txtef COLOR_YELLOW
			txt lang(name(tc) + "ÇÃéãê¸ÇÕìBÇ√ÇØÇæÅI", name(tc) + " " + is(tc) + " crazy about " + name(cc) + "!"), lang(name(tc) + "ÇÕévÇÌÇ∏ê∂ë¡Çà˘Ç›çûÇÒÇæÅB", name(tc) + " " + is(tc) + " fascinated."), lang("ÅuÉrÉÖÅ[ÉeÉBÉtÉHÅ[ÅcÅv", cnvtalk("Beautiful...")), lang("ÅuÅcÇ∑Ç≤Ç¢Åv", cnvtalk("Amazing...")), lang(name(tc) + "ÇÕäÆëSÇ…å©Ç∆ÇÍÇƒÇ¢ÇÈÅB", name(tc) + " " + is(tc) + " deeply appreciative.")
			if ( cdata(CDATA_ALLIED, cc) == 0 ) {
				if ( tc == CHARA_PLAYER ) {
					dmgsp CHARA_PLAYER, rnd(10) + 10
				}
			}
			if ( tc != CHARA_PLAYER ) {
				if ( cdata(CDATA_ALLIED, cc) == 0 | cdata(CDATA_ALLIED, tc) == 0 ) {
					dmgspt tc, rnd(10) + 10
				}
			}
			if ( cdata(CDATA_CONDITION_PARALYZE, tc) == 0 ) {
				cdata(CDATA_CONDITION_PARALYZE, tc) = 1
			}
		}
		else {
			txtef COLOR_RED
			txt lang(name(tc) + "ÇÕïΩëRÇ∆ÇµÇƒÇ¢ÇÈÅI", name(tc) + " is nonchalant!"), lang(name(tc) + "ÇÕê^äÁÇ≈" + name(cc) + "Çå©ÇƒÇ¢ÇÈÅcÅB", name(tc) + " gives " + name(cc) + " a serious look.")
		}
	loop
	return

*perform_preach
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕê‡ñ@ÇénÇﬂÇΩÅB", name(cc) + " start" + _s(cc) + " preaching.")
		}
		cdata(CDATA_ROW_ACT, cc) = ACTION_PERFORM_PREACH
		cdata(CDATA_ACTION_PERIOD, cc) = 61
		cdata(CDATA_PERFORM_GOLD, cc) = 0
		performtips = 0
		return
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
		if ( cdata(CDATA_ACTION_PERIOD, cc) \ 20 == 0 ) {
			gold = 0
			make_sound cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 5, 1, 1, cc
			repeat MAX_CHARA_TOTAL
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 >= cdata(CDATA_INTEREST_RENEW, cnt) ) {
					cdata(CDATA_INTEREST, cnt) = 100
				}
				if ( synccheck(cc, -1) ) {
					if ( cdata(CDATA_SYNC, cnt) != msync ) {
						continue
					}
				}
				else {
					if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), cdata(CDATA_X, cnt), cdata(CDATA_Y, cnt)) > 3 ) {
						continue
					}
				}
				if ( cdata(CDATA_INTEREST, cnt) <= 0 ) {
					continue
				}
				if ( cdata(CDATA_CONDITION_SLEEP, cnt) > 0 ) {
					continue
				}
				if ( cdata(CDATA_CONDITION_DIM, cnt) >= 60 ) {
					continue
				}
				if ( cbit(CHARA_BIT_NECRO, cnt) == 1 ) {
					continue
				}
				x = cdata(CDATA_X, cnt)
				y = cdata(CDATA_Y, cnt)
				if ( map(x, y, 1) == 0 ) {
					continue
				}
				tc = cnt
				if ( tc == cc ) {
					continue
				}
				if ( cdata(CDATA_RELATION, tc) == (-3) ) {
					if ( cdata(CDATA_AI_AGGRO, tc) == 0 ) {
						if ( synccheck(tc, -1) ) {
							txt lang(name(tc) + "ÇÕåÉì{ÇµÇΩÅB", name(tc) + " get" + _s(tc) + " angry.")
						}
					}
					cdata(CDATA_AI_AGGRO, tc) = 30
					continue
				}
				if ( cc == CHARA_PLAYER ) {
					cdata(CDATA_INTEREST, tc) -= rnd(15)
					cdata(CDATA_INTEREST_RENEW, tc) = gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 + 12
				}
				if ( cdata(CDATA_INTEREST, tc) <= 0 ) {
					if ( synccheck(cc, -1) ) {
						txtef COLOR_SKY_BLUE
						txt lang("ÅuñOÇ´ÇΩÅv", cnvtalk("Boring.")), lang("ÅuÇ‡Ç§ÇªÇÃòbÇÕíÆÇ¢ÇΩÇÊÅv", cnvtalk("I've heard this before.")), lang("ÅuÇ‹ÇæíùÇÈÇÃÇ©ÅcÅv", cnvtalk("You're still talking?"))
					}
					cdata(CDATA_INTEREST, tc) = 0
					continue
				}
				if ( sdata(SKILL_NORMAL_FAITH, cc) < sdata(SKILL_NORMAL_FAITH, tc) ) {
					if ( tc >= MAX_CHARA_FOLLOWER ) {
						if ( rnd(6) == 0 | (rnd(3) == 0 & cdata(CDATA_GOD, cc) != cdata(CDATA_GOD, tc)) ) {
							if ( synccheck(cc, -1) ) {
								txtef COLOR_SKY_BLUE
								txt lang("Åuà¯Ç¡çûÇﬂÅIÅv", cnvtalk("Take it back!")), lang("ÅuÇ§ÇÈÇ≥Ç¢ÅIÅv", cnvtalk("Shut up!")), lang("ÅuÇ±ÇÃïsìÕÇ´é“ÅIÅv", cnvtalk("You insolent piece of...!"))
								txt lang("" + name(tc) + "ÇÕêŒÇìäÇ∞ÇΩÅB", name(tc) + " throw" + _s(tc) + " a rock.")
							}
							dmg = rnd(sdata(SKILL_NORMAL_FAITH, tc) + 1) + 1
							if ( cdata(CDATA_ID, tc) == CREATURE_ID_LOYTER_THE_CRIMSON_OF_ZANAN ) {
								dmg = cdata(CDATA_LEVEL, tc) * 2 + rnd(100)
							}
							dmghp cc, dmg, DAMAGE_FROM_PERFORM
							if ( cdata(CDATA_EXIST, cc) == CHAR_STATE_DEAD ) {
								break
							}
							continue
						}
					}
				}
				if ( rnd(3) == 0 ) {
					if ( cdata(CDATA_INTEREST, tc) > 0 ) {
						p = limit(sdata(SKILL_NORMAL_FAITH, cc) * 10, 0, cdata(CDATA_LEVEL, tc) * 8)
						if ( tc < MAX_CHARA_FOLLOWER ) {
							p = 1
						}
						if ( cdata(CDATA_ROLE, tc) >= ROLE_SHOP_MIN & cdata(CDATA_ROLE, tc) < ROLE_GUEST_MIN | cdata(CDATA_ROLE, tc) == ROLE_GUEST_MERCHANT ) {
							p /= 50
						}
						if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) == 1 | cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) == 1 | cbit(CHARA_BIT_SUMMONED, tc) == 1 ) {
							p = limit((p + 1) / 5 + 1, 1, 3000)
						}
						if ( p > cdata(CDATA_GOLD, tc) ) {
							p = cdata(CDATA_GOLD, tc)
						}
						cdata(CDATA_GOLD, tc) -= p
						cdata(CDATA_GOLD, cc) += p
						gold += p
						if ( cc == CHARA_PLAYER ) {
							cdata(CDATA_INTEREST, tc) -= 20
							cdata(CDATA_INTEREST_RENEW, tc) = gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 + 12
						}
					}
				}
				if ( sdata(SKILL_NORMAL_FAITH, cc) < sdata(SKILL_NORMAL_FAITH, tc) ) {
					continue
				}
				if ( rnd(sdata(SKILL_NORMAL_FAITH, cc) + 1) > rnd(sdata(SKILL_NORMAL_FAITH, tc) * 3 + 1) ) {
					if ( rnd(3) == 0 ) {
						if ( synccheck(cc, -1) ) {
							txtef COLOR_SKY_BLUE
							kami = 0
							if ( cdata(CDATA_GOD, cc) == GOD_MANI ) {
								if ( cdata(CDATA_GOD, tc) == GOD_MANI ) {
									if ( cdata(CDATA_ID, tc) == CREATURE_ID_DEUS_EX_MANINA | cdata(CDATA_ID, tc) == CREATURE_ID_MANI ) {
										kami = 100
										txt lang("Åuå©éñÇ»ò_óùìWäJÇ∆åæÇ¶ÇÈÇæÇÎÇ§Åv", cnvtalk("You could say this is a stunning logical development.")), lang("ÅuÇøÇ·ÇÒÇ∆ò^âÊÇµÇƒÇ¢ÇÈÇºÅv", cnvtalk("Oh, I'm recording this one!"))
									}
								}
							}
							if ( cdata(CDATA_GOD, cc) == GOD_LULWY ) {
								if ( cdata(CDATA_GOD, tc) == GOD_LULWY ) {
									if ( cdata(CDATA_ID, tc) == CREATURE_ID_LULWY | cdata(CDATA_ID, tc) == CREATURE_ID_DEVASTATE_LULWY ) {
										kami = 100
										txt lang("ÅuÇ†ÇÁÅAÇÊÇ≠ÇÌÇ©Ç¡ÇƒÇÈÇ∂Ç·Ç»Ç¢Åv", cnvtalk("Oh, you do get it.")), lang("ÅuÇ¢Ç¢éqÇÀÅBãñØÇ…Ç‡Ç¡Ç∆ã≥Ç¶ÇƒÇ†Ç∞Ç»Ç≥Ç¢Åv", cnvtalk("What a good child. Teach the ignorant more."))
									}
								}
							}
							if ( cdata(CDATA_GOD, cc) == GOD_ITZPALT ) {
								if ( cdata(CDATA_GOD, tc) == GOD_ITZPALT ) {
									if ( cdata(CDATA_ID, tc) == CREATURE_ID_ITZPALT | cdata(CDATA_ID, tc) == CREATURE_ID_THE_ELEMENT ) {
										kami = 100
										txt lang("ÅuäFÅAçÇÇÁÇ©Ç…â‰Ç™ñºÇè•Ç¶ÇÊÅv", cnvtalk("You all, chant my name higher!")), lang("ÅuÇ«Ç§Ç‚ÇÁï‚ë´Ç‡ïsóvÇÃÇÊÇ§ÇæÅv", cnvtalk("Complements are seemingly unnecessary."))
									}
								}
							}
							if ( cdata(CDATA_GOD, cc) == GOD_EHEKATL ) {
								if ( cdata(CDATA_GOD, tc) == GOD_EHEKATL ) {
									if ( cdata(CDATA_ID, tc) == CREATURE_ID_EHEKATL | cdata(CDATA_ID, tc) == CREATURE_ID_GOD_INSIDE_EHEKATL ) {
										kami = 100
										txt lang("ÅuÇ¶Ç÷Ç÷Ç•Åv", cnvtalk("E-hehe")), lang("ÅuñJÇﬂÇƒÇ≠ÇÍÇƒÇÈÇÃÅHÇ≠ÇÍÇƒÇÈÇÃÅHÅv", cnvtalk("Are you praising me? Really, really?"))
									}
								}
							}
							if ( cdata(CDATA_GOD, cc) == GOD_OPATOS ) {
								if ( cdata(CDATA_GOD, tc) == GOD_OPATOS ) {
									if ( cdata(CDATA_ID, tc) == CREATURE_ID_BUILDUP_OPATOS | cdata(CDATA_ID, tc) == CREATURE_ID_OPATOS ) {
										kami = 100
										txt lang("ÅuÉtÉnÅ[ÅIÇªÇÃí≤éqÇæÅIÅv", cnvtalk("Muhan! That's the tune!")), lang("ÅuÉtÉnÉnÉnÉnÉnÅ[ÉìÅIÅIÅIÅv", cnvtalk("Mwahahahan!!!"))
									}
								}
							}
							if ( cdata(CDATA_GOD, cc) == GOD_JURE ) {
								if ( cdata(CDATA_GOD, tc) == GOD_JURE ) {
									if ( cdata(CDATA_ID, tc) == CREATURE_ID_JURE | cdata(CDATA_ID, tc) == CREATURE_ID_BLESSED_JURE ) {
										kami = 100
										txt lang("ÅuÇøÇÂÇ¡ÅcÇªÇÒÇ»Ç±Ç∆Ç‹Ç≈åæÇÌÇ»Ç≠ÇƒÇ¢Ç¢ÇÃÅIÅv", cnvtalk("Tsk... Don't tell me things like that!")), lang("ÅuÇ»ÅAÇ»Ç…ÇÊÅcípÇ∏Ç©ÇµÇ¢Ç∂Ç·Ç»Ç¢ÅcÅv", cnvtalk("W-What? I'm not embarrassed..."))
									}
								}
							}
							if ( cdata(CDATA_GOD, cc) == GOD_KUMIROMI ) {
								if ( cdata(CDATA_GOD, tc) == GOD_KUMIROMI ) {
									if ( cdata(CDATA_ID, tc) == CREATURE_ID_KUMIROMI | cdata(CDATA_ID, tc) == CREATURE_ID_INSANE_KUMIROMI ) {
										kami = 100
										txt lang("ÅuñlÇÃÇ±Ç∆ÅcÇ‡Ç¡Ç∆ã≥Ç¶ÇƒÇ†Ç∞ÇÈÇÀÅcÅv", cnvtalk("I will... teach you more about me...")), lang("ÅuÇ”Ç”ÅcÇ§ÇÍÇµÇ¢Ç»ÇüÅcÅv", cnvtalk("Fufu... I'm so happy..."))
									}
								}
							}
							if ( cdata(CDATA_GOD, cc) == GOD_YACATECT ) {
								if ( cdata(CDATA_GOD, tc) == GOD_YACATECT ) {
									if ( cdata(CDATA_ID, tc) == CREATURE_ID_YACATECT | cdata(CDATA_ID, tc) == CREATURE_ID_HYPER_YACATECT ) {
										kami = 100
										txt lang("ÅuÇÒÅcè∆ÇÍÇÈÇ‚ÇÒÇ©ÇüÅcÅv", cnvtalk("Hmm... Am I embarrassed...?")), lang("ÅuÉnÉCÉnÉCÅAÇ®ïzé{ÇÕÇ±ÇøÇÁÇ‹Ç≈Å[ÅIÅv", cnvtalk("Yes, yes. Donations right this way!"))
									}
								}
							}
							p = sdata(SKILL_NORMAL_FAITH, tc) / 2 + 1
							if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) == 1 | cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) == 1 | cbit(CHARA_BIT_SUMMONED, tc) == 1 ) {
								p = limit((p + 1) / 5 + 1, 1, 30)
							}
							if ( gdata(GDATA_QUEST) == QUEST_TYPE_PARTY ) {
								if ( tc >= 57 ) {
									if ( cdata(CDATA_IMPRESSION, tc) < 53 ) {
										cdata(CDATA_IMPRESSION, tc) += rnd(2)
										calcpartyscore
									}
								}
							}
							cdata(CDATA_PERFORM_SCORE, cc) += p
							if ( kami == 0 ) {
								txt lang(name(tc) + "ÇÕäΩê∫Çè„Ç∞ÇΩÅB", name(tc) + " lets out a cheer."), lang("ÅuÇ»ÇÈÇŸÇ«Åv", cnvtalk("I see.")), lang("Åuëfê∞ÇÁÇµÇ¢ÅIÅv", cnvtalk("That's amazing!")), lang(name(tc) + "ÇÕÇµÇ´ÇËÇ…ËıÇ¢ÇƒÇ¢ÇÈÅB", name(tc) + " nods in agreement.")
							}
							if ( tc != CHARA_PLAYER ) {
								inv_find ITEM_ID_NINE_GOD_SIGN, tc
								if ( stat == (-1) ) {
									if ( kami == 0 ) {
										if ( cdata(CDATA_GOD, tc) != cdata(CDATA_GOD, CHARA_PLAYER) ) {
											cdata(CDATA_GOD, tc) = cdata(CDATA_GOD, CHARA_PLAYER)
											txtef COLOR_GREEN
											txt lang("" + name(tc) + "ÇÕä¥åÉÇµÇƒ" + godname(cdata(CDATA_GOD, tc)) + "Ç…â¸è@ÇµÇΩÅI", name(tc) + " converted to " + godname(cdata(CDATA_GOD, tc)) + " due to your inspiring words!")
											if ( gdata(GDATA_QUEST) == QUEST_TYPE_PARTY ) {
												if ( tc >= 57 ) {
													if ( cdata(CDATA_IMPRESSION, tc) < 53 ) {
														cdata(CDATA_IMPRESSION, tc) += 2
														calcpartyscore
													}
												}
											}
											p = sdata(SKILL_NORMAL_FAITH, tc) * 2
											if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) == 1 | cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) == 1 | cbit(CHARA_BIT_SUMMONED, tc) == 1 ) {
												p = limit((p + 1) / 5 + 1, 1, 30)
											}
											cdata(CDATA_PERFORM_SCORE, cc) += p
											gdata(GDATA_FLAG_PEOPLE_CONVERTED)++
										}
									}
								}
							}
						}
					}
				}
			loop
			if ( gold > 0 ) {
				cdata(CDATA_PERFORM_GOLD, cc) += gold
				if ( synccheck(cc, -1) ) {
					snd SOUNDLIST_GETGOLD1
				}
			}
		}
		return
	}
	if ( cdata(CDATA_PERFORM_GOLD, cc) != 0 ) {
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕçáåv " + cdata(CDATA_PERFORM_GOLD, cc) + strgold + "ÇÃÇ®ïzé{Çñ·Ç¡ÇΩÅB", "The audience gives " + name(cc) + " total of " + cdata(CDATA_PERFORM_GOLD, cc) + " gold pieces.")
		}
	}
	rowactend cc
	rew1 = limit(cdata(CDATA_PERFORM_SCORE, cc) / 2 + 20, 20, 500)
	skillexp SKILL_NORMAL_FAITH, cc, rew1, 0, 0
	if ( cc == CHARA_PLAYER ) {
		repeat MAX_CHARA_FOLLOWER - 1, 1
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			rew1 = limit(cdata(CDATA_PERFORM_SCORE, cc) / 2 + 20, 20, 500)
			if ( rew1 > 0 ) {
				skillexp SKILL_NORMAL_FAITH, tc, rew1, 0, 0
			}
		loop
	}
	return

*skill_charge
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_CHARGE
		cdata(CDATA_ACTION_PERIOD, cc) = 10
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕóÕÇÇΩÇﬂÇÕÇ∂ÇﬂÇΩÅB", name(cc) + " began to accumulate power.")
		}
		customtalk cc, DBMODE_FLAVOR_CHARGE_S
		gosub *convert_word
		if ( cc < MAX_CHARA_FOLLOWER ) {
			charp = 0
			repeat MAX_CHARA_FOLLOWER - 1, 1
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( cdata(CDATA_CONDITION_SLEEP, cnt) != 0 ) {
					continue
				}
				if ( cdata(CDATA_CONDITION_DIM, cnt) >= 60 ) {
					continue
				}
				if ( dist(cdata(CDATA_X, cnt), cdata(CDATA_Y, cnt), cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER)) > 5 ) {
					continue
				}
				if ( rnd(3) == 0 ) {
					continue
				}
				charp++
				tc = cnt
				customtalk tc, DBMODE_FLAVOR_CHARGE
				gosub *convert_word
				if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
					if ( jp ) {
						txt "ÅuÇ±Ç±ÇÕîCÇπÇƒÅIÅv", "Åuéûä‘ÇÕâ“ÇÆÇÊÅIÅv", "ÅuÉ`ÉÉÅ[ÉWÇÃé◊ñÇÇ»Ç«Ç≥ÇπÇÈÇ‡ÇÃÇ©Åv", "Åuã}Ç¢Ç≈ÇÀÅHÅv"
					}
				}
			loop
			if ( synccheck(cc, -1) ) {
				if ( charp != 0 ) {
					if ( cfg_animewait != 0 ) {
						await 100
					}
				}
			}
			charp = 0
		}
		return
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
		if ( cdata(CDATA_ACTION_PERIOD, cc) \ 5 == 0 ) {
			if ( synccheck(cc, -1) ) {
				txt lang(name(cc) + "ÇÕóÕÇÇΩÇﬂÇƒÇ¢ÇÈÅB", name(cc) + " is charging power.")
			}
		}
		return
	}
	txtef COLOR_RED
	txt lang("*ÉtÉãÉ`ÉÉÅ[ÉWÅIÅI*", "*Full Charge!!*")
	if ( synccheck(cc, -1) ) {
		animeid = ANIMATION_GENE
		anic = cc
		gosub *anime
	}
	if ( cc == CHARA_PLAYER ) {
		addbuff cc, BUFF_CHARGE, 400, 1
	}
	else {
		addbuff cc, BUFF_CHARGE, 400, 3
	}
	rowactend cc
	return

*skill_persuasion
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_PERSUASION
		cdata(CDATA_ACTION_PERIOD, cc) = 5
		customtalk cc, DBMODE_FLAVOR_BTALK
		gosub *convert_word
		if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
			txt lang(name(cc) + "ÇÕê‡ìæÇénÇﬂÇΩÅB", name(cc) + " started to persuade.")
		}
		return
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 & gdata(GDATA_TIME_STOP_TIME) == 0 ) {
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION_ORG, cnt) == cdata(CDATA_RELATION_ORG, cc) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG, SKILL_SPACT_CHEER) \ 1000 + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( cdata(CDATA_CONDITION_DIM, tc) > 60 ) {
				cdata(CDATA_CONDITION_DIM, tc) = 59
			}
			cdata(CDATA_CONDITION_SLEEP, tc) = 0
			if ( rnd(sdata(SKILL_ATTR_WIL, cc) + sdata(SKILL_NORMAL_NEGOTIATION, cc)) > rnd(sdata(SKILL_ATTR_WIL, tc)) ) {
				cdata(CDATA_EMO_ICON, tc) = 20 + 100
				cdata(CDATA_POWER_GAUGE, tc) -= 10
				if ( cdata(CDATA_POWER_GAUGE, tc) < 0 ) {
					cdata(CDATA_POWER_GAUGE, tc) = 0
				}
				if ( rnd(20) == 0 ) {
					txt lang(name(tc) + "ÇÕìÆóhÇµÇΩÅB", name(tc) + " is upset.")
					if ( cdata(CDATA_CONDITION_CONFUSE, tc) == 0 ) {
						cdata(CDATA_CONDITION_CONFUSE, tc) = 1
					}
				}
				if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 & tc != CHARA_PLAYER ) {
					if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
						skillexp SKILL_ATTR_WIL, cc, 20
						skillexp SKILL_NORMAL_NEGOTIATION, cc, 20
					}
				}
				talkfix = 1
				if ( cdata(CDATA_SP, tc) < cdata(CDATA_MAX_SP, tc) / 2 ) {
					talkfix = 2
				}
				if ( cdata(CDATA_SP, tc) < cdata(CDATA_MAX_SP, tc) / 3 ) {
					talkfix = 3
				}
				if ( cdata(CDATA_SP, tc) < cdata(CDATA_MAX_SP, tc) / 4 ) {
					talkfix = 4
				}
				if ( cdata(CDATA_SP, tc) < cdata(CDATA_MAX_SP, tc) / 5 ) {
					talkfix = 5
				}
				dmgtalk = (sdata(SKILL_ATTR_WIL, cc) + sdata(SKILL_NORMAL_NEGOTIATION, cc)) * 5 * talkfix / sdata(SKILL_ATTR_WIL, tc) + 1
				if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE ) {
					dmgtalk = dmgtalk / 5 + 1
				}
				dmgsptalk tc, dmgtalk
				if ( cdata(CDATA_SP, tc) <= (-100) & cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
					skillexp SKILL_NORMAL_NEGOTIATION, cc, limit(cdata(CDATA_LEVEL, tc) * cdata(CDATA_LEVEL, tc) / 10, 10, 1000)
					cdata(CDATA_HP, tc) = -1
					if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE | cdata(CDATA_ROLE, tc) != ROLE_NONE ) {
						dmghp tc, 10, DAMAGE_FROM_PERSUASION_HIGH
						if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
							txtef COLOR_GREEN
							txt lang(name(tc) + "ÇÕïsìGÇ…èŒÇ¢ÅAìÇìÀÇ…é©äQÇµÇΩÅB", name(tc) + " laughed fearlessly and abruptly committed suicide.")
						}
						check_talk cc, tc
					}
					else {
						dmghp tc, 10, DAMAGE_FROM_PERSUASION_LOW
						if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
							txtef COLOR_GREEN
							txt lang(name(tc) + "ÇÕêÌÇ¢Ç…îÊÇÍÅAê√Ç©Ç…ãéÇ¡ÇƒÇ¢Ç¡ÇΩÅB", name(tc) + " got tired of fighting and quietly walked away.")
						}
						snd SOUNDLIST_EXITMAP1
						check_talk cc, tc
					}
				}
			}
			else {
				cdata(CDATA_EMO_ICON, tc) = 21 + 100
			}
		loop
		return
	}
	txt lang(name(cc) + "ÇÕàÍëßÇ¬Ç¢ÇΩÅB", name(cc) + " took a little break.")
	rowactend cc
	return

*skill_peculiar_joke
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_PECULIAR_JOKE
		cdata(CDATA_ACTION_PERIOD, cc) = 5
		customtalk cc, DBMODE_FLAVOR_BTALK
		gosub *convert_word
		if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
			txt lang(name(cc) + "ÇÕëSóÕÇ≈èŒÇÌÇπÇ…Ç©Ç©Ç¡ÇΩÅB", name(cc) + " started telling a peculiar joke.")
		}
		return
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 & gdata(GDATA_TIME_STOP_TIME) == 0 ) {
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION_ORG, cnt) == cdata(CDATA_RELATION_ORG, cc) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG, SKILL_SPACT_CHEER) \ 1000 + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( cdata(CDATA_CONDITION_DIM, tc) > 60 ) {
				cdata(CDATA_CONDITION_DIM, tc) = 59
			}
			cdata(CDATA_CONDITION_SLEEP, tc) = 0
			if ( rnd(sdata(SKILL_ATTR_PER, cc) + sdata(SKILL_NORMAL_NEGOTIATION, cc)) > rnd(sdata(SKILL_ATTR_PER, tc)) ) {
				cdata(CDATA_EMO_ICON, tc) = 20 + 100
				cdata(CDATA_POWER_GAUGE, tc) -= 10
				if ( cdata(CDATA_POWER_GAUGE, tc) < 0 ) {
					cdata(CDATA_POWER_GAUGE, tc) = 0
				}
				if ( rnd(50) == 0 ) {
					txt lang(name(tc) + "ÇÕï†ãÿïˆâÛÇµÇΩÅB", name(tc) + " couldn't help laughing out loud.")
					if ( cdata(CDATA_CONDITION_PARALYZE, tc) == 0 ) {
						cdata(CDATA_CONDITION_PARALYZE, tc) = 1
					}
				}
				if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 & tc != CHARA_PLAYER ) {
					if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
						skillexp SKILL_ATTR_PER, cc, 20
						skillexp SKILL_NORMAL_NEGOTIATION, cc, 20
					}
				}
				talkfix = 1
				if ( cdata(CDATA_POWER_GAUGE, tc) < 50 ) {
					talkfix = 2
				}
				dmgtalk = (sdata(SKILL_ATTR_PER, cc) + sdata(SKILL_NORMAL_NEGOTIATION, cc)) * 5 * talkfix / sdata(SKILL_ATTR_PER, tc) + 1
				if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE ) {
					dmgtalk = dmgtalk / 5 + 1
				}
				dmgsptalk tc, dmgtalk
				if ( cdata(CDATA_SP, tc) <= (-100) & cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
					skillexp SKILL_NORMAL_NEGOTIATION, cc, limit(cdata(CDATA_LEVEL, tc) * cdata(CDATA_LEVEL, tc) / 10, 10, 1000)
					cdata(CDATA_HP, tc) = -1
					if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE | cdata(CDATA_ROLE, tc) != ROLE_NONE ) {
						dmghp tc, 10, DAMAGE_FROM_PERSUASION_HIGH
						if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
							txtef COLOR_GREEN
							txt lang(name(tc) + "ÇÕïsìGÇ…èŒÇ¢ÅAìÇìÀÇ…é©äQÇµÇΩÅB", name(tc) + " laughed fearlessly and abruptly committed suicide.")
						}
						check_talk cc, tc
					}
					else {
						dmghp tc, 10, DAMAGE_FROM_PERSUASION_LOW
						if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
							txtef COLOR_GREEN
							txt lang(name(tc) + "ÇÕè„ã@åôÇ≈ãéÇ¡ÇƒÇ¢Ç¡ÇΩÅB", name(tc) + " walks away in a good mood.")
						}
						snd SOUNDLIST_EXITMAP1
						check_talk cc, tc
					}
				}
			}
			else {
				cdata(CDATA_EMO_ICON, tc) = 21 + 100
			}
		loop
		return
	}
	txt lang(name(cc) + "ÇÕàÍëßÇ¬Ç¢ÇΩÅB", name(cc) + " took a little break.")
	rowactend cc
	return

*skill_blended_lie
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_BLENDED_LIE
		cdata(CDATA_ACTION_PERIOD, cc) = 5
		customtalk cc, DBMODE_FLAVOR_BTALK
		gosub *convert_word
		if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
			txt lang(name(cc) + "ÇÕâRÇåÇ¶ÇƒòbÇµénÇﬂÇΩÅB", name(cc) + " starts talking with mixed lies.")
		}
		return
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 & gdata(GDATA_TIME_STOP_TIME) == 0 ) {
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION_ORG, cnt) == cdata(CDATA_RELATION_ORG, cc) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG, SKILL_SPACT_CHEER) \ 1000 + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( cdata(CDATA_CONDITION_DIM, tc) > 60 ) {
				cdata(CDATA_CONDITION_DIM, tc) = 59
			}
			cdata(CDATA_CONDITION_SLEEP, tc) = 0
			if ( rnd(sdata(SKILL_ATTR_DEX, cc) + sdata(SKILL_NORMAL_NEGOTIATION, cc)) > rnd(sdata(SKILL_ATTR_DEX, tc)) ) {
				cdata(CDATA_EMO_ICON, tc) = 20 + 100
				cdata(CDATA_POWER_GAUGE, tc) -= 10
				if ( cdata(CDATA_POWER_GAUGE, tc) < 0 ) {
					cdata(CDATA_POWER_GAUGE, tc) = 0
				}
				if ( rnd(20) == 0 ) {
					txt lang(name(tc) + "ÇÕâRÇêMÇ∂Çƒïsà¿Ç…Ç»Ç¡ÇΩÅB", name(tc) + " believed the lie and became uneasy.")
					if ( cdata(CDATA_CONDITION_ATROPHY, tc) == 0 ) {
						cdata(CDATA_CONDITION_ATROPHY, tc) = 1
					}
				}
				if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 & tc != CHARA_PLAYER ) {
					if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
						skillexp SKILL_ATTR_DEX, cc, 20
						skillexp SKILL_NORMAL_NEGOTIATION, cc, 20
					}
				}
				talkfix = 1
				if ( cdata(CDATA_MP, tc) < cdata(CDATA_MAX_MP, tc) * 9 / 10 ) {
					talkfix = 2
				}
				if ( cdata(CDATA_MP, tc) < cdata(CDATA_MAX_MP, tc) * 8 / 10 ) {
					talkfix = 3
				}
				if ( cdata(CDATA_MP, tc) < cdata(CDATA_MAX_MP, tc) * 7 / 10 ) {
					talkfix = 4
				}
				if ( cdata(CDATA_MP, tc) < cdata(CDATA_MAX_MP, tc) * 6 / 10 ) {
					talkfix = 5
				}
				if ( cdata(CDATA_MP, tc) < cdata(CDATA_MAX_MP, tc) * 5 / 10 ) {
					talkfix = 6
				}
				if ( cdata(CDATA_MP, tc) < cdata(CDATA_MAX_MP, tc) * 4 / 10 ) {
					talkfix = 7
				}
				if ( cdata(CDATA_MP, tc) < cdata(CDATA_MAX_MP, tc) * 3 / 10 ) {
					talkfix = 8
				}
				if ( cdata(CDATA_MP, tc) < cdata(CDATA_MAX_MP, tc) * 2 / 10 ) {
					talkfix = 9
				}
				if ( cdata(CDATA_MP, tc) < cdata(CDATA_MAX_MP, tc) * 1 / 10 ) {
					talkfix = 10
				}
				dmgtalk = (sdata(SKILL_ATTR_DEX, cc) + sdata(SKILL_NORMAL_NEGOTIATION, cc)) * 5 * talkfix / sdata(SKILL_ATTR_DEX, tc) + 1
				if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE ) {
					dmgtalk = dmgtalk / 5 + 1
				}
				dmgsptalk tc, dmgtalk
				if ( cdata(CDATA_SP, tc) <= (-100) & cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
					skillexp SKILL_NORMAL_NEGOTIATION, cc, limit(cdata(CDATA_LEVEL, tc) * cdata(CDATA_LEVEL, tc) / 10, 10, 1000)
					cdata(CDATA_HP, tc) = -1
					if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE | cdata(CDATA_ROLE, tc) != ROLE_NONE ) {
						dmghp tc, 10, DAMAGE_FROM_PERSUASION_HIGH
						if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
							txtef COLOR_GREEN
							txt lang(name(tc) + "ÇÕïsìGÇ…èŒÇ¢ÅAìÇìÀÇ…é©äQÇµÇΩÅB", name(tc) + " laughed fearlessly and abruptly committed suicide.")
						}
						check_talk cc, tc
					}
					else {
						dmghp tc, 10, DAMAGE_FROM_PERSUASION_LOW
						if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
							txtef COLOR_GREEN
							txt lang(name(tc) + "ÇÕÇ∑Ç¡Ç©ÇËÈxÇ≥ÇÍÇƒãéÇ¡ÇƒÇ¢Ç¡ÇΩÅB", name(tc) + " was completely fooled and left in a hurry.")
						}
						snd SOUNDLIST_EXITMAP1
						check_talk cc, tc
					}
				}
			}
			else {
				cdata(CDATA_EMO_ICON, tc) = 21 + 100
			}
		loop
		return
	}
	txt lang(name(cc) + "ÇÕàÍëßÇ¬Ç¢ÇΩÅB", name(cc) + " took a little break.")
	rowactend cc
	return

*skill_intimidation
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_INTIMIDATION
		cdata(CDATA_ACTION_PERIOD, cc) = 5
		customtalk cc, DBMODE_FLAVOR_BTALK
		gosub *convert_word
		if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
			txt lang(name(cc) + "ÇÕã∫îóÇénÇﬂÇΩÅB", name(cc) + " started to intimidate.")
		}
		return
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 & gdata(GDATA_TIME_STOP_TIME) == 0 ) {
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION_ORG, cnt) == cdata(CDATA_RELATION_ORG, cc) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG, SKILL_SPACT_CHEER) \ 1000 + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( cdata(CDATA_CONDITION_DIM, tc) > 60 ) {
				cdata(CDATA_CONDITION_DIM, tc) = 59
			}
			cdata(CDATA_CONDITION_SLEEP, tc) = 0
			if ( rnd(sdata(SKILL_ATTR_STR, cc) + sdata(SKILL_NORMAL_NEGOTIATION, cc)) > rnd(sdata(SKILL_ATTR_STR, tc)) ) {
				cdata(CDATA_EMO_ICON, tc) = 20 + 100
				cdata(CDATA_POWER_GAUGE, tc) -= 10
				if ( cdata(CDATA_POWER_GAUGE, tc) < 0 ) {
					cdata(CDATA_POWER_GAUGE, tc) = 0
				}
				if ( rnd(50) == 0 ) {
					txt lang(name(tc) + "ÇÕã∞ï|ÇµÇΩÅB", name(tc) + " was frightened.")
					if ( cdata(CDATA_CONDITION_FEAR, tc) == 0 ) {
						cdata(CDATA_CONDITION_FEAR, tc) = 1
					}
				}
				if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 & tc != CHARA_PLAYER ) {
					if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
						skillexp SKILL_ATTR_STR, cc, 20
						skillexp SKILL_NORMAL_NEGOTIATION, cc, 20
					}
				}
				talkfix = 1
				if ( cdata(CDATA_HP, tc) < cdata(CDATA_MAX_HP, tc) * 9 / 10 ) {
					talkfix = 2
				}
				if ( cdata(CDATA_HP, tc) < cdata(CDATA_MAX_HP, tc) * 8 / 10 ) {
					talkfix = 3
				}
				if ( cdata(CDATA_HP, tc) < cdata(CDATA_MAX_HP, tc) * 7 / 10 ) {
					talkfix = 4
				}
				if ( cdata(CDATA_HP, tc) < cdata(CDATA_MAX_HP, tc) * 6 / 10 ) {
					talkfix = 5
				}
				if ( cdata(CDATA_HP, tc) < cdata(CDATA_MAX_HP, tc) * 5 / 10 ) {
					talkfix = 6
				}
				if ( cdata(CDATA_HP, tc) < cdata(CDATA_MAX_HP, tc) * 4 / 10 ) {
					talkfix = 7
				}
				if ( cdata(CDATA_HP, tc) < cdata(CDATA_MAX_HP, tc) * 3 / 10 ) {
					talkfix = 8
				}
				if ( cdata(CDATA_HP, tc) < cdata(CDATA_MAX_HP, tc) * 2 / 10 ) {
					talkfix = 9
				}
				if ( cdata(CDATA_HP, tc) < cdata(CDATA_MAX_HP, tc) * 1 / 10 ) {
					talkfix = 10
				}
				dmgtalk = (sdata(SKILL_ATTR_STR, cc) + sdata(SKILL_NORMAL_NEGOTIATION, cc)) * 5 * talkfix / sdata(SKILL_ATTR_STR, tc) + 1
				if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE ) {
					dmgtalk = dmgtalk / 5 + 1
				}
				dmgsptalk tc, dmgtalk
				if ( cdata(CDATA_SP, tc) <= (-100) & cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
					skillexp SKILL_NORMAL_NEGOTIATION, cc, limit(cdata(CDATA_LEVEL, tc) * cdata(CDATA_LEVEL, tc) / 10, 10, 1000)
					cdata(CDATA_HP, tc) = -1
					if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE | cdata(CDATA_ROLE, tc) != ROLE_NONE ) {
						dmghp tc, 10, DAMAGE_FROM_PERSUASION_HIGH
						if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
							txtef COLOR_GREEN
							txt lang(name(tc) + "ÇÕïsìGÇ…èŒÇ¢ÅAìÇìÀÇ…é©äQÇµÇΩÅB", name(tc) + " laughed fearlessly and abruptly committed suicide.")
						}
						check_talk cc, tc
					}
					else {
						dmghp tc, 10, DAMAGE_FROM_PERSUASION_LOW
						if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
							txtef COLOR_GREEN
							txt lang(name(tc) + "ÇÕã∞ï|ÇÃÇ†Ç‹ÇËÅAçQÇƒÇƒì¶Ç∞ãéÇ¡ÇΩÅB", name(tc) + " got scared and ran away quickly.")
						}
						snd SOUNDLIST_EXITMAP1
						check_talk cc, tc
					}
				}
			}
			else {
				cdata(CDATA_EMO_ICON, tc) = 21 + 100
			}
		loop
		return
	}
	txt lang(name(cc) + "ÇÕàÍëßÇ¬Ç¢ÇΩÅB", name(cc) + " took a little break.")
	rowactend cc
	return

*skill_mysterious_song
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_MYSTERIOUS_SONG
		cdata(CDATA_ACTION_PERIOD, cc) = 5
		customtalk cc, DBMODE_FLAVOR_BTALK
		gosub *convert_word
		if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
			txt lang(name(cc) + "ÇÕñÇóÕÇçûÇﬂÇƒâÃÇ¢énÇﬂÇΩÅB", name(cc) + " sing" + _s(cc) + " a magically charged song.")
		}
		return
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 & gdata(GDATA_TIME_STOP_TIME) == 0 ) {
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION_ORG, cnt) == cdata(CDATA_RELATION_ORG, cc) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG, SKILL_SPACT_CHEER) \ 1000 + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( cdata(CDATA_CONDITION_DIM, tc) > 60 ) {
				cdata(CDATA_CONDITION_DIM, tc) = 59
			}
			cdata(CDATA_CONDITION_SLEEP, tc) = 0
			if ( rnd(sdata(SKILL_ATTR_MAG, cc) + sdata(SKILL_NORMAL_NEGOTIATION, cc)) > rnd(sdata(SKILL_ATTR_MAG, tc)) ) {
				cdata(CDATA_EMO_ICON, tc) = 20 + 100
				cdata(CDATA_POWER_GAUGE, tc) -= 10
				if ( cdata(CDATA_POWER_GAUGE, tc) < 0 ) {
					cdata(CDATA_POWER_GAUGE, tc) = 0
				}
				if ( rnd(50) == 0 ) {
					txt lang(name(tc) + "ÇÕä¥åÉÇµÇΩÅB", name(tc) + " was deeply impressed.")
					if ( cdata(CDATA_CONDITION_PARALYZE, tc) == 0 ) {
						cdata(CDATA_CONDITION_PARALYZE, tc) = 1
					}
				}
				if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 & tc != CHARA_PLAYER ) {
					if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
						skillexp SKILL_ATTR_MAG, cc, 20
						skillexp SKILL_NORMAL_NEGOTIATION, cc, 20
					}
				}
				talkfix = 1
				if ( cdata(CDATA_POWER_GAUGE, tc) > 50 ) {
					talkfix = 2
				}
				if ( cdata(CDATA_POWER_GAUGE, tc) > 100 ) {
					talkfix = 3
				}
				if ( cdata(CDATA_POWER_GAUGE, tc) > 150 ) {
					talkfix = 4
				}
				dmgtalk = (sdata(SKILL_ATTR_MAG, cc) + sdata(SKILL_NORMAL_NEGOTIATION, cc)) * 5 * talkfix / sdata(SKILL_ATTR_MAG, tc) + 1
				if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE ) {
					dmgtalk = dmgtalk / 5 + 1
				}
				dmgsptalk tc, dmgtalk
				if ( cdata(CDATA_SP, tc) <= (-100) & cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
					cdata(CDATA_HP, tc) = -1
					if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE | cdata(CDATA_ROLE, tc) != ROLE_NONE ) {
						dmghp tc, 10, DAMAGE_FROM_PERSUASION_HIGH
						if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
							txtef COLOR_GREEN
							txt lang(name(tc) + "ÇÕïsìGÇ…èŒÇ¢ÅAìÇìÀÇ…é©äQÇµÇΩÅB", name(tc) + " laughed fearlessly and abruptly committed suicide.")
						}
						check_talk cc, tc
					}
					else {
						dmghp tc, 10, DAMAGE_FROM_PERSUASION_LOW
						if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
							txtef COLOR_GREEN
							txt lang(name(tc) + "ÇÕêÌÇ¢Ç…îÊÇÍÅAê√Ç©Ç…ãéÇ¡ÇƒÇ¢Ç¡ÇΩÅB", name(tc) + " got tired of fighting and quietly walked away.")
						}
						snd SOUNDLIST_EXITMAP1
						check_talk cc, tc
					}
				}
			}
			else {
				cdata(CDATA_EMO_ICON, tc) = 21 + 100
			}
		loop
		return
	}
	txt lang(name(cc) + "ÇÕàÍëßÇ¬Ç¢ÇΩÅB", name(cc) + " took a little break.")
	rowactend cc
	return

*eat_meal
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_MEAL
		cdata(CDATA_ACTION_PERIOD, cc) = 20
		cdata(CDATA_EMO_ICON, cc) = 6 + 100 * 3
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕêHéñÇÇÕÇ∂ÇﬂÇΩÅB", name(cc) + " started having a meal.")
		}
		snd SOUNDLIST_EAT1
		return
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
		cdata(CDATA_EMO_ICON, cc) = 16 + 100
		if ( cdata(CDATA_ACTION_PERIOD, cc) \ 5 == 0 ) {
			if ( synccheck(cc, -1) ) {
				txt lang("*ÇﬁÇµÇ·ÇﬁÇµÇ·*", "*Munch munch*")
			}
		}
		return
	}
	txt lang(name(cc) + "ÇÕêHéñÇèIÇ¶ÇΩÅB", name(cc) + " finished a meal.")
	cdata(CDATA_HUNGER, cc) = 13000
	modgrowth cc, SKILL_ATTR_STR, gdata(GDATA_FLAG_PICNIC_MULTIPLIER) * 3 + 5
	modgrowth cc, SKILL_ATTR_CON, gdata(GDATA_FLAG_PICNIC_MULTIPLIER) * 3 + 5
	modgrowth cc, SKILL_ATTR_DEX, gdata(GDATA_FLAG_PICNIC_MULTIPLIER) * 3 + 5
	modgrowth cc, SKILL_ATTR_PER, gdata(GDATA_FLAG_PICNIC_MULTIPLIER) * 3 + 5
	modgrowth cc, SKILL_ATTR_LER, gdata(GDATA_FLAG_PICNIC_MULTIPLIER) * 3 + 5
	modgrowth cc, SKILL_ATTR_WIL, gdata(GDATA_FLAG_PICNIC_MULTIPLIER) * 3 + 5
	modgrowth cc, SKILL_ATTR_MAG, gdata(GDATA_FLAG_PICNIC_MULTIPLIER) * 3 + 5
	modgrowth cc, SKILL_ATTR_CHA, gdata(GDATA_FLAG_PICNIC_MULTIPLIER) * 3 + 5
	modgrowth cc, SKILL_ATTR_SPD, gdata(GDATA_FLAG_PICNIC_MULTIPLIER) * 3 + 5
	modgrowth cc, SKILL_ATTR_LUC, gdata(GDATA_FLAG_PICNIC_MULTIPLIER) * 3 + 5
	chara_anorexia cc
	rowactend cc
	return

*eat_meal_xmas_cake
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_XMAS_CAKE
		cdata(CDATA_ACTION_PERIOD, cc) = 20
		cdata(CDATA_EMO_ICON, cc) = 6 + 100 * 3
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕêHéñÇÇÕÇ∂ÇﬂÇΩÅB", name(cc) + " started having a meal.")
		}
		snd SOUNDLIST_EAT1
		return
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
		cdata(CDATA_EMO_ICON, cc) = 16 + 100
		if ( cdata(CDATA_ACTION_PERIOD, cc) \ 5 == 0 ) {
			if ( synccheck(cc, -1) ) {
				txt lang("*ÇﬁÇµÇ·ÇﬁÇµÇ·*", "*Munch munch*")
			}
		}
		return
	}
	txt lang(name(cc) + "ÇÕêHéñÇèIÇ¶ÇΩÅB", name(cc) + " finished a meal.")
	cdata(CDATA_HUNGER, cc) = 13000
	if ( gdata(GDATA_MONTH) == 12 | int(gettime(1)) == 12 ) {
		skillexp SKILL_NORMAL_FAITH, cc, 1000
		skillexp SKILL_ATTR_MAG, cc, 1000
		skillexp SKILL_ATTR_LUC, cc, 1000
		addbuff cc, BUFF_LUCK, 250, 1000
	}
	chara_anorexia cc
	rowactend cc
	return

*sexsex
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_SEX
		cdata(CDATA_ACTION_PERIOD, cc) = 25 + rnd(10)
		cdata(CDATA_ROW_ACT_TC, cc) = tc
		cdata(CDATA_ROW_ACT, tc) = ACTION_SEX, cdata(CDATA_ACTION_PERIOD, cc) * 2
		cdata(CDATA_ROW_ACT_TC, tc) = cc + 10000
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕïûÇíEÇ¨énÇﬂÇΩÅB", name(cc) + " begin" + _s(cc) + " to take " + his(cc) + " clothes off.")
		}
		return
	}
	sexhost = 1
	tc = cdata(CDATA_ROW_ACT_TC, cc)
	if ( tc >= 10000 ) {
		tc -= 10000
		sexhost = 0
	}
	if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE | cdata(CDATA_ROW_ACT, tc) != ACTION_SEX ) {
		if ( synccheck(cc, -1) ) {
			txt lang("ÅuÇªÅAÇªÇÃ" + _sex2(cdata(CDATA_SEX, tc)) + "Ç∆ÇÕëÃÇæÇØÇÃä÷åW" + _da() + _ore(3) + "ÇÕâΩÇ‡ímÇÁÇ»Ç¢Ç©ÇÁÅAñΩÇæÇØÇÕÅcÅIÅv", "\"I-I don't really know that " + _sex2(cdata(CDATA_SEX, tc)) + ". Please spare my life!\"")
		}
		rowactend cc
		rowactend tc
		return
	}
	if ( cc == CHARA_PLAYER ) {
		actionsp CHARA_PLAYER, 1 + rnd(2)
		if ( stat == 0 ) {
			txt_exhausted
			rowactend cc
			rowactend tc
			return
		}
	}
	cdata(CDATA_EMO_ICON, cc) = 17 + 100 * 3
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
		if ( sexhost == 0 ) {
			if ( cdata(CDATA_ACTION_PERIOD, cc) \ 5 == 0 ) {
				if ( synccheck(cc, -1) ) {
					txtef COLOR_SKY_BLUE
					if ( jp ) {
						txt "ÅuÇ´Ç≠Ç£Åv", "ÅuÇ‡Ç”Ç‡Ç”Åv", "ÅuÇ≠Ç‚ÇµÇ¢ÅAÇ≈Ç‡ÅcÅv", "ÅuÇÕÇüÇÕÇüÅIÅv", "ÅuÉEÉtÉtÉtÅv"
					}
					if ( en ) {
						txt cnvtalk("Yes!"), cnvtalk("Ohhh"), "*gasp*", "*rumble*", cnvtalk("Come on!")
					}
				}
			}
		}
		return
	}
	if ( sexhost == 0 ) {
		rowactend cc
		return
	}
	repeat 2
		if ( cnt == 0 ) {
			c = cc
		}
		else {
			c = tc
		}
		cdata(CDATA_CONDITION_DRUNK, cc) = 0
		if ( cnt == 1 ) {
			if ( rnd(3) == 0 ) {
				dmgcon c, CONDITION_INSANE, 500
			}
			if ( rnd(5) == 0 ) {
				dmgcon c, CONDITION_PARALYZE, 500
			}
			dmgcon c, CONDITION_INSANE, 300
			healsan c, 10
			skillexp SKILL_ATTR_CON, c, 250 + (c >= MAX_CHARA_SAVE) * 1000
			skillexp SKILL_ATTR_WIL, c, 250 + (c >= MAX_CHARA_SAVE) * 1000
		}
		if ( cdata(CDATA_ID, cc) == CREATURE_ID_PROSTITUTE | cdata(CDATA_ID, cc) == CREATURE_ID_SILVIA_THE_PRINCESS ) {
			skillexp SKILL_ATTR_CON, cc, 250
			skillexp SKILL_ATTR_WIL, cc, 250
		}
		if ( rnd(15) == 0 ) {
			dmgcon c, CONDITION_SICK, 200
		}
		skillexp SKILL_ATTR_CHA, c, 250 + (c >= MAX_CHARA_SAVE) * 1000
	loop
	sexvalue = sdata(SKILL_ATTR_CHA, cc) * (50 + rnd(50)) + 100
	if ( cc == CHARA_PLAYER | tc == CHARA_PLAYER ) {
		gdata(GDATA_FLAG_PROSTITUTION_COUNTER)++
	}
	if ( synccheck(cc, -1) ) {
		txtef COLOR_SKY_BLUE
		if ( jp ) {
			txt "ÅuÇÊÇ©Ç¡ÇΩ" + _yo(3), "ÅuÇ∑ÅAÇ∑Ç≤Ç¢" + _yo(3), "ÅuÇ‡ÅAÇ‡Ç§ÇæÇﬂ" + _da(3), "ÅuÇÕÅAåÉÇµÇ©Ç¡ÇΩ" + _yo(3), "ÅuÇ©ÅAäÆîs" + _da(3)
		}
		if ( en ) {
			txt "\"You are awesome!", "\"Oh my god...", "\"Okay, okay, you win!", "\"Holy...!"
		}
		txtef COLOR_TALK
		if ( tc == CHARA_PLAYER ) {
			txt lang("Åv", "\"")
		}
	}
	if ( tc != CHARA_PLAYER ) {
		if ( cdata(CDATA_GOLD, tc) >= sexvalue ) {
			if ( synccheck(cc, -1) ) {
				txt lang("ÅIÇ≥Ç†ÅAè¨å≠Ç¢ÇéÛÇØéÊÇ¡Çƒ" + _kure(3) + "Åv", "Here, take this.\"")
			}
		}
		else {
			if ( synccheck(cc, -1) ) {
				txt lang("ÅIÇ±ÇÍÇ™" + _ore(3) + "ÇÃç‡ïzÇÃíÜêgÇÃëSÇƒ" + _da() + "Åv", "Take this money, it's all I have!\"")
				if ( rnd(3) == 0 ) {
					if ( cc != CHARA_PLAYER ) {
						txt lang(name(cc) + "ÇÕåÉì{ÇµÇΩÅBÅuÇ»ÇﬂÇƒÇÒÇÃÅHÅv", name(cc) + " gets furious, " + cnvtalk("And you think you can just run away?"))
						cdata(CDATA_TARGET, cc) = tc
						cdata(CDATA_AI_AGGRO, cc) = 20
					}
				}
			}
			if ( cdata(CDATA_GOLD, tc) <= 0 ) {
				cdata(CDATA_GOLD, tc) = 1
			}
			sexvalue = cdata(CDATA_GOLD, tc)
		}
		cdata(CDATA_GOLD, tc) -= sexvalue
		if ( cc == CHARA_PLAYER ) {
			modimp tc, 5
			flt
			itemcreate -1, ITEM_ID_GOLD_PIECE, cdata(CDATA_X, cc), cdata(CDATA_Y, cc), sexvalue
			txt_questitem
			modkarma CHARA_PLAYER, -1
		}
		else {
			cdata(CDATA_GOLD, cc) += sexvalue
		}
	}
	rowactend cc
	rowactend tc
	return

*skill_tuin_der_lusten
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_TUIN_DER_LUSTEN
		cdata(CDATA_ACTION_PERIOD, cc) = limit(sdata(SKILL_ATTR_SPD, cc) / 10, 10, 50)
		cdata(CDATA_ROW_ACT_TC, cc) = tc
		cdata(CDATA_ROW_ACT, tc) = ACTION_TUIN_DER_LUSTEN
		cdata(CDATA_ACTION_PERIOD, tc) = 100
		cdata(CDATA_ROW_ACT_TC, tc) = cc + 10000
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕïûÇíEÇ¨énÇﬂÇΩÅB", name(cc) + " begin" + _s(cc) + " to take " + his(cc) + " clothes off.")
		}
		return
	}
	sexhost = 1
	tc = cdata(CDATA_ROW_ACT_TC, cc)
	if ( tc >= 10000 ) {
		tc -= 10000
		sexhost = 0
	}
	cdata(CDATA_EMO_ICON, cc) = 17 + 100 * 3
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
		if ( sexhost == 0 ) {
			if ( cdata(CDATA_ACTION_PERIOD, cc) \ 5 == 0 ) {
				if ( synccheck(cc, -1) ) {
					txtef COLOR_SKY_BLUE
					if ( jp ) {
						txt "ÅuÇ‡Ç”Ç‡Ç”Åv", "ÅuÇ≠Ç‚ÇµÇ¢ÅAÇ≈Ç‡ÅcÅv", "ÅuÇÕÇüÇÕÇüÅIÅv", "ÅuÉEÉtÉtÉtÅv"
					}
					if ( en ) {
						txt cnvtalk("Yes!"), cnvtalk("Ohhh"), "*gasp*", "*rumble*", cnvtalk("Come on!")
					}
				}
			}
		}
		return
	}
	if ( sexhost == 0 ) {
		rowactend cc
		return
	}
	repeat 2
		if ( cnt == 0 ) {
			c = cc
		}
		else {
			c = tc
		}
		cdata(CDATA_CONDITION_DRUNK, cc) = 0
		if ( cnt == 1 ) {
			skillexp SKILL_ATTR_CON, c, 250 + (c >= 57) * 1000
			skillexp SKILL_ATTR_WIL, c, 250 + (c >= 57) * 1000
		}
		if ( cdata(CDATA_ID, cc) == 335 | cdata(CDATA_ID, cc) == 352 ) {
			skillexp SKILL_ATTR_CON, cc, 250
			skillexp SKILL_ATTR_WIL, cc, 250
		}
		if ( rnd(15) == 0 ) {
			dmgcon c, CONDITION_SICK, 200
		}
		skillexp SKILL_ATTR_CHA, c, 250 + (c >= 57) * 1000
	loop
	sexvalue = sdata(SKILL_ATTR_CHA, cc) * (50 + rnd(50)) + 100
	if ( cc == CHARA_PLAYER | tc == CHARA_PLAYER ) {
		gdata(GDATA_FLAG_PROSTITUTION_COUNTER)++
	}
	if ( synccheck(cc, -1) ) {
		txtef COLOR_SKY_BLUE
		if ( jp ) {
			txt "ÅuÇÊÇ©Ç¡ÇΩ" + _yo(3), "ÅuÇ∑ÅAÇ∑Ç≤Ç¢" + _yo(3), "ÅuÇ‡ÅAÇ‡Ç§ÇæÇﬂ" + _da(3), "ÅuÇÕÅAåÉÇµÇ©Ç¡ÇΩ" + _yo(3), "ÅuÇ©ÅAäÆîs" + _da(3)
		}
		if ( en ) {
			txt "\"You are awesome!", "\"Oh my god...", "\"Okay, okay, you win!", "\"Holy...!"
		}
		txtef COLOR_TALK
		if ( tc == CHARA_PLAYER ) {
			txt lang("Åv", "\"")
		}
	}
	if ( tc != CHARA_PLAYER ) {
		snd SOUNDLIST_AMMO
		if ( cdata(CDATA_GOLD, tc) >= sexvalue ) {
			if ( synccheck(cc, -1) ) {
				txt lang("ÅIÇ≥Ç†ÅAè¨å≠Ç¢ÇéÛÇØéÊÇ¡Çƒ" + _kure(3) + "Åv", "Here, take this.\"")
			}
		}
		else {
			if ( synccheck(cc, -1) ) {
				txt lang("ÅIÇ±ÇÍÇ™" + _ore(3) + "ÇÃç‡ïzÇÃíÜêgÇÃëSÇƒ" + _da() + "Åv", "Take this money, it's all I have!\"")
				if ( rnd(3) == 0 ) {
					if ( cc != 0 ) {
						txt lang(name(cc) + "ÇÕåÉì{ÇµÇΩÅBÅuÇ»ÇﬂÇƒÇÒÇÃÅHÅv", name(cc) + " gets furious, " + cnvtalk("And you think you can just run away?"))
						cdata(CDATA_TARGET, cc) = tc
						cdata(CDATA_AI_AGGRO, cc) = 20
					}
				}
			}
			if ( cdata(CDATA_GOLD, tc) <= 0 ) {
				cdata(CDATA_GOLD, tc) = 1
			}
			sexvalue = cdata(CDATA_GOLD, tc)
		}
		cdata(CDATA_GOLD, tc) -= sexvalue
		if ( cc == CHARA_PLAYER ) {
			modimp tc, 5
			flt
			itemcreate -1, 54, cdata(CDATA_X, cc), cdata(CDATA_Y, cc), sexvalue
			txt_questitem
			modkarma 0, -1
		}
		else {
			cdata(CDATA_GOLD, cc) += sexvalue
		}
	}
	rowactend cc
	rowactend tc
	return

*generalAct
	if ( cc != CHARA_PLAYER ) {
		rowactend cc
		return
	}
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_GENERAL
		cdata(CDATA_ITEM_USING, cc) = ci
		cdata(CDATA_ROW_ACT_TC, cc) = tc
		if ( gdata(GDATA_ROW_ACT) == ACTION_STEAL ) {
			txt lang(itemname(ci, 1) + "Ç…ñ⁄êØÇÇ¬ÇØÇΩÅB", "You target " + itemname(ci, 1) + ".")
			cdata(CDATA_ACTION_PERIOD, cc) = 2 + limit(inv(INV_ITEM_WEIGHT, ci) / 500, 0, 50)
		}
		if ( gdata(GDATA_ROW_ACT) == ACTION_SLEEP ) {
			if ( mdata(MDATA_TYPE) == MAP_TYPE_HOME | mdata(MDATA_TYPE) == MAP_TYPE_TOWN | mdata(MDATA_TYPE) == MAP_TYPE_VILLAGE ) {
				txt lang("êQÇÈédìxÇénÇﬂÇΩÅB", "You lie down.")
				cdata(CDATA_ACTION_PERIOD, cc) = 5
			}
			else {
				txt lang("òIâcÇÃèÄîıÇénÇﬂÇΩÅB", "You start to camp.")
				cdata(CDATA_ACTION_PERIOD, cc) = 20
			}
		}
		if ( gdata(GDATA_ROW_ACT) == ACTION_CONSTRUCT ) {
			txt lang(itemname(ci, 1) + "ÇÃåöê›ÇénÇﬂÇΩÅB", "You start to construct " + itemname(ci, 1) + ".")
			cdata(CDATA_ACTION_PERIOD, cc) = 25
		}
		if ( gdata(GDATA_ROW_ACT) == ACTION_OPEN_HATCH ) {
			txt lang(itemname(ci, 1) + "ÇÃÉnÉbÉ`ÇâÒÇµénÇﬂÇΩÅB", "You start to pull the hatch.")
			cdata(CDATA_ACTION_PERIOD, cc) = 10
		}
		if ( gdata(GDATA_ROW_ACT) == ACTION_HARVEST ) {
			txt lang(itemname(ci, 1) + "Çå@ÇËénÇﬂÇΩÅB", "You start to pick " + itemname(ci, 1) + ".")
			cdata(CDATA_ACTION_PERIOD, cc) = 10 + limit(inv(INV_ITEM_WEIGHT, ci) / (1 + sdata(SKILL_ATTR_STR, CHARA_PLAYER) * 10 + sdata(SKILL_NORMAL_GARDENING, CHARA_PLAYER) * 40), 1, 100)
		}
		if ( gdata(GDATA_ROW_ACT) == ACTION_CUT_TREE ) {
			txt lang("Ç†Ç»ÇΩÇÕ" + itemname(ci) + "ÇÃî∞çÃÇénÇﬂÇΩÅB", "You start to cut tree.")
			cdata(CDATA_ACTION_PERIOD, cc) = limit(axeitem - sdata(SKILL_WEAPON_AXE, CHARA_PLAYER) / 8, 20, 100)
		}
		if ( gdata(GDATA_ROW_ACT) == ACTION_TRAIN ) {
			if ( gdata(GDATA_WEATHER) == WEATHER_CLEAR | gdata(GDATA_WEATHER) == WEATHER_RAIN ) {
				if ( inv(INV_ITEM_ID, ci) == ITEM_ID_SKILLBOOK ) {
					if ( gdata(GDATA_SKILLBOOK_COOLDOWN) > gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 ) {
						txt lang("Ç‡Ç§ñOÇ´ÇΩÅB", "You are bored.")
						rowactend cc
						return
					}
				}
				else {
					if ( gdata(GDATA_NEXT_TRAIN) > gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 ) {
						txt lang("Ç‡Ç§ñOÇ´ÇΩÅB", "You are bored.")
						rowactend cc
						return
					}
				}
			}
			if ( inv(INV_ITEM_ID, ci) == ITEM_ID_SKILLBOOK ) {
				txt lang(skillname(inv(INV_ITEM_BOOK_ID, ci)) + "ÇÃäwèKÇénÇﬂÇΩÅB", "You begin to study " + skillname(inv(INV_ITEM_BOOK_ID, ci)) + ".")
			}
			else {
				txt lang("ÉgÉåÅ[ÉjÉìÉOÇénÇﬂÇΩÅB", "You start training.")
			}
			if ( inv(INV_ITEM_ID, ci) == ITEM_ID_SKILLBOOK ) {
				gdata(GDATA_SKILLBOOK_COOLDOWN) = gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 + 48
				item_find ITEM_ID_BOOKMARK_OF_ITZPALT, 3, 1
				if ( stat != (-1) ) {
					if ( inv(INV_ITEM_NUM, stat) >= 1 ) {
						txt lang("å√ëöÇÃûxÇ‡ópà”ÇµÇΩÅB", "You also use the bookmark.")
						gdata(GDATA_SKILLBOOK_COOLDOWN) = gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 + 4
					}
				}
			}
			else {
				opatra = 0
				item_find ITEM_ID_DUMBBELL_OF_OPATOS, 3, 1
				if ( stat != (-1) ) {
					if ( inv(INV_ITEM_NUM, stat) >= 1 ) {
						txt lang("ÉwÉîÉBÉ_ÉìÉxÉãÇ‡ópà”ÇµÇΩÅB", "You also use the dumbbell.")
						opatra = 100
					}
				}
				gdata(GDATA_NEXT_TRAIN) = gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 + 48
			}
			if ( gdata(GDATA_WEATHER) != WEATHER_CLEAR & gdata(GDATA_WEATHER) != WEATHER_RAIN ) {
				if ( gdata(GDATA_AREA) == AREA_SHELTER | (mdata(MDATA_FIELD) == 1 & (mdata(MDATA_TYPE) == MAP_TYPE_HOME | mdata(MDATA_TYPE) == MAP_TYPE_TOWN | mdata(MDATA_TYPE) == MAP_TYPE_VILLAGE)) ) {
					txt lang("äOÇ™à´ìVåÛÇ»ÇÃÇ≈ÅAÇ∂Ç¡Ç≠ÇËÇ∆éÊÇËëgÇﬁÇ±Ç∆Ç…ÇµÇΩÅB", "The weather's bad outside, you have plenty of time to waste.")
				}
			}
			cdata(CDATA_ACTION_PERIOD, cc) = 50
		}
		gosub *screen_draw
		return
	}
	tc = cdata(CDATA_ROW_ACT_TC, cc)
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
		if ( gdata(GDATA_ROW_ACT) == ACTION_CUT_TREE ) {
			if ( rnd(5) == 0 ) {
				skillexp SKILL_WEAPON_AXE, cc, 20
			}
			if ( rnd(6) == 0 ) {
				if ( rnd(55) > sorg(SKILL_ATTR_STR, cc) + 25 ) {
					skillexp SKILL_ATTR_STR, cc, 50
				}
			}
			if ( rnd(3) == 0 ) {
				cdata(CDATA_SP, cc)--
			}
			if ( axeitem == 30 ) {
				repeat 5
					snd SOUNDLIST_GET1
					await 20
				loop
				txtef COLOR_SKY_BLUE
				txt lang(" *ÉMÉÖÉCÉCÉCÉCÉCÉì* ", " *vroom* "), lang(" *ÉoÉäÉoÉä* ", " *whir* ")
			}
			if ( axeitem != 30 ) {
				if ( cdata(CDATA_ACTION_PERIOD, cc) \ 10 == 0 ) {
					snd SOUNDLIST_DIG1
					txtef COLOR_SKY_BLUE
					if ( jp ) {
						txt " *ÉJÉcÅ[Éì* ", " *ÅÙ* ", " *ÉYÉVÉÖ* ", " *ÉÅÉLÅc* "
					}
					if ( en ) {
						txt " *sing* ", " *thud* ", " *rumble* "
					}
				}
			}
		}
		if ( gdata(GDATA_ROW_ACT) == ACTION_HARVEST ) {
			if ( rnd(5) == 0 ) {
				skillexp SKILL_NORMAL_GARDENING, CHARA_PLAYER, 40, 4
			}
			if ( rnd(6) == 0 ) {
				if ( rnd(55) > sorg(SKILL_ATTR_STR, cc) + 25 ) {
					skillexp SKILL_ATTR_STR, cc, 50
				}
			}
			if ( rnd(8) == 0 ) {
				if ( rnd(55) > sorg(SKILL_ATTR_CON, cc) + 28 ) {
					skillexp SKILL_ATTR_CON, cc, 50
				}
			}
			if ( rnd(10) == 0 ) {
				skillexp SKILL_ATTR_WIL, cc, 50
			}
			if ( rnd(4) == 0 ) {
				txtef COLOR_SKY_BLUE
				if ( jp ) {
					txt " *ÉUÉNÉb* ", " *ÅÙ* ", " *ÉYÉVÉÖ* ", " *ÉWÉÉÉä* "
				}
				if ( en ) {
					txt " *sing* ", " *pull* ", " *thud* ", " *rumble* ", " *gasp* "
				}
			}
		}
		if ( gdata(GDATA_ROW_ACT) == ACTION_TRAIN ) {
			p = 25
			if ( gdata(GDATA_WEATHER) != WEATHER_CLEAR & gdata(GDATA_WEATHER) != WEATHER_RAIN ) {
				if ( gdata(GDATA_AREA) == AREA_SHELTER ) {
					p = 5
				}
				if ( gdata(GDATA_AREA) != AREA_SHELTER & mdata(MDATA_FIELD) == 1 ) {
					if ( mdata(MDATA_TYPE) == MAP_TYPE_HOME | mdata(MDATA_TYPE) == MAP_TYPE_TOWN | mdata(MDATA_TYPE) == MAP_TYPE_VILLAGE ) {
						p = 5
						gdata(GDATA_MIN) += 30
					}
				}
			}
			if ( inv(INV_ITEM_ID, ci) == ITEM_ID_SKILLBOOK ) {
				if ( rnd(p) == 0 ) {
					skillexp inv(INV_ITEM_BOOK_ID, ci), cc, 25
				}
			}
			else {
				if ( opatra == 100 ) {
					if ( rnd(p) == 0 ) {
						skillexp randattb(), cc, 175
					}
					else {
						skillexp randattb(), cc, 20
					}
				}
				else {
					if ( rnd(p) == 0 ) {
						skillexp randattb(), cc, 25
					}
				}
			}
		}
		if ( gdata(GDATA_ROW_ACT) == ACTION_STEAL ) {
			if ( inv(INV_ITEM_ID, ci) == ITEM_ID_IRON_MAIDEN ) {
				if ( rnd(15) == 0 ) {
					rowactend cc
					txt lang("ìÀëRÇ”ÇΩÇ™ï¬Ç‹Ç¡ÇΩÅI", "Suddenly, the iron maiden falls forward.")
					dmghp cc, 9999, DAMAGE_FROM_MAIDEN
					return
				}
			}
			if ( inv(INV_ITEM_ID, ci) == ITEM_ID_GUILLOTINE ) {
				if ( rnd(15) == 0 ) {
					rowactend cc
					txt lang("ìÀëRÉMÉçÉ`ÉìÇ™óéÇøÇƒÇ´ÇΩÅI", "Suddenly, the guillotine is activated.")
					dmghp cc, 9999, DAMAGE_FROM_GUILLOTINE
					return
				}
			}
			f = 0
			f2 = 0
			tg = inv_getowner(ci)
			if ( tg != (-1) ) {
				if ( cdata(CDATA_RELATION_ORG, tg) == (-3) ) {
					f2 = 1
				}
			}
			i = sdata(SKILL_ACTIVE_PICKPOCKET, CHARA_PLAYER) * 5 + sdata(SKILL_ATTR_DEX, CHARA_PLAYER) + 25
			if ( gdata(GDATA_HOUR) >= 19 | gdata(GDATA_HOUR) < 7 ) {
				i = i * 15 / 10
			}
			if ( inv(INV_ITEM_QUALITY, ci) == FIX_QUALITY_GREAT ) {
				i = i * 8 / 10
			}
			if ( inv(INV_ITEM_QUALITY, ci) == FIX_QUALITY_MIRACLE ) {
				i = i * 5 / 10
			}
			if ( inv(INV_ITEM_QUALITY, ci) > FIX_QUALITY_MIRACLE ) {
				i = i / 25
			}
			make_sound cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 5, 8
			repeat MAX_CHARA_TOTAL - MAX_CHARA_FOLLOWER, MAX_CHARA_FOLLOWER
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( cdata(CDATA_CONDITION_SLEEP, cnt) != 0 ) {
					continue
				}
				if ( cdata(CDATA_CONDITION_DIM, cnt) >= 60 ) {
					continue
				}
				if ( cbit(CHARA_BIT_NECRO, cnt) == 1 ) {
					continue
				}
				if ( dist(cdata(CDATA_X, cnt), cdata(CDATA_Y, cnt), cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER)) > 5 ) {
					continue
				}
				if ( f2 == 1 ) {
					if ( cnt != tg ) {
						continue
					}
				}
				if ( cnt != tg ) {
					if ( map(cdata(CDATA_X, cnt), cdata(CDATA_Y, cnt), 5) != 0 ) {
						if ( mapitemfind(cdata(CDATA_X, cnt), cdata(CDATA_Y, cnt), ITEM_ID_LULWYS_PHOTO_COLLECTION) != (-1) ) {
							if ( cdata(CDATA_ID, cnt) != CREATURE_ID_LULWY & cdata(CDATA_ID, cnt) != CREATURE_ID_DEVASTATE_LULWY ) {
								continue
							}
						}
					}
				}
				p = rnd(i + 1) * (80 + (synccheck(cnt, -1) == 0) * 50 + dist(cdata(CDATA_X, cnt), cdata(CDATA_Y, cnt), cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER)) * 20) / 100
				if ( cnt < 57 ) {
					p = p * 2 / 3
				}
				if ( rnd(sdata(SKILL_ATTR_PER, cnt) + 1) > p ) {
					if ( synccheck(cnt, -1) ) {
						txt lang(name(cnt) + "ÇÕêﬁìêÇå©ôÈÇﬂÇΩÅB", name(cnt) + " notice" + _s(cnt) + " you,")
					}
					else {
						txt lang(name(cnt) + "ÇÕïsêRÇ»ï®âπÇ…ãCÇ√Ç¢ÇΩÅB", name(cnt) + " hear" + _s(cnt) + " a loud noise,")
					}
					if ( cdata(CDATA_ROLE, cnt) == ROLE_GUARD ) {
						txt lang("ÅuãMólÅAâΩÇÇµÇƒÇ¢ÇÈÅIÅv", cnvtalk("You there, stop!"))
						modimp cnt, -5
					}
					else {
						txt lang("ÅuÉKÅ[ÉhÅIÉKÅ[ÉhÅIÅv", cnvtalk("Guards! Guards!"))
						modimp cnt, -5
					}
					cdata(CDATA_EMO_ICON, cnt) = 20 + 100 * 5
					f = 1
				}
			loop
			if ( f ) {
				txtmore
				txt lang("ìêÇ›Çå©ôÈÇﬂÇÁÇÍÇΩÅI", "You are found stealing.")
				modkarma CHARA_PLAYER, -5
				p = inv_getowner(ci)
				if ( tg != (-1) ) {
					if ( cdata(CDATA_ID, p) != CREATURE_ID_EBON_THE_FIRE_GIANT ) {
						if ( cdata(CDATA_CONDITION_SLEEP, tg) == 0 ) {
							cdata(CDATA_RELATION, tg) = -2
							hostileaction CHARA_PLAYER, tg
							modimp tg, -20
						}
					}
				}
				gohostile
			}
			if ( tg != (-1) ) {
				if ( cdata(CDATA_EXIST, tg) != CHAR_STATE_ALIVE ) {
					if ( f != 1 ) {
						txt lang("ëŒè€ÇÕéÄÇÒÇ≈Ç¢ÇÈ", "The target is dead.")
						f = 1
					}
				}
				if ( cdata(CDATA_ROLE, tg) == ROLE_USER ) {
					if ( f != 1 ) {
						txt lang("ÇªÇÍÇÕìêÇﬂÇ»Ç¢ÅB", "It can't be stolen.")
						f = 1
					}
				}
				if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), cdata(CDATA_X, tg), cdata(CDATA_Y, tg)) >= 3 ) {
					if ( f != 1 ) {
						txt lang("ëŒè€Ç™å©ìñÇΩÇÁÇ»Ç¢ÅB", "You lose the target.")
						f = 0
					}
				}
			}
			if ( inv(INV_ITEM_NUM, ci) <= 0 ) {
				f = 1
			}
			if ( ibit(ITEM_BIT_PRECIOUS, ci) == 1 ) {
				if ( f != 1 ) {
					txt lang("ÇªÇÍÇÕìêÇﬂÇ»Ç¢ÅB", "It can't be stolen.")
					f = 1
				}
			}
			if ( inv(INV_ITEM_WEIGHT, ci) >= sdata(SKILL_ATTR_STR, CHARA_PLAYER) * 500 ) {
				if ( f != 1 ) {
					txt lang("èdÇ∑Ç¨ÇƒéËÇ…ïâÇ¶Ç»Ç¢ÅB", "It's too heavy.")
					f = 1
				}
			}
			if ( itemusingfind(ci, 1) != (-1) | (refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE) == FILTER_AMMO & inv(INV_ITEM_EQUIP, ci) != 0) ) {
				if ( f != 1 ) {
					txt lang("ÇªÇÃÉAÉCÉeÉÄÇÕëºÇÃíNÇ©Ç™égópíÜÇæÅB", "Someone else is using the item.")
					f = 1
				}
			}
			if ( f ) {
				txt lang("çsìÆÇíÜífÇµÇΩÅB", "You abort stealing.")
				rowactend cc
			}
		}
		return
	}
	if ( gdata(GDATA_ROW_ACT) == ACTION_STEAL ) {
		tg = inv_getowner(ci)
		if ( tg != (-1) ) {
			if ( cdata(CDATA_EXIST, tg) != CHAR_STATE_ALIVE ) {
				txt lang("çsìÆÇíÜífÇµÇΩÅB", "You abort stealing.")
				rowactend cc
				return
			}
		}
		in = 1
		if ( inv(INV_ITEM_ID, ci) == ITEM_ID_GOLD_PIECE ) {
			in = inv(INV_ITEM_NUM, ci)
		}
		ti = inv_getfreeid(CHARA_PLAYER)
		if ( ti == (-1) ) {
			txt_invfull2
			return
		}
		if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
			if ( inv_sum(CHARA_PLAYER) > 20 ) {
				txt_invfull
				return
			}
		}
		ibitmod ITEM_BIT_DROP, ci, 0
		if ( inv(INV_ITEM_EQUIP, ci) != 0 ) {
			tc = inv_getowner(ci)
			if ( tc != (-1) ) {
				p = inv(INV_ITEM_EQUIP, ci)
				cdata(p, tc) = cdata(p, tc) / 10000 * 10000
			}
			inv(INV_ITEM_EQUIP, ci) = 0
			r1 = tc
			gosub *charaRefresh
		}
		item_copy ci, ti
		inv(INV_ITEM_NUM, ti) = in
		ibitmod ITEM_BIT_STOLEN, ti, 1
		inv(INV_ITEM_PROPERTY, ti) = PROP_NONE
		inv(INV_ITEM_NUM, ci) -= in
		if ( inv(INV_ITEM_NUM, ci) <= 0 ) {
			cell_refresh inv(INV_ITEM_X, ci), inv(INV_ITEM_Y, ci)
		}
		txt lang(itemname(ti) + "ÇìêÇÒÇæÅB", "You successfully steal " + itemname(ti) + ".")
		if ( inv(INV_ITEM_ID, ci) == ITEM_ID_GOLD_PIECE ) {
			snd SOUNDLIST_GETGOLD1
			inv(INV_ITEM_NUM, ti) = 0
			cdata(CDATA_GOLD, CHARA_PLAYER) += in
		}
		else {
			item_stack CHARA_PLAYER, ti, 1
			snd SOUNDLIST_GET1 + rnd(2)
		}
		gosub *calcBurdenPc
		skillexp SKILL_ACTIVE_PICKPOCKET, CHARA_PLAYER, limit(inv(INV_ITEM_WEIGHT, ti) / 25, 0, 450) + 50
		gdata(GDATA_FLAG_STOLEN_GOODS)++
		if ( cdata(CDATA_KARMA, CHARA_PLAYER) >= (-30) ) {
			if ( rnd(3) == 0 ) {
				txtmore
				txt lang("Ç†Ç»ÇΩÇÕó«êSÇÃôËê”Çä¥Ç∂ÇΩÅB", "You feel the stings of conscience.")
				modkarma CHARA_PLAYER, -1
			}
		}
	}
	if ( gdata(GDATA_ROW_ACT) == ACTION_SLEEP ) {
		txt lang("Ç†Ç»ÇΩÇÕñ∞ÇËçûÇÒÇæÅB", "You fall asleep.")
		gosub *sleep
	}
	if ( gdata(GDATA_ROW_ACT) == ACTION_CONSTRUCT ) {
		snd SOUNDLIST_BUILD1
		txt lang(itemname(ci, 1) + "ÇçÏÇËèIÇ¶ÇΩÅB", "You finish constructing " + itemname(ci, 1) + ".")
		in = 1
		dropval = 1
		gosub *act_drop
	}
	if ( gdata(GDATA_ROW_ACT) == ACTION_OPEN_HATCH ) {
		txt lang(itemname(ci, 1) + "ÇÃÉnÉbÉ`ÇâÒÇµèIÇ¶ÇΩÅB", "You finish pulling the hatch of " + itemname(ci, 1) + ".")
		chatteleport = 1
		gdata(GDATA_RETURN_AREA) = gdata(GDATA_AREA), gdata(GDATA_LEVEL), cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER)
		gdata(GDATA_TELEPORT_AREA) = AREA_SHELTER
		gdata(GDATA_TELEPORT_LEVEL) = 5 + inv(INV_ITEM_FILE, ci) \ 50
		if ( inv(INV_ITEM_PARAM2, ci) <= 10 ) {
			shelterd = 6
			inv(INV_ITEM_PARAM2, ci) = 100
		}
		levelexitby = 2
		snd SOUNDLIST_EXITMAP1
	}
	if ( gdata(GDATA_ROW_ACT) == ACTION_HARVEST ) {
		txt lang(itemname(ci, 1) + "Çé˚änÇµÇΩ(" + cnvweight(inv(INV_ITEM_WEIGHT, ci)) + ")", "You harvest " + itemname(ci, 1) + ". (" + cnvweight(inv(INV_ITEM_WEIGHT, ci)) + ")")
		gosub *act_get
	}
	if ( gdata(GDATA_ROW_ACT) == ACTION_CUT_TREE ) {
		snd SOUNDLIST_POP3
		snd SOUNDLIST_POP3
		snd SOUNDLIST_POP3
		gdata(GDATA_FLAG_TREES_FELLED)++
		txt lang("é˜ñÿÇêÿÇËì|ÇµÅAçﬁñÿÇçÏÇËèoÇµÇΩÅB", "You cut off tree.")
		inv(INV_ITEM_NUM, citree)--
		cell_refresh cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER)
		flt
		itemcreate -1, ITEM_ID_STUMP, cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 1
		flt
		itemcreate -1, ITEM_ID_WOOD_MATERIAL, cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 1
	}
	if ( gdata(GDATA_ROW_ACT) == ACTION_TRAIN ) {
		if ( inv(INV_ITEM_ID, ci) == ITEM_ID_SKILLBOOK ) {
			txt lang(skillname(inv(INV_ITEM_BOOK_ID, ci)) + "ÇÃäwèKÇèIÇ¶ÇΩÅB", "You finish studying " + skillname(inv(INV_ITEM_BOOK_ID, ci)) + ".")
		}
		else {
			txt lang("ÉgÉåÅ[ÉjÉìÉOÇèIÇ¶ÇΩÅB", "You finish training.")
		}
		opatra = 0
	}
	rowactend cc
	return

*sleep_draw
	redraw 0
	pos 0, 0
	gcopy 4, 0, 0, windoww, windowh - inf_verh
	gmode 2
	gosub *screen_drawStatus
	if ( screenupdate == 0 ) {
		redraw 1
	}
	screenupdate = 0
	return

*sleep_draw_init
	gsel 4
	gmode 0
	pos 0, 0
	picload exedir + "\\graphic\\bg_night.bmp", 1
	pos 0, 0
	gzoom windoww, windowh - inf_verh, 4, 0, 0, 640, 480, 1
	gsel 0
	return

*sleep
	if ( gdata(GDATA_AREA) == AREA_QUEST | (gdata(GDATA_AREA) == AREA_OL_DRAN & gdata(GDATA_LEVEL) == 5) ) {
		txtmore
		txt lang("ÇµÇ©ÇµÅAëÂéñÇ»ópÇévÇ¢èoÇµÇƒîÚÇ—ãNÇ´ÇΩÅB", "But you can't sleep right now.")
		gdata(GDATA_SLEEP_GENE) = 0
		return
	}
	if ( gdata(GDATA_GOD_TALK) ) {
		txtgod cdata(CDATA_GOD, CHARA_PLAYER), GOD_TEXT_SLEEP
	}
	redraw 0
	gosub *sleep_draw_init
	musicloop = 1
	music = MUSICLIST_MCCODA
	gosub *music_play
	msg_halt
	repeat 20
		gmode 4, , , cnt * 10
		gosub *sleep_draw
		await 200
	loop
	gmode 2
	cc = CHARA_PLAYER
	repeat MAX_CHARA_SAVE
		tc = cnt
		cdata(CDATA_CONDITION_WET, tc) = 0
		cdata(CDATA_CONDITION_MPOISON, tc) = 0
		cdata(CDATA_CONDITION_POISON, tc) = 0
		cdata(CDATA_CONDITION_SLEEP, tc) = 0
		cdata(CDATA_CONDITION_CONFUSE, tc) = 0
		cdata(CDATA_CONDITION_BLIND, tc) = 0
		cdata(CDATA_CONDITION_PARALYZE, tc) = 0
		cdata(CDATA_CONDITION_DIM, tc) = 0
		cdata(CDATA_CONDITION_DRUNK, tc) = 0
		cdata(CDATA_CONDITION_BLEED, tc) = 0
		gdata(GDATA_SLEEP) = 0
		cdata(CDATA_HP, tc) = cdata(CDATA_MAX_HP, tc)
		cdata(CDATA_MP, tc) = cdata(CDATA_MAX_MP, tc)
		cdata(CDATA_SP, tc) = cdata(CDATA_MAX_SP, tc)
		if ( tc != CHARA_PLAYER ) {
			cdata(CDATA_EVOCHAT_POINTS, tc) = 0
		}
		healcon tc, CONDITION_SICK, 7 + rnd(7)
		if ( cbit(CHARA_BIT_ANOREXIA, tc) ) {
			cdata(CDATA_VOMIT, tc) -= rnd(6)
		}
		else {
			cdata(CDATA_VOMIT, tc) -= rnd(3)
		}
		if ( cdata(CDATA_VOMIT, tc) < 0 ) {
			cure_anorexia tc
			cdata(CDATA_VOMIT, tc) = 0
		}
		healsan tc, 10
		if ( cbit(CHARA_BIT_LAY_HANDS, tc) | cdata(CDATA_ID, tc) == CREATURE_ID_GOOSE | cdata(CDATA_ID, tc) == CREATURE_ID_CUTE_FAIRY ) {
			cbitmod CHARA_BIT_EXCLUSIVE_SKILL_CHARGE, tc, 1
		}
	loop
	cdata(CDATA_EVOCHAT_POINTS, CHARA_PLAYER) = 10
	mode = MODELIST_TXT_ADV
	timeslept = 7 + rnd(5)
	item_find ITEM_ID_MANIS_ALARM_CLOCK, 3, 1
	if ( stat != (-1) ) {
		ci = stat
		if ( inv(INV_ITEM_NUM, ci) >= 1 ) {
			timeslept = 8
		}
	}
	repeat timeslept
		gdata(GDATA_HOUR)++
		gosub *advance_hour
		if ( mode != MODELIST_TXT_ADV ) {
			gosub *sleep_draw_init
			mode = MODELIST_TXT_ADV
		}
		gdata(GDATA_SLEEP) = 0
		gdata(GDATA_MIN) = 0
		cc = CHARA_PLAYER
		gosub *sleep_draw
		await 500
	loop
	if ( gdata(GDATA_SLEEP_GENE) != 0 ) {
		tc = -1
		repeat MAX_CHARA_FOLLOWER - 1, 1
			if ( cbit(CHARA_BIT_MAKE_GENE, cnt) == 1 ) {
				if ( cdata(CDATA_EXIST, cnt) == CHAR_STATE_ALIVE ) {
					tc = cnt
					break
				}
			}
		loop
		if ( tc != (-1) ) {
			s = lang("à‚ì`éq", "Gene")
			file = "bg_re14"
			buff = lang("" + name(tc) + "Ç∆Ç†Ç»ÇΩÇÕîMÇ¢àÍñÈÇãüÇ…ÇµÇΩÅBêVÇΩÇ»à‚ì`éqÇ™ê∂ê¨Ç≥ÇÍÇΩÅB", "You spent a night with " + name(tc) + ". A new gene is created.")
			listmax = 0
			chatList 1, lang("Ç”Ç£", "Sweet.")
			cbitmod CHARA_BIT_MAKE_GENE, tc, 0
			gosub *re_select
			gosub *generate_gene
		}
	}
	gosub *sleep_draw
	gdata(GDATA_SLEEP_GENE) = 0
	mode = MODELIST_MAIN
	wake_up
	cdata(CDATA_HUNGER, cc) -= 1500 / (trait(TRAIT_RACE_SLOW_DIGESTION) + 1)
	item_find ITEM_ID_MANIS_ALARM_CLOCK, 3, 1
	if ( stat != (-1) ) {
		ci = stat
		if ( inv(INV_ITEM_NUM, ci) >= 1 ) {
			kaiwa = rnd(4)
			if ( kaiwa == 0 ) {
				txt lang("Åuéûä‘ÇæÅBçƒãNìÆÇµÇÎÅv", cnvtalk("It's time. Restarting."))
			}
			if ( kaiwa == 1 ) {
				txt lang("ÅuÇªÇÎÇªÇÎÉXÉäÅ[ÉvÉÇÅ[ÉhÇâèúÇµÇÎÅv", cnvtalk("It is almost time to cancel sleep mode."))
			}
			if ( kaiwa == 2 ) {
				txt lang("Åuî]Ç…äoê¡êMçÜÇó¨Ç∑ÇºÅv", cnvtalk("I will send an awakening signal to your brain."))
			}
			if ( kaiwa == 3 ) {
				txt lang("Åuã≠êßãNè∞ÉvÉçÉOÉâÉÄÇäJénÅv", cnvtalk("I will start a forced wake-up program."))
			}
		}
	}
	txtef COLOR_GREEN
	txt lang("" + timeslept + "éûä‘ñ∞Ç¡ÇΩÅBÇ†Ç»ÇΩÇÕÉäÉtÉåÉbÉVÉÖÇµÇΩÅB", "You have slept for " + timeslept + " hours. You are refreshed.")
	gdata(GDATA_FLAG_HOURS_SLEPT) += timeslept
	f = 0
	if ( cdata(CDATA_ITEM_USING, CHARA_PLAYER) == (-1) ) {
		f = 1
	}
	else {
		ci = cdata(CDATA_ITEM_USING, CHARA_PLAYER)
		if ( inv(INV_ITEM_PARAM1, ci) == 0 | inv(INV_ITEM_NUM, ci) == 0 | refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE_MINOR) != FILTER_FURNITURE_BED ) {
			f = 1
		}
	}
	if ( f ) {
		txt lang("Ç‹Ç†Ç‹Ç†ÇÃñ⁄äoÇﬂÇæÅB", "You wake up feeling so-so.")
		gdata(GDATA_FLAG_SPELL_POTENTIAL_RECOVERY_POSTPONE)++
		if ( gdata(GDATA_FLAG_SPELL_POTENTIAL_RECOVERY_POSTPONE) > 9 ) {
			gdata(GDATA_FLAG_SPELL_POTENTIAL_RECOVERY_POSTPONE) = 9
		}
	}
	else {
		grown = 0
		gdata(GDATA_SLEEP_EXP) = gdata(GDATA_SLEEP_EXP) / 100
		gdata(GDATA_SLEEP_EXP) = gdata(GDATA_SLEEP_EXP) * inv(INV_ITEM_PARAM1, ci)
		sleepexpbk = gdata(GDATA_SLEEP_EXP)
		repeat MAX_CHARA_FOLLOWER
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			tc = cnt
			i = 0
			repeat MAX_SKILL_ATTR_BASIC, STARTING_SKILL_ATTR
				i += sorg(cnt, tc)
			loop
			i = limit(i / 6, 10, 1000)
			exp = i * i * i / 10
			if ( tc == CHARA_PLAYER ) {
				repeat
					if ( gdata(GDATA_SLEEP_EXP) >= exp ) {
						gdata(GDATA_SLEEP_EXP) -= exp
					}
					else {
						if ( cnt != 0 ) {
							break
						}
					}
					modgrowth tc, STARTING_SKILL_ATTR + rnd(MAX_SKILL_ATTR_BASIC), 3
					grown += 3
					if ( cnt > 6 ) {
						if ( rnd(5) == 0 ) {
							gdata(GDATA_SLEEP_EXP) = 0
							break
						}
					}
				loop
			}
			else {
				sleepexpc = sleepexpbk
				repeat
					if ( sleepexpc >= exp ) {
						sleepexpc -= exp
					}
					else {
						if ( cnt != 0 ) {
							break
						}
					}
					modgrowth tc, STARTING_SKILL_ATTR + rnd(MAX_SKILL_ATTR_BASIC), 3
					if ( cnt > 6 ) {
						if ( rnd(5) == 0 ) {
							sleepexpc = 0
							break
						}
					}
				loop
			}
			if ( cdatan(CDATAN_CLASS, tc) == "warrior" ) {
				modgrowth tc, SKILL_ATTR_STR, 2
				modgrowth tc, SKILL_ATTR_CON, 2
				if ( tc == CHARA_PLAYER ) {
					grown += 4
				}
			}
			if ( cdatan(CDATAN_CLASS, tc) == "thief" ) {
				modgrowth tc, SKILL_ATTR_DEX, 2
				modgrowth tc, SKILL_ATTR_PER, 2
				if ( tc == CHARA_PLAYER ) {
					grown += 4
				}
			}
			if ( cdatan(CDATAN_CLASS, tc) == "wizard" ) {
				modgrowth tc, SKILL_ATTR_WIL, 2
				modgrowth tc, SKILL_ATTR_MAG, 2
				if ( tc == CHARA_PLAYER ) {
					grown += 4
				}
			}
			if ( cdatan(CDATAN_CLASS, tc) == "farmer" ) {
				modgrowth tc, SKILL_ATTR_CON, 2
				modgrowth tc, SKILL_ATTR_LER, 2
				if ( tc == CHARA_PLAYER ) {
					grown += 4
				}
			}
			if ( cdatan(CDATAN_CLASS, tc) == "predator" ) {
				modgrowth tc, SKILL_ATTR_CON, 2
				modgrowth tc, SKILL_ATTR_DEX, 2
				if ( tc == CHARA_PLAYER ) {
					grown += 4
				}
			}
			if ( cdatan(CDATAN_CLASS, tc) == "archer" ) {
				modgrowth tc, SKILL_ATTR_STR, 2
				modgrowth tc, SKILL_ATTR_DEX, 2
				if ( tc == CHARA_PLAYER ) {
					grown += 4
				}
			}
			if ( cdatan(CDATAN_CLASS, tc) == "warmage" ) {
				modgrowth tc, SKILL_ATTR_STR, 2
				modgrowth tc, SKILL_ATTR_MAG, 2
				if ( tc == CHARA_PLAYER ) {
					grown += 4
				}
			}
			if ( cdatan(CDATAN_CLASS, tc) == "tourist" ) {
				modgrowth tc, SKILL_ATTR_SPD, 3
				if ( tc == CHARA_PLAYER ) {
					grown += 3
				}
			}
			if ( cdatan(CDATAN_CLASS, tc) == "pianist" ) {
				modgrowth tc, SKILL_ATTR_LER, 2
				modgrowth tc, SKILL_ATTR_CHA, 2
				if ( tc == CHARA_PLAYER ) {
					grown += 4
				}
			}
			if ( cdatan(CDATAN_CLASS, tc) == "gunner" ) {
				modgrowth tc, SKILL_ATTR_PER, 2
				modgrowth tc, SKILL_ATTR_LER, 2
				if ( tc == CHARA_PLAYER ) {
					grown += 4
				}
			}
			if ( cdatan(CDATAN_CLASS, tc) == "priest" ) {
				modgrowth tc, SKILL_ATTR_WIL, 2
				modgrowth tc, SKILL_ATTR_MAG, 2
				if ( tc == CHARA_PLAYER ) {
					grown += 4
				}
			}
			if ( cdatan(CDATAN_CLASS, tc) == "claymore" ) {
				modgrowth tc, SKILL_ATTR_STR, 2
				modgrowth tc, SKILL_ATTR_PER, 2
				if ( tc == CHARA_PLAYER ) {
					grown += 4
				}
			}
			repeat MAX_SKILL_WEAPON - STARTING_SKILL_WEAPON, STARTING_SKILL_WEAPON
				if ( sorg(cnt, tc) == 0 ) {
					continue
				}
				modgrowth tc, cnt, 2
			loop
			repeat MAX_SKILL_NORMAL - STARTING_SKILL_NORMAL, STARTING_SKILL_NORMAL
				if ( sorg(cnt, tc) == 0 ) {
					continue
				}
				modgrowth tc, cnt, 2
			loop
			repeat MAX_SKILL_ACTIVE - STARTING_SKILL_ACTIVE, STARTING_SKILL_ACTIVE
				if ( sorg(cnt, tc) == 0 ) {
					continue
				}
				modgrowth tc, cnt, 2
			loop
		loop
		repeat limit(gdata(GDATA_FLAG_SPELL_POTENTIAL_RECOVERY_POSTPONE) + 1, 1, 10)
			repeat MAX_SPELL - STARTING_SKILL_SPELL, STARTING_SKILL_SPELL
				if ( spell(cnt - STARTING_SKILL_SPELL) <= 0 ) {
					continue
				}
				modgrowth CHARA_PLAYER, cnt, 30
			loop
		loop
		gdata(GDATA_FLAG_SPELL_POTENTIAL_RECOVERY_POSTPONE) = 0
		txtmore
		txtef COLOR_GREEN
		txt lang("êSínÇÊÇ¢ñ⁄äoÇﬂÇæÅBêˆç›î\óÕÇ™êLÇ—ÇΩ(éÂî\óÕåv" + grown + "%)", "You wake up feeling good. Your potential increases. (Total:" + grown + "%)")
	}
	msg_halt
	gosub *music_play
	autosave = 1 * (gdata(GDATA_AREA) != AREA_SHOW_HOUSE)
	if ( gdata(GDATA_FLAG_INSIDE_DEEP_SEA_CASTLE) == 100 ) {
		gdata(GDATA_FLAG_INSIDE_DEEP_SEA_CASTLE) = 0
	}
	gdata(STARTING_GDATA_FLAG + 376) = 0
	breakfast = 0
	if ( gdata(GDATA_HOUR) >= 4 & gdata(GDATA_HOUR) <= 9 ) {
		breakfast = 100
		gosub *random_event
	}
	if ( gdata(GDATA_HOUR) >= 4 & gdata(GDATA_HOUR) <= 12 ) {
		breakfast = 200
		gosub *random_event
	}
	if ( gdata(GDATA_HOUR) >= 4 & gdata(GDATA_HOUR) <= 12 ) {
		breakfast = 300
		gosub *random_event
	}
	breakfast = 0
	repeat MAX_CHARA_FOLLOWER
		tc = CHARA_PLAYER
		kinenflag = 0
		if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
			continue
		}
		if ( cnt == 0 ) {
			continue
		}
		if ( cdata(CDATA_IMPRESSION, cnt) < 150 ) {
			continue
		}
		if ( cdata(CDATA_JOIN_DATE_MONTH, cnt) == gdata(GDATA_MONTH) & cdata(CDATA_JOIN_DATE_DAY, cnt) == gdata(GDATA_DAY) & cdata(CDATA_JOIN_DATE_YEAR, cnt) > gdata(GDATA_YEAR) ) {
			tc = cnt
			break
		}
	loop
	if ( tc != CHARA_PLAYER ) {
		cdata(CDATA_EMO_ICON, tc) = 6 + 100 * 3
		kinenflag = 1
		gosub *chat
		if ( gdata(STARTING_GDATA_FLAG + 380) == 1 ) {
			gdata(GDATA_FLAG_RAGNAROK_STARTED)++
			gdata(GDATA_WEATHER) = WEATHER_ETHER
			envonly = 1
			gosub *music_play
			txt lang("èIññÇÃì˙Ç™ñKÇÍÇΩÅB", "Let's Ragnarok!")
			msg_halt
			animeid = ANIMATION_RAGNA
			gosub *anime
			repeat 200
				repeat 2
					x = rnd(mdata(MDATA_WIDTH))
					y = rnd(mdata(MDATA_HEIGHT))
					map(x, y, 0) = 37
				loop
				x = rnd(inf_screenw) + scx
				y = rnd(inf_screenh) + scy
				if ( x < 0 | y < 0 | x >= mdata(MDATA_WIDTH) | y >= mdata(MDATA_HEIGHT) | rnd(5) == 0 ) {
					x = rnd(mdata(MDATA_WIDTH))
					y = rnd(mdata(MDATA_HEIGHT))
				}
				addmef x, y, 5, 24, rnd(15) + 20, 50, evdata1(evnum - (evnum != 0) * 1)
				mapitem_fire x, y
				if ( cnt \ 4 == 0 ) {
					if ( gdata(STARTING_GDATA_FLAG + 380) == 0 ) {
						flt 100, calcfixlv(FIX_QUALITY_GREAT)
						if ( rnd(4) ) {
							fltnrace = "dragon"
						}
						else {
							fltnrace = "giant"
						}
						characreate -1, CREATURE_ID_BUG, x, y
						if ( stat != 0 ) {
							cbitmod CHARA_BIT_SUMMONED, rc, 1
						}
						if ( gdata(GDATA_AREA) != AREA_VOID ) {
							if ( gdata(GDATA_DEEPEST_LEVEL) < 60 ) {
								if ( cdata(CDATA_LEVEL, rc) > 50 ) {
									chara_vanquish rc
								}
							}
						}
					}
				}
				if ( cnt \ 4 == 0 ) {
					if ( gdata(STARTING_GDATA_FLAG + 380) != 0 ) {
						flt
						characreate -1, CREATURE_ID_UNIVERSE_INVADER, x, y
						if ( stat != 0 ) {
							cbitmod CHARA_BIT_SUMMONED, rc, 1
						}
					}
				}
				if ( cnt \ 7 == 0 ) {
					gosub *screen_draw
					if ( rnd(7) ) {
						snd SOUNDLIST_FIRE1
					}
					else {
						snd SOUNDLIST_CRUSH1
					}
					await 25
				}
			loop
			gdata(STARTING_GDATA_FLAG + 380) = 0
		}
		kinenflag = 0
	}
	return

*rest
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_REST
		cdata(CDATA_ACTION_PERIOD, cc) = r1
		txt lang("Ç†Ç»ÇΩÇÕâ°Ç…Ç»Ç¡ÇΩÅB", "You lie down to rest.")
		gosub *screen_draw
		return
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
		if ( cdata(CDATA_ACTION_PERIOD, cc) \ 2 == 0 ) {
			healsp cc, 1
		}
		if ( cdata(CDATA_ACTION_PERIOD, cc) \ 3 == 0 ) {
			healhp cc, 1
			healmp cc, 1
		}
		return
	}
	if ( gdata(GDATA_SLEEP) >= 30 ) {
		f = 0
		if ( gdata(GDATA_SLEEP) >= 50 ) {
			f = 1
		}
		else {
			if ( rnd(2) == 0 ) {
				f = 1
			}
		}
		if ( f == 1 ) {
			txt lang("Ç†Ç»ÇΩÇÕÇªÇÃÇ‹Ç‹ñ∞ÇËÇ…Ç®ÇøÇΩÅc", "After a short while, you drop off to sleep.")
			cdata(CDATA_ITEM_USING, cc) = -1
			gosub *sleep
			rowactend cc
			return
		}
	}
	txt lang("Ç†Ç»ÇΩÇÕãxëßÇèIÇ¶ÇΩÅB", "You finished taking a rest.")
	rowactend cc
	return

*travel
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_TRAVEL
		cdata(CDATA_ACTION_PERIOD, cc) = 20
		if ( gdata(GDATA_WEATHER) == WEATHER_RAIN ) {
			cdata(CDATA_ACTION_PERIOD, cc) = cdata(CDATA_ACTION_PERIOD, cc) * 13 / 10
		}
		if ( gdata(GDATA_WEATHER) == WEATHER_HARD_RAIN ) {
			cdata(CDATA_ACTION_PERIOD, cc) = cdata(CDATA_ACTION_PERIOD, cc) * 16 / 10
		}
		if ( gdata(GDATA_WEATHER) == WEATHER_SNOW | chipm(CHIPM_ROLE, map(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 0)) == MAP_CHIP_ROLE_SNOW ) {
			cdata(CDATA_ACTION_PERIOD, cc) = cdata(CDATA_ACTION_PERIOD, cc) * 22 / 10
		}
		if ( gdata(GDATA_WEATHER) == WEATHER_ETHER ) {
			cdata(CDATA_ACTION_PERIOD, cc) = cdata(CDATA_ACTION_PERIOD, cc) * 5 / 10
		}
		cdata(CDATA_ACTION_PERIOD, cc) = cdata(CDATA_ACTION_PERIOD, cc) * 100 / (100 + gdata(GDATA_TRAVEL_SPEED) + sdata(SKILL_NORMAL_TRAVELING, CHARA_PLAYER))
		return
	}
	if ( cdata(CDATA_HUNGER, CHARA_PLAYER) <= 1600 & rnd(10) == 0 ) {
		inv_getheader cc
		f = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 ) {
				continue
			}
			if ( refitem(inv(INV_ITEM_ID, cnt), DBSPEC_TYPE) == FILTER_CARGO_FOOD ) {
				f = 1
				ci = cnt
				break
			}
		loop
		if ( f == 1 ) {
			if ( synccheck(cc, -1) ) {
				txt lang(npcn(cc) + itemname(ci, 1) + "ÇêHÇ◊èIÇ¶ÇΩÅB", name(cc) + " " + have(cc) + " finished eating " + itemname(ci, 1) + ".")
			}
			gosub *insta_eat
		}
	}
	if ( gdata(GDATA_WEATHER) == WEATHER_SNOW | chipm(CHIPM_ROLE, map(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 0)) == MAP_CHIP_ROLE_SNOW ) {
		if ( gdata(GDATA_RES_WEATHER) == 0 ) {
			if ( rnd(100) == 0 ) {
				if ( cbit(CHARA_BIT_FLOAT, CHARA_PLAYER) == 0 | cdata(CDATA_CONDITION_GRAVITY, CHARA_PLAYER) > 0 ) {
					txtef COLOR_SKY_BLUE
					if ( jp ) {
						txt " *Ç∏Ç‘Ç¡* ", " *ÉUÉVÉÖ* ", " *ÉYÉ{* ", " *ÉYÉTÉb* "
					}
					if ( en ) {
						txt " *kisssh* ", " *thudd* ", " *siz* ", " *clump* ", " *skritch* "
					}
					cdata(CDATA_ACTION_PERIOD, cc) += 10
				}
			}
			if ( rnd(1000) == 0 ) {
				txtef COLOR_PURPLE
				txt lang("êœê·ÇÃÇπÇ¢Ç≈ó∑íˆÇ™íxÇÍÇƒÇ¢ÇÈÅB", "Snow delays your travel."), lang("ê·ìπÇêiÇﬁÇÃÇÕëÂïœÇ»ãÍòJÇæÅB", "You are caught in a snowdrift."), lang("ê[Ç¢ê·Ç…ãrÇÇ∆ÇÁÇÍÇƒÇ¢ÇÈÅB", "It's hard to walk on a snowy road.")
				cdata(CDATA_ACTION_PERIOD, cc) += 50
			}
		}
		if ( cdata(CDATA_HUNGER, CHARA_PLAYER) <= 1200 ) {
			if ( cbit(CHARA_BIT_ANOREXIA, CHARA_PLAYER) == 0 ) {
				snd SOUNDLIST_EAT1
				txt lang("ãÛï†ÇÃÇ†Ç‹ÇËÅAÇ†Ç»ÇΩÇÕêœÇ‡Ç¡ÇƒÇ¢ÇÈê·Çï†Ç…Ç©Ç´Ç±ÇÒÇæÅB", "You are too hungry. You chow down snow.")
				cdata(CDATA_HUNGER, cc) += 5000
				gosub *eat_finish
				dmgcon CHARA_PLAYER, CONDITION_DIM, 1000
			}
		}
	}
	if ( chipm(CHIPM_ROLE, map(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 0)) == MAP_CHIP_ROLE_SAND ) {
		if ( rnd(15) == 0 ) {
			if ( cbit(CHARA_BIT_FLOAT, CHARA_PLAYER) == 0 | cdata(CDATA_CONDITION_GRAVITY, CHARA_PLAYER) > 0 ) {
				txtef COLOR_SKY_BLUE
				if ( jp ) {
					txt " *Ç∏Ç‘Ç¡* ", " *ÉUÉVÉÖ* ", " *ÉYÉ{* ", " *ÉYÉTÉb* "
				}
				if ( en ) {
					txt " *kisssh* ", " *thudd* ", " *siz* ", " *clump* ", " *skritch* "
				}
			}
			cdata(CDATA_CONDITION_WET, CHARA_PLAYER) = 0
		}
		if ( gdata(GDATA_WEATHER) == WEATHER_CLEAR & rnd(20) == 0 & (gdata(GDATA_HOUR) > 7 & gdata(GDATA_HOUR) < 19) ) {
			txtef COLOR_RED
			txt lang("çªîôÇÃîMãCÇ™ëÃóÕÇíDÇ§ÅB", "The desert heat robs me of my strength."), lang("ëæózÇ™óeéÕÇ»Ç≠è∆ÇËÇ¬ÇØÇÈÅcÅB", "The sun shines mercilessly...")
			cdata(CDATA_CONDITION_WET, CHARA_PLAYER) = 0
			dmgcon cc, CONDITION_DIM, 200
			cdata(CDATA_SP, CHARA_PLAYER) -= 30
			dmghp CHARA_PLAYER, rnd(10) + cdata(CDATA_MAX_HP, CHARA_PLAYER) / 20 + 1, DAMAGE_FROM_DESERT
		}
	}
	if ( gdata(GDATA_WEATHER) == WEATHER_HARD_RAIN ) {
		if ( gdata(GDATA_RES_WEATHER) == 0 ) {
			if ( rnd(100) == 0 ) {
				if ( cbit(CHARA_BIT_FLOAT, CHARA_PLAYER) == 0 | cdata(CDATA_CONDITION_GRAVITY, CHARA_PLAYER) > 0 ) {
					txtef COLOR_SKY_BLUE
					if ( jp ) {
						txt " *Ç—ÇµÇ·* ", " *ÉUÉuÉb* ", " *ÉpÉVÉÉÉb* ", " *Ç¥Ç‘* "
					}
					if ( en ) {
						txt " *drip* ", " *sip* ", " *drizzle* ", " *splash* ", " *kissh* "
					}
					cdata(CDATA_ACTION_PERIOD, cc) += 5
				}
			}
			if ( cdata(CDATA_CONDITION_CONFUSE, CHARA_PLAYER) == 0 ) {
				if ( rnd(500) == 0 ) {
					txtef COLOR_PURPLE
					txt lang("âJÇ™åÉÇµÇ∑Ç¨ÇƒÇ«Ç±Çï‡Ç¢ÇƒÇ¢ÇÈÇ©Ç‡ÇÌÇ©ÇÁÇ»Ç¢ÅI", "It's raining heavily. You lose your way."), lang("Ç†Ç‹ÇËÇ…Ç‡éãäEÇ™à´Ç∑Ç¨ÇÈÅB", "You can't see a thing!"), lang("çãâJÇÃÇπÇ¢Ç≈ëOÇ™ëSÇ≠å©Ç¶Ç»Ç¢ÅB", "You can't see an inch of front of you.")
					cdata(CDATA_CONDITION_CONFUSE, CHARA_PLAYER) = 10
				}
			}
			else {
				if ( rnd(5) == 0 ) {
					cdata(CDATA_CONDITION_CONFUSE, CHARA_PLAYER) = 10
				}
			}
		}
		cdata(CDATA_CONDITION_BLIND, CHARA_PLAYER) = 3
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
		gdata(GDATA_MIN)++
		return
	}
	traveldone = 1
	gdata(GDATA_TRAVEL_DISTANCE) += 4
	gdata(GDATA_FLAG_MILES_TRAVELED) += 4
	if ( gdata(GDATA_FLAG_MILES_TRAVELED) >= 1000000000 ) {
		gdata(GDATA_FLAG_MILES_TRAVELED) = 0
	}
	if ( gdata(GDATA_PETS_IN_DOJO) != 0 & gdata(GDATA_DOJO_TURNS) < 100000 ) {
		gdata(GDATA_DOJO_TURNS) += 1
	}
	rowactend cc
	return

*choose_fish
	if ( rowactre != 0 ) {
		return
	}
	ci = cdata(CDATA_ITEM_USING, CHARA_PLAYER)
	dbmax = 0
	dbsum = 0
	repeat 100
		if ( fishdata(FISHDATA_PIC, cnt) == 0 ) {
			continue
		}
		i = limit(inv(INV_ITEM_FISHING_BAIT, ci) + (rnd(5) == 0) - (rnd(5) == 0), 0, 5)
		if ( fishdata(FISHDATA_LEVEL, cnt) != i ) {
			continue
		}
		dblist(0, dbmax) = cnt, fishdata(FISHDATA_RARE, cnt) + dbsum
		dbsum += fishdata(FISHDATA_RARE, cnt)
		dbmax++
	loop
	fish = 1
	if ( dbsum != 0 ) {
		exrand_rnd dbtmp, dbsum
		repeat dbmax
			if ( dblist(1, cnt) > dbtmp ) {
				fish = dblist(0, cnt)
				break
			}
		loop
	}
	return

*get_fish
	flt
	itemcreate 0, fishdata(FISHDATA_ID, fish), -1, -1, 0
	inv(INV_ITEM_SUB_NAME, ci) = fish
	inv(INV_ITEM_PIC, ci) = fishdata(FISHDATA_PIC, fish)
	if ( inv(INV_ITEM_ID, ci) == ITEM_ID_FISH ) {
		fishsize = (rnd(10) * rnd(10) + 80) / 10
	}
	if ( inv(INV_ITEM_ID, ci) == ITEM_ID_FISH_JUNK ) {
		fishsize = 10
	}
	inv(INV_ITEM_VALUE, ci) = fishdata(FISHDATA_VALUE, fish) / 10 * fishsize
	inv(INV_ITEM_WEIGHT, ci) = fishdata(FISHDATA_WEIGHT, fish) / 10 * fishsize
	txt lang(itemname(ci, 1) + "ÇíﬁÇËè„Ç∞ÇΩÅI", "You get " + itemname(ci, 1) + "!")
	item_stack CHARA_PLAYER, ci, 1
	fishsize = 0
	return

*fishing
	if ( rowactre != 0 ) {
		txt lang("íﬁÇËÇénÇﬂÇΩÅB", "You start fishing.")
		snd SOUNDLIST_FISH_CAST
		gosub *randomSite
		return
	}
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		txt lang("íﬁÇËÇénÇﬂÇΩÅB", "You start fishing.")
		snd SOUNDLIST_FISH_CAST
		if ( rowactre == 0 ) {
			cdata(CDATA_ITEM_USING, cc) = ci
		}
		cdata(CDATA_ROW_ACT, cc) = ACTION_FISH
		cdata(CDATA_ACTION_PERIOD, cc) = 100
		racount = 0
		fishstat = 0
		if ( rowactre == 0 ) {
			item_find ITEM_ID_SUPER_LURE, 3
			if ( stat != (-1) ) {
				gdata(GDATA_USING_SUPER_LURE) = 1
				txt lang("É}ÉVÉìÉãÉAÅ[Ç‡égópÇµÇΩÅB", "You also use the super lure.")
			}
			else {
				gdata(GDATA_USING_SUPER_LURE) = 0
			}
		}
		if ( gdata(GDATA_USING_SUPER_LURE) == 1 ) {
			snd SOUNDLIST_WATER2
			snd SOUNDLIST_FISH_GET
			gosub *choose_fish
			gosub *get_fish
			rowactend cc
			cdata(CDATA_SP, cc) -= 3
			if ( rnd(10) == 0 ) {
				gosub *expFishing
			}
			return
		}
		gsel 9
		pos 0, 0
		picload exedir + "\\graphic\\fishing.bmp"
		gsel 0
		return
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
		if ( rnd(5) == 0 ) {
			fishstat = 1
			gosub *choose_fish
		}
		if ( fishstat == 1 ) {
			if ( rnd(5) == 0 ) {
				repeat 4 + rnd(4)
					redraw 0
					fishanime = 1, 3 + rnd(3)
					addefmap fishx, fishy, 4, 2
					scrturn++
					gosub *screen_draw
					redraw 1
					await cfg_wait1 * 2
				loop
				if ( rnd(3) == 0 ) {
					fishstat = 2
				}
				if ( rnd(6) == 0 ) {
					fishstat = 0
				}
				fishanime = 0
			}
		}
		if ( fishstat == 2 ) {
			fishanime = 2
			snd SOUNDLIST_WATER2
			cdata(CDATA_EMO_ICON, CHARA_PLAYER) = 20 + 100 * 2
			repeat 8 + rnd(10)
				redraw 0
				scrturn++
				gosub *screen_draw
				redraw 1
				await cfg_wait1 * 2
			loop
			if ( rnd(10) ) {
				fishstat = 3
			}
			else {
				fishstat = 0
			}
			fishanime = 0
		}
		if ( fishstat == 3 ) {
			fishanime = 3
			repeat 28 + rnd(15)
				if ( cnt \ 7 == 0 ) {
					snd SOUNDLIST_FISH_FIGHT
				}
				redraw 0
				fishanime(1) = cnt
				scrturn++
				gosub *screen_draw
				addefmap fishx, fishy, 5, 2
				redraw 1
				await cfg_wait1 * 2
			loop
			if ( fishdata(FISHDATA_POWER, fish) >= rnd(sdata(SKILL_NORMAL_FISHING, CHARA_PLAYER) + 1) ) {
				fishstat = 0
			}
			else {
				fishstat = 4
			}
			fishanime = 0
		}
		if ( fishstat == 4 ) {
			fishanime = 4
			snd SOUNDLIST_FISH_GET
			repeat 21
				redraw 0
				fishanime(1) = cnt
				if ( cnt == 1 ) {
					addefmap fishx, fishy, 1, 3
				}
				scrturn++
				gosub *screen_draw
				redraw 1
				await cfg_wait1 * 2
			loop
			snd SOUNDLIST_GET1 + rnd(2)
			fishanime = 0
			rowactend cc
			gosub *get_fish
			gosub *expFishing
			cdata(CDATA_EMO_ICON, CHARA_PLAYER) = 6 + 100 * 3
		}
		if ( rnd(50) == 0 ) {
			dmgsp cc, 1
		}
		return
	}
	txt lang("âΩÇ‡íﬁÇÍÇ»Ç©Ç¡ÇΩÅc", "A waste of time...")
	rowactend cc
	return

*plant
	if ( rowactre != 0 ) {
		txt lang("çÃéÊÇénÇﬂÇΩÅB", "You start to search the spot.")
		gosub *randomSite
		return
	}
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_PLANT
		cdata(CDATA_ACTION_PERIOD, cc) = 40
		txt lang("çÃéÊÇénÇﬂÇΩÅB", "You start to search the spot.")
		racount = 0
		return
	}
	rowactend cc
	return

*search
	if ( rowactre != 0 ) {
		txt lang("íTçıÇénÇﬂÇΩÅB", "You start to dig the spot.")
		gosub *randomSite
		return
	}
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_SEARCH
		cdata(CDATA_ACTION_PERIOD, cc) = 20
		if ( rowactre == 0 ) {
			txt lang("ínñ Çå@ÇËénÇﬂÇΩÅB", "You start to dig the ground.")
		}
		else {
			txt lang("íTçıÇénÇﬂÇΩÅB", "You start to dig the spot.")
		}
		racount = 0
		return
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
		if ( cdata(CDATA_TURN, cc) \ 5 == 0 ) {
			txtmore
			txtef COLOR_BLUE
			txt lang(" *Ç¥Ç≠Ç¡* ", " *clink* "), lang(" *ÉJÉLÉì* ", " *smash* "), lang(" *Ç≤Ç¬Ç¡* ", " *thud* "), lang(" *Ç∂Ç·ÇË* ", " *sing* "), lang(" *ÅÙ* ", " *sigh* ")
		}
		return
	}
	txt lang("ínñ Çå@ÇËèIÇ¶ÇΩÅB", "You finish digging.")
	if ( mdata(MDATA_TYPE) == MAP_TYPE_WORLD ) {
		inv_getheader 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 ) {
				continue
			}
			if ( inv(INV_ITEM_ID, cnt) == ITEM_ID_TREASURE_MAP ) {
				if ( inv(INV_ITEM_PARAM1, cnt) != 0 ) {
					if ( inv(INV_ITEM_PARAM1, cnt) == cdata(CDATA_X, CHARA_PLAYER) ) {
						if ( inv(INV_ITEM_PARAM2, cnt) == cdata(CDATA_Y, CHARA_PLAYER) ) {
							gdata(GDATA_FLAG_TREASURE_FOUND)++
							snd SOUNDLIST_CHEST1
							txtef COLOR_YELLOW
							txt lang(" *ÉKÉ`Éb* ÅcâΩÇ©Ç™Ç†ÇÈÅI", "*click* ...There's something here!")
							msg_halt
							snd SOUNDLIST_DING2
							flt
							itemcreate -1, ITEM_ID_SMALL_MEDAL, cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 2 + rnd(3)
							flt
							itemcreate -1, ITEM_ID_PLATINUM_COIN, cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 1 + rnd(3)
							flt
							itemcreate -1, ITEM_ID_GOLD_PIECE, cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), rnd(10000) + 2000
							if ( rnd(100) == 0 ) {
								flt
								itemcreate -1, ITEM_ID_ROD_WISHING, cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 0
							}
							repeat 4
								flt calcobjlv(cdata(CDATA_LEVEL, CHARA_PLAYER) + 10), calcfixlv(FIX_QUALITY_GREAT)
								if ( cnt == 0 ) {
									fixlv = FIX_QUALITY_GODLY
								}
								flttypemajor = fsetchest(rnd(length(fsetchest)))
								itemcreate -1, ITEM_ID_DUMMY, cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 0
							loop
							txt_questitem
							autosave = 1 * (gdata(GDATA_AREA) != AREA_SHOW_HOUSE)
							inv(INV_ITEM_NUM, cnt)--
							break
						}
					}
				}
			}
		loop
		spillfrag refx, refy, 1
	}
	else {
		if ( map(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 6) != 0 ) {
			return
		}
		txt lang("óéÇ∆ÇµåäÇ™Ç≈Ç´ÇΩÅB", name(cc) + " set a pitfall trap.")
		cell_featset cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 0, CELL_FEATURE_TRAP, CELL_SUB_FEATURE_TRAP_PITFALL, cc
		if ( cc == CHARA_PLAYER ) {
			cell_featset cdata(CDATA_X, cc), cdata(CDATA_Y, cc), tile_trap, -1, -1
		}
	}
	rowactend cc
	return

*dig
	if ( rowactre != 0 ) {
		txt lang("çzêŒÇå@ÇËénÇﬂÇΩÅB", "You start to dig the mining spot.")
		gosub *randomSite
		return
	}
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_DIG
		cdata(CDATA_ACTION_PERIOD, cc) = 40
		if ( rowactre == 0 ) {
			txt lang("ï«Çå@ÇËÇÕÇ∂ÇﬂÇΩÅB", "You start to dig the wall.")
		}
		else {
			txt lang("çzêŒÇå@ÇËénÇﬂÇΩÅB", "You start to dig the mining spot.")
		}
		if ( chipm(CHIPM_ROLE, map(refx, refy, 0)) == MAP_CHIP_ROLE_HARD_WALL ) {
			txt lang("Ç±ÇÃï«ÇÕÇ∆ÇƒÇ‡å≈ÇªÇ§ÇæÅI", "These walls look pretty hard!")
		}
		countdig = 0
		racount = 0
		return
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
		if ( rnd(5) == 0 ) {
			dmgsp cc, 1
		}
		countdig++
		f = 0
		if ( chipm(CHIPM_ROLE, map(refx, refy, 0)) == MAP_CHIP_ROLE_HARD_WALL ) {
			if ( rnd(12000) < sdata(SKILL_ATTR_STR, cc) + sdata(SKILL_NORMAL_MINING, cc) * 10 ) {
				f = 1
			}
			p = 30 - sdata(SKILL_NORMAL_MINING, cc) / 2
			if ( p > 0 ) {
				if ( countdig <= p ) {
					f = 0
				}
			}
		}
		else {
			if ( rnd(1500) < sdata(SKILL_ATTR_STR, cc) + sdata(SKILL_NORMAL_MINING, cc) * 10 ) {
				f = 1
			}
			p = 20 - sdata(SKILL_NORMAL_MINING, cc) / 2
			if ( p > 0 ) {
				if ( countdig <= p ) {
					f = 0
				}
			}
		}
		if ( f == 1 | (gdata(GDATA_FLAG_TUTORIAL) == 2 & gdata(GDATA_AREA) == AREA_HOME) ) {
			rtval = 0
			if ( mdata(MDATA_TYPE) == MAP_TYPE_TOWN | mdata(MDATA_TYPE) == MAP_TYPE_VILLAGE ) {
				if ( rnd(3) == 0 ) {
					rtval = ITEM_ID_GOLD_PIECE
				}
				if ( rnd(30) == 0 ) {
					rtval = ITEM_ID_GOLD_BAR
				}
			}
			if ( mdata(MDATA_TYPE) == MAP_TYPE_DUNGEON | mdata(MDATA_TYPE) == MAP_TYPE_LAKE ) {
				if ( rnd(5) == 0 ) {
					rtval = -1
				}
			}
			if ( mdata(MDATA_TYPE) == MAP_TYPE_FOREST ) {
				if ( rnd(5) == 0 ) {
					rtval = ITEM_ID_ACORN
				}
				if ( rnd(100) == 0 ) {
					rtval = ITEM_ID_GOLD_ACORN
				}
				if ( rnd(200) == 0 ) {
					rtval = ITEM_ID_FOUR_LEAF_CLOVER
				}
			}
			if ( mdata(MDATA_TYPE) == MAP_TYPE_TOWER | mdata(MDATA_TYPE) == MAP_TYPE_FORT ) {
				if ( rnd(8) == 0 ) {
					rtval = ITEM_ID_STONE_MATERIAL
				}
				if ( rnd(120) == 0 ) {
					rtval = ITEM_ID_SAFE
				}
			}
			if ( mdata(MDATA_TYPE) == MAP_TYPE_NEST ) {
				if ( rnd(5) == 0 ) {
					rtval = ITEM_ID_SHIT
				}
				if ( rnd(10) == 0 ) {
					rtval = ITEM_ID_EGG
				}
				if ( rnd(20) == 0 ) {
					rtval = ITEM_ID_JERKY
				}
				if ( rnd(130) == 0 ) {
					rtval = ITEM_ID_MYSTERIOUS_FOSSIL
				}
			}
			if ( mdata(MDATA_TYPE) == MAP_TYPE_CEMETERY ) {
				if ( rnd(10) == 0 ) {
					rtval = ITEM_ID_LARGE_BOUQUET
				}
				if ( rnd(20) == 0 ) {
					rtval = ITEM_ID_PLUSH_DOLL
				}
				if ( rnd(30) == 0 ) {
					rtval = ITEM_ID_COFFIN
				}
				if ( rnd(180) == 0 ) {
					rtval = ITEM_ID_BOOK_RESURRECTION
				}
			}
			if ( mdata(MDATA_TYPE) == MAP_TYPE_MINE ) {
				if ( rnd(5) == 0 ) {
					rtval = ITEM_ID_SULFUR
				}
				if ( rnd(10) == 0 ) {
					rtval = ITEM_ID_CLAY
				}
				if ( rnd(40) == 0 ) {
					rtval = ITEM_ID_BLACK_CRYSTAL
				}
				if ( rnd(300) == 0 ) {
					rtval = ITEM_ID_STARDUST
				}
			}
			item_find ITEM_ID_DOWSING_OPATOS, 3, 1
			if ( stat != (-1) ) {
				ci = stat
				if ( inv(INV_ITEM_NUM, ci) >= 1 ) {
					if ( rtval == 0 ) {
						if ( mdata(MDATA_TYPE) == MAP_TYPE_TOWN | mdata(MDATA_TYPE) == MAP_TYPE_VILLAGE ) {
							if ( rnd(3) == 0 ) {
								rtval = ITEM_ID_GOLD_PIECE
							}
							if ( rnd(30) == 0 ) {
								rtval = ITEM_ID_GOLD_BAR
							}
						}
						if ( mdata(MDATA_TYPE) == MAP_TYPE_DUNGEON | mdata(MDATA_TYPE) == MAP_TYPE_LAKE ) {
							if ( rnd(5) == 0 ) {
								rtval = -1
							}
						}
						if ( mdata(MDATA_TYPE) == MAP_TYPE_FOREST ) {
							if ( rnd(5) == 0 ) {
								rtval = ITEM_ID_ACORN
							}
							if ( rnd(100) == 0 ) {
								rtval = ITEM_ID_GOLD_ACORN
							}
							if ( rnd(200) == 0 ) {
								rtval = ITEM_ID_FOUR_LEAF_CLOVER
							}
						}
						if ( mdata(MDATA_TYPE) == MAP_TYPE_TOWER | mdata(MDATA_TYPE) == MAP_TYPE_FORT ) {
							if ( rnd(8) == 0 ) {
								rtval = ITEM_ID_STONE_MATERIAL
							}
							if ( rnd(120) == 0 ) {
								rtval = ITEM_ID_SAFE
							}
						}
						if ( mdata(MDATA_TYPE) == MAP_TYPE_NEST ) {
							if ( rnd(5) == 0 ) {
								rtval = ITEM_ID_SHIT
							}
							if ( rnd(10) == 0 ) {
								rtval = ITEM_ID_EGG
							}
							if ( rnd(20) == 0 ) {
								rtval = ITEM_ID_JERKY
							}
							if ( rnd(130) == 0 ) {
								rtval = ITEM_ID_MYSTERIOUS_FOSSIL
							}
						}
						if ( mdata(MDATA_TYPE) == MAP_TYPE_CEMETERY ) {
							if ( rnd(10) == 0 ) {
								rtval = ITEM_ID_LARGE_BOUQUET
							}
							if ( rnd(20) == 0 ) {
								rtval = ITEM_ID_PLUSH_DOLL
							}
							if ( rnd(30) == 0 ) {
								rtval = ITEM_ID_COFFIN
							}
							if ( rnd(180) == 0 ) {
								rtval = ITEM_ID_BOOK_RESURRECTION
							}
						}
						if ( mdata(MDATA_TYPE) == MAP_TYPE_MINE ) {
							if ( rnd(5) == 0 ) {
								rtval = ITEM_ID_SULFUR
							}
							if ( rnd(10) == 0 ) {
								rtval = ITEM_ID_CLAY
							}
							if ( rnd(40) == 0 ) {
								rtval = ITEM_ID_BLACK_CRYSTAL
							}
							if ( rnd(300) == 0 ) {
								rtval = ITEM_ID_STARDUST
							}
						}
						if ( rtval != 0 ) {
							kaiwa = rnd(4)
							if ( kaiwa == 0 ) {
								txt lang("ÅuÉtÉnÉnÉn!ÉtÉnÉnÉn!Åv", cnvtalk("Muwahaha! Muwahaha!"))
							}
							if ( kaiwa == 1 ) {
								txt lang("ÅuÉtÉnÅ[Éì!Åv", cnvtalk("Muhan!"))
							}
							if ( kaiwa == 2 ) {
								txt lang("ÅuÇ±Ç±ÇæÅIÉtÉnÉnÉnÉbÅIÅv", cnvtalk("Mwahaha! Here it is!"))
							}
							if ( kaiwa == 3 ) {
								txt lang("ÅuÇ±Ç±å@ÇÍÉtÉnÉnÅIÅv", cnvtalk("Dig! Dig! Mwahahaha!"))
							}
						}
					}
				}
			}
			if ( map(refx, refy, 6) != 0 ) {
				cell_featread refx, refy
				if ( feat(1) == CELL_FEATURE_HIDDEN_PATH ) {
					gosub *revealHiddenPath
				}
			}
			map(refx, refy, 0) = tile_tunnel
			if ( adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_SHOP ) {
				dblistmax = 0
				inv_getheader -1
				repeat invrange, invhead
					if ( inv(INV_ITEM_NUM, cnt) <= 0 ) {
						continue
					}
					if ( chipm(CHIPM_ROLE, map(inv(INV_ITEM_X, cnt), inv(INV_ITEM_Y, cnt), 0)) == MAP_CHIP_ROLE_DISPLAY_SPACE ) {
						inv(INV_ITEM_SHOP_SAMPLE, cnt) = 100
					}
					else {
						inv(INV_ITEM_SHOP_SAMPLE, cnt) = 0
					}
				loop
			}
			spillfrag refx, refy, 2
			x = refx
			y = refy
			snd SOUNDLIST_CRUSH1
			animeid = ANIMATION_CRUSH
			aniref = 5
			gosub *anime
			txt lang("ï«Çå@ÇËèIÇ¶ÇΩÅB", "You finished digging the wall.")
			if ( gdata(GDATA_FLAG_TUTORIAL) == 2 & gdata(GDATA_AREA) == AREA_HOME ) {
				flt
				itemcreate -1, ITEM_ID_WORTHLESS_FAKE_GOLD_BAR, digx, digy, 0
				inv(INV_ITEM_STATUS, ci) = ITEM_STATUS_CURSED
				txt lang("âΩÇ©Çå©Ç¬ÇØÇΩÅB", "You found something out of crushed heaps of rock.")
				gdata(GDATA_FLAG_TUTORIAL) = 3
			}
			else {
				if ( rtval != 0 & gdata(GDATA_AREA) != AREA_SHELTER ) {
					if ( rtval > 0 ) {
						flt
						itemcreate -1, rtval, digx, digy, 0
						if ( inv(INV_ITEM_ID, ci) == ITEM_ID_MYSTERIOUS_FOSSIL ) {
							inv(INV_ITEM_PARAM2, ci) = limit(rnd((gdata(GDATA_LEVEL) + 3) / 3 + 2), 0, 99)
						}
					}
					else {
						if ( rtval == (-1) ) {
							flt calcobjlv(gdata(GDATA_LEVEL)), calcfixlv(FIX_QUALITY_GREAT)
							flttypemajor = FILTER_ORE
							itemcreate -1, ITEM_ID_DUMMY, digx, digy, 0
						}
					}
					txt lang("âΩÇ©Çå©Ç¬ÇØÇΩÅB", "You found something out of crushed heaps of rock.")
				}
			}
			gdata(GDATA_FLAG_WALLS_MINED)++
			gosub *expDig
			rowactend cc
		}
		else {
			if ( cdata(CDATA_TURN, cc) \ 5 == 0 ) {
				txtmore
				txtef COLOR_BLUE
				txt lang(" *Ç¥Ç≠Ç¡* ", " *clink* "), lang(" *ÉJÉLÉì* ", " *smash* "), lang(" *Ç≤Ç¬Ç¡* ", " *thud* "), lang(" *Ç∂Ç·ÇË* ", " *sing* "), lang(" *ÅÙ* ", " *sigh* ")
			}
		}
		return
	}
	txt lang("îwíÜÇ™í…Ç¢Åcå@ÇÈÇÃÇí˙ÇﬂÇΩÅB", "Your back hurts... You give up digging.")
	rowactend cc
	return

*eat
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		cdata(CDATA_ROW_ACT, cc) = ACTION_EAT
		cdata(CDATA_ACTION_PERIOD, cc) = 8
		if ( inv(INV_ITEM_ID, ci) == ITEM_ID_RICE_BALL ) {
			cdata(CDATA_ACTION_PERIOD, cc) = 1
		}
		cdata(CDATA_ITEM_USING, cc) = ci
		if ( synccheck(cc, -1) ) {
			snd SOUNDLIST_EAT1
			if ( inv(INV_ITEM_PROPERTY, ci) == PROP_NPC & cc < MAX_CHARA_FOLLOWER ) {
				gdata(GDATA_FLAG_TIMES_EATEN_IN_SECRET)++
				txt lang(name(cc) + "ÇÕ" + itemname(ci, 1) + "ÇÇ±Ç¡ÇªÇËÇ∆å˚Ç…â^ÇÒÇæÅB", name(cc) + " start" + _s(cc) + " to eat " + itemname(ci, 1) + " in secret.")
			}
			else {
				txt lang(name(cc) + "ÇÕ" + itemname(ci, 1) + "Çå˚Ç…â^ÇÒÇæÅB", name(cc) + " start" + _s(cc) + " to eat " + itemname(ci, 1) + ".")
			}
			if ( inv(INV_ITEM_ID, ci) == ITEM_ID_CORPSE & inv(INV_ITEM_SUB_NAME, ci) == CREATURE_ID_MAMMOTH ) {
				txt lang("ÅuÇ¢ÇΩÇæÇ´É}ÉìÉÇÉXÅv", cnvtalk("Let's eatammoth."))
			}
		}
		return
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
		return
	}
	if ( cdata(CDATA_TAMER_WHIP_PICKUP, cc) == 10 ) {
		if ( ci >= RANGE_INV2 ) {
			modimp2 cc, -20
		}
	}
	if ( synccheck(cc, -1) ) {
		txt lang(npcn(cc) + itemname(ci, 1) + "ÇêHÇ◊èIÇ¶ÇΩÅB", name(cc) + " " + have(cc) + " finished eating " + itemname(ci, 1) + ".")
	}
	gosub *insta_eat
	rowactend cc
	return

*insta_eat
	cieat = ci
	gosub *eatEffect
	ci = cieat
	if ( cc == CHARA_PLAYER ) {
		item_identify ci, ITEM_KNOWN_NAME
	}
	chara_unequip ci
	if ( stat == 1 ) {
		r1 = cc
		gosub *charaRefresh
	}
	inv(INV_ITEM_NUM, ci)--
	if ( ci >= RANGE_INV2 ) {
		cell_refresh inv(INV_ITEM_X, ci), inv(INV_ITEM_Y, ci)
	}
	else {
		if ( cc == CHARA_PLAYER ) {
			gosub *calcBurdenPc
		}
	}
	if ( cc == CHARA_PLAYER ) {
		gosub *eat_finish
	}
	else {
		if ( ci == cdata(CDATA_AI_ITEM, cc) ) {
			cdata(CDATA_AI_ITEM, cc) = 0
		}
		if ( cbit(CHARA_BIT_POISON_FLAG, cc) ) {
			if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_RAW ) {
				if ( inv(INV_ITEM_ROT, ci) < 0 ) {
					txtef COLOR_SKY_BLUE
					if ( jp ) {
						txt "ÅuÇ§ÇÆÇÆÅIÇ»ÇÒÇæÇ±ÇÃî—ÇÕÅIÅv", "ÅuÇ§Ç¡ÅIÅv", "ÅuÅcÅcÅIÅIÅv", "ÅuÇ†ÇÍÇÍÅcÅv", "ÅuÅcÇ±ÇÍÇÕâΩÇÃåôÇ™ÇÁÇπÇ≈Ç∑Ç©Åv", "ÅuÇ‹Ç∏Ç¢ÅIÅv"
					}
					if ( en ) {
						txt cnvtalk("Yuck!!"), cnvtalk("...!!"), cnvtalk("W-What..."), cnvtalk("Are you teasing me?"), cnvtalk("You fool!")
					}
					dmghp cc, 999, DAMAGE_FROM_BAD_FOOD
					if ( cdata(CDATA_EXIST, cc) != CHAR_STATE_ALIVE ) {
						if ( cdata(CDATA_RELATION, cc) > 0 ) {
							modkarma CHARA_PLAYER, -5
						}
						else {
							modkarma CHARA_PLAYER, -1
						}
					}
					modimp tc, -25
					return
				}
			}
		}
	}
	chara_anorexia cc
	if ( inv(INV_ITEM_ID, ci) == ITEM_ID_KAGAMI_MOCHI & rnd(3) | (inv(INV_ITEM_ID, ci) == ITEM_ID_MOCHI & rnd(10) == 0) | (inv(INV_ITEM_ID, ci) == ITEM_ID_OZOUNI & rnd(3) == 0) | (inv(INV_ITEM_ID, ci) == ITEM_ID_OSIRUKO & rnd(3) == 0) ) {
		if ( synccheck(cc, -1) ) {
			txtef COLOR_PURPLE
			txt lang(name(cc) + "ÇÕÇ‡ÇøÇçAÇ…Ç¬Ç‹ÇÁÇπÇΩÅI", name(cc) + " choke" + _s(cc) + " on mochi!")
			txt lang("ÅuÇﬁÇ™Ç¡Åv", cnvtalk("Mm-ghmm"))
		}
		cdata(CDATA_CONDITION_SUFFOCATION, cc) = 100 + rnd(100)
	}
	return

*eat_finish
	txtmore
	txtef COLOR_GREEN
	if ( cdata(CDATA_HUNGER, cc) >= 12000 ) {
		txt lang("Ç‡Ç§ìñï™êHÇ◊Ç»Ç≠ÇƒÇ‡Ç¢Ç¢ÅB", "Phew! You are pretty bloated."), lang("Ç±ÇÒÇ»Ç…êHÇ◊ÇΩÇ±Ç∆ÇÕÇ»Ç¢ÅI", "You've never eaten this much before!"), lang("êMÇ∂ÇÁÇÍÇ»Ç¢ÇÆÇÁÇ¢ñûï†ÇæÅI", "Your stomach is unbelievably full!")
		return
	}
	if ( cdata(CDATA_HUNGER, cc) >= 10000 ) {
		txt lang("Ç†Ç»ÇΩÇÕñûë´ÇµÇΩÅB", "You are satisfied!"), lang("ñûï†ÇæÅI", "This hearty meal has filled your stomach."), lang("Ç†Ç»ÇΩÇÕêHó~ÇñûÇΩÇµÇΩÅB", "You really ate!"), lang("Ç†Ç»ÇΩÇÕçKÇπÇªÇ§Ç…ï†ÇÇ≥Ç∑Ç¡ÇΩÅB", "You pat your stomach contentedly.")
		return
	}
	if ( cdata(CDATA_HUNGER, cc) >= 5000 ) {
		txt lang("Ç‹ÇæêHÇ◊ÇÁÇÍÇÈÇ»Åc", "You can eat more."), lang("Ç†Ç»ÇΩÇÕï†ÇÇ≥Ç∑Ç¡ÇΩÅB", "You pat your stomach."), lang("è≠ÇµêHó~ÇñûÇΩÇµÇΩÅB", "You satisfied your appetite a little.")
		return
	}
	if ( cdata(CDATA_HUNGER, cc) >= 2000 ) {
		txt lang("Ç‹ÇæÇ‹ÇæêHÇ◊ÇΩÇËÇ»Ç¢ÅB", "You are still a bit hungry."), lang("ï®ë´ÇËÇ»Ç¢Åc", "Not enough..."), lang("Ç‹ÇæãÛï†ÇæÅB", "You want to eat more."), lang("è≠ÇµÇÕï†ÇÃë´ÇµÇ…Ç»Ç¡ÇΩÇ©Åc", "Your stomach is still somewhat empty.")
		return
	}
	if ( cdata(CDATA_HUNGER, cc) >= 1000 ) {
		txt lang("ëSëRêHÇ◊ÇΩÇËÇ»Ç¢ÅI", "No, it was not enough at all."), lang("ï†ÇÃë´ÇµÇ…Ç‡Ç»ÇÁÇ»Ç¢ÅB", "You still feel very hungry."), lang("Ç∑ÇÆÇ…Ç‹ÇΩï†Ç™ñ¬Ç¡ÇΩÅB", "You aren't satisfied.")
		return
	}
	txt lang("Ç±ÇÒÇ»ó Ç≈ÇÕà”ñ°Ç™Ç»Ç¢ÅI", "It didn't help you from starving!"), lang("Ç±ÇÍÇÆÇÁÇ¢Ç≈ÇÕÅAéÄÇè≠ÇµêÊÇ…âÑÇŒÇµÇΩÇæÇØÇæÅB", "It prolonged your death for seconds."), lang("ñ≥à”ñ°ÇæÅcÇ‡Ç¡Ç∆âhó{ÇÇ∆ÇÁÇ»ÇØÇÍÇŒÅB", "Empty! Your stomach is still empty!")
	return

*readSpellbook
	if ( cdata(CDATA_ROW_ACT, cc) == ACTION_NONE ) {
		if ( inv(INV_ITEM_ID, ci) == ITEM_ID_ANCIENT_BOOK ) {
			if ( inv(INV_ITEM_PARAM2, ci) != 0 ) {
				txt lang("ÇªÇÍÇÕä˘Ç…âì«çœÇ›ÇæÅB", "You have already decoded the book.")
				return
			}
		}
		if ( cdata(CDATA_CONDITION_BLIND, cc) != 0 ) {
			if ( synccheck(cc, -1) ) {
				txt lang(name(cc) + "ÇÕâΩÇ‡å©Ç¶Ç»Ç¢ÅB", name(cc) + " can see nothing.")
			}
			return
		}
		cdata(CDATA_ROW_ACT, cc) = ACTION_READ
		if ( inv(INV_ITEM_ID, ci) == ITEM_ID_RECIPE ) {
			p = 50
		}
		else {
			if ( inv(INV_ITEM_ID, ci) == ITEM_ID_ANCIENT_BOOK ) {
				p = 50 + inv(INV_ITEM_PARAM1, ci) * 50 + inv(INV_ITEM_PARAM1, ci) * inv(INV_ITEM_PARAM1, ci) * 20
			}
			else {
				p = sdataref(SKILL_DATAREF_DIFF, efid)
			}
		}
		cdata(CDATA_ACTION_PERIOD, cc) = p / (2 + sdata(SKILL_NORMAL_LITERACY, CHARA_PLAYER)) + 1
		if ( ens2 > 0 ) {
			cdata(CDATA_ACTION_PERIOD, cc) += cdata(CDATA_ACTION_PERIOD, cc) / 2 + 5
		}
		cdata(CDATA_ITEM_USING, cc) = ci
		if ( synccheck(cc, -1) ) {
			txt lang(npcn(cc) + itemname(ci, 1) + "Çì«Ç›énÇﬂÇΩÅB", name(cc) + " start" + _s(cc) + " to read " + itemname(ci, 1) + ".")
		}
		item_separate ci
		return
	}
	if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
		ci = cdata(CDATA_ITEM_USING, cc)
		cibkread = ci
		gosub *expLiteracy
		if ( inv(INV_ITEM_ID, ci) == ITEM_ID_RECIPE ) {
			return
		}
		if ( inv(INV_ITEM_ID, ci) == ITEM_ID_ANCIENT_BOOK ) {
			r2 = 50 + inv(INV_ITEM_PARAM1, ci) * 50 + inv(INV_ITEM_PARAM1, ci) * inv(INV_ITEM_PARAM1, ci) * 20
			r3 = 0
		}
		else {
			r2 = sdataref(SKILL_DATAREF_DIFF, efid)
			r3 = efid
		}
		if ( inv(INV_ITEM_STATUS, ci) >= ITEM_STATUS_BLESSED ) {
			r2 = r2 * 100 / 120
		}
		if ( inv(INV_ITEM_STATUS, ci) <= ITEM_STATUS_CURSED ) {
			r2 = r2 * 150 / 100
		}
		gosub *calcReadCheck
		ci = cibkread
		if ( stat == 0 ) {
			rowactend cc
			inv(INV_ITEM_CHARGE, ci)--
			if ( inv(INV_ITEM_CHARGE, ci) < 0 ) {
				inv(INV_ITEM_CHARGE, ci) = 0
			}
			if ( inv(INV_ITEM_CHARGE, ci) == 0 ) {
				inv(INV_ITEM_NUM, ci)--
				if ( ci >= RANGE_INV2 ) {
					cell_refresh inv(INV_ITEM_X, ci), inv(INV_ITEM_Y, ci)
				}
				else {
					gosub *calcBurdenPc
				}
				if ( synccheck(cc, -1) ) {
					txt lang(itemname(ci, 1) + "ÇÕêoÇ∆Ç»Ç¡ÇƒïˆÇÍóéÇøÇΩÅB", itemname(ci, 1) + " falls apart.")
				}
			}
		}
		return
	}
	if ( synccheck(cc, -1) ) {
		txt lang(npcn(cc) + itemname(ci, 1) + "Çì«Ç›èIÇ¶ÇΩÅB", name(cc) + " " + have(cc) + " finished reading the book.")
	}
	if ( inv(INV_ITEM_ID, ci) == ITEM_ID_RECIPE ) {
		if ( inv(INV_ITEM_PARAM1, ci) == 0 ) {
			rowactend cc
			return 1
		}
		txt lang(itemname(ci, 1) + "ÇäoÇ¶ÇΩÅI", "You learned the recipe!")
		recipememory(inv(INV_ITEM_SUB_NAME, ci))++
		item_identify ci, ITEM_KNOWN_NAME
		removeitem ci, 1
		if ( synccheck(cc, -1) ) {
			txt lang(itemname(ci, 1) + "ÇÕêoÇ∆Ç»Ç¡ÇƒïˆÇÍóéÇøÇΩÅB", itemname(ci, 1) + " falls apart.")
		}
		rowactend cc
		return 1
	}
	if ( inv(INV_ITEM_ID, ci) == ITEM_ID_ANCIENT_BOOK ) {
		item_identify ci, ITEM_KNOWN_FULL
		txt lang(itemname(ci, 1) + "Çâì«ÇµÇΩÅI", "You finished decoding " + itemname(ci, 1) + "!")
		inv(INV_ITEM_PARAM2, ci) = 1
		inv(INV_ITEM_CHARGE, ci) = 1
		ibitmod ITEM_BIT_CHARGE_ITEM, ci, 0
		item_stack CHARA_PLAYER, ci, 1
	}
	else {
		skillgain cc, efid, 1, (rnd(100 / 2 + 1) + 100 / 2) * (90 + sdata(SKILL_NORMAL_MEMORIZATION, cc) + (sdata(SKILL_NORMAL_MEMORIZATION, cc) > 0) * 20) / limit(100 + spell(efid - STARTING_SKILL_SPELL) / 2, 50, 1000) + 1
		gosub *expMemorize
		if ( itemmemory(2, inv(INV_ITEM_ID, ci)) == 0 ) {
			itemmemory(2, inv(INV_ITEM_ID, ci)) = 1
		}
	}
	if ( ens2 > 0 ) {
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cnt == CHARA_PLAYER ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
				else {
					if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, tc) ) {
						continue
					}
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			skillexp SKILL_NORMAL_LITERACY, tc, 400
			if ( inv(INV_ITEM_ID, ci) != ITEM_ID_ANCIENT_BOOK ) {
				skillexp SKILL_NORMAL_MEMORIZATION, tc, 10 + sdataref(SKILL_DATAREF_DIFF, efid) / 2
			}
		loop
		ens2 = 0
	}
	item_identify ci, ITEM_KNOWN_NAME
	if ( inv(INV_ITEM_ID, ci) != ITEM_ID_ANCIENT_BOOK ) {
		inv(INV_ITEM_CHARGE, ci)--
		if ( inv(INV_ITEM_CHARGE, ci) < 0 ) {
			inv(INV_ITEM_CHARGE, ci) = 0
		}
		if ( inv(INV_ITEM_CHARGE, ci) == 0 ) {
			removeitem ci, 1
			if ( synccheck(cc, -1) ) {
				txt lang(itemname(ci, 1) + "ÇÕêoÇ∆Ç»Ç¡ÇƒïˆÇÍóéÇøÇΩÅB", itemname(ci, 1) + " falls apart.")
			}
		}
	}
	rowactend cc
	return 1

*read
	if ( cdata(CDATA_CONDITION_BLIND, cc) != 0 ) {
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕâΩÇ‡å©Ç¶Ç»Ç¢ÅB", name(cc) + " can see nothing.")
		}
		return
	}
	if ( inv(INV_ITEM_ID, ci) == ITEM_ID_LICENCE_THE_VOID_EXPLORER ) {
		snd SOUNDLIST_BOOK1
		txt lang("Ç∑Ç≠Ç¬ÇÃíTçıÇãñâ¬Ç∑ÇÈÅAÇ∆Ç¢Ç§ì‡óeÇÃï∂ñ Ç™å`éÆìIÇ…èëÇ¢ÇƒÇ†ÇÈÅB", "According to the card, you are permitted to explore the void now.")
		return 1
	}
	if ( inv(INV_ITEM_ID, ci) == ITEM_ID_SKILLBOOK ) {
		gosub *com_train
		if ( stat == 1 ) {
			return 1
		}
		else {
			return 0
		}
	}
	if ( inv(INV_ITEM_ID, ci) == ITEM_ID_BOOK_RACHEL ) {
		snd SOUNDLIST_BOOK1
		txt lang("ÉåÉCÉ`ÉFÉãÇ∆Ç¢Ç§çÏâ∆Ç…ÇÊÇÈÅAêSÇ†ÇΩÇΩÇ‹ÇÈì∂òbèWÇæÅB", "It's a lovely fairy tale written by Rachel.")
		return 1
	}
	if ( inv(INV_ITEM_ID, ci) == ITEM_ID_LULWYS_PHOTO_COLLECTION ) {
		snd SOUNDLIST_BOOK1
		txt lang("Ç»ÇÒÇ∆Ç‡âﬂåÉÇæÅcÅB", "Extreme photos are arranged...")
		return 1
	}
	tc = cc
	item_identify ci, ITEM_KNOWN_NAME
	gosub *com_book
	return 1

#deffunc calcmagiccontrol int calcmagiccontrol_arg1, int calcmagiccontrol_arg2
	if ( sdata(SKILL_NORMAL_CONTROL_MAGIC, calcmagiccontrol_arg1) != 0 | sdata(SKILL_NORMAL_CONTROL_MAGIC, calcmagiccontrol_arg2) != 0 ) {
		if ( cdata(CDATA_RELATION, calcmagiccontrol_arg1) >= 0 & cdata(CDATA_RELATION, calcmagiccontrol_arg2) >= 0 | (cdata(CDATA_RELATION, calcmagiccontrol_arg1) == (-1) & cdata(CDATA_RELATION, calcmagiccontrol_arg2) == (-1)) | (cdata(CDATA_RELATION, calcmagiccontrol_arg1) < (-1) & cdata(CDATA_RELATION, calcmagiccontrol_arg2) < (-1)) ) {
			if ( sdata(SKILL_NORMAL_CONTROL_MAGIC, calcmagiccontrol_arg1) * 5 + sdata(SKILL_NORMAL_CONTROL_MAGIC, calcmagiccontrol_arg2) > rnd(dmg + 1) ) {
				dmg = 0
			}
			else {
				dmg = rnd(dmg * 100 / (100 + sdata(SKILL_NORMAL_CONTROL_MAGIC, calcmagiccontrol_arg1) * 10 + sdata(SKILL_NORMAL_CONTROL_MAGIC, calcmagiccontrol_arg2) * 2) + 1)
			}
			if ( dmg < 1 ) {
				if ( synccheck(calcmagiccontrol_arg2, -1) ) {
					txt lang(name(calcmagiccontrol_arg2) + "ÇÕä™Ç´çûÇ›Çñ∆ÇÍÇΩÅB", "The spell passes through " + name(calcmagiccontrol_arg2) + ".")
				}
				if ( sdata(SKILL_NORMAL_CONTROL_MAGIC, calcmagiccontrol_arg2) != 0 ) {
					skillexp SKILL_NORMAL_CONTROL_MAGIC, calcmagiccontrol_arg2, 8, 4
				}
				skillexp SKILL_NORMAL_CONTROL_MAGIC, calcmagiccontrol_arg1, 8, 4
				return 1
			}
			if ( sdata(SKILL_NORMAL_CONTROL_MAGIC, calcmagiccontrol_arg2) != 0 ) {
				skillexp SKILL_NORMAL_CONTROL_MAGIC, calcmagiccontrol_arg2, 30, 2
			}
			skillexp SKILL_NORMAL_CONTROL_MAGIC, calcmagiccontrol_arg1, 30, 2
		}
	}
	return 0

*cast
	spellbk = efid
	ccbk = cc
	gosub *cast_proc
	if ( stat == 1 ) {
		cc = ccbk
		r1 = cc
		r2 = spellbk
		gosub *expCasting
		powsel = 0
		if ( gdata(GDATA_FLAG_MAIN) < 350 ) {
			if ( cdata(CDATA_LEVEL, cc) >= 130 ) {
				powsel = 100
			}
		}
		if ( gdata(GDATA_FLAG_MAIN) >= 350 ) {
			if ( cdata(CDATA_LEVEL, cc) >= 50 ) {
				powsel = 100
			}
		}
		if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 | cc == CHARA_PLAYER ) {
			powsel = 100
		}
		if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
			powsel = 100
		}
		if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_QUALITY, cc) > FIX_QUALITY_GREAT & cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) / 2 & cdata(CDATA_POWER_GAUGE, cc) < 200 ) {
			if ( exgauge != 100 ) {
				powsel = 0
			}
		}
		if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_TEMPORARY ) {
			if ( cdata(CDATA_DIRECTIVE_MODE_ORG, cc) != DIRECTIVE_MODE_OFFENSIVE ) {
				powsel = 0
			}
		}
		if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_DEFENSIVE | cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_INTERCEPT ) {
			powsel = 0
		}
		if ( cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) == 0 ) {
				powsel = 0
			}
		}
		if ( powsel == 100 ) {
			if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
				if ( sdataref(SKILL_DATAREF_TYPE, efid) == SKILL_TYPE_BOLT | sdataref(SKILL_DATAREF_TYPE, efid) == SKILL_TYPE_ARROW | (sdataref(SKILL_DATAREF_TYPE, efid) == SKILL_TYPE_BALL & efid != SKILL_SPACT_RAIN_OF_SANITY & efid != SKILL_SPELL_HEALING_RAIN) ) {
					efid = SKILL_SPACT_DIFFUSION_WAVE
					gosub *effect
					powsel = 0
				}
			}
		}
		return 1
	}
	return 0

*cast_proc
	efsource = 3
	efstatus = 0
	efp = calcspellpower(efid, cc)
	if ( gdata(GDATA_TEMPORARY_FLAGS) == 0 ) {
		if ( cc == CHARA_PLAYER ) {
			if ( calcspellcostmp(efid, cc) > cdata(CDATA_MP, cc) ) {
				txt lang("É}ÉiÇ™ë´ÇËÇ»Ç¢Ç™ÅAÇªÇÍÇ≈Ç‡ârè•ÇééÇ›ÇÈÅH", "You are going to over-cast the spell. Are you sure?")
				promptYesNo
				if ( rtval != 0 ) {
					gosub *screen_draw
					efsource = 0
					return 0
				}
			}
			screenupdate = -1
			gosub *screen_draw
		}
		gosub *effect_selectTg
		if ( stat == 0 ) {
			efsource = 0
			return 0
		}
		if ( cc != CHARA_PLAYER ) {
			if ( sdataref(SKILL_DATAREF_TYPE, efid) == SKILL_TYPE_SUMMON ) {
				procid = (procid + 1) \ 4
				proclist(procid) = "skSummon" + " ct:" + ct
				if ( cdata(CDATA_RELATION, cc) == 10 | gdata(GDATA_AREA) == AREA_PET_ARENA ) {
					efsource = 0
					return 0
				}
				if ( gdata(GDATA_TURN) \ 10 > 4 ) {
					efsource = 0
					return 0
				}
			}
		}
		if ( cc == CHARA_PLAYER | (cc != CHARA_PLAYER & npccostmp == 1) ) {
			if ( cc == CHARA_PLAYER ) {
				spell(efid - STARTING_SKILL_SPELL) -= calcspellcoststock(efid, cc)
				if ( spell(efid - STARTING_SKILL_SPELL) < 0 ) {
					spell(efid - STARTING_SKILL_SPELL) = 0
				}
			}
			mp = calcspellcostmp(efid, cc)
			if ( cc == CHARA_PLAYER ) {
				if ( cdata(CDATA_GOD, CHARA_PLAYER) == GOD_EHEKATL ) {
					mp = rnd(mp * 140 / 100 + 1) + 1
				}
			}
			dmgmp cc, mp
			if ( cdata(CDATA_EXIST, cc) != CHAR_STATE_ALIVE ) {
				efsource = 0
				return 1
			}
		}
		if ( cdata(CDATA_CONDITION_CONFUSE, cc) != 0 ) {
			if ( synccheck(cc, -1) ) {
				txt lang(name(cc) + "ÇÕç¨óêÇµÇ»Ç™ÇÁÇ‡ñÇñ@ÇééÇ›ÇΩÅB", name(cc) + " try" + _s(cc) + " to cast a spell in confusion.")
				txtmore
			}
			gosub *calcReadCheck
			if ( stat == 0 ) {
				efsource = 0
				return 1
			}
		}
		else {
			if ( synccheck(cc, -1) ) {
				if ( cc == CHARA_PLAYER ) {
					txt lang(name(cc) + "ÇÕ" + skillname(efid) + "ÇÃ" + _cast(cdata(CDATA_CAST_STYLE, cc)), name(cc) + " cast " + skillname(efid) + ".")
					txtmore
				}
				else {
					txt lang(name(cc) + "ÇÕ" + _cast(cdata(CDATA_CAST_STYLE, cc)), name(cc) + "" + _cast(cdata(CDATA_CAST_STYLE, cc)))
					txtmore
				}
			}
		}
		if ( map(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 8) != 0 ) {
			i = map(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 8) - 1
			if ( mef(0, i) == 8 ) {
				if ( rnd(4) == 0 ) {
					if ( synccheck(cc, -1) ) {
						txtmore
						txt lang(name(cc) + "ÇÕåıÇÃñ∂Ç…ñ⁄Ç™·øÇ›ârè•Ç…é∏îsÇµÇΩÅB", name(cc) + " fail" + _s(cc) + " to cast by glare of mist.")
					}
					efsource = 0
					return 1
				}
			}
		}
		if ( findbuff(cc, BUFF_MIST_OF_SILENCE) != (-1) ) {
			if ( synccheck(cc, -1) ) {
				txt lang("íæñŸÇÃñ∂Ç™ñÇóÕÇÃî≠ê∂Çëjé~ÇµÇΩÅB", "The mist of silence interrupts a spell.")
			}
			efsource = 0
			return 1
		}
		if ( rnd(100) >= calcspellfail(efid, cc) ) {
			if ( synccheck(cc, -1) ) {
				if ( cdata(CDATA_CAST_STYLE, cc) == 0 ) {
					txt lang(name(cc) + "ÇÕârè•Ç…é∏îsÇµÇΩÅB", name(cc) + " fail" + _s(cc) + " to cast a spell.")
				}
				else {
					txt lang("ÇµÇ©ÇµÇ§Ç‹Ç≠åàÇ‹ÇÁÇ»Ç©Ç¡ÇΩÅB", name(cc) + " fail" + _s(cc) + " to cast a spell.")
				}
				animeid = ANIMATION_FIZZLE
				gosub *anime
			}
			efsource = 0
			return 1
		}
		if ( noeffect == 1 ) {
			txt_nothinghappens
			efsource = 0
			return 1
		}
	}
	efp = calcspellpower(efid, cc)
	if ( cdata(CDATA_EQUIP_WEIGHT, cc) < 35000 & cdata(CDATA_EQUIP_WEIGHT, cc) >= 15000 & findbuff(cc, BUFF_MAGIC_EQUIP) != (-1) ) {
		efp = efp * 120 / 100
	}
	if ( cdata(CDATA_ENHANCE_SPELL, cc) == 0 ) {
		if ( cdata(CDATA_ALLIED, cc) == 0 ) {
			if ( cc != CHARA_PLAYER ) {
				if ( sdata(SKILL_NORMAL_CASTING, cc) > 100 ) {
					efp = efp * (100 + limit((sdata(SKILL_NORMAL_CASTING, cc) - 100) / 5, 0, 40)) / 100
				}
			}
		}
	}
	if ( cdata(CDATA_ENHANCE_SPELL, cc) != 0 ) {
		efp = efp * (100 + limit(cdata(CDATA_ENHANCE_SPELL, cc) * 2 / 3, 0, 1000) / 10) / 100
	}
	rapidmagic = 0
	if ( cbit(CHARA_BIT_RAPID_MAGIC, cc) & sdataref(SKILL_DATAREF_TYPE, efid) == SKILL_TYPE_ARROW ) {
		rapidmagic = 3
	}
	if ( rapidmagic ) {
		repeat rapidmagic
			gosub *effect
			if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
				break
			}
		loop
		rapidmagic = 0
	}
	else {
		if ( efid == SKILL_SPELL_FIRE_BOLT | efid == SKILL_SPELL_ICE_BOLT | efid == SKILL_SPELL_FIRE_BALL | efid == SKILL_SPELL_ICE_BALL ) {
			fusifc = encfindpower(cc, 73)
		}
		if ( efid == SKILL_SPELL_MIND_BOLT | efid == SKILL_SPELL_RAGING_ROAR ) {
			fusims = encfindpower(cc, 74)
		}
		if ( efid == SKILL_SPELL_NERVE_ARROW | efid == SKILL_SPELL_POISON_STORM ) {
			fusipn = encfindpower(cc, 75)
		}
		gosub *effect
	}
	return 1

*drinkPotion
	tc = cc
	efsource = 4
	if ( potionthrow ) {
		cc = ccthrowpotion
	}
	if ( potionspill | potionthrow ) {
		if ( potionthrow ) {
			efp = sdata(SKILL_NORMAL_MAGIC_DEVICE, cc) * 5 + efp * potionthrow / 100
			efstatus = inv(INV_ITEM_STATUS, ci)
		}
	}
	else {
		efp = sdata(SKILL_NORMAL_MAGIC_DEVICE, cc) * 5 + efp
		efstatus = inv(INV_ITEM_STATUS, ci)
		if ( synccheck(tc, -1) ) {
			snd SOUNDLIST_DRINK1
			txt lang(npcn(tc) + itemname(ci, 1) + "Çà˘Ç›ä±ÇµÇΩÅB", name(tc) + " drink" + _s(tc) + " " + itemname(ci, 1) + ".")
		}
	}
	gosub *effect
	if ( ibit(ITEM_BIT_HAZARD, ci) == 1 ) {
		snd SOUNDLIST_ATK_POISON
		txtef COLOR_RED
		txt lang(name(tc) + "ÇÃà”éØÇ™åªé¿Çó£ÇÍÅAå∂äoÇ…ì€Ç›çûÇ‹ÇÍÇƒÇ¢Ç≠ÅcÅB", name(tc) + " regretted being born.")
		dmg = (sdata(SKILL_NORMAL_GENE_ENGINEER, CHARA_PLAYER) + 3) / 2 * sqrt(sdata(SKILL_NORMAL_GENE_ENGINEER, CHARA_PLAYER) + 4) + rnd(sdata(SKILL_NORMAL_GENE_ENGINEER, CHARA_PLAYER) * 3 + 5)
		dmghp tc, (dmg + 10) / 10 * (rnd(200) + limit(sdata(SKILL_NORMAL_GENE_ENGINEER, CHARA_PLAYER) * 2, 200, 2000)) / 100 + 1, CHARA_PLAYER, SKILL_RES_MIND, 1000
	}
	if ( inv(INV_ITEM_ID, ci) != ITEM_ID_HANDFUL_SNOW & inv(INV_ITEM_ID, ci) != ITEM_ID_BOTTLE_DYE ) {
		if ( potionthrow != 90 ) {
			skillexp SKILL_NORMAL_MAGIC_DEVICE, cc, 40
		}
		else {
			skillexp SKILL_NORMAL_MAGIC_DEVICE, cc, 2
		}
		if ( potionthrow != 90 ) {
			skillexp SKILL_NORMAL_ALCHEMY, cc, 40
		}
		else {
			skillexp SKILL_NORMAL_ALCHEMY, cc, 2
		}
	}
	if ( potionspill | potionthrow ) {
		potionspill = 0
		potionthrow = 0
		cdata(CDATA_HUNGER, tc) += 30
	}
	else {
		if ( obvious == 1 ) {
			if ( tc == CHARA_PLAYER ) {
				item_identify ci, ITEM_KNOWN_NAME
			}
		}
		inv(INV_ITEM_NUM, ci)--
		if ( ci >= RANGE_INV2 ) {
			cell_refresh inv(INV_ITEM_X, ci), inv(INV_ITEM_Y, ci)
		}
		else {
			if ( tc == CHARA_PLAYER ) {
				gosub *calcBurdenPc
			}
		}
		cdata(CDATA_HUNGER, tc) += 150
	}
	if ( cdata(CDATA_HUNGER, tc) > 12000 * 2 ) {
		if ( rnd(5) == 0 ) {
			chara_vomit tc
		}
	}
	return 1

*drinkWell
	if ( inv(INV_ITEM_PARAM1, ci) < (-5) | inv(INV_ITEM_PARAM3, ci) >= 20 | (inv(INV_ITEM_ID, ci) == ITEM_ID_HOLY_WELL & gdata(GDATA_FLAG_HOLY_WELL) <= 0) ) {
		valn = itemname(ci)
		txt lang(valn + "ÇÕüøÇÍÇƒÇ¢ÇÈÅB", valn + " is dry.")
		return 1
	}
	snd SOUNDLIST_DRINK1
	osakana = 0
	item_find ITEM_ID_MUG_OF_EHEKATL, 3, 1
	if ( stat != (-1) ) {
		if ( inv(INV_ITEM_NUM, stat) >= 1 ) {
			if ( cc == CHARA_PLAYER ) {
				osakana = 100
			}
		}
	}
	if ( osakana == 0 ) {
		valn = itemname(ci)
		txt lang(name(cc) + "ÇÕ" + valn + "ÇÃêÖÇÇ∑Ç≠Ç¡Çƒà˘ÇÒÇæÅB", name(cc) + " draw" + _s(cc) + " water from " + valn + ".")
		txtmore
	}
	if ( osakana == 100 ) {
		valn = itemname(ci)
		txt lang(name(cc) + "ÇÕ" + valn + "ÇÃêÖÇÉ}ÉOÉJÉbÉvÇ≈Ç∑Ç≠Ç¡Çƒà˘ÇÒÇæÅB", name(cc) + " draw" + _s(cc) + " water from " + valn + " by Mug of Ehekatl.")
		txtmore
	}
	tc = cc
	cibk = ci
	p = rnd(100)
	repeat 1
		if ( cc != CHARA_PLAYER ) {
			if ( rnd(15) == 0 ) {
				txt lang(name(cc) + "ÇÕà‰åÀÇ…óéÇøÇΩÅI ", name(cc) + " falls in the well!")
				txtmore
				txtef COLOR_SKY_BLUE
				txt name(cc) + lang("ÅuéËÇêLÇŒÇπÅ[Åv", " yells, " + cnvtalk("G-Give me your hands!"))
				if ( cbit(CHARA_BIT_FLOAT, cc) == 1 & cdata(CDATA_CONDITION_GRAVITY, cc) == 0 | findbuff(cc, BUFF_GRAVITY_ACCEL) != (-1) ) {
					txtmore
					txt lang("ÇµÇ©ÇµÇ∑ÇÆÇ…ïÇÇ¢ÇƒÇ´ÇΩÅc ", "Soon " + he(cc) + " floats up to the surface.")
				}
				else {
					dmghp cc, 9999, DAMAGE_FROM_TRAP
				}
				break
			}
		}
		if ( inv(INV_ITEM_ID, ci) == ITEM_ID_HOLY_WELL ) {
			if ( rnd(2) == 0 ) {
				efid = SKILL_EFFECT_POTION_POTENTIAL
				gosub *effect
				break
			}
		}
		if ( p > 70 ) {
			if ( osakana == 100 ) {
				txt_freshwater
				break
			}
			p = rnd(5)
			if ( p == 0 ) {
				efid = SKILL_EFFECT_SLEEP
				efp = 100
				gosub *effect
				break
			}
			if ( p == 1 ) {
				efid = SKILL_EFFECT_PARALYZE
				efp = 100
				gosub *effect
				break
			}
			if ( p == 2 ) {
				efid = SKILL_EFFECT_BLIND
				efp = 100
				gosub *effect
				break
			}
			if ( p == 3 ) {
				efid = SKILL_EFFECT_CONFUSE
				efp = 100
				gosub *effect
				break
			}
			if ( p == 4 ) {
				efid = SKILL_EFFECT_POISON
				efp = 100
				gosub *effect
				break
			}
			autosave = 1 * (gdata(GDATA_AREA) != AREA_SHOW_HOUSE)
		}
		if ( p > 55 ) {
			flt
			itemcreate -1, ITEM_ID_GOLD_PIECE, cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 0
			inv(INV_ITEM_NUM, ci) = rnd(sdata(SKILL_NORMAL_DETECTION, cc) / 2 * 50 + 100) + 1
			txt lang(name(cc) + "ÇÕêÖÇÃíÜÇ…ã‡â›Çå©Ç¬ÇØÇΩÅB", name(cc) + " find" + _s(cc) + " some gold pieces in water.")
			break
		}
		if ( p > 45 ) {
			if ( osakana == 100 ) {
				txt_freshwater
				break
			}
			p = rnd(MAX_SKILL_ATTR_BASIC) + STARTING_SKILL_ATTR
			if ( rnd(5) > 2 ) {
				skillmod p, cc, 1000
			}
			else {
				skillmod p, cc, -1000
			}
			break
		}
		if ( p > 40 ) {
			if ( osakana == 100 ) {
				txt_freshwater
				break
			}
			if ( cdata(CDATA_LEVEL, cc) < 5 ) {
				break
			}
			if ( synccheck(cc, -1) ) {
				txt lang("" + name(cc) + "ÇÕâΩÇ©Ç¢ÇØÇ»Ç¢Ç‡ÇÃÇà˘Ç›çûÇÒÇæÅB", name(cc) + " swallow" + _s(cc) + " something bad.")
			}
			tc = cc
			gosub *alien_effect
			break
		}
		if ( p > 35 ) {
			if ( osakana == 100 ) {
				txt_freshwater
				break
			}
			txt lang("à‰åÀÇ©ÇÁâΩÇ©Ç™èoÇƒÇ´ÇΩÅI", "Something comes out from the well!")
			repeat 1 + rnd(3)
				flt calcobjlv(cdata(CDATA_LEVEL, cc) * 3 / 2 + 3), calcfixlv(FIX_QUALITY_GOOD)
				characreate -1, CREATURE_ID_BUG, cdata(CDATA_X, cc), cdata(CDATA_Y, cc)
				cbitmod CHARA_BIT_SUMMONED, rc, 1
			loop
			break
		}
		if ( p > 33 ) {
			efid = SKILL_EFFECT_POTION_POTENTIAL
			gosub *effect
			break
		}
		if ( p > 20 ) {
			if ( osakana == 100 ) {
				txt_freshwater
				break
			}
			efid = SKILL_EFFECT_MUTATE
			gosub *effect
			break
		}
		if ( gdata(GDATA_FLAG_RARE_DROP) == 100 ) {
			if ( cdata(CDATA_KARMA, CHARA_PLAYER) > 0 ) {
				if ( p > 20 - cdata(CDATA_KARMA, CHARA_PLAYER) / 10 ) {
					if ( rnd(gdata(GDATA_WELL_WISH) + 1) ) {
						txtef COLOR_YELLOW
						txt lang("Ç‡ÇÃÇ∑Ç≤Ç¢çKâ^Ç™ñKÇÍÇΩÅcÇÊÇ§Ç»ãCÇ™ÇµÇΩÇ™ãCÇÃÇπÇ¢ÇæÇ¡ÇΩÅB", "You feel as a stroke of good fortune passed by.")
						break
					}
					if ( gdata(GDATA_AREA) != AREA_CHAOS_CRADLE | gdata(GDATA_LEVEL) != 179 ) {
						gdata(GDATA_WELL_WISH)++
					}
					efid = SKILL_SPELL_WISH
					gosub *effect
					break
				}
			}
			if ( p == 0 ) {
				if ( rnd(gdata(GDATA_WELL_WISH) + 1) ) {
					txtef COLOR_YELLOW
					txt lang("Ç‡ÇÃÇ∑Ç≤Ç¢çKâ^Ç™ñKÇÍÇΩÅcÇÊÇ§Ç»ãCÇ™ÇµÇΩÇ™ãCÇÃÇπÇ¢ÇæÇ¡ÇΩÅB", "You feel as a stroke of good fortune passed by.")
					break
				}
				gdata(GDATA_WELL_WISH)++
				efid = SKILL_SPELL_WISH
				gosub *effect
				break
			}
		}
		if ( cc == CHARA_PLAYER ) {
			txt_freshwater
		}
	loop
	osakana = 0
	ci = cibk
	if ( cc != CHARA_PLAYER ) {
		cdata(CDATA_HUNGER, cc) += 4000
	}
	else {
		cdata(CDATA_HUNGER, cc) += 500
	}
	if ( inv(INV_ITEM_ID, ci) == ITEM_ID_HOLY_WELL ) {
		gdata(GDATA_FLAG_HOLY_WELL)--
	}
	else {
		inv(INV_ITEM_PARAM1, ci) -= rnd(3)
		inv(INV_ITEM_PARAM3, ci) += rnd(3)
		if ( inv(INV_ITEM_PARAM3, ci) >= 20 ) {
			txt lang(itemname(ci) + "ÇÕäÆëSÇ…ä±è„Ç™Ç¡ÇΩÅB", itemname(ci) + " has completely dried up.")
			return 1
		}
	}
	if ( inv(INV_ITEM_PARAM1, ci) < (-5) ) {
		txt lang(itemname(ci) + "ÇÕä±è„Ç™Ç¡ÇΩÅB", itemname(ci) + " has dried up.")
	}
	return 1

*readScroll
	tc = cc
	tlocx = cdata(CDATA_X, cc)
	tlocy = cdata(CDATA_Y, cc)
	efstatus = inv(INV_ITEM_STATUS, ci)
	efsource = 2
	if ( cdata(CDATA_CONDITION_BLIND, cc) != 0 ) {
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕâΩÇ‡å©Ç¶Ç»Ç¢ÅB", name(cc) + " can see nothing.")
		}
		efsource = 0
		return
	}
	if ( cdata(CDATA_CONDITION_CONFUSE, cc) != 0 ) {
		if ( rnd(4) != 0 ) {
			if ( synccheck(cc, -1) ) {
				txt lang(name(cc) + "ÇÕÇ”ÇÁÇ”ÇÁÇµÇΩÅB", name(cc) + " stagger" + _s(cc) + ".")
			}
			efsource = 0
			return
		}
	}
	if ( synccheck(cc, -1) ) {
		txt lang(npcn(cc) + itemname(ci, 1) + "Çì«ÇÒÇæÅB", name(cc) + " read" + _s(cc) + " " + itemname(ci, 1) + ".")
		txtmore
	}
	if ( inv(INV_ITEM_ID, ci) != ITEM_ID_TREASURE_MAP & inv(INV_ITEM_ID, ci) != ITEM_ID_MAP ) {
		inv(INV_ITEM_NUM, ci)--
		if ( ci >= RANGE_INV2 ) {
			cell_refresh inv(INV_ITEM_X, ci), inv(INV_ITEM_Y, ci)
		}
		else {
			gosub *calcBurdenPc
		}
		skillexp SKILL_NORMAL_LITERACY, cc, 25, 2
	}
	gosub *effect
	if ( cc == CHARA_PLAYER ) {
		if ( obvious == 1 ) {
			item_identify ci, ITEM_KNOWN_NAME
		}
	}
	return 1

*zapStaff
	if ( inv(INV_ITEM_CHARGE, ci) <= 0 ) {
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕ" + itemname(ci, 1) + "ÇêUÇ¡ÇΩÅB", name(cc) + " zap " + itemname(ci, 1) + ".")
			txt_nothinghappens
		}
		if ( cc == CHARA_PLAYER ) {
			item_stack CHARA_PLAYER, ci, 1
		}
		return
	}
	efstatus = inv(INV_ITEM_STATUS, ci)
	if ( efstatus >= 1 ) {
		efstatus = 0
	}
	efsource = 1
	gosub *effect_selectTg
	if ( stat == 0 ) {
		efsource = 0
		return 0
	}
	if ( efid >= STARTING_SKILL_SPELL & efid < MAX_SPELL ) {
		if ( stat == 0 & sdataref(SKILL_DATAREF_TG, efid) / EXT_SDATAREF * EXT_SDATAREF == TARGET_TYPE_ENEMY | noeffect == 1 ) {
			if ( synccheck(cc, -1) ) {
				redraw 0
				txt lang(name(cc) + "ÇÕ" + itemname(ci, 1) + "ÇêUÇ¡ÇΩÅB", name(cc) + " zap " + itemname(ci, 1) + ".")
				txt_nothinghappens
			}
			goto *zapStaffSkip
		}
	}
	efp = efp * (100 + sdata(SKILL_NORMAL_MAGIC_DEVICE, cc) * 20 + sdata(SKILL_ATTR_MAG, cc) / 2 + sdata(SKILL_ATTR_PER, cc) / 2) / 220
	if ( cdata(CDATA_ENHANCE_SPELL, cc) != 0 ) {
		efp = efp * (100 + limit(cdata(CDATA_ENHANCE_SPELL, cc) * 2 / 3, 0, 1000) / 10) / 100
	}
	if ( inv(INV_ITEM_ID, ci) == ITEM_ID_ROD_LIGHTNING_BALL | inv(INV_ITEM_ID, ci) == ITEM_ID_ROD_ECLIPSE | inv(INV_ITEM_ID, ci) == ITEM_ID_ROD_FIRE_WALL | inv(INV_ITEM_ID, ci) == ITEM_ID_ROD_ACID_GROUND | inv(INV_ITEM_ID, ci) == ITEM_ID_ROD_LIGHTNING_BOLT | inv(INV_ITEM_ID, ci) == ITEM_ID_ROD_FIRE_BOLT | inv(INV_ITEM_ID, ci) == ITEM_ID_ROD_ICE_BOLT | inv(INV_ITEM_ID, ci) == ITEM_ID_ROD_MAGIC_MISSILE | inv(INV_ITEM_ID, ci) == ITEM_ID_ROD_POISON_BALL | inv(INV_ITEM_ID, ci) == ITEM_ID_ROD_MAGIC_LASER | inv(INV_ITEM_ID, ci) == ITEM_ID_ROD_BUBBLE_BALL ) {
		if ( cc != CHARA_PLAYER & cdata(CDATA_SP, cc) > 0 & (sdata(SKILL_NORMAL_ALCHEMY, cc) > 0) ) {
			if ( sqrt(sdata(SKILL_NORMAL_ALCHEMY, cc)) + 80 >= rnd(100) ) {
				item_separate ci
				inv(INV_ITEM_CHARGE, ci)++
				efp = efp * 7 / 10 + 1
				txtef COLOR_GREEN
				txt lang(name(cc) + "ÇÕèÒÇàÍéûï°êªÇµÇΩÅB", name(cc) + " duplicated replica of " + itemname(ci) + ".")
				if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 ) {
					if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
						skillexp SKILL_NORMAL_ALCHEMY, cc, 80
					}
				}
			}
		}
		if ( cc == CHARA_PLAYER & gdata(GDATA_FLAG_DUPLICANE) == 100 & cdata(CDATA_SP, CHARA_PLAYER) > 0 ) {
			item_separate ci
			dupli = 0
			inv(INV_ITEM_CHARGE, ci)++
			efp = efp * 7 / 10 + 1
			txtef COLOR_GREEN
			txt lang(name(cc) + "ÇÕèÒÇàÍéûï°êªÇµÇΩÅB", name(cc) + " duplicated replica of " + itemname(ci) + ".")
			item_stack CHARA_PLAYER, ci, 1
			if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 ) {
				if (cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
					skillexp SKILL_NORMAL_ALCHEMY, cc, 40
				}
			}
			dmgsp CHARA_PLAYER, 3
		}
	}
	if ( synccheck(cc, -1) ) {
		txt lang(name(cc) + "ÇÕ" + itemname(ci, 1) + "ÇêUÇ¡ÇΩÅB", name(cc) + " zap " + itemname(ci, 1) + ".")
		txtmore
	}
	if ( efid >= STARTING_SKILL_SPELL & efid < MAX_SPELL ) {
		f = 0
		seikou = sdata(SKILL_NORMAL_MAGIC_DEVICE, cc) * 20 + 100
		if ( inv(INV_ITEM_STATUS, ci) >= ITEM_STATUS_BLESSED ) {
			seikou = seikou * 125 / 100
		}
		if ( inv(INV_ITEM_STATUS, ci) <= ITEM_STATUS_CURSED ) {
			seikou = seikou * 50 / 100
		}
		else {
			if ( rnd(2) ) {
				f = 1
			}
		}
		if ( rnd(sdataref(SKILL_DATAREF_DIFF, efid) + 1) / 2 <= seikou ) {
			f = 1
		}
	}
	else {
		f = 1
	}
	if ( sdata(SKILL_NORMAL_MAGIC_DEVICE, cc) < 100 ) {
		if ( rnd(sdata(SKILL_NORMAL_MAGIC_DEVICE, cc) + 20) == 0 ) {
			f = 0
		}
	}
	if ( f == 1 | inv(INV_ITEM_ID, ci) == ITEM_ID_ROD_WISHING | cc != CHARA_PLAYER ) {
		gosub *effect
		if ( cc == CHARA_PLAYER ) {
			if ( obvious == 1 ) {
				item_identify ci, ITEM_KNOWN_NAME
			}
		}
		gosub *expMagicDevice
	}
	else {
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕèÒÇÇ§Ç‹Ç≠égÇ¶Ç»Ç©Ç¡ÇΩÅB", name(cc) + " fail to use the power of the rod.")
		}
	}
*zapStaffSkip
	efsource = 0
	if ( inv(INV_ITEM_NUM, ci) == 0 ) {
		if ( ci >= RANGE_INV2 ) {
			cell_refresh inv(INV_ITEM_X, ci), inv(INV_ITEM_Y, ci)
			return 1
		}
	}
	item_separate ci
	inv(INV_ITEM_CHARGE, ci)--
	if ( cc == CHARA_PLAYER ) {
		item_stack CHARA_PLAYER, ci, 1
	}
	if ( cc == CHARA_PLAYER ) {
		if ( cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) != 0 ) {
			if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
				if ( gdata(GDATA_ACTIVATE_PROC) == 0 ) {
					if ( sdataref(SKILL_DATAREF_TYPE, efid) == SKILL_TYPE_BOLT | sdataref(SKILL_DATAREF_TYPE, efid) == SKILL_TYPE_ARROW | (sdataref(SKILL_DATAREF_TYPE, efid) == SKILL_TYPE_BALL & efid != SKILL_SPACT_RAIN_OF_SANITY & efid != SKILL_SPELL_HEALING_RAIN) ) {
						efid = SKILL_SPACT_DIFFUSION_WAVE
						gosub *effect
					}
				}
			}
		}
	}
	if ( cc != CHARA_PLAYER ) {
		if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_OFFENSIVE ) {
			powsel = 0
			if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
				if ( gdata(GDATA_ACTIVATE_PROC) == 0 ) {
					if ( sdataref(SKILL_DATAREF_TYPE, efid) == SKILL_TYPE_BOLT | sdataref(SKILL_DATAREF_TYPE, efid) == SKILL_TYPE_ARROW | (sdataref(SKILL_DATAREF_TYPE, efid) == SKILL_TYPE_BALL & efid != SKILL_SPACT_RAIN_OF_SANITY & efid != SKILL_SPELL_HEALING_RAIN) ) {
						efid = SKILL_SPACT_DIFFUSION_WAVE
						gosub *effect
					}
				}
			}
		}
	}
	return 1

*action
	if ( efid == SKILL_SPACT_DEATH_WORD ) {
		if ( cbit(CHARA_BIT_DEATH_COUNT, tc) == 1 ) {
			if ( cdata(CDATA_RELATION, cc) == (-3) ) {
				repeat MAX_CHARA_SAVE
					if ( cdata(CDATA_EXIST, cnt) == CHAR_STATE_ALIVE ) {
						if ( cdata(CDATA_RELATION, cnt) == 10 ) {
							cdata(CDATA_TARGET, cc) = cnt
							break
						}
					}
				loop
			}
			return 0
		}
	}
	gosub *effect_selectTg
	if ( stat == 0 ) {
		return 0
	}
	if ( sdataref(SKILL_DATAREF_TG, efid) / EXT_SDATAREF * EXT_SDATAREF != TARGET_TYPE_SELF & sdataref(SKILL_DATAREF_TG, efid) / EXT_SDATAREF * EXT_SDATAREF != TARGET_TYPE_SELF_ONLY ) {
		if ( cdata(CDATA_CONDITION_CONFUSE, cc) != 0 | cdata(CDATA_CONDITION_BLIND, cc) != 0 ) {
			if ( rnd(5) == 0 ) {
				if ( synccheck(cc, -1) ) {
					txt lang(name(cc) + "ÇÕì™ÇêUÇ¡ÇΩÅB", name(cc) + " shake" + _s(cc) + " " + his(cc) + " head.")
				}
				return 1
			}
		}
	}
	if ( efid >= STARTING_SKILL_SPACT ) {
		if ( cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_SP, CHARA_PLAYER) < 50 ) {
				if ( cdata(CDATA_SP, CHARA_PLAYER) < rnd(75) ) {
					txt_exhausted
					dmgsp CHARA_PLAYER, sdataref(SKILL_DATAREF_COST, efid) / 2 + 1
					return 1
				}
			}
			dmgsp CHARA_PLAYER, rnd(sdataref(SKILL_DATAREF_COST, efid) / 2 + 1) + sdataref(SKILL_DATAREF_COST, efid) / 2 + 1
			skillexp sdataref(SKILL_DATAREF_USE, efid), cc, 25
		}
	}
	efp = calcspellpower(efid, cc)
	if ( noeffect == 1 ) {
		if ( efid != SKILL_ACTIVE_PICKPOCKET ) {
			txt_nothinghappens
			return 1
		}
	}
	gosub *effect
	if ( stat == 0 ) {
		return 0
	}
	return 1

*effect_selectTg
	noeffect = 0
	if ( efid > MAX_SKILL ) {
		tc = cc
		return 1
	}
	tg = sdataref(SKILL_DATAREF_TG, efid) / EXT_SDATAREF * EXT_SDATAREF
	if ( efsource == 1 ) {
		if ( cc == CHARA_PLAYER ) {
			if ( tg == TARGET_TYPE_SELF ) {
				tg = TARGET_TYPE_DIRECTION
			}
		}
		if ( cc != CHARA_PLAYER ) {
			if ( tg == TARGET_TYPE_DIRECTION ) {
				tg = TARGET_TYPE_SELF
			}
		}
		if ( cc != CHARA_PLAYER ) {
			if ( tg == TARGET_TYPE_ENEMY | tg == TARGET_TYPE_OTHER | tg == TARGET_TYPE_BOTH ) {
				if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 ) {
					if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
						return 0
					}
					if ( cc < MAX_CHARA_FOLLOWER ) {
						if ( cdata(CDATA_RELATION, tc) != (-3) ) {
							return 0
						}
					}
					if ( cc >= MAX_CHARA_FOLLOWER ) {
						if ( cdata(CDATA_RELATION, tc) == cdata(CDATA_RELATION, cc) ) {
							return 0
						}
					}
				}
			}
		}
	}
	if ( sdataref(SKILL_DATAREF_TYPE, efid) == SKILL_TYPE_SUMMON ) {
		if ( cc == CHARA_PLAYER ) {
			tc = CHARA_PLAYER
			return 1
		}
	}
	ghand = 0
	if ( sdataref(SKILL_DATAREF_TYPE, efid) == SKILL_TYPE_HAND ) {
		if ( cbit(CHARA_BIT_BLUE_SPIRIT, cc) ) {
			if ( efid != SKILL_SPACT_VORACITY_FANG & efid != SKILL_SPACT_DRAIN_BLOOD & efid != SKILL_SPACT_MEMORY_POISON ) {
				powsel = 0
				if ( gdata(GDATA_FLAG_MAIN) < 350 ) {
					if ( cdata(CDATA_LEVEL, cc) >= 130 ) {
						powsel = 100
					}
				}
				if ( gdata(GDATA_FLAG_MAIN) >= 350 ) {
					if ( cdata(CDATA_LEVEL, cc) >= 50 ) {
						powsel = 100
					}
				}
				if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 | cc == CHARA_PLAYER ) {
					powsel = 100
				}
				if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
					powsel = 100
				}
				if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_QUALITY, cc) > FIX_QUALITY_GREAT & cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) / 2 & cdata(CDATA_POWER_GAUGE, cc) < 200 ) {
					if ( exgauge != 100 ) {
						powsel = 0
					}
				}
				if ( gdata(GDATA_TEMPORARY_FLAGS2) == 888 ) {
					powsel = 0
				}
				if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_TEMPORARY ) {
					if ( cdata(CDATA_DIRECTIVE_MODE_ORG, cc) != DIRECTIVE_MODE_OFFENSIVE ) {
						powsel = 0
					}
				}
				if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_DEFENSIVE | cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_INTERCEPT ) {
					powsel = 0
				}
				if ( cc == CHARA_PLAYER ) {
					if ( cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) == 0 ) {
						powsel = 0
					}
				}
				if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
					if ( powsel == 100 ) {
						tg = 2000
					}
				}
				ghand = 100
				powsel = 0
			}
		}
	}
	if ( tg == TARGET_TYPE_DIRECTION ) {
		if ( cc == CHARA_PLAYER ) {
			tc = CHARA_PLAYER
			txt lang("Ç«ÇÃï˚å¸ÅH", "Which direction?")
			gosub *screen_draw
			gosub *prompt_direction
			if ( stat == 0 ) {
				return 0
			}
			if ( map(tlocx, tlocy, 1) == 0 ) {
				noeffect = 1
				obvious = 0
				return 1
			}
			tc = map(tlocx, tlocy, 1) - 1
			if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
				txtselecttc 2
				repeat 2
					promptAdd s(cnt), key_select(cnt)
				loop
				val = promptx, prompty, 200, 0
				gosub *prompt_key
				if ( rtval == 1 ) {
					tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
				}
			}
		}
		else {
			if ( dist(cdata(CDATA_X, tc), cdata(CDATA_Y, tc), cdata(CDATA_X, cc), cdata(CDATA_Y, cc)) > sdataref(SKILL_DATAREF_TG_RANGE, efid) \ EXT_SDATAREF + 1 ) {
				return 0
			}
			tlocx = cdata(CDATA_X, tc)
			tlocy = cdata(CDATA_Y, tc)
		}
		return 1
	}
	if ( tg == TARGET_TYPE_LOCATION | (tg == TARGET_TYPE_BOTH & tgloc == 1 & cc == CHARA_PLAYER) ) {
		if ( cc == CHARA_PLAYER ) {
			if ( tg == TARGET_TYPE_BOTH ) {
				if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), tglocx, tglocy) == 0 ) {
					if ( stat == 0 ) {
						txt_cantsee
						gosub *screen_draw
					}
					obvious = 0
					return 0
				}
				tlocx = tglocx
				tlocy = tglocy
			}
			else {
				gosub *findLocation
				if ( stat != 1 ) {
					if ( stat == 0 ) {
						txt_cantsee
						gosub *screen_draw
					}
					obvious = 0
					return 0
				}
			}
		}
		else {
			if ( fov_los(cdata(CDATA_X, tc), cdata(CDATA_Y, tc), cdata(CDATA_X, cc), cdata(CDATA_Y, cc)) == 0 ) {
				return 0
			}
			tlocx = cdata(CDATA_X, tc)
			tlocy = cdata(CDATA_Y, tc)
		}
		return 1
	}
	if ( tg == TARGET_TYPE_SELF | tg == TARGET_TYPE_SELF_ONLY ) {
		if ( cc != CHARA_PLAYER ) {
			if ( sdataref(SKILL_DATAREF_TYPE, efid) == SKILL_TYPE_BALL ) {
				if ( dist(cdata(CDATA_X, tc), cdata(CDATA_Y, tc), cdata(CDATA_X, cc), cdata(CDATA_Y, cc)) > sdataref(SKILL_DATAREF_TG_RANGE, efid) \ EXT_SDATAREF + 1 ) {
					return 0
				}
				if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), cdata(CDATA_X, tc), cdata(CDATA_Y, tc)) == 0 ) {
					return 0
				}
			}
		}
		tc = cc
		tlocx = cdata(CDATA_X, cc)
		tlocy = cdata(CDATA_Y, cc)
		return 1
	}
	if ( tg == TARGET_TYPE_ENEMY | tg == TARGET_TYPE_OTHER | tg == TARGET_TYPE_BOTH ) {
		if ( cc == CHARA_PLAYER ) {
			gosub *findTarget
			if ( stat == 0 ) {
				obvious = 0
				return 0
			}
			tc = cdata(CDATA_TARGET, CHARA_PLAYER)
			if ( cdata(CDATA_RELATION, tc) >= 0 ) {
				gosub *com_confirmAttack
				if ( stat == 0 ) {
					obvious = 0
					return 0
				}
			}
		}
		if ( dist(cdata(CDATA_X, tc), cdata(CDATA_Y, tc), cdata(CDATA_X, cc), cdata(CDATA_Y, cc)) > sdataref(SKILL_DATAREF_TG_RANGE, efid) \ EXT_SDATAREF + 1 ) {
			if ( ghand == 0 ) {
				if ( cc == CHARA_PLAYER ) {
					msgdup++
					txt lang("éÀíˆãóó£äOÇæÅB", "It's out of range.")
					gosub *screen_draw
				}
				return 0
			}
		}
		ghand = 0
		if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), cdata(CDATA_X, tc), cdata(CDATA_Y, tc)) == 0 ) {
			return 0
		}
		tlocx = cdata(CDATA_X, tc)
		tlocy = cdata(CDATA_Y, tc)
		return 1
	}
	if ( tg == TARGET_TYPE_DIR ) {
		if ( cc == CHARA_PLAYER ) {
			if ( efsource == 3 ) {
				txt lang("Ç«ÇÃï˚å¸Ç…è•Ç¶ÇÈÅH ", "Which direction do you want to cast the spell? ")
			}
			else {
				txt lang("Ç«ÇÃï˚å¸Ç…êUÇÈÅH ", "Which direction do you want to zap the wand? ")
			}
			gosub *screen_draw
			val = 0
			gosub *prompt_direction
			if ( stat == 0 ) {
				txt_impossible
				obvious = 0
				return 0
			}
		}
	}
	return 1

*effect
	efcibk = ci
	efcancel = 0
	obvious = 1
	if ( efsource != 4 & efsource != 1 & efsource != 2 ) {
		efstatus = 0
	}
	efsource = 0
	efbad = 0
	if ( efid >= STARTING_SKILL_ACTIVE ) {
		if ( efid < MAX_SKILL ) {
			f = 0
			if ( sdataref(SKILL_DATAREF_TYPE, efid) / EXT_SDATAREF == 1 ) {
				f = 1
				p = sdataref(SKILL_DATAREF_TYPE, efid) \ EXT_SDATAREF
				if ( bdataref(0, p) == 2 ) {
					efbad = 1
				}
			}
			if ( sdataref(SKILL_DATAREF_TYPE, efid) == SKILL_TYPE_SUMMON ) {
				efbad = 1
			}
			if ( efbad == 0 ) {
				if ( efstatus >= 1 ) {
					efp = efp * 150 / 100
				}
				if ( efstatus <= (-1) ) {
					efp = 50
				}
			}
			else {
				if ( efstatus >= 1 ) {
					efp = 50
				}
				if ( efstatus <= (-1) ) {
					efp = efp * 150 / 100
				}
			}
			if ( f ) {
				if ( bdataref(0, p) == 1 | efid == SKILL_SPELL_FEATHER ) {
					animeload ANIMATION_HEAL_FAST, tc
				}
				else {
					if ( bdataref(0, p) == 2 ) {
						animeid = ANIMATION_CURSE
						gosub *anime
					}
				}
				if ( efid == SKILL_SPACT_LULWYS_TRICK | efid == SKILL_SPELL_SPEED ) {
					if ( tc == CHARA_PLAYER & cc == CHARA_PLAYER | cc == gdata(GDATA_RIDER) ) {
						if ( gdata(GDATA_RIDER) != 0 ) {
							tc = gdata(GDATA_RIDER)
						}
					}
				}
				calcbuff -1, p, efp
				addbuff tc, p, efp, dur
				if ( efid == SKILL_SPELL_SLOW ) {
					if ( efstatus >= 1 ) {
						cdata(CDATA_AGE, tc) += rnd(3) + 1
						if ( cdata(CDATA_AGE, tc) + 12 > gdata(GDATA_YEAR) ) {
							cdata(CDATA_AGE, tc) = gdata(GDATA_YEAR) - 12
						}
						if ( synccheck(tc, -1) ) {
							txtef COLOR_GREEN
							txt lang(name(tc) + "ÇÃòVâªÇÕíxÇ≠Ç»Ç¡ÇΩÅB", name(tc) + your(tc) + " aging process slows down.")
						}
					}
					if ( efstatus <= (-1) ) {
						if ( tc < MAX_CHARA_FOLLOWER ) {
							inv_find ITEM_ID_BIO_BATTERY, tc
							if ( stat == (-1) ) {
								cdata(CDATA_WEIGHT, tc) = cdata(CDATA_WEIGHT, tc) * 102 / 100 + rnd(2) + 1
								if ( cdata(CDATA_WEIGHT, tc) <= 0 ) {
									cdata(CDATA_WEIGHT, tc) = 1
								}
								if ( synccheck(tc, -1) ) {
									txtef COLOR_PURPLE
									txt lang(name(tc) + "ÇÃêgëÃÇÕèdÇ≠Ç»Ç¡ÇΩÅB", name(tc) + " gain" + _s(tc) + " weight.")
								}
							}
						}
					}
				}
				if ( efid == SKILL_SPELL_SPEED ) {
					if ( efstatus <= (-1) ) {
						cdata(CDATA_AGE, tc) -= rnd(3) + 1
						if ( synccheck(tc, -1) ) {
							txtef COLOR_PURPLE
							txt lang(name(tc) + "ÇÃòVâªÇÕë¨Ç≠Ç»Ç¡ÇΩÅB", name(tc) + your(tc) + " aging process speeds up.")
						}
					}
				}
				if ( efid == SKILL_SPELL_INCOGNITO ) {
					if ( tc == CHARA_PLAYER ) {
						incognitobegin
					}
				}
				goto *effect_end
			}
			calcskill efid, cc, efp
			if ( cc == CHARA_PLAYER ) {
				if ( trait(TRAIT_GOD_ITZPALT) ) {
					if ( ele == SKILL_RES_FIRE | ele == SKILL_RES_COLD | ele == SKILL_RES_LIGHTNING ) {
						dice2 = dice2 * 125 / 100
					}
				}
			}
			if ( rapidmagic ) {
				efp = efp / 2 + 1
			}
			_switch_val = sdataref(SKILL_DATAREF_TYPE, efid)
			if ( _switch_val == SKILL_TYPE_ATTACK | _switch_sw ) {
				_switch_sw = 0
				if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
					tc = cdata(CDATA_TARGET, cc)
					gosub *act_melee
					goto *effect_SWEND1
				}
				if ( efid == SKILL_SPACT_DISTANT_ATTACK ) {
					gdata(GDATA_TEMPORARY_FLAGS) = 200
					animeid = ANIMATION_DISTANT_ATK
					gosub *anime
				}
				else {
					animeid = ANIMATION_SPORE
					gosub *anime
				}
				gdata(GDATA_TEMPORARY_FLAGS) = 0
				gosub *act_melee
				goto *effect_SWEND1
			}
			if ( _switch_val == SKILL_TYPE_BOLT | _switch_sw ) {
				_switch_sw = 0
				get_route cdata(CDATA_X, cc), cdata(CDATA_Y, cc), tlocx, tlocy
				if ( stat == 0 ) {
					goto *effect_SWEND1
				}
				animeid = ANIMATION_BOLT
				gosub *anime
				dx = cdata(CDATA_X, cc)
				dy = cdata(CDATA_Y, cc)
				tcbbk = -1
				if ( gdata(GDATA_TEMPORARY_FLAGS) == 0 ) {
					if ( findbuff(cc, BUFF_CHARGE) != (-1) ) {
						if ( cc != CHARA_PLAYER | cdata(CDATA_RELATION, tc) == (-3) ) {
							customtalk cc, DBMODE_FLAVOR_CHARGE_A
							gosub *convert_word
							if ( synccheck(cc, -1) ) {
								txtef COLOR_RED
								txt lang(name(cc) + "ÇÃäÆëSârè•ñÇñ@Ç™‡yóÙÇµÇΩÅB", name(cc) + " blast magic by full power.")
								txtmore
							}
						}
					}
				}
				repeat 20
					route_info dx, dy, cnt
					if ( stat == 0 ) {
						break
					}
					else {
						if ( stat == (-1) ) {
							continue
						}
					}
					if ( dist(dx, dy, cdata(CDATA_X, cc), cdata(CDATA_Y, cc)) > sdataref(SKILL_DATAREF_TG_RANGE, efid) \ EXT_SDATAREF + 1 ) {
						break
					}
					if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
						continue
					}
					if ( dx == cdata(CDATA_X, cc) & dy == cdata(CDATA_Y, cc) ) {
						continue
					}
					maga = 0
					inv_find ITEM_ID_MAGATAMA, cc
					if ( stat != (-1) ) {
						maga = 100
					}
					if ( ele == SKILL_RES_FIRE ) {
						if ( maga == 0 ) {
							mapitem_fire dx, dy
						}
					}
					maga = 0
					if ( ele == SKILL_RES_COLD ) {
						mapitem_cold dx, dy
					}
					if ( map(dx, dy, 8) != 0 ) {
						if ( efid == SKILL_SPELL_WATER_BOLT ) {
							delmef map(dx, dy, 8) - 1
						}
					}
					if ( map(dx, dy, 8) != 0 ) {
						if ( mef(0, map(dx, dy, 8) - 1) == 9 ) {
							delmef map(dx, dy, 8) - 1
						}
					}
					if ( map(dx, dy, 1) != 0 ) {
						tc = map(dx, dy, 1) - 1
						if ( cc != tc ) {
							if ( gdata(GDATA_RIDER) != 0 ) {
								if ( gdata(GDATA_RIDER) == cc ) {
									if ( tc == CHARA_PLAYER ) {
										continue
									}
								}
							}
							dmg = role(dice1, dice2, bonus)
							calcmagiccontrol cc, tc
							if ( stat == 1 ) {
								continue
							}
							if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
								if ( tc != CHARA_PLAYER ) {
									if ( rnd(cdata(CDATA_HP, tc) + 1) < rnd(cdata(CDATA_HP, cdata(CDATA_TAGTEAM_PARTNER, tc)) + 1) ) {
										tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
									}
									txt_guard
								}
							}
							if ( tcbbk == (-1) ) {
								if ( cdata(CDATA_RELATION, cc) != 10 ) {
									if ( cdata(CDATA_RELATION, tc) != cdata(CDATA_RELATION, cc) & tc != cc ) {
										tcbbk = tc
									}
								}
								if ( cdata(CDATA_RELATION, cc) == 10 ) {
									if ( cdata(CDATA_RELATION, tc) != 10 & tc != CHARA_PLAYER ) {
										tcbbk = tc
									}
								}
								if ( cdata(CDATA_ALLIED, cc) == 100 ) {
									if ( cdata(CDATA_RELATION, cc) != 10 ) {
										if ( cdata(CDATA_RELATION, tc) == 10 ) {
											tcbbk = tc
										}
									}
								}
								if ( cc == CHARA_PLAYER ) {
									if ( cdata(CDATA_RELATION, tc) != 10 & tc != CHARA_PLAYER ) {
										tcbbk = tc
									}
								}
							}
							if ( gdata(GDATA_TEMPORARY_FLAGS) == 0 ) {
								if ( findbuff(cc, BUFF_CHARGE) != (-1) ) {
									if ( cc != CHARA_PLAYER | cdata(CDATA_RELATION, tc) == (-3) ) {
										dmg = dmg * 11
										animeload ANIMATION_OFFER, tc
									}
								}
							}
							if ( synccheck(tc, -1) ) {
								txtmore
								if ( tc >= MAX_CHARA_FOLLOWER ) {
									gdata(GDATA_DMG_TYPE) = 2
									txt3rd = 1
									txt lang("É{ÉãÉgÇÕ" + name(tc) + "Ç…ñΩíÜÇµ", "The bolt hits " + name(tc) + " and")
								}
								else {
									txt lang("É{ÉãÉgÇ™" + name(tc) + "Ç…ñΩíÜÇµÇΩÅB", "The bolt hits " + name(tc) + ".")
								}
							}
							dmghp tc, dmg, cc, ele, elep
							if ( efid == SKILL_SPELL_WATER_BOLT ) {
								wet tc, 5
							}
							if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
								if ( fusifc > 0 ) {
									if ( ele == SKILL_RES_FIRE ) {
										snd SOUNDLIST_ATK_ICE
										dmghp tc, limit(dmg * fusifc / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_COLD, elep
									}
									if ( ele == SKILL_RES_COLD ) {
										snd SOUNDLIST_ATK_FIRE
										dmghp tc, limit(dmg * fusifc / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_FIRE, elep
									}
								}
								if ( fusims > 0 ) {
									if ( ele == SKILL_RES_MIND ) {
										snd SOUNDLIST_ATK_SOUND
										dmghp tc, limit(dmg * fusims / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_SOUND, elep
									}
									if ( ele == SKILL_RES_SOUND ) {
										snd SOUNDLIST_ATK_MIND
										dmghp tc, limit(dmg * fusims / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_MIND, elep
									}
								}
								if ( fusipn > 0 ) {
									if ( ele == SKILL_RES_POISON ) {
										snd SOUNDLIST_ATK_NERVE
										dmghp tc, limit(dmg * fusipn / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_NERVE, elep
									}
									if ( ele == SKILL_RES_NERVE ) {
										snd SOUNDLIST_ATK_POISON
										dmghp tc, limit(dmg * fusipn / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_POISON, elep
									}
								}
							}
							if ( gdata(GDATA_TEMPORARY_FLAGS) == 0 ) {
								if ( cdata(CDATA_REFLECT_MAGIC, tc) > 0 ) {
									if ( cc >= MAX_CHARA_FOLLOWER | tc >= MAX_CHARA_FOLLOWER ) {
										dmghp cc, limit(dmg * cdata(CDATA_REFLECT_MAGIC, tc) / 200 + 1, 1, cdata(CDATA_MAX_HP, cc) / 10), tc, ele, elep
										if ( synccheck(tc, -1) ) {
											txtef COLOR_PURPLE
											txt lang(name(tc) + "ÇÕñÇñ@ÇÃàÍïîÇîΩéÀÇµÇΩÅB", name(tc) + " reflected magic.")
										}
									}
								}
							}
						}
					}
				loop
				if ( gdata(GDATA_TEMPORARY_FLAGS) == 0 ) {
					if ( findbuff(cc, BUFF_CHARGE) != (-1) ) {
						if ( cc != CHARA_PLAYER | cdata(CDATA_RELATION, tc) == (-3) ) {
							p = cc
							repeat MAX_BLESSINGS + MAX_HEXES
								if ( cdata(STARTING_CDATA_BUFF + cnt * ARRAY_CDATA_BUFF, p) == 0 ) {
									break
								}
								if ( cdata(STARTING_CDATA_BUFF + cnt * ARRAY_CDATA_BUFF, p) == BUFF_CHARGE ) {
									delbuff p, cnt
									continue cnt
								}
							loop
							r1 = cc
							gosub *charaRefresh
						}
					}
				}
				if ( tcbbk != (-1) ) {
					if ( cdata(CDATA_EXIST, tcbbk) == CHAR_STATE_ALIVE ) {
						tc = tcbbk
					}
				}
				fusifc = 0
				fusims = 0
				fusipn = 0
				goto *effect_SWEND1
			}
			if ( _switch_val == SKILL_TYPE_BALL | _switch_sw ) {
				_switch_sw = 0
				tcbbk = -1
				magc = 0
				if ( efid != SKILL_SPACT_RAIN_OF_SANITY ) {
					if ( efid != SKILL_SPELL_HEALING_RAIN ) {
						if ( efid != SKILL_SPACT_SUICIDE_ATTACK ) {
							if ( findbuff(cc, BUFF_CHARGE) != (-1) ) {
								if ( cc != CHARA_PLAYER | cdata(CDATA_RELATION, tc) == (-3) ) {
									customtalk cc, DBMODE_FLAVOR_CHARGE_A
									gosub *convert_word
									if ( synccheck(cc, -1) ) {
										txtef COLOR_RED
										txt lang(name(cc) + "ÇÃäÆëSârè•ñÇñ@Ç™‡yóÙÇµÇΩÅB", name(cc) + " blast magic by full power.")
										txtmore
									}
								}
							}
						}
					}
				}
				chainbomb = 0
				ccbk = cc
				if ( efid == SKILL_SPACT_SUICIDE_ATTACK ) {
					if ( cdata(CDATA_CONDITION_WET, cc) > 0 ) {
						goto *effect_SWEND1
					}
				}
				if ( efid == SKILL_SPACT_SUICIDE_ATTACK ) {
					stxt cc, lang(name(cc) + "ÇÕîöî≠ÇµÇΩÅB", name(cc) + " explode" + _s(cc) + ".")
				}
*chainBomb_loop
				cbitmod CHARA_BIT_SUICIDE_SWITCH, cc, 0
				range = sdataref(SKILL_DATAREF_TG_RANGE, efid) \ EXT_SDATAREF + 1
				if ( efid == SKILL_SPACT_SUICIDE_ATTACK ) {
					range = 2
				}
				if ( efid != SKILL_SPELL_HEALING_RAIN & efid != SKILL_SPACT_RAIN_OF_SANITY ) {
					if ( bakuretu != 200 ) {
						aniref = range
						animeid = ANIMATION_BALL
						anix = tlocx
						aniy = tlocy
						gosub *anime
					}
				}
				if ( bakuretu == 200 ) {
					animeid = ANIMATION_THUNDERCLAP
					anix = tlocx
					aniy = tlocy
					gosub *anime
				}
				repeat range * 2 + 1
					dy = tlocy - range + cnt
					if ( dy < 0 | dy >= mdata(MDATA_HEIGHT) ) {
						continue
					}
					repeat range * 2 + 1
						dx = tlocx - range + cnt
						if ( dx < 0 | dx >= mdata(MDATA_WIDTH) ) {
							continue
						}
						if ( dist(tlocx, tlocy, dx, dy) > range ) {
							continue
						}
						if ( fov_los(tlocx, tlocy, dx, dy) == 0 ) {
							continue
						}
						if ( map(dx, dy, 8) != 0 ) {
							if ( efid == SKILL_SPELL_BUBBLE_STORM ) {
								delmef map(dx, dy, 8) - 1
							}
						}
						if ( map(dx, dy, 8) != 0 ) {
							if ( mef(0, map(dx, dy, 8) - 1) == 9 ) {
								delmef map(dx, dy, 8) - 1
							}
						}
						if ( map(dx, dy, 1) == 0 ) {
							continue
						}
						tc = map(dx, dy, 1) - 1
						if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
							if ( tc != CHARA_PLAYER ) {
								if ( efid != SKILL_SPELL_HEALING_RAIN ) {
									if ( efid != SKILL_SPACT_RAIN_OF_SANITY ) {
										if ( rnd(cdata(CDATA_HP, tc) + 1) < rnd(cdata(CDATA_HP, cdata(CDATA_TAGTEAM_PARTNER, tc)) + 1) ) {
											tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
										}
										txt_guard
									}
								}
							}
						}
						if ( tcbbk == (-1) ) {
							if ( cdata(CDATA_RELATION, cc) != 10 ) {
								if ( cdata(CDATA_RELATION, tc) != cdata(CDATA_RELATION, cc) & tc != cc ) {
									tcbbk = tc
								}
							}
							if ( cdata(CDATA_RELATION, cc) == 10 ) {
								if ( cdata(CDATA_RELATION, tc) != 10 & tc != CHARA_PLAYER ) {
									tcbbk = tc
								}
							}
							if ( cdata(CDATA_ALLIED, cc) == 100 ) {
								if ( cdata(CDATA_RELATION, cc) != 10 ) {
									if ( cdata(CDATA_RELATION, tc) == 10 ) {
										tcbbk = tc
									}
								}
							}
							if ( cc == CHARA_PLAYER ) {
								if ( cdata(CDATA_RELATION, tc) != 10 & tc != CHARA_PLAYER ) {
									tcbbk = tc
								}
							}
						}
						if ( efid == SKILL_SPELL_HEALING_RAIN ) {
							f = 0
							if ( cc == CHARA_PLAYER | cdata(CDATA_RELATION, cc) >= 0 ) {
								if ( cdata(CDATA_RELATION, tc) >= 0 ) {
									f = 1
								}
							}
							if ( cdata(CDATA_RELATION, cc) == (-1) ) {
								if ( cdata(CDATA_RELATION, tc) == (-1) ) {
									f = 1
								}
							}
							if ( cdata(CDATA_RELATION, cc) < (-1) ) {
								if ( cdata(CDATA_RELATION, tc) < (-1) ) {
									f = 1
								}
							}
							if ( f == 1 ) {
								animeid = ANIMATION_HEAL_FAST
								gosub *anime
								txt lang(cdatan(CDATAN_NAME, tc) + "ÇÕâÒïúÇµÇΩÅB", name(tc) + " " + is(tc) + " healed.")
								gosub *effect_heal
								if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
									tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
									txt lang(cdatan(CDATAN_NAME, tc) + "ÇÕâÒïúÇµÇΩÅB", name(tc) + " " + is(tc) + " healed.")
									gosub *effect_heal
								}
							}
							continue
						}
						if ( efid == SKILL_SPACT_RAIN_OF_SANITY ) {
							f = 0
							if ( cc == CHARA_PLAYER | cdata(CDATA_RELATION, cc) >= 0 ) {
								if ( cdata(CDATA_RELATION, tc) >= 0 ) {
									f = 1
								}
							}
							if ( cdata(CDATA_RELATION, cc) == (-1) ) {
								if ( cdata(CDATA_RELATION, tc) == (-1) ) {
									f = 1
								}
							}
							if ( cdata(CDATA_RELATION, cc) < (-1) ) {
								if ( cdata(CDATA_RELATION, tc) < (-1) ) {
									f = 1
								}
							}
							if ( f == 1 ) {
								animeid = ANIMATION_HEAL_FAST
								gosub *anime
								txt lang(name(tc) + "ÇÃã∂ãCÇÕè¡Ç¶ãéÇ¡ÇΩÅB", name(tc) + " " + is(tc) + " completely sane again.")
								healsan tc, efp / 10
								healcon tc, CONDITION_INSANE, 9999
								if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
									tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
									txt lang(name(tc) + "ÇÃã∂ãCÇÕè¡Ç¶ãéÇ¡ÇΩÅB", name(tc) + " " + is(tc) + " completely sane again.")
									healsan tc, efp / 10
									healcon tc, CONDITION_INSANE, 9999
								}
							}
							continue
						}
						if ( dx == cdata(CDATA_X, cc) & dy == cdata(CDATA_Y, cc) ) {
							continue
						}
						if ( gdata(GDATA_RIDER) != 0 ) {
							if ( gdata(GDATA_RIDER) == cc ) {
								if ( tc == CHARA_PLAYER ) {
									continue
								}
							}
						}
						maga = 0
						inv_find ITEM_ID_MAGATAMA, cc
						if ( stat != (-1) ) {
							maga = 100
						}
						if ( ele == SKILL_RES_FIRE ) {
							if ( maga == 0 ) {
								mapitem_fire dx, dy
							}
						}
						maga = 0
						if ( ele == SKILL_RES_COLD ) {
							mapitem_cold dx, dy
						}
						if ( cc != tc ) {
							dmg = role(dice1, dice2, bonus)
							txtmore
							calcmagiccontrol cc, tc
							if ( stat == 1 ) {
								continue
							}
							if ( efid == SKILL_SPACT_SUICIDE_ATTACK ) {
								if ( synccheck(tc, -1) ) {
									txtmore
									if ( tc >= MAX_CHARA_FOLLOWER ) {
										gdata(GDATA_DMG_TYPE) = 2
										txt3rd = 1
										txt lang("îöïóÇÕ" + name(tc) + "Ç…ñΩíÜÇµ", "The explosion hits " + name(tc) + " and")
									}
									else {
										txt lang("îöïóÇ™" + name(tc) + "Ç…ñΩíÜÇµÇΩÅB", "The explosion hits " + name(tc) + ".")
									}
								}
								if ( cbit(CHARA_BIT_SUICIDE, tc) ) {
									if ( cdata(CDATA_CONDITION_WET, tc) == 0 ) {
										chainbomblist(chainbomb) = tc
										chainbomb++
										continue
									}
								}
								dmghp tc, dmg, cc, ele, elep
							}
							else {
								if ( findbuff(cc, BUFF_CHARGE) != (-1) ) {
									if ( cc != CHARA_PLAYER | cdata(CDATA_RELATION, tc) == (-3) ) {
										dmg = dmg * 11
										animeload ANIMATION_OFFER, tc
									}
								}
								if ( bakuretu != 200 ) {
									if ( synccheck(tc, -1) ) {
										txtmore
										if ( tc >= MAX_CHARA_FOLLOWER ) {
											gdata(GDATA_DMG_TYPE) = 2
											txt3rd = 1
											txt lang("É{Å[ÉãÇÕ" + name(tc) + "Ç…ñΩíÜÇµ", "The ball hits " + name(tc) + " and")
										}
										else {
											txt lang("É{Å[ÉãÇ™" + name(tc) + "Ç…ñΩíÜÇµÇΩÅB", "The ball hits " + name(tc) + ".")
										}
									}
								}
								if ( efid == SKILL_SPACT_GRENADE ) {
									if ( bakuretu == 200 ) {
										ele = SKILL_RES_LIGHTNING
										if ( synccheck(tc, -1) ) {
											txtmore
											if ( tc >= MAX_CHARA_FOLLOWER ) {
												gdata(GDATA_DMG_TYPE) = 2
												txt3rd = 1
												txt lang("ìdåÇÇÕ" + name(tc) + "Ç…ñΩíÜÇµ", "The ball hits " + name(tc) + " and")
											}
											else {
												txt lang("ìdåÇÇ™" + name(tc) + "Ç…ñΩíÜÇµÇΩÅB", "The ball hits " + name(tc) + ".")
											}
										}
									}
								}
								dmghp tc, dmg, cc, ele, elep
								if ( efid == SKILL_SPELL_BUBBLE_STORM ) {
									wet tc, 5
								}
								if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
									if ( fusifc > 0 ) {
										if ( ele == SKILL_RES_FIRE ) {
											snd SOUNDLIST_ATK_ICE
											dmghp tc, limit(dmg * fusifc / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_COLD, elep
										}
										if ( ele == SKILL_RES_COLD ) {
											snd SOUNDLIST_ATK_FIRE
											dmghp tc, limit(dmg * fusifc / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_FIRE, elep
										}
									}
									if ( fusims > 0 ) {
										if ( ele == SKILL_RES_MIND ) {
											snd SOUNDLIST_ATK_SOUND
											dmghp tc, limit(dmg * fusims / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_SOUND, elep
										}
										if ( ele == SKILL_RES_SOUND ) {
											snd SOUNDLIST_ATK_MIND
											dmghp tc, limit(dmg * fusims / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_MIND, elep
										}
									}
									if ( fusipn > 0 ) {
										if ( ele == SKILL_RES_POISON ) {
											snd SOUNDLIST_ATK_NERVE
											dmghp tc, limit(dmg * fusipn / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_NERVE, elep
										}
										if ( ele == SKILL_RES_NERVE ) {
											snd SOUNDLIST_ATK_POISON
											dmghp tc, limit(dmg * fusipn / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_POISON, elep
										}
									}
								}
								if ( cdata(CDATA_REFLECT_MAGIC, tc) > 0 ) {
									if ( efid != SKILL_SPACT_GRENADE ) {
										if ( cc >= MAX_CHARA_FOLLOWER | tc >= MAX_CHARA_FOLLOWER ) {
											dmghp cc, limit(dmg * cdata(CDATA_REFLECT_MAGIC, tc) / 200 + 1, 1, cdata(CDATA_MAX_HP, cc) / 10), tc, ele, elep
											if ( synccheck(tc, -1) ) {
												txtef COLOR_PURPLE
												txt lang(name(tc) + "ÇÕñÇñ@ÇÃàÍïîÇîΩéÀÇµÇΩÅB", name(tc) + " reflected magic.")
											}
										}
									}
								}
							}
						}
						if ( magist != 0 ) {
							if ( rnd(5) == 0 ) {
								magc = tc
							}
						}
					loop
				loop
				if ( magist != 0 ) {
					if ( magc != 0 ) {
						tlocx = cdata(CDATA_X, magc)
						tlocy = cdata(CDATA_Y, magc)
					}
				}
				if ( findbuff(cc, BUFF_CHARGE) != (-1) ) {
					if ( cc != CHARA_PLAYER | cdata(CDATA_RELATION, tc) == (-3) ) {
						p = cc
						repeat MAX_BLESSINGS + MAX_HEXES
							if ( cdata(STARTING_CDATA_BUFF + cnt * ARRAY_CDATA_BUFF, p) == 0 ) {
								break
							}
							if ( cdata(STARTING_CDATA_BUFF + cnt * ARRAY_CDATA_BUFF, p) == BUFF_CHARGE ) {
								delbuff p, cnt
								continue cnt
							}
						loop
						r1 = cc
						gosub *charaRefresh
					}
				}
				if ( efid == SKILL_SPACT_SUICIDE_ATTACK ) {
					dmghp cc, 99999, DAMAGE_FROM_SUICIDE
				}
				if ( chainbomb > 0 ) {
*chainBomb_loop_WHILE1
					chainbomb--
					if ( chainbomb < 0 ) {
						goto *chainBomb_loop_WEND1
					}
					cc = chainbomblist(chainbomb)
					tlocx = cdata(CDATA_X, cc)
					tlocy = cdata(CDATA_Y, cc)
					if ( cdata(CDATA_EXIST, cc) == CHAR_STATE_ALIVE ) {
						if ( cdata(CDATA_CONDITION_WET, cc) == 0 ) {
							calcskill efid, cc, efp
							stxt cc, lang(name(cc) + "ÇÕóUîöÇµÇΩÅB", name(cc) + " explode" + _s(cc) + ".")
							goto *chainBomb_loop
						}
					}
					goto *chainBomb_loop_WHILE1
				}
*chainBomb_loop_WEND1
				cc = ccbk
				if ( tcbbk != (-1) ) {
					if ( cdata(CDATA_EXIST, tcbbk) == CHAR_STATE_ALIVE ) {
						tc = tcbbk
					}
				}
				fusifc = 0
				fusims = 0
				fusipn = 0
				goto *effect_SWEND1
			}
			if ( _switch_val == SKILL_TYPE_ARROW | _switch_sw ) {
				_switch_sw = 0
				animeid = ANIMATION_ARROW
				gosub *anime
				dmg = role(dice1, dice2, bonus)
				if ( findbuff(cc, BUFF_CHARGE) != (-1) ) {
					if ( cc != CHARA_PLAYER | cdata(CDATA_RELATION, tc) == (-3) ) {
						dmg = dmg * 11
						p = cc
						repeat MAX_BLESSINGS + MAX_HEXES
							if ( cdata(STARTING_CDATA_BUFF + cnt * ARRAY_CDATA_BUFF, p) == 0 ) {
								break
							}
							if ( cdata(STARTING_CDATA_BUFF + cnt * ARRAY_CDATA_BUFF, p) == BUFF_CHARGE ) {
								delbuff p, cnt
								continue cnt
							}
						loop
						r1 = cc
						gosub *charaRefresh
						snd SOUNDLIST_BOLT1
						customtalk cc, DBMODE_FLAVOR_CHARGE_A
						gosub *convert_word
						if ( synccheck(cc, -1) ) {
							txtef COLOR_RED
							txt lang(name(cc) + "ÇÃäÆëSârè•ñÇñ@Ç™‡yóÙÇµÇΩÅB", name(cc) + " blast magic by full power.")
							txtmore
						}
						animeload ANIMATION_OFFER, tc
					}
				}
				if ( synccheck(tc, -1) ) {
					txtmore
					if ( tc >= MAX_CHARA_FOLLOWER ) {
						gdata(GDATA_DMG_TYPE) = 2
						txt3rd = 1
						txt lang("ñÓÇÕ" + name(tc) + "Ç…ñΩíÜÇµ", "The arrow hits " + name(tc) + " and")
					}
					else {
						txt lang("ñÓÇ™" + name(tc) + "Ç…ñΩíÜÇµÇΩÅB", "The arrow hits " + name(tc) + ".")
					}
				}
				dmghp tc, dmg, cc, ele, elep
				if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
					if ( fusifc > 0 ) {
						if ( ele == SKILL_RES_FIRE ) {
							snd SOUNDLIST_ATK_ICE
							dmghp tc, limit(dmg * fusifc / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_COLD, elep
						}
						if ( ele == SKILL_RES_COLD ) {
							snd SOUNDLIST_ATK_FIRE
							dmghp tc, limit(dmg * fusifc / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_FIRE, elep
						}
					}
					if ( fusims > 0 ) {
						if ( ele == SKILL_RES_MIND ) {
							snd SOUNDLIST_ATK_SOUND
							dmghp tc, limit(dmg * fusims / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_SOUND, elep
						}
						if ( ele == SKILL_RES_SOUND ) {
							snd SOUNDLIST_ATK_MIND
							dmghp tc, limit(dmg * fusims / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_MIND, elep
						}
					}
					if ( fusipn > 0 ) {
						if ( ele == SKILL_RES_POISON ) {
							snd SOUNDLIST_ATK_NERVE
							dmghp tc, limit(dmg * fusipn / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_NERVE, elep
						}
						if ( ele == SKILL_RES_NERVE ) {
							snd SOUNDLIST_ATK_POISON
							dmghp tc, limit(dmg * fusipn / 500 + rnd(dmg / 4 + 1), 1, dmg * 3 / 2), cc, SKILL_RES_POISON, elep
						}
					}
				}
				if ( cdata(CDATA_REFLECT_MAGIC, tc) > 0 ) {
					dmghp cc, limit(dmg * cdata(CDATA_REFLECT_MAGIC, tc) / 200 + 1, 1, cdata(CDATA_MAX_HP, cc) / 10), tc, ele, elep
					if ( synccheck(tc, -1) ) {
						txtef COLOR_PURPLE
						txt lang(name(tc) + "ÇÕñÇñ@ÇÃàÍïîÇîΩéÀÇµÇΩÅB", name(tc) + " reflected magic.")
					}
				}
				fusifc = 0
				fusims = 0
				fusipn = 0
				goto *effect_SWEND1
			}
			if ( _switch_val == SKILL_TYPE_HEAL | _switch_sw ) {
				_switch_sw = 0
				if ( efid == SKILL_SPELL_HEAL_LIGHT ) {
					if ( synccheck(tc, -1) ) {
						txt lang(name(tc) + "ÇÃèùÇÕÇ”Ç≥Ç™Ç¡ÇΩÅB", name(tc) + " " + is(tc) + " slightly healed.")
					}
				}
				if ( efid == SKILL_SPELL_HEAL_CRITICAL | efid == SKILL_SPELL_HEALING_TOUCH ) {
					if ( synccheck(tc, -1) ) {
						txt lang(name(tc) + "ÇÕâÒïúÇµÇΩÅB", name(tc) + " " + is(tc) + " healed.")
					}
				}
				if ( efid == SKILL_SPELL_CURE_OF_ERIS ) {
					if ( synccheck(tc, -1) ) {
						txt lang(name(tc) + "ÇÃêgëÃÇ…ê∂ñΩóÕÇ™Ç›Ç»Ç¨Ç¡ÇΩÅB", name(tc) + " " + is(tc) + " greatly healed.")
					}
				}
				if ( efid == SKILL_SPELL_CURE_OF_JURE ) {
					if ( synccheck(tc, -1) ) {
						txt lang(name(tc) + "ÇÕäÆëSÇ…âÒïúÇµÇΩÅB", name(tc) + " " + is(tc) + " completely healed.")
					}
				}
				gosub *effect_heal
				if ( efid == SKILL_SPACT_PRAYER_OF_JURE ) {
					if ( tc == CHARA_PLAYER ) {
						healhp tc, cdata(CDATA_MAX_HP, tc) / 5
					}
					addbuff tc, BUFF_HOLY_VEIL, cdata(CDATA_PIETY, tc) / 2, 50
					addbuff tc, BUFF_REGENERATION, 30, 50
					repeat MAX_BLESSINGS + MAX_HEXES
						i = MAX_BLESSINGS + MAX_HEXES - cnt - 1
						if ( bdataref(0, cdata(STARTING_CDATA_BUFF + i * ARRAY_CDATA_BUFF, tc)) != 2 ) {
							continue
						}
						if ( cdata(STARTING_CDATA_BUFF + i * ARRAY_CDATA_BUFF, tc) == BUFF_PUNISHMENT ) {
							continue
						}
						if ( cdata(STARTING_CDATA_BUFF + i * ARRAY_CDATA_BUFF, tc) == 0 ) {
							continue
						}
						if ( rnd(cdata(CDATA_PIETY, tc) + 1) > rnd(cdata(STARTING_CDATA_BUFF + i * ARRAY_CDATA_BUFF + 1, tc) + 1) ) {
							delbuff tc, i
							continue cnt
						}
					loop
				}
				if ( efstatus >= 1 ) {
					healcon tc, CONDITION_SICK, 5 + rnd(5)
				}
				sickifcursed efstatus, tc, 3
				animeid = ANIMATION_HEAL
				gosub *anime
				goto *effect_SWEND1
			}
			if ( _switch_val == SKILL_TYPE_HAND | _switch_sw ) {
				_switch_sw = 0
				if ( cbit(CHARA_BIT_BLUE_SPIRIT, cc) ) {
					if ( efid != SKILL_SPACT_VORACITY_FANG & efid != SKILL_SPACT_DRAIN_BLOOD ) {
						powsel = 0
						if ( gdata(GDATA_FLAG_MAIN) < 350 ) {
							if ( cdata(CDATA_LEVEL, cc) >= 130 ) {
								powsel = 100
							}
						}
						if ( gdata(GDATA_FLAG_MAIN) >= 350 ) {
							if ( cdata(CDATA_LEVEL, cc) >= 50 ) {
								powsel = 100
							}
						}
						if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 | cc == CHARA_PLAYER ) {
							powsel = 100
						}
						if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
							powsel = 100
						}
						if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_QUALITY, cc) > FIX_QUALITY_GREAT & cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) / 2 & cdata(CDATA_POWER_GAUGE, cc) < 200 ) {
							if ( exgauge != 100 ) {
								powsel = 0
							}
						}
						if ( gdata(GDATA_TEMPORARY_FLAGS2) == 888 ) {
							powsel = 0
						}
						if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_TEMPORARY ) {
							if ( cdata(CDATA_DIRECTIVE_MODE_ORG, cc) != DIRECTIVE_MODE_OFFENSIVE ) {
								powsel = 0
							}
						}
						if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_DEFENSIVE | cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_INTERCEPT ) {
							powsel = 0
						}
						if ( cc == CHARA_PLAYER ) {
							if ( cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) == 0 ) {
								powsel = 0
							}
						}
						if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
							if ( powsel == 100 ) {
								if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
									if ( efid == SKILL_SPACT_MEMORY_POISON ) {
										efid = SKILL_SPACT_DATA_DELETE
										gosub *effect
										goto *effect_SWEND1
									}
									if ( efid != SKILL_SPACT_MEMORY_POISON ) {
										efid = SKILL_SPACT_HAND_OF_SPLENDOR
										gosub *effect
										goto *effect_SWEND1
									}
								}
							}
						}
					}
				}
				if ( efid == SKILL_SPACT_VORACITY_FANG ) {
					snd SOUNDLIST_EAT1
					if ( synccheck(cc, -1) ) {
						if ( tc >= MAX_CHARA_FOLLOWER ) {
							gdata(GDATA_DMG_TYPE) = 2
							txt lang(aln(cc) + name(tc) + "ÇÃêgëÃÇêHÇ¢ÇøÇ¨ÇË", name(cc) + " bite" + _s(cc) + " off " + name(tc) + your(tc) + " flesh and")
						}
						else {
							txt lang(name(cc) + "Ç…êgëÃÇêHÇ¢ÇøÇ¨ÇÁÇÍÇΩÅB", name(cc) + " bite" + _s(cc) + " off " + name(tc) + your(tc) + " flesh.")
						}
					}
				}
				if ( efid == SKILL_SPACT_MEMORY_POISON ) {
					snd SOUNDLIST_EAT1
					if ( synccheck(cc, -1) ) {
						if ( tc >= MAX_CHARA_FOLLOWER ) {
							gdata(GDATA_DMG_TYPE) = 2
							txt lang(aln(cc) + name(tc) + "ÇÃãLâØÇêHÇ¢çrÇÁÇµÇƒ", name(cc) + " bite" + _s(cc) + " off " + name(tc) + your(tc) + " memory and")
						}
						else {
							txt lang(name(cc) + "Ç…ãLâØÇêHÇ¢çrÇÁÇ≥ÇÍÇΩÅB", name(cc) + " bite" + _s(cc) + " off " + name(tc) + your(tc) + " memory.")
						}
					}
				}
				if ( efid != SKILL_SPACT_VORACITY_FANG & efid != SKILL_SPACT_MEMORY_POISON ) {
					if ( cdata(CDATA_CAST_STYLE, cc) != 0 ) {
						if ( synccheck(cc, -1) ) {
							if ( cc == CHARA_PLAYER ) {
								txt lang(name(cc) + "ÇÕ" + skillname(efid) + "ÇÃ" + _cast(cdata(CDATA_CAST_STYLE, cc)), name(cc) + " cast " + skillname(efid) + ".")
								txtmore
							}
							else {
								txt lang(name(cc) + "ÇÕ" + _cast(cdata(CDATA_CAST_STYLE, cc)), name(cc) + "" + _cast(cdata(CDATA_CAST_STYLE, cc)))
								txtmore
							}
						}
					}
					else {
						if ( efid == SKILL_SPACT_DRAIN_BLOOD ) {
							if ( synccheck(cc, -1) ) {
								if ( tc >= MAX_CHARA_FOLLOWER ) {
									gdata(GDATA_DMG_TYPE) = 2
									txt lang(aln(cc) + name(tc) + "ÇÃååÇãzÇ¢", name(cc) + " suck" + _s(cc) + " " + name(tc) + your(tc) + " blood and")
								}
								else {
									txt lang(name(cc) + "Ç…ååÇãzÇÌÇÍÇΩÅB", name(cc) + " suck" + _s(cc) + " " + name(tc) + your(tc) + " blood.")
								}
							}
						}
						else {
							if ( synccheck(cc, -1) ) {
								if ( tc >= MAX_CHARA_FOLLOWER ) {
									gdata(GDATA_DMG_TYPE) = 2
									txt lang(aln(cc) + name(tc) + "Ç" + elename(ele) + _melee(2, cdata(CDATA_MELEE_STYLE, cc)) + "Ç≈" + _melee(0, cdata(CDATA_MELEE_STYLE, cc)), name(cc) + " touch" + _s(cc) + " " + name(tc) + " with " + his(cc) + " " + elename(ele) + " " + _melee(2, cdata(CDATA_MELEE_STYLE, cc)) + " and")
								}
								else {
									txt lang(name(tc) + "ÇÕ" + name(cc) + "Ç…" + elename(ele) + _melee(2, cdata(CDATA_MELEE_STYLE, cc)) + "Ç≈" + _melee(1, cdata(CDATA_MELEE_STYLE, cc)), name(cc) + " touch" + _s(cc) + " " + name(tc) + " with " + his(cc) + " " + elename(ele) + " " + _melee(2, cdata(CDATA_MELEE_STYLE, cc)) + ".")
								}
							}
						}
					}
				}
				if ( efid == SKILL_SPACT_DRAIN_BLOOD ) {
					if ( cdata(CDATA_SP, tc) > 0 ) {
						healsp cc, 12
					}
					if ( tc == CHARA_PLAYER ) {
						dmgsp CHARA_PLAYER, rnd(6) + 5
					}
					if ( tc != CHARA_PLAYER ) {
						dmgspt tc, rnd(6) + 5
					}
					refreshspeed tc
					if ( cc == CHARA_PLAYER & tc < MAX_CHARA_FOLLOWER & (cdata(CDATA_IMPRESSION, tc) >= 150 | cdata(CDATA_MASTER_SERVANT, tc) >= 150) ) {
						customtalk tc, DBMODE_FLAVOR_DRAIN
						gosub *convert_word
						if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
							txt lang(name(tc) + "ÇÕëÂêlÇµÇ≠ååÇãzÇÌÇÍÇƒÇ¢ÇÈÅB", name(tc) + " obediently allows you to suck " + his(tc, 1) + " blood."), lang("ÅuÇ«Ç§ÇºÅcÅv", cnvtalk("Here you go...")), lang("Åuî¸ñ°ÇµÇ¢ÅHÅv", cnvtalk("Is it good?"))
						}
						dmgcon tc, CONDITION_BLEED, 50
					}
					else {
						dmghp tc, role(dice1, dice2, bonus), cc, ele, elep
						dmgcon tc, CONDITION_BLEED, 75
					}
				}
				if ( efid != SKILL_SPACT_DRAIN_BLOOD ) {
					dmghp tc, role(dice1, dice2, bonus), cc, ele, elep
				}
				if ( efid == SKILL_SPACT_VORACITY_FANG ) {
					dmgcon tc, CONDITION_BLEED, 75
					cdata(CDATA_HUNGER, cc) += 1500
					if ( cdata(CDATA_HUNGER, cc) > 12000 * 2 ) {
						chara_vomit cc
						dmgcon cc, CONDITION_DIM, 100
					}
				}
				if ( efid == SKILL_SPACT_MEMORY_POISON ) {
					if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
						if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE ) {
							goto *effect_SWEND1
						}
						p = SKILL_ATTR_STR, SKILL_ATTR_CON, SKILL_ATTR_DEX, SKILL_ATTR_CHA, SKILL_ATTR_SPD, SKILL_ATTR_LER, SKILL_ATTR_PER, SKILL_ATTR_MAG, SKILL_ATTR_WIL, SKILL_ATTR_LUC, -1
						repeat
							if ( p(cnt) == (-1) ) {
								break
							}
							i = p(cnt) + STARTING_CDATA_ATTR - STARTING_SKILL_ATTR
							cdata(i, tc) -= 50
						loop
						r1 = tc
						gosub *charaRefresh
						if ( gdata(GDATA_FLAG_MAIN) >= 780 ) {
							txtef COLOR_GREEN
							txt lang("[ãLâØÇÃìî]Ç©ÇÁï˙èoÇ≥ÇÍÇΩåıÇ™ÅAãLâØè¡ãéÇä…òaÇµÇΩÅI", "The light emitted from Light of memory relieved memory delete!")
						}
						if ( synccheck(tc, -1) ) {
							txtmore
							txtef COLOR_PURPLE
							txt lang(name(tc) + "ÇÕé„Ç≠Ç»Ç¡ÇΩÅB", name(tc) + " " + is(tc) + " weakened.")
						}
					}
				}
				if ( efid == SKILL_SPACT_TOUCH_OF_FEAR ) {
					dmgcon tc, CONDITION_FEAR, elep
				}
				if ( efid == SKILL_SPACT_TOUCH_OF_SLEEP ) {
					dmgcon tc, CONDITION_SLEEP, elep
				}
				if ( efid == SKILL_SPACT_TOUCH_OF_HUNGER ) {
					if ( findbuff(r1, BUFF_CURSE_OF_HUNGER) != (-1) ) {
						cdata(CDATA_HUNGER, tc) -= 8 * 100
						if ( synccheck(tc, -1) ) {
							txtmore
							txtef COLOR_PURPLE
							txt lang(name(tc) + "ÇÕÇ®ï†Ç™å∏Ç¡ÇΩÅB", "Suddenly, " + name(tc) + " feel" + _s(tc) + " hungry.")
						}
						r1 = tc
						gosub *calcHunger
					}
					else {
						addbuff tc, BUFF_CURSE_OF_HUNGER, 9999999, 100
					}
				}
				if ( efid == SKILL_SPACT_TOUCH_OF_WEAKNESS ) {
					if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE ) {
						txt lang(name(tc) + "ÇÕé„Ç≠Ç»ÇÁÇ»Ç¢ÅB", name(tc) + " won't weaken.")
					}
					else {
						p = rnd(MAX_SKILL_ATTR - STARTING_SKILL_ATTR)
						if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE & rnd(4) | encfind(tc, ENCHANT_SUSTAIN * EXT_ENCHANTMENT + STARTING_SKILL_ATTR + p) != (-1) ) {
							p = -1
						}
						if ( findbuff(tc, BUFF_DISINFECTION) != (-1) ) {
							p = -1
						}
						if ( p != (-1) ) {
							i = sorg(STARTING_SKILL_ATTR + p, tc) - cdata(STARTING_CDATA_ATTR + p, tc)
							if ( i > 0 ) {
								i = i * efp / 2000 + 1
								cdata(STARTING_CDATA_ATTR + p, tc) -= i
							}
							if ( synccheck(tc, -1) ) {
								txtmore
								txtef COLOR_PURPLE
								txt lang(name(tc) + "ÇÕé„Ç≠Ç»Ç¡ÇΩÅB", name(tc) + " " + is(tc) + " weakened.")
							}
							r1 = tc
							gosub *charaRefresh
						}
					}
				}
				if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
					if ( efid != SKILL_SPACT_VORACITY_FANG & efid != SKILL_SPACT_DRAIN_BLOOD ) {
						if ( findbuff(cc, BUFF_RESOLUTION_HAND) != (-1) ) {
							snd SOUNDLIST_OFFER1
							txt lang(name(cc) + "ÇÃêGÇÍÇΩïîï™Ç™êoÇ∆âªÇµÇΩÅB", "Touched portion is turned into dust.")
							dmghp tc, (sdata(SKILL_ATTR_MAG, cc) / 5 + 4) * ((sdata(SKILL_NORMAL_ALCHEMY, cc) + 1) / 5 + 3) * 2 + rnd(sdata(SKILL_NORMAL_ALCHEMY, cc) * 2 + 5) + 1, cc, SKILL_RESDMG_CRUSH, 1000
							if ( cdata(CDATA_HP, tc) >= 0 ) {
								if ( cdata(CDATA_HP, tc) < cdata(CDATA_MAX_HP, tc) / 8 ) {
									efid = SKILL_SPACT_MATERIALIZE
									gosub *effect
								}
							}
							skillexp SKILL_NORMAL_ALCHEMY, cc, 40
							if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
								if ( efid == SKILL_SPACT_TOUCH_OF_SLEEP ) {
									dmgcon tc, CONDITION_SLEEP, elep
								}
							}
						}
					}
					if ( efid != SKILL_SPACT_VORACITY_FANG & efid != SKILL_SPACT_DRAIN_BLOOD ) {
						powsel = 0
						if ( gdata(GDATA_FLAG_MAIN) < 350 ) {
							if ( cdata(CDATA_LEVEL, cc) >= 130 ) {
								powsel = 100
							}
						}
						if ( gdata(GDATA_FLAG_MAIN) >= 350 ) {
							if ( cdata(CDATA_LEVEL, cc) >= 50 ) {
								powsel = 100
							}
						}
						if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 | cc == CHARA_PLAYER ) {
							powsel = 100
						}
						if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
							powsel = 100
						}
						if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_QUALITY, cc) > FIX_QUALITY_GREAT & cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) / 2 & cdata(CDATA_POWER_GAUGE, cc) < 200 ) {
							if ( exgauge != 100 ) {
								powsel = 0
							}
						}
						if ( gdata(GDATA_TEMPORARY_FLAGS2) == 888 ) {
							powsel = 0
						}
						if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_TEMPORARY ) {
							if ( cdata(CDATA_DIRECTIVE_MODE_ORG, cc) != DIRECTIVE_MODE_OFFENSIVE ) {
								powsel = 0
							}
						}
						if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_DEFENSIVE | cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_INTERCEPT ) {
							powsel = 0
						}
						if ( cc == CHARA_PLAYER ) {
							if ( cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) == 0 ) {
								powsel = 0
							}
						}
						if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
							if ( powsel == 100 ) {
								if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
									if ( efid != SKILL_SPACT_MEMORY_POISON ) {
										efid = SKILL_SPACT_HAND_OF_SPLENDOR
										gosub *effect
									}
									if ( efid == SKILL_SPACT_MEMORY_POISON ) {
										efid = SKILL_SPACT_DATA_DELETE
										gosub *effect
									}
								}
							}
						}
					}
				}
				goto *effect_SWEND1
			}
			if ( _switch_val == SKILL_TYPE_SUMMON | _switch_sw ) {
				_switch_sw = 0
				if ( efid == SKILL_SPACT_TEMPEST_ARROW ) {
					if ( cc != CHARA_PLAYER ) {
						if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
							efid = SKILL_SPACT_INTENSIVE_POWER
							gosub *effect
							goto *effect_SWEND1
						}
					}
					if ( cc != CHARA_PLAYER ) {
						if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 ) {
							efid = SKILL_SPACT_TIME_STOP
							gosub *effect
							goto *effect_SWEND1
						}
					}
				}
				if ( cc != CHARA_PLAYER ) {
					if ( cc < MAX_CHARA_FOLLOWER | cbit(CHARA_BIT_LIVESTOCK, cc) == 1 | cdata(CDATA_ALLIED, cc) == 100 ) {
						efid = SKILL_SPACT_INTENSIVE_POWER
						gosub *effect
						goto *effect_SWEND1
					}
				}
				if ( cc != CHARA_PLAYER ) {
					if ( cdata(CDATA_RELATION, cc) == 10 ) {
						goto *effect_SWEND1
					}
				}
				if ( cc == CHARA_PLAYER ) {
					if ( gdata(GDATA_CROWD) + 100 >= MAX_CHARA_TOTAL - MAX_CHARA_SAVE ) {
						txt_nothinghappens
						obvious = 0
						goto *effect_SWEND1
					}
				}
				p = 3
				efp = (efp / 25 + efp * efp / 10000 + cdata(CDATA_LEVEL, cc)) / 2
				if ( efp < 1 ) {
					efp = 1
				}
				if ( efid == SKILL_SPACT_SUMMON_PAWN ) {
					efp = 15 + rnd(8)
				}
				if ( efid == SKILL_SPACT_SUMMON_CATS ) {
					efp = 2 + rnd(18)
				}
				if ( efid == SKILL_SPACT_SUMMON_FIRE ) {
					efp = 15 + rnd(15)
				}
				if ( efid == SKILL_SPACT_SUMMON_YEEK ) {
					efp = 5 + rnd(12)
				}
				if ( efid == SKILL_SPACT_SUMMON_SISTER ) {
					p = 10
				}
				if ( efid == SKILL_SPACT_TEMPEST_ARROW ) {
					p = 5
				}
				if ( efid == SKILL_SPACT_SUMMON_CHAOS ) {
					p = 5
				}
				if ( efid == SKILL_SPELL_SUMMON_SPIRIT ) {
					efp = 2 + rnd(8)
				}
				if ( cdata(CDATA_ID, cc) == CREATURE_ID_LULWY | cdata(CDATA_ID, cc) == CREATURE_ID_DEVASTATE_LULWY ) {
					if ( efid == SKILL_SPACT_SUMMON_CHAOS ) {
						if ( cdata(CDATA_RELATION, cc) >= (-1) ) {
							sylph = -1
						}
						else {
							sylph = -3
						}
						p = 0
						repeat MAX_CHARA_TOTAL
							if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
								continue
							}
							if ( cdata(CDATA_ID, cnt) != CREATURE_ID_SYLPH ) {
								continue
							}
							if ( cbit(CHARA_BIT_SUMMONED, cnt) != 1 ) {
								continue
							}
							p++
						loop
						if ( p > 15 ) {
							goto *effect_SWEND1
						}
						if ( synccheck(cc, -1) ) {
							txt lang("ñÇñ@Ç≈ÉÇÉìÉXÉ^Å[Ç™è¢ä´Ç≥ÇÍÇΩÅB", "Several monsters come out from a portal.")
						}
						repeat 7
							characreate -1, CREATURE_ID_SYLPH, cdata(CDATA_X, tc), cdata(CDATA_Y, tc)
							cbitmod CHARA_BIT_SUMMONED, rc, 1
							cdata(CDATA_RELATION, rc) = sylph
						loop
						goto *effect_SWEND1
					}
				}
				if ( cdata(CDATA_ID, cc) == CREATURE_ID_ZOMBIE_QUEEN | cdata(CDATA_ID, cc) == CREATURE_ID_ROATONIS_THE_INFECTIONS ) {
					if ( efid == SKILL_SPACT_SUMMON_CHAOS ) {
						if ( cc < MAX_CHARA_FOLLOWER | cbit(CHARA_BIT_LIVESTOCK, cc) == 1 | cdata(CDATA_ALLIED, cc) == 100 ) {
							goto *effect_SWEND1
						}
						p = 0
						repeat MAX_CHARA_TOTAL
							if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
								continue
							}
							if ( cdata(CDATA_ID, cnt) != CREATURE_ID_ZOMBIE ) {
								continue
							}
							if ( cbit(CHARA_BIT_SUMMONED, cnt) != 1 ) {
								continue
							}
							p++
						loop
						if ( p > 15 ) {
							goto *effect_SWEND1
						}
						txtef COLOR_RED
						txt lang(" *éÄé“äoê¡*Å@", " *Necro Awake* ")
						snd SOUNDLIST_CURSE2
						repeat 10
							initlv = cdata(CDATA_LEVEL, cc) * 2 / 3 + 1
							novoidlv = 1
							characreate -1, CREATURE_ID_ZOMBIE, cdata(CDATA_X, cc), cdata(CDATA_Y, cc)
							cbitmod CHARA_BIT_SUMMONED, rc, 1
							cdata(CDATA_CHARACTER_TIER, rc) = CHARACTER_TIER_SUMMONED_NORMAL
						loop
						goto *effect_SWEND1
					}
				}
				repeat 1 + rnd(p)
					flt calcobjlv(efp), 2
					dbid = 0
					if ( efid == SKILL_SPELL_SUMMON_WILD ) {
						fltn "wild"
					}
					if ( efid == SKILL_SPACT_SUMMON_FIRE ) {
						fltn "fire"
					}
					if ( efid == SKILL_SPACT_SUMMON_PAWN ) {
						fltn "pawn"
					}
					if ( efid == SKILL_SPACT_SUMMON_CATS ) {
						fltn "cat"
					}
					if ( efid == SKILL_SPACT_SUMMON_YEEK ) {
						fltn "yeek"
					}
					if ( efid == SKILL_SPACT_SUMMON_SISTER ) {
						dbid = CREATURE_ID_YOUNGER_SISTER
					}
					if ( efid == SKILL_SPACT_TEMPEST_ARROW ) {
						dbid = CREATURE_ID_RUDRAS
					}
					if ( efid == SKILL_SPACT_SUMMON_CHAOS ) {
						dbid = CREATURE_ID_CHAOS_SPIRIT
						if ( cdata(CDATA_ID, cc) == CREATURE_ID_PERFORMAID_PINCHIEF ) {
							dbid = CREATURE_ID_PERFORMAID_BLOODRESS + rnd(3)
						}
					}
					if ( efid == SKILL_SPELL_SUMMON_SPIRIT ) {
						initlv = limit(efp * 1 / 3 + 2, 1, gdata(GDATA_DEEPEST_LEVEL))
						novoidlv = 1
						fltn "spirit"
						characreate -1, dbid, cdata(CDATA_X, tc), cdata(CDATA_Y, tc)
						cbitmod CHARA_BIT_SUMMONED, rc, 1
						cdata(CDATA_CHARACTER_TIER, rc) = CHARACTER_TIER_SUMMONED_NORMAL
					}
					else {
						if ( efid == SKILL_SPACT_TEMPEST_ARROW ) {
							characreate -1, dbid, cdata(CDATA_X, tc), cdata(CDATA_Y, tc)
							cdata(CDATA_RELATION, rc) = -3
							cdata(CDATA_RELATION_ORG, rc) = -3
							cbitmod CHARA_BIT_SUMMONED, rc, 1
						}
						else {
							characreate -1, dbid, cdata(CDATA_X, tc), cdata(CDATA_Y, tc)
							cbitmod CHARA_BIT_SUMMONED, rc, 1
							if ( cdata(CDATA_ID, rc) == CREATURE_ID_CTHUGHA ) {
								characreate -1, CREATURE_ID_YOMAGNTHO, cdata(CDATA_X, tc), cdata(CDATA_Y, tc)
								cbitmod CHARA_BIT_SUMMONED, rc, 1
							}
						}
					}
					if ( efid != SKILL_SPACT_SUMMON_SISTER ) {
						if ( cdata(CDATA_ID, rc) == cdata(CDATA_ID, cc) ) {
							chara_vanquish rc
							continue cnt
						}
					}
					if ( cdata(CDATA_ID, rc) == CREATURE_ID_STRAY_CAT ) {
						chara_vanquish rc
						continue cnt
					}
				loop
				if ( synccheck(cc, -1) ) {
					if ( efid == SKILL_SPACT_TEMPEST_ARROW ) {
						txt lang("ÅuÉAÉnÉnÅIó≥ä™Ç…ì€Ç‹ÇÍÇƒè¡Ç¶Ç»Ç≥Ç¢Åv", cnvtalk("Huh! Go into the tornado!"))
						snd SOUNDLIST_ENC
						animeload ANIMATION_UNISON_IMPACT2, cc
						cdata(CDATA_POWER_GAUGE, cc) -= 100
						if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
							snd SOUNDLIST_POWER
							exgauge = 100
							if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
								gdata(GDATA_TIME_STOP_TIME) = 2
							}
						}
						animeload ANIMATION_FIREWORK, cc
						snd SOUNDLIST_BOLT1
					}
					else {
						if ( synccheck(cc, -1) ) {
							txt lang("ñÇñ@Ç≈ÉÇÉìÉXÉ^Å[Ç™è¢ä´Ç≥ÇÍÇΩÅB", "Several monsters come out from a portal.")
						}
					}
				}
				goto *effect_SWEND1
			}
			if ( _switch_val == SKILL_TYPE_TELEPORT | _switch_sw ) {
				_switch_sw = 0
				if ( efid == SKILL_SPACT_DISPATCH_FLYING_BEAST ) {
					if ( cc == tc ) {
						if ( cc == CHARA_PLAYER ) {
							txt lang("é©ï™Ç≈é©ï™ÇÕìäÇ∞ÇÁÇÍÇ»Ç¢ÅB", "You can not throw yourself.")
						}
						goto *effect_SWEND1
					}
				}
				if ( efid == SKILL_SPACT_SHADOW_STEP ) {
					if ( cdata(CDATA_RELATION, cc) != 10 | tc != CHARA_PLAYER ) {
						if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
							tc = cdata(CDATA_TARGET, cc)
							gosub *act_melee
							goto *effect_SWEND1
						}
					}
				}
				tcprev = tc
				if ( gdata(GDATA_RIDER) != 0 ) {
					if ( efid != SKILL_SPACT_SHADOW_STEP ) {
						if ( tc == gdata(GDATA_RIDER) ) {
							goto *effect_SWEND1
						}
					}
				}
				if ( gdata(GDATA_RIDER) != 0 ) {
					if ( efid != SKILL_SPACT_DRAW_SHADOW ) {
						if ( cc == gdata(GDATA_RIDER) ) {
							goto *effect_SWEND1
						}
					}
				}
				if ( cdata(CDATA_IN_TAGTEAM, cc) == 1 ) {
					if ( efid != SKILL_SPACT_DRAW_SHADOW ) {
						goto *effect_SWEND1
					}
				}
				if ( cdata(CDATA_IN_TAGTEAM, tc) == 1 ) {
					if ( efid != SKILL_SPACT_SHADOW_STEP ) {
						goto *effect_SWEND1
					}
				}
				if ( cdata(CDATA_CONDITION_BIND, cc) >= 20 ) {
					if ( efid == SKILL_SPACT_SHADOW_STEP ) {
						txt lang("å≈íËÇ≥ÇÍÇƒÇ¢ÇƒìÆÇ©Ç»Ç¢ÅI", "It does not move to be fixed!")
						goto *effect_SWEND1
					}
				}
				if ( cdata(CDATA_CONDITION_BIND, tc) >= 20 ) {
					if ( efid != SKILL_SPACT_SHADOW_STEP ) {
						txt lang("å≈íËÇ≥ÇÍÇƒÇ¢ÇƒìÆÇ©Ç»Ç¢ÅI", "It does not move to be fixed!")
						goto *effect_SWEND1
					}
				}
				if ( efid != SKILL_SPACT_SHADOW_STEP & efid != SKILL_SPACT_DISPATCH_FLYING_BEAST ) {
					space = 0
					repeat MAX_CHARA_TOTAL
						if ( cnt == cc ) {
							continue
						}
						if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
							continue
						}
						if ( findbuff(cnt, BUFF_RETENTION) != (-1) ) {
							space = 1
							break
						}
					loop
					if ( space == 1 ) {
						txt_noteleport
						goto *effect_SWEND1
					}
					space = 0
				}
				if ( efid == SKILL_SPELL_TELEPORT ) {
					tc = cc
				}
				if ( efid == SKILL_SPACT_SHADOW_STEP ) {
					telex = cdata(CDATA_X, tc)
					teley = cdata(CDATA_Y, tc)
				}
				if ( efid == SKILL_SPACT_DISPATCH_FLYING_BEAST ) {
					if ( synccheck(cc, -1) ) {
						txtmore
						txt lang(name(cc) + "ÇÕ" + name(tc) + "Çï˙ÇËìäÇ∞ÇΩÅB", name(cc) + " threw " + name(tc) + ".")
					}
					if ( cdata(CDATA_TARGET, tc) != (-1) ) {
						telex = cdata(CDATA_X, cdata(CDATA_TARGET, tc))
						teley = cdata(CDATA_Y, cdata(CDATA_TARGET, tc))
					}
					if ( cdata(CDATA_TARGET, tc) == (-1) ) {
						telex = cdata(CDATA_X, CHARA_PLAYER)
						teley = cdata(CDATA_Y, CHARA_PLAYER)
					}
				}
				if ( efid == SKILL_SPACT_DRAW_SHADOW ) {
					telex = cdata(CDATA_X, cc)
					teley = cdata(CDATA_Y, cc)
				}
				if ( efid == SKILL_SPELL_TELEPORT_OTHER | efid == SKILL_SPACT_SUSPICIOUS_HAND ) {
					if ( map(tlocx, tlocy, 1) == 0 ) {
						txt_nothinghappens
						obvious = 0
						goto *effect_SWEND1
					}
					tc = map(tlocx, tlocy, 1) - 1
				}
				if ( efid != SKILL_SPACT_SHADOW_STEP & efid != SKILL_SPACT_DISPATCH_FLYING_BEAST ) {
					if ( gdata(GDATA_AREA) == AREA_PET_ARENA | mdata(MDATA_TYPE) == MAP_TYPE_WORLD | gdata(GDATA_AREA) == AREA_PYRAMID | gdata(GDATA_AREA) == AREA_JAIL ) {
						if ( synccheck(tc, -1) ) {
							txt_noteleport
						}
						goto *effect_SWEND1
					}
				}
				if ( efid != SKILL_SPACT_SHADOW_STEP & efid != SKILL_SPACT_DISPATCH_FLYING_BEAST ) {
					if ( encfind(tc, ENCHANT_PREVENT_TELEPORT) != (-1) ) {
						if ( synccheck(tc, -1) ) {
							txt_noteleport
						}
						goto *effect_SWEND1
					}
					if ( gdata(GDATA_RAPID_FIRE) == 100 ) {
						goto *effect_SWEND1
					}
				}
				if ( efid == SKILL_SPACT_SUSPICIOUS_HAND ) {
					if ( tc == cc ) {
						if ( synccheck(tc, -1) ) {
							txt_noteleport
						}
						goto *effect_SWEND1
					}
					p = rnd(cdata(CDATA_GOLD, tc) / 10 + 1)
					if ( cdatan(CDATAN_CLASS, tc) == "tourist" ) {
						p = p * 2
					}
					if ( rnd(sdata(SKILL_ATTR_PER, tc)) > rnd(sdata(SKILL_ATTR_DEX, cc) * 4) | cbit(CHARA_BIT_RES_STEAL, tc) == 1 ) {
						txt lang(name(tc) + "ÇÕé©ï™ÇÃç‡ïzÇéÁÇ¡ÇΩÅB", name(tc) + " guard" + _s(tc) + " " + his(tc) + " wallet from a thief.")
						p = 0
					}
					if ( p != 0 ) {
						snd SOUNDLIST_PAYGOLD1
						cdata(CDATA_GOLD, tc) -= p
						txt lang(name(cc) + "ÇÕ" + name(tc) + "Ç©ÇÁ" + p + "ñáÇÃã‡â›ÇíDÇ¡ÇΩÅB", name(cc) + " steal" + _s(cc) + " " + p + " gold pieces from " + name(tc) + ".")
						cdata(CDATA_GOLD, cc) += p
					}
					tc = cc
					if ( gdata(GDATA_RIDER) != 0 ) {
						if ( gdata(GDATA_RIDER) == tc ) {
							goto *effect_SWEND1
						}
					}
				}
				if ( efid != SKILL_SPACT_SHADOW_STEP & efid != SKILL_SPACT_DISPATCH_FLYING_BEAST ) {
					if ( synccheck(tc, -1) ) {
						snd SOUNDLIST_TELEPORT1
					}
				}
				if ( efid == SKILL_SPACT_DISPATCH_FLYING_BEAST ) {
					snd SOUNDLIST_SWING
				}
				if ( bakuretu == 200 ) {
					if ( cdata(CDATA_POWER_GAUGE, cc) >= 25 ) {
						snd SOUNDLIST_BOLT1
					}
				}
				tx = cdata(CDATA_X, tc)
				ty = cdata(CDATA_Y, tc)
				efidprev = efid
				repeat 200
					if ( efidprev == SKILL_SPELL_SHORT_TELEPORT | efidprev == SKILL_SPACT_DIMENSIONAL_MOVE ) {
						p = -1, 1
						cdata(CDATA_X_NEW, tc) = cdata(CDATA_X, tc) + (3 - cnt / 70 + rnd(5)) * p(rnd(2))
						cdata(CDATA_Y_NEW, tc) = cdata(CDATA_Y, tc) + (3 - cnt / 70 + rnd(5)) * p(rnd(2))
						cell_check cdata(CDATA_X_NEW, tc), cdata(CDATA_Y_NEW, tc)
					}
					else {
						if ( efidprev == SKILL_SPACT_SHADOW_STEP ) {
							cdata(CDATA_X_NEW, cc) = telex + rnd(cnt / 8 + 2) - rnd(cnt / 8 + 2)
							cdata(CDATA_Y_NEW, cc) = teley + rnd(cnt / 8 + 2) - rnd(cnt / 8 + 2)
							cell_check cdata(CDATA_X_NEW, cc), cdata(CDATA_Y_NEW, cc)
						}
						else {
							if ( efidprev == SKILL_SPACT_DISPATCH_FLYING_BEAST ) {
								cdata(CDATA_X_NEW, tc) = telex
								cdata(CDATA_Y_NEW, tc) = teley
								if ( cdata(CDATA_AI_DISTANCE, tc) >= 2 ) {
									hosei = rnd(12)
									if ( hosei == 0 ) {
										cdata(CDATA_X_NEW, tc) += cdata(CDATA_AI_DISTANCE, tc)
									}
									if ( hosei == 1 ) {
										cdata(CDATA_X_NEW, tc) -= cdata(CDATA_AI_DISTANCE, tc)
									}
									if ( hosei == 2 ) {
										cdata(CDATA_Y_NEW, tc) += cdata(CDATA_AI_DISTANCE, tc)
									}
									if ( hosei == 3 ) {
										cdata(CDATA_Y_NEW, tc) -= cdata(CDATA_AI_DISTANCE, tc)
									}
									if ( hosei == 4 ) {
										cdata(CDATA_X_NEW, tc) += cdata(CDATA_AI_DISTANCE, tc)
										cdata(CDATA_Y_NEW, tc) += 1
									}
									if ( hosei == 5 ) {
										cdata(CDATA_X_NEW, tc) -= cdata(CDATA_AI_DISTANCE, tc)
										cdata(CDATA_Y_NEW, tc) -= 1
									}
									if ( hosei == 6 ) {
										cdata(CDATA_X_NEW, tc) += cdata(CDATA_AI_DISTANCE, tc)
										cdata(CDATA_Y_NEW, tc) -= 1
									}
									if ( hosei == 7 ) {
										cdata(CDATA_X_NEW, tc) -= cdata(CDATA_AI_DISTANCE, tc)
										cdata(CDATA_Y_NEW, tc) += 1
									}
									if ( hosei == 8 ) {
										cdata(CDATA_Y_NEW, tc) += cdata(CDATA_AI_DISTANCE, tc)
										cdata(CDATA_X_NEW, tc) += 1
									}
									if ( hosei == 9 ) {
										cdata(CDATA_Y_NEW, tc) -= cdata(CDATA_AI_DISTANCE, tc)
										cdata(CDATA_X_NEW, tc) -= 1
									}
									if ( hosei == 10 ) {
										cdata(CDATA_Y_NEW, tc) += cdata(CDATA_AI_DISTANCE, tc)
										cdata(CDATA_X_NEW, tc) -= 1
									}
									if ( hosei == 11 ) {
										cdata(CDATA_Y_NEW, tc) -= cdata(CDATA_AI_DISTANCE, tc)
										cdata(CDATA_X_NEW, tc) += 1
									}
								}
								cell_check cdata(CDATA_X_NEW, tc), cdata(CDATA_Y_NEW, tc)
							}
							else {
								if ( efidprev == SKILL_SPACT_DRAW_SHADOW ) {
									cdata(CDATA_X_NEW, tc) = telex + rnd(cnt / 8 + 2) - rnd(cnt / 8 + 2)
									cdata(CDATA_Y_NEW, tc) = teley + rnd(cnt / 8 + 2) - rnd(cnt / 8 + 2)
									cell_check cdata(CDATA_X_NEW, tc), cdata(CDATA_Y_NEW, tc)
								}
								else {
									cdata(CDATA_X_NEW, tc) = rnd(mdata(MDATA_WIDTH) - 2) + 1
									cdata(CDATA_Y_NEW, tc) = rnd(mdata(MDATA_HEIGHT) - 2) + 1
									cell_check cdata(CDATA_X_NEW, tc), cdata(CDATA_Y_NEW, tc)
								}
							}
						}
					}
					if ( cellaccess == 1 ) {
						if ( efidprev == SKILL_SPACT_SHADOW_STEP ) {
							if ( synccheck(cc, -1) ) {
								txt lang(name(cc) + "ÇÕ" + cdatan(CDATAN_NAME, tcprev) + "ÇÃå≥Ç…à⁄ìÆÇµÇΩÅB", name(cc) + " teleport" + _s(cc) + " toward " + cdatan(CDATAN_NAME, tcprev) + ".")
							}
							rowactend cc
							if ( cdata(CDATA_IN_TAGTEAM, cc) != 0 ) {
								tcc = cdata(CDATA_TAGTEAM_PARTNER, cc)
								rowactend tcc
							}
							ccprev = cc
							gosub *procMove
							cc = ccprev
							if ( cc == CHARA_PLAYER ) {
								gosub *screen_draw
							}
							if ( cc == CHARA_PLAYER & client == tc ) {
								break
							}
							if ( cdata(CDATA_RELATION, cc) == 10 & tc == CHARA_PLAYER ) {
								break
							}
							if ( cbit(CHARA_BIT_LIVESTOCK, cc) == 1 & tc == CHARA_PLAYER ) {
								break
							}
							if ( zero2 != 200 ) {
								animeid = ANIMATION_ATTACK
								gosub *anime
								gosub *act_melee
							}
							break
						}
						else {
							if ( efidprev == SKILL_SPACT_DRAW_SHADOW ) {
								if ( synccheck(cc, -1) ) {
									txtmore
									txt lang(name(tc) + "ÇÕà¯Ç´äÒÇπÇÁÇÍÇΩÅB", name(tc) + " " + is(tc) + " drawn.")
								}
								if ( cdata(CDATA_ROW_ACT, tc) != ACTION_NONE ) {
									if ( synccheck(tc, -1) ) {
										txt lang(name(tc) + "ÇÕã¡Ç¢ÇƒçsìÆÇíÜífÇµÇΩÅB", name(tc) + " got surprised and interrupted " + his(tc, 1) + " action.")
										rowactend tc
									}
								}
								if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
									ttc = cdata(CDATA_TAGTEAM_PARTNER, tc)
									if ( cdata(CDATA_ROW_ACT, ttc) != ACTION_NONE ) {
										txt lang(cdatan(CDATAN_NAME, ttc) + "ÇÕã¡Ç¢ÇƒçsìÆÇíÜífÇµÇΩÅB", cdatan(CDATAN_NAME, ttc) + " got surprised and interrupted " + his(ttc, 1) + " action.")
										rowactend ttc
									}
								}
							}
							else {
								if ( efidprev != SKILL_SPACT_DISPATCH_FLYING_BEAST ) {
									if ( synccheck(cc, -1) ) {
										if ( efidprev == SKILL_SPACT_SUSPICIOUS_HAND ) {
											txtmore
											txt lang("ìDñ_ÇÕèŒÇ¡Çƒì¶Ç∞ÇΩÅB", "A thief escapes laughing.")
										}
										else {
											txt lang(name(tc) + "ÇÕìÀëRè¡Ç¶ÇΩÅB", "Suddenly, " + name(tc) + " disappear" + _s(tc) + ".")
										}
									}
								}
								if ( cdata(CDATA_ROW_ACT, tc) != ACTION_NONE ) {
									if ( synccheck(cc, -1) ) {
										txt lang(name(tc) + "ÇÕã¡Ç¢ÇƒçsìÆÇíÜífÇµÇΩÅB", name(tc) + " got surprised and interrupted " + his(tc, 1) + " action.")
										rowactend tc
									}
								}
								if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
									ttc = cdata(CDATA_TAGTEAM_PARTNER, tc)
									if ( cdata(CDATA_ROW_ACT, ttc) != ACTION_NONE ) {
										txt lang(cdatan(CDATAN_NAME, ttc) + "ÇÕã¡Ç¢ÇƒçsìÆÇíÜífÇµÇΩÅB", cdatan(CDATAN_NAME, ttc) + " got surprised and interrupted " + his(ttc, 1) + " action.")
										rowactend ttc
									}
								}
							}
							rowactend cc
							ccprev = cc
							cc = tc
							gosub *procMove
							cc = ccprev
							if ( tc == CHARA_PLAYER ) {
								gosub *screen_draw
							}
							break
						}
					}
				loop
				tc = tcprev
				goto *effect_SWEND1
			}
			if ( _switch_val == SKILL_TYPE_BREATH | _switch_sw ) {
				_switch_sw = 0
				powsel = 0
				if ( gdata(GDATA_FLAG_MAIN) < 350 ) {
					if ( cdata(CDATA_LEVEL, cc) >= 130 ) {
						powsel = 100
					}
				}
				if ( gdata(GDATA_FLAG_MAIN) >= 350 ) {
					if ( cdata(CDATA_LEVEL, cc) >= 50 ) {
						powsel = 100
					}
				}
				if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 | cc == CHARA_PLAYER ) {
					powsel = 100
				}
				if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
					powsel = 100
				}
				if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_QUALITY, cc) > FIX_QUALITY_GREAT & cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) / 2 & cdata(CDATA_POWER_GAUGE, cc) < 200 ) {
					if ( exgauge != 100 ) {
						powsel = 0
					}
				}
				if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_TEMPORARY ) {
					if ( cdata(CDATA_DIRECTIVE_MODE_ORG, cc) != DIRECTIVE_MODE_OFFENSIVE ) {
						powsel = 0
					}
				}
				if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_DEFENSIVE | cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_INTERCEPT ) {
					powsel = 0
				}
				if ( cc == CHARA_PLAYER ) {
					if ( cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) == 0 ) {
						powsel = 0
					}
				}
				if ( gdata(GDATA_ACTIVATE_PROC) == 100 ) {
					powsel = 0
				}
				if ( powsel == 100 ) {
					if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
						kouiki = 0
						snd SOUNDLIST_ENC
						animeload ANIMATION_UNISON_IMPACT2, cc
						efid = SKILL_SPACT_CONVERGE_BREATH
						gosub *effect
						cdata(CDATA_POWER_GAUGE, cc) -= 100
						powsel = 0
						goto *effect_SWEND1
					}
				}
				powsel = 0
				get_route cdata(CDATA_X, cc), cdata(CDATA_Y, cc), tlocx, tlocy
				if ( stat == 0 ) {
					kouiki = 0
					goto *effect_SWEND1
				}
				if ( ele ) {
					valn = skillname(efid)
				}
				else {
					valn = lang("", "breath")
				}
				if ( findbuff(cc, BUFF_CHARGE) != (-1) & (cc != CHARA_PLAYER | cdata(CDATA_RELATION, tc) == (-3)) ) {
					customtalk cc, DBMODE_FLAVOR_CHARGE_A
					gosub *convert_word
					if ( synccheck(cc, -1) ) {
						txtef COLOR_RED
						txt lang(name(cc) + "ÇÕç≈ëÂèoóÕÇÃ" + valn + "ÇåJÇËèoÇµÇΩÅB", name(cc) + " blast" + _s(cc) + " " + valn + " with full power.")
					}
				}
				else {
					if ( synccheck(cc, -1) ) {
						txt lang(name(cc) + "ÇÕ" + valn + "ÇåJÇËèoÇµÇΩÅB", name(cc) + " blast" + _s(cc) + " " + valn + ".")
					}
				}
				dx = cdata(CDATA_X, cc)
				dy = cdata(CDATA_Y, cc)
				breath_list
				animeid = ANIMATION_BREATH
				gosub *anime
				repeat maxbreath
					dx = breathlist(0, cnt)
					dy = breathlist(1, cnt)
					if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
						continue
					}
					if ( dx == cdata(CDATA_X, cc) & dy == cdata(CDATA_Y, cc) ) {
						continue
					}
					if ( gdata(GDATA_RIDER) != 0 ) {
						if ( gdata(GDATA_RIDER) == cc ) {
							if ( tc == CHARA_PLAYER ) {
								continue
							}
						}
					}
					maga = 0
					inv_find ITEM_ID_MAGATAMA, cc
					if ( stat != (-1) ) {
						maga = 100
					}
					if ( ele == SKILL_RES_FIRE ) {
						if ( maga == 0 ) {
							mapitem_fire dx, dy
						}
					}
					maga = 0
					if ( ele == SKILL_RES_COLD ) {
						mapitem_cold dx, dy
					}
					if ( map(dx, dy, 8) != 0 ) {
						if ( mef(0, map(dx, dy, 8) - 1) == 9 ) {
							delmef map(dx, dy, 8) - 1
						}
					}
					if ( map(dx, dy, 1) != 0 ) {
						tc = map(dx, dy, 1) - 1
						if ( cc != tc ) {
							if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
								if ( tc != CHARA_PLAYER ) {
									if ( rnd(cdata(CDATA_HP, tc) + 1) < rnd(cdata(CDATA_HP, cdata(CDATA_TAGTEAM_PARTNER, tc)) + 1) ) {
										tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
									}
									txt_guard
								}
							}
							dmg = role(dice1, dice2, bonus) + (kouiki == 100) * sdata(SKILL_ATTR_CON, cc) / 10 * (sdata(SKILL_NORMAL_CONTROL_MAGIC, cc) + 10) / 2
							if ( cdata(CDATA_ENHANCE_BREATH, cc) != 0 ) {
								dmg = dmg * (100 + limit(cdata(CDATA_ENHANCE_BREATH, cc), 0, 2000) / 10) / 100
							}
							calcmagiccontrol cc, tc
							if ( stat == 1 ) {
								continue
							}
							if ( findbuff(cc, BUFF_CHARGE) != (-1) ) {
								if ( cc != CHARA_PLAYER | cdata(CDATA_RELATION, tc) == (-3) ) {
									dmg = dmg * 11
									animeload ANIMATION_OFFER, tc
								}
							}
							if ( synccheck(tc, -1) ) {
								txtmore
								if ( tc >= MAX_CHARA_FOLLOWER ) {
									gdata(GDATA_DMG_TYPE) = 2
									txt3rd = 1
									txt lang(name(tc) + "Ç…ñΩíÜÇµ", "The breath hits " + name(tc) + " and")
								}
								else {
									txt lang(name(tc) + "Ç…ñΩíÜÇµÇΩÅB", "The breath hits " + name(tc) + ".")
								}
							}
							dmghp tc, dmg, cc, ele, elep
						}
					}
				loop
				if ( findbuff(cc, BUFF_CHARGE) != (-1) ) {
					if ( cc != CHARA_PLAYER | cdata(CDATA_RELATION, tc) == (-3) ) {
						p = cc
						repeat MAX_BLESSINGS + MAX_HEXES
							if ( cdata(STARTING_CDATA_BUFF + cnt * ARRAY_CDATA_BUFF, p) == 0 ) {
								break
							}
							if ( cdata(STARTING_CDATA_BUFF + cnt * ARRAY_CDATA_BUFF, p) == BUFF_CHARGE ) {
								delbuff p, cnt
								continue cnt
							}
						loop
						r1 = cc
						gosub *charaRefresh
					}
				}
				kouiki = 0
				goto *effect_SWEND1
			}
			goto *effect2
*effect_SWEND1
			goto *effect_end
		}
		else {
			if ( efstatus >= 1 ) {
				efp = efp * 150 / 100
			}
			if ( efstatus <= (-1) ) {
				efp = 50
			}
		}
	}
*effect2
	_switch_val = efid
	if ( _switch_val == SKILL_SPACT_EYE_OF_INSANITY | _switch_sw ) {
		_switch_sw = 0
		txtef COLOR_PURPLE
		if ( jp ) {
			txt name(tc) + "ÇÕ" + name(cc) + "ÇÃï†ÇÃãTóÙÇ©ÇÁÂvíéÇ™ï¶Ç´èoÇÈå∂äoÇå©ÇΩÅB", name(tc) + "ÇÕ" + name(cc) + "Ç™érÇÊ√ÇÈå∂äoÇñ⁄åÇÇµÇΩÅB", name(tc) + "ÇÕ" + name(cc) + "ÇÃã∞ÇÎÇµÇ¢ìµÇ…êkÇ¶ÇΩÅB", name(tc) + "ÇÕ" + name(cc) + "ÇÃêGéËÇ…óçÇ‹ÇÈëüï®ÇÃå∂äoÇ…ìfÇ´ãCÇä¥Ç∂ÇΩÅB"
		}
		if ( en ) {
			txt name(tc) + " see" + _s(tc) + " maggots breed in the rent stomach of " + name(cc) + ".", name(tc) + " see" + _s(tc) + " " + name(cc) + " chow" + _s(cc) + " dead bodies.", name(tc) + " shudder" + _s(tc) + " at " + name(cc) + your(cc) + " terrifying eyes.", name(tc) + " feel" + _s(tc) + " sick at entrails caught in " + name(cc) + your(cc) + " tentacles."
		}
		dmgsan tc, rnd(role(dice1, dice2, bonus) + 1)
		if ( findbuff(cc, BUFF_ABYSS_IN_THE_EYE) != (-1) ) {
			snd SOUNDLIST_OFFER1
			txt lang(name(cc) + "ÇÃìµçEÇ™äJÇ¢ÇΩÅB", name(cc) + "'s pupils dilate.")
			dmghp tc, sdata(SKILL_ATTR_MAG, cc) / 6 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 6)
			healhp cc, sdata(SKILL_ATTR_MAG, cc) / 2 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 2)
			dmgmp tc, sdata(SKILL_ATTR_MAG, cc) / 6 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 6)
			healmp cc, sdata(SKILL_ATTR_MAG, cc) / 2 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 2)
			cdata(CDATA_POWER_GAUGE, tc) -= 2
			if ( cdata(CDATA_POWER_GAUGE, tc) < 0 ) {
				cdata(CDATA_POWER_GAUGE, tc) = 0
			}
			cdata(CDATA_POWER_GAUGE, cc) += 2
			if ( cdata(CDATA_POWER_GAUGE, cc) > 100 ) {
				if ( cdata(CDATA_SHIFT_FORM, cc) <= SHIFT_FORM_NONE & (cdata(CDATA_EVOLUTION_STAGE, cc) <= 0 | dmgsource == 0) & (cdata(CDATA_QUALITY, cc) < FIX_QUALITY_MIRACLE | cc < MAX_CHARA_FOLLOWER) ) {
					cdata(CDATA_POWER_GAUGE, cc) = 100
				}
			}
			if ( cdata(CDATA_POWER_GAUGE, cc) > 200 ) {
				cdata(CDATA_POWER_GAUGE, cc) = 200
			}
		}
		powsel = 0
		if ( gdata(GDATA_FLAG_MAIN) < 350 ) {
			if ( cdata(CDATA_LEVEL, cc) >= 130 ) {
				powsel = 100
			}
		}
		if ( gdata(GDATA_FLAG_MAIN) >= 350 ) {
			if ( cdata(CDATA_LEVEL, cc) >= 50 ) {
				powsel = 100
			}
		}
		if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 | cc == CHARA_PLAYER ) {
			powsel = 100
		}
		if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
			powsel = 100
		}
		if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_QUALITY, cc) > FIX_QUALITY_GREAT & cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) / 2 & cdata(CDATA_POWER_GAUGE, cc) < 200 ) {
			if ( exgauge != 100 ) {
				powsel = 0
			}
		}
		if ( gdata(GDATA_TEMPORARY_FLAGS2) == 888 ) {
			powsel = 0
		}
		if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_TEMPORARY ) {
			if ( cdata(CDATA_DIRECTIVE_MODE_ORG, cc) != DIRECTIVE_MODE_OFFENSIVE ) {
				powsel = 0
			}
		}
		if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_DEFENSIVE | cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_INTERCEPT ) {
			powsel = 0
		}
		if ( cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) == 0 ) {
				powsel = 0
			}
		}
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			if ( powsel == 100 ) {
				if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
					efid = SKILL_SPACT_MIND_BREAK
					gosub *effect
				}
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_CONTINENT_MAP | _switch_sw ) {
		_switch_sw = 0
		snd SOUNDLIST_BOOK1
		gsel 4
		if ( gdata(GDATA_FLAG_MAIN) < 180 ) {
			pos 0, 0
			picload exedir + "graphic\\world.bmp", 1
		}
		if ( gdata(GDATA_FLAG_MAIN) >= 180 ) {
			pos 0, 0
			picload exedir + "graphic\\world2.bmp", 1
		}
		gsel 0
		redraw 0
		ww = 680
		wh = 430
		wx = (windoww - ww) / 2 + inf_screenx
		wy = winposy(wh)
		gmode 2
		pos wx, wy
		gcopy 4, 0, 0, ww, wh
		redraw 1
		press
		snd SOUNDLIST_CARD1
		gosub *screen_draw
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_TREASURE_MAP | _switch_sw ) {
		_switch_sw = 0
		if ( mdata(MDATA_TYPE) != MAP_TYPE_WORLD ) {
			txt lang("ÇªÇÍÇÕÉOÉçÅ[ÉoÉãÉ}ÉbÉvÇ≈ì«ÇﬁïKóvÇ™Ç†ÇÈÅB", "You need to read it while you are in the global map.")
			goto *effect_end
		}
		if ( efstatus <= (-1) ) {
			if ( rnd(5) == 0 ) {
				txt lang("éÙÇÌÇÍÇΩínê}ÇÕêGÇÍÇÈÇ∆ïˆÇÍóéÇøÇΩÅB", "The cursed map crumbles as you touch it.")
				inv(INV_ITEM_NUM, ci)--
				if ( ci >= RANGE_INV2 ) {
					cell_refresh inv(INV_ITEM_X, ci), inv(INV_ITEM_Y, ci)
				}
				goto *effect_end
			}
		}
		if ( inv(INV_ITEM_PARAM1, ci) == 0 | inv(INV_ITEM_PARAM3, ci) == 0 ) {
			item_separate ci
			repeat 1000
				dx = 4 + rnd(mdata(MDATA_WIDTH) - 8)
				dy = 3 + rnd(mdata(MDATA_HEIGHT) - 6)
				if ( dx >= 50 & dy >= 39 & dx <= 73 & dy <= 54 ) {
					continue
				}
				x = 1, -1, 0, 0
				y = 0, 0, 1, -1
				repeat 4
					f = 1
					cnt2 = cnt
					repeat 3
						p = map(dx + x(cnt2) * cnt, dy + y(cnt2) * cnt, 0)
						if ( 264 <= p & p < 363 | (chipm(CHIPM_ATTRIB, p) & CHIPM_ATTRIB_CANT_PASS) ) {
							f = 0
							break
						}
					loop
					if ( f == 1 ) {
						break
					}
				loop
				if ( f == 1 ) {
					break
				}
			loop
			inv(INV_ITEM_PARAM1, ci) = dx
			inv(INV_ITEM_PARAM2, ci) = dy
			if ( gdata(GDATA_AREA) == AREA_NORTH_TYRIS ) {
				inv(INV_ITEM_PARAM3, ci) = 1
			}
			if ( gdata(GDATA_AREA) == AREA_SOUTH_TYRIS ) {
				inv(INV_ITEM_PARAM3, ci) = 2
			}
			if ( gdata(GDATA_AREA) == AREA_LOST_YLVA ) {
				inv(INV_ITEM_PARAM3, ci) = 3
			}
		}
		if ( inv(INV_ITEM_PARAM3, ci) == 1 & gdata(GDATA_AREA) != AREA_NORTH_TYRIS ) {
			txt lang("Ç±ÇÍÇÕÉmÅ[ÉXÉeÉBÉäÉXÇÃínê}ÇæÅBÉmÅ[ÉXÉeÉBÉäÉXÇ≈ì«Ç‡Ç§ÅB", "You should move to North Tyris to read this map.")
			goto *effect_end
		}
		if ( inv(INV_ITEM_PARAM3, ci) == 2 & gdata(GDATA_AREA) != AREA_SOUTH_TYRIS ) {
			txt lang("Ç±ÇÍÇÕÉTÉEÉXÉeÉBÉäÉXÇÃínê}ÇæÅBÉTÉEÉXÉeÉBÉäÉXÇ≈ì«Ç‡Ç§ÅB", "You should move to South Tyris to read this map.")
			goto *effect_end
		}
		if ( inv(INV_ITEM_PARAM3, ci) == 3 & gdata(GDATA_AREA) != AREA_LOST_YLVA ) {
			txt lang("Ç±ÇÍÇÕÉçÉXÉgÉCÉãÉîÉ@ÇÃínê}ÇæÅBÉçÉXÉgÉCÉãÉîÉ@Ç≈ì«Ç‡Ç§ÅB", "You should move to Lost Irva to read this map.")
			goto *effect_end
		}
		txt lang("âΩÇ©ÇÃèÍèäÇãLÇµÇΩínê}ÇÃÇÊÇ§ÇæÅc", "There's a mark on the map...")
		snd SOUNDLIST_BOOK1
		gsel 4
		pos 0, 0
		picload exedir + "graphic\\paper.bmp", 1
		gsel 0
		redraw 0
		ww = 400
		wh = 300
		wx = (windoww - ww) / 2 + inf_screenx
		wy = winposy(wh)
		gmode 2
		pos wx, wy
		gcopy 4, 0, 0, ww, wh
		gmode 1, inf_tiles, inf_tiles
		repeat 5
			y = cnt + inv(INV_ITEM_PARAM2, ci) - 2
			sy = cnt * inf_tiles + wy + 26
			repeat 7
				x = cnt + inv(INV_ITEM_PARAM1, ci) - 3
				sx = cnt * inf_tiles + wx + 46
				p = map(x, y, 0)
				pos sx + 1, sy + 1
				gcopy 2, p \ 33 * inf_tiles, p / 33 * inf_tiles
				if ( x == inv(INV_ITEM_PARAM1, ci) ) {
					if ( y == inv(INV_ITEM_PARAM2, ci) ) {
						pos sx, sy
						font lang(cfg_font1, cfg_font2), 40 - en * 2, 2
						color 255, 20, 20
						mes lang("Åõ", "O")
					}
				}
			loop
		loop
		gmode 2
		pos wx, wy
		gcopy 4, 400, 0, ww, wh
		redraw 1
		press
		snd SOUNDLIST_CARD1
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_LOVE | _switch_sw ) {
		_switch_sw = 0
		if ( efstatus <= (-1) ) {
			if ( tc == CHARA_PLAYER ) {
				eatstatus efstatus, tc
			}
			else {
				txt lang("õZñÚÇÕéÙÇÌÇÍÇƒÇ¢ÇΩÅB" + name(tc) + "ÇÕ" + name(CHARA_PLAYER) + "ÇåyïÃÇÃÇ‹Ç»Ç¥ÇµÇ≈å©Ç¬ÇﬂÇΩÅB", "This love potion is cursed. " + name(tc) + " look" + _s(tc) + " at " + name(CHARA_PLAYER) + " with a contemptuous glance.")
				modimp tc, -15
				modimp2 tc, -15
			}
			obvious = 0
			goto *effect_end
		}
		cdata(CDATA_EMO_ICON, tc) = 17 + 100 * 3
		if ( potionspill | potionthrow ) {
			txt lang(name(tc) + "ÇÕóˆÇÃó\ä¥Ç™ÇµÇΩÅB", name(tc) + " sense" + _s(tc) + " a sigh of love.")
			if ( potionthrow != 90 ) {
				dmgcon tc, CONDITION_DIM, 100
				if ( cdata(CDATA_IMPRESSION, tc) < 100 ) {
					modimp tc, limit(efp / 20, 0, 15)
				}
			}
			if ( potionthrow == 90 ) {
				dmgcon tc, CONDITION_DIM, 100
			}
			if ( potionthrow != 90 ) {
				lovemiracle tc
			}
			if ( potionthrow != 90 ) {
				modimp2 tc, 10
			}
			goto *effect_end
		}
		if ( tc == CHARA_PLAYER ) {
			txt lang(name(tc) + "ÇÕãªï±ÇµÇΩÅI", "You are excited!")
		}
		else {
			txt lang(name(tc) + "ÇÕ" + name(CHARA_PLAYER) + "ÇîMÇ¢Ç‹Ç»Ç¥ÇµÇ≈å©Ç¬ÇﬂÇΩÅB", name(tc) + " give" + _s(tc) + " " + name(CHARA_PLAYER) + " the eye.")
			if ( potionthrow != 90 ) {
				lovemiracle tc
			}
			if ( potionthrow != 90 ) {
				dmgcon tc, CONDITION_DIM, 100
				if ( cdata(CDATA_IMPRESSION, tc) < 100 ) {
					modimp tc, limit(efp / 5, 0, 25)
				}
			}
			if ( potionthrow == 90 ) {
				dmgcon tc, CONDITION_DIM, 100
			}
			modimp2 tc, 10
		}
		if ( potionthrow != 90 ) {
			dmgcon tc, CONDITION_DIM, 500
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_PREGNANT | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_ID, tc) == CREATURE_ID_JURE | cdata(CDATA_ID, tc) == CREATURE_ID_BLESSED_JURE ) {
			repeat MAX_CHARA_TOTAL
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( cdata(CDATA_ID, cnt) == CREATURE_ID_ROVID ) {
					snd SOUNDLIST_AMMO
					txt lang(cdatan(CDATAN_NAME, cnt) + "Åuê‚ëŒñhâqÅIÅv", cdatan(CDATAN_NAME, cnt) + " says: \"Absolute protect!\"")
					goto *effect_end
				}
			loop
		}
		if ( synccheck(tc, -1) ) {
			txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÃå˚ÇÃíÜÇ…âΩÇ©ÇëóÇËçûÇÒÇæÅI", name(cc) + " put" + _s(cc) + " something into " + name(tc) + your(tc) + " body!")
		}
		if ( cc == CHARA_PLAYER ) {
			ninsin = cdata(CDATA_INFANT, cc)
		}
		if ( cc != CHARA_PLAYER ) {
			ninsin = cdata(CDATA_ID, cc)
		}
		gosub *alien_effect
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_PSYCHOANALYSIS | _switch_sw ) {
		_switch_sw = 0
		txt_targetwho
		val = 0
		gosub *prompt_direction
		f = 0
		if ( stat != 0 ) {
			if ( map(x, y, 1) > 0 ) {
				tc = map(x, y, 1) - 1
				if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
					txtselecttc 2
					repeat 2
						promptAdd s(cnt), key_select(cnt)
					loop
					val = promptx, prompty, 200, 0
					gosub *prompt_key
					if ( rtval == 1 ) {
						tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
					}
				}
				txt lang("Ç†Ç»ÇΩÇÕ" + name(tc) + "ÇÃêSÇî`Ç¢ÇΩÅB", "You look into " + name(tc) + "'s heart.")
				animeload ANIMATION_BLOOD, tc
				gosub *com_knowOther
				f = 1
			}
		}
		if ( f == 0 ) {
			txt_impossible
		}
		if ( cc == CHARA_PLAYER ) {
			return
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_MIRROR | _switch_sw ) {
		_switch_sw = 0
		txt lang("Ç†Ç»ÇΩÇÕ" + name(tc) + "ÇÃèÛë‘Çí≤Ç◊ÇΩÅB", "You examine " + name(tc) + ".")
		animeload ANIMATION_BLOOD, tc
		gosub *com_knowSelf
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_MILK | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			snd SOUNDLIST_ATK_ELEC
			if ( efstatus <= (-1) ) {
				if ( tc == CHARA_PLAYER ) {
					txt lang("Ç§ÇÌÅAÇ±ÇÍÇÕéÙÇÌÇÍÇƒÇ¢ÇÈÅBÇ»ÇÒÇæÇ©Ç‚ÇŒÇ¢ñ°ÇæÅc", "Geee it's cursed! The taste is very dangerous.")
				}
				else {
					txtef COLOR_SKY_BLUE
					txt lang("ÅuÇÿÇ¡ÇÿÇ¡ÅAÇ‹Ç∏Å[Åv", cnvtalk("Argh, the milk is cursed!"))
				}
			}
			else {
				if ( tc == CHARA_PLAYER ) {
					txt lang("îZå˙Ç≈ïaÇ›ïtÇ´Ç…Ç»ÇËÇªÇ§Ç»ñ°ÇæÅB", "The taste is very thick, almost addictive.")
				}
				else {
					txtef COLOR_SKY_BLUE
					txt lang("ÅuÇ§Ç‹Å[Åv", cnvtalk("Yummy!"))
				}
				if ( cdata(CDATA_SPRITE_SIZE_MILK, tc) <= (-1) & cdata(CDATA_HUNGER, tc) < 8000 ) {
					txtef COLOR_SKY_BLUE
					txt lang(name(tc) + "ÇÕÇ∑Ç≠Ç∑Ç≠Ç∆ê¨í∑ÇµÇΩÅB", name(tc) + " grew quickly.")
					if ( efstatus >= 0 ) {
						cdata(CDATA_SPRITE_SIZE_MILK, tc)++
						if ( cbit(CHARA_BIT_LIVESTOCK, tc) == 1 ) {
							modimp tc, 10
							modimp2 tc, 10
							cdata(CDATA_EMO_ICON, tc) = 17 + 100 * 30
						}
					}
					if ( efstatus >= 1 ) {
						if ( cdata(CDATA_SPRITE_SIZE_MILK, tc) <= (-1) ) {
							cdata(CDATA_SPRITE_SIZE_MILK, tc)++
							if ( cbit(CHARA_BIT_LIVESTOCK, tc) == 1 ) {
								modimp tc, 10
								modimp2 tc, 10
							}
						}
					}
					if ( cdata(CDATA_HUNGER, tc) >= 8000 ) {
						txt lang("ÅuÇ∞Ç”Ç£Åv", name(tc) + " muttered " + cnvtalk("Ugh-Ughu"))
					}
				}
			}
		}
		if ( efstatus >= 1 ) {
			modheight tc, rnd(5) + 1
		}
		if ( efstatus <= (-1) ) {
			modheight tc, (rnd(5) + 1) * (-1)
			if ( cdata(CDATA_SPRITE_SIZE_MILK, tc) >= (-4) ) {
				cdata(CDATA_SPRITE_SIZE_MILK, tc)--
				if ( cbit(CHARA_BIT_LIVESTOCK, tc) == 1 ) {
					modimp tc, -20
					modimp2 tc, -20
				}
			}
		}
		cdata(CDATA_HUNGER, tc) += 1000 * (120 / 100)
		if ( tc == CHARA_PLAYER ) {
			gosub *eat_finish
		}
		eatstatus efstatus, tc
		animeload ANIMATION_THROW, tc
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_ALE | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			if ( efstatus <= (-1) ) {
				txtef COLOR_SKY_BLUE
				txtmore
				txt lang("ÅuÇ§Ç°Ç¡ÅcÅv", "*Hic*"), lang("ÅuÇ‹Ç∏Ç¢Ç∫Åv", cnvtalk("Ah, bad booze.")), lang("ÅuÇ∞Å[ÅÙÅv", cnvtalk("Ugh...")), lang("ÅuïÖÇ¡ÇΩÉ~ÉãÉNÇ›ÇΩÇ¢Ç»ñ°ÇæÅv", cnvtalk("Bah, smells like rotten milk."))
			}
			else {
				txtef COLOR_SKY_BLUE
				txtmore
				txt lang("ÅuÇ§Ç°Ç¡ÅIÅv", "*Hic*"), lang("ÅuÇ§Ç‹Ç¢Ç∫Åv", cnvtalk("Ah, good booze.")), lang("ÅuÇÁÇÁÇÁÅ[ÅÙÅv", cnvtalk("La-la-la-la.")), lang("ÅuÇ–Ç¡Ç≠Åv", cnvtalk("I'm going to heaven.")), lang("ÅuÇ”Ç£Åv", cnvtalk("Whew!")), lang("ÅuÇΩÇ‹ÇÁÇ»Ç¢ÇÌÅv", cnvtalk("I'm revived!")), lang("ÅuÇÒÇ‹Ç¡ÅÙÅv", cnvtalk("Awesome."))
			}
		}
		dmgcon tc, CONDITION_DRUNK, rnd(300) + 200
		eatstatus efstatus, tc
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_KNEADED_SWEETS | _switch_sw ) {
		_switch_sw = 0
		if ( tc == CHARA_PLAYER ) {
			txt lang("Ç§ÅAî¸ñ°Ç∑Ç¨ÇÈÅI", "The taste is very thick!!")
		}
		else {
			txtef COLOR_SKY_BLUE
			txt lang("ÅuÇ§Ç‹Ç¢Ç¡ÅIÅIÅv", cnvtalk("Very yummy!"))
		}
		gosub *effect_elixer
		r1 = tc
		gosub *charaRefresh
		if ( synccheck(tc, -1) ) {
			txtmore
			txtef COLOR_PURPLE
			txt lang(name(tc) + "ÇÕãCê‚ÇµÇΩÅB", name(tc) + " " + is(tc) + " dimmed.")
		}
		cdata(CDATA_CONDITION_DIM, tc) = 70
		rowactend tc
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_SOMA | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang("ìÀëR" + name(tc) + "ÇÕå≥ãCÇ…Ç»Ç¡ÇΩÅI", "In addition, " + his(tc) + " body is enchanted.")
			animeload ANIMATION_BLOOD, tc
		}
		p = SKILL_ATTR_STR, SKILL_ATTR_CON, SKILL_ATTR_DEX, SKILL_ATTR_CHA, SKILL_ATTR_SPD, SKILL_ATTR_LER, SKILL_ATTR_PER, SKILL_ATTR_MAG, SKILL_ATTR_WIL, SKILL_ATTR_LUC, -1
		repeat
			if ( p(cnt) == (-1) ) {
				break
			}
			i = p(cnt) + STARTING_CDATA_ATTR - STARTING_SKILL_ATTR
			if ( cdata(i, tc) < 0 ) {
				cdata(i, tc) = 0
			}
			cdata(i, tc) = sorg(p(cnt), tc) / 7 + 5
		loop
		healcon tc, CONDITION_SICK, 0
		if ( tc == CHARA_PLAYER ) {
			gdata(GDATA_SLEEP) = 0
			healsp CHARA_PLAYER, 200
		}
		r1 = tc
		gosub *charaRefresh
		dmgsan tc, 100
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_DISASTER | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			snd SOUNDLIST_CURSE3
			animeload ANIMATION_CRUSH, tc
			txt lang("ç–Ç¢Ç™" + name(tc) + "Ç…ç~ÇËÇ©Ç©Ç¡ÇΩÅI", "A disaster has befallen " + name(tc) + "!")
		}
		dmgcon tc, CONDITION_SLEEP, 100 + limit(gdata(GDATA_LEVEL) * 2, 50, 400)
		dmgcon tc, CONDITION_POISON, 100 + limit(gdata(GDATA_LEVEL) * 2, 50, 400)
		dmgcon tc, CONDITION_PARALYZE, 100 + limit(gdata(GDATA_LEVEL) * 2, 50, 400)
		dmgcon tc, CONDITION_CONFUSE, 100 + limit(gdata(GDATA_LEVEL) * 2, 50, 400)
		dmgcon tc, CONDITION_BLIND, 100 + limit(gdata(GDATA_LEVEL) * 2, 50, 400)
		if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE ) {
			goto *effect_end
		}
		p = SKILL_ATTR_STR, SKILL_ATTR_CON, SKILL_ATTR_DEX, SKILL_ATTR_CHA, SKILL_ATTR_SPD, SKILL_ATTR_LER, SKILL_ATTR_PER, SKILL_ATTR_MAG, SKILL_ATTR_WIL, SKILL_ATTR_LUC, -1
		repeat
			if ( p(cnt) == (-1) ) {
				break
			}
			if ( encfind(tc, ENCHANT_SUSTAIN * EXT_ENCHANTMENT + p(cnt)) == (-1) ) {
				i = p(cnt) + STARTING_CDATA_ATTR - STARTING_SKILL_ATTR
				cdata(i, tc) = sorg(p(cnt), tc) * (-1) / 10 - 5
			}
		loop
		r1 = tc
		gosub *charaRefresh
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_NEKTAR | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang("Ç‡ÇÃÇ∑Ç≤Ç¢ê®Ç¢Ç≈" + name(tc) + "ÇÃèùÇ™è¡Ç¶ÇƒÇ¢Ç≠ÅcÅB", "The potion greatly heals " + name(tc) + ".")
		}
		healhp tc, cdata(CDATA_MAX_HP, tc) * 4 / 5 + 200
		cure_anorexia tc
		cdata(CDATA_VOMIT, tc) = 0
		dmgcon tc, CONDITION_DRUNK, rnd(1000) + 1000
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_ESSENTIAL_OIL | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang(name(tc) + "ÇÕÅAê∏ñ˚Ç‹Ç›ÇÍÇ…Ç»Ç¡ÇΩÅB", name(tc) + " got covered in essential oil.")
			if ( tc == CHARA_PLAYER ) {
				txt lang("Ç∑Ç≤Ç¢èLÇ¢ÇæÅI", "So smelly!")
			}
		}
		dmgcon tc, CONDITION_CONFUSE, efp / 3 + 1
		cdata(CDATA_CONDITION_OIL, tc) += 30
		r1 = tc
		gosub *charaRefresh
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_GASOLINE | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang(name(tc) + "ÇÕÅAäˆî≠ñ˚Ç‹Ç›ÇÍÇ…Ç»Ç¡ÇΩÅB", name(tc) + " got covered in volatile oil.")
			if ( tc == CHARA_PLAYER ) {
				txt lang("Ç∑Ç≤Ç¢èLÇ¢ÇæÅI", "So smelly!")
			}
		}
		dmgcon tc, CONDITION_CONFUSE, efp / 3 + 1
		cdata(CDATA_CONDITION_OIL, tc) += 100
		r1 = tc
		gosub *charaRefresh
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_WISDOM | _switch_sw ) {
		_switch_sw = 0
		efid = SKILL_SPELL_HERO
		gosub *effect
		waitbk = cfg_animewait
		if ( cfg_animewait > 0 ) {
			cfg_animewait = 0
		}
		efid = SKILL_SPELL_GEM_POWER
		gosub *effect
		efid = SKILL_SPELL_CONCENTRATION
		gosub *effect
		efid = SKILL_SPELL_DIVINE_WISDOM
		gosub *effect
		cfg_animewait = waitbk
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_SULFURIC | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			if ( tc == CHARA_PLAYER ) {
				txt lang("ÇÆÇÌÇüÇüÅI", "Arrrrg!")
			}
			txt lang("é_Ç™" + name(tc) + "ÇónÇ©ÇµÇΩÅB", "The sulfuric acid melts " + name(tc) + ".")
		}
		if ( cbit(CHARA_BIT_PREGNANT, tc) ) {
			cbitmod CHARA_BIT_PREGNANT, tc, 0
			if ( synccheck(tc, -1) ) {
				txt lang(name(tc) + "ÇÃëÃì‡ÇÃàŸï®ÇÕónÇØÇΩÅB", name(tc) + your(tc) + " child melts in " + his(tc) + " stomach.")
			}
			cdata(CDATA_INFANT, tc) = 0
			if ( tc == CHARA_PLAYER ) {
				spact(SKILL_SPACT_PREGNANT - STARTING_SKILL_SPACT) = 0
			}
		}
		dmghp tc, (rnd(efp / 10 + 5) + efp / 10) * efstatusfix(50, 100, 200, 300) / 100 + 1, DAMAGE_FROM_ACID, SKILL_RESDMG_ACID, efp
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_AQUA_SANCTIO | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			if ( tc == CHARA_PLAYER ) {
				txt lang("ÇÆÇÌÇüÇüÇüÇüÇüÇ¡ÅIÅIÅI", "Arrrrg!")
			}
		}
		aniref = 0
		animeid = ANIMATION_BALL
		anix = cdata(CDATA_X, tc)
		aniy = cdata(CDATA_Y, tc)
		gosub *anime
		ele = SKILL_NONE
		dmghp tc, rnd(efp + 1) + limit(sdata(SKILL_NORMAL_MAGIC_DEVICE, cc) * sdata(SKILL_NORMAL_ALCHEMY, cc) / 5, 100, 400000), cc, SKILL_RES_SOUND, 1000
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_WATER | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			if ( tc == CHARA_PLAYER ) {
				txt lang("*Ç≤Ç≠Ç¡* „YóÌÇ»êÖÇæÅB", "*quaff* The water is refreshing.")
			}
			else {
				txt lang(" *Ç≤Ç≠Ç¡* ", " *quaff* ")
			}
		}
		sickifcursed efstatus, tc, 1
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_DISINFECTANT | _switch_sw ) {
		_switch_sw = 0
		txt name(tc) + lang("ÇÕè¡ì≈Ç≥ÇÍÇΩÅB", " " + was(tc) + " disinfected.")
		healcon cnt, CONDITION_POISON, efstatusfix(5, 10, 20, 40) * 2
		healcon cnt, CONDITION_SICK, efstatusfix(5, 10, 20, 40) * 2
		addbuff tc, BUFF_DISINFECTION, 50, 3000
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_COLA | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang("ÅuÇ∞Ç”Ç£Åv", "*Ughu*")
		}
		healsp tc, 15
		sickifcursed efstatus, tc, 1
		if ( rnd(2) == 0 ) {
			inv_find ITEM_ID_BIO_BATTERY, tc
			if ( stat == (-1) ) {
				cdata(CDATA_WEIGHT, tc)++
				txt lang(name(tc) + "ÇÕëæÇ¡ÇΩÅB", name(tc) + " gain" + _s(tc) + " weight.")
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_BARLEY_TEA | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			if ( tc == CHARA_PLAYER ) {
				txt lang("*Ç≤Ç≠Ç¡* ååçsÇ™ó«Ç≠Ç»ÇËÇªÇ§ÇæÅB", "*quaff* It seems to help my circulation.")
			}
			else {
				txt lang(" *Ç≤Ç≠Ç¡* ", " *quaff* ")
			}
		}
		skillexp SKILL_NORMAL_HEALING, tc, 200
		sickifcursed efstatus, tc, 1
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_SODA | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang("*ÉVÉÖÉèÉè* éhåÉìIÅI", "*quaff* Refreshing!")
			txt lang(name(tc) + "ÇÃÉXÉ^É~ÉiÇ™è≠ÇµâÒïúÇµÇΩÅB", name(tc) + " restore" + _s(tc) + " some stamina.")
		}
		healsp tc, 25
		sickifcursed efstatus, tc, 1
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_CAPSULE | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang("*Ç≤Ç≠ÇË*", " *quaff* ")
			txt lang(name(tc) + "ÇÃÉXÉ^É~ÉiÇÕÇ©Ç»ÇËâÒïúÇµÇΩÅB", name(tc) + " greatly restore" + _s(tc) + " stamina.")
		}
		healsp tc, 100
		sickifcursed efstatus, tc, 1
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_SALT | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_ID, tc) == CREATURE_ID_SNAIL_THE_ANDROID_RIDER ) {
			txtef COLOR_SKY_BLUE
			txtmore
			txt lang("ÅuÉAÉìÉ`É\ÉãÉgÉVÉXÉeÉÄçÏìÆÅv", cnvtalk("Anti-salt system activated."))
			flt
			itemcreate -1, ITEM_ID_RICE_BALL, cdata(CDATA_X, tc), cdata(CDATA_Y, tc), 0
		}
		if ( cdatan(CDATAN_RACE, tc) == "snail" ) {
			if ( synccheck(tc, -1) ) {
				txtef COLOR_RED
				txtmore
				txt lang("âñÇæÅI" + name(tc) + "ÇÕónÇØÇÕÇ∂ÇﬂÇΩÅI", "It's salt! " + name(tc) + " start" + _s(tc) + " to melt.")
			}
			if ( cdata(CDATA_HP, tc) > 10 ) {
				dmghp tc, cdata(CDATA_HP, tc) - rnd(10), DAMAGE_FROM_ACID
			}
			else {
				dmghp tc, rnd(20000), DAMAGE_FROM_ACID
			}
		}
		else {
			if ( synccheck(tc, -1) ) {
				txtef COLOR_SKY_BLUE
				txtmore
				txt lang("ÅuÇµÇÂÇ¡ÇœÅ`Åv", cnvtalk("Salty!"))
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_DIRTY_WATER | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			if ( tc == CHARA_PLAYER ) {
				txt lang("*Ç≤Ç≠Ç¡* Ç‹Ç∏Ç¢ÅI", "*quaff* Yucky!")
			}
			else {
				txt lang(" *Ç≤Ç≠Ç¡* ", " *quaff* ")
			}
		}
		sickifcursed efstatus, tc, 1
		goto *effect_end
	}
	if ( _switch_val == SKILL_ACTIVE_PICKPOCKET | _switch_sw ) {
		_switch_sw = 0
		if ( gdata(GDATA_QUEST) == QUEST_TYPE_CONQUER | gdata(GDATA_QUEST) == QUEST_TYPE_HUNTEX ) {
			txt lang("ÇªÇÒÇ»Ç±Ç∆ÇÇµÇƒÇ¢ÇÈó]óTÇÕÇ»Ç¢ÅI", "You have no time for it!")
			return 0
		}
		if ( cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_SP, CHARA_PLAYER) < 50 ) {
				if ( cdata(CDATA_SP, CHARA_PLAYER) < rnd(75) ) {
					txt_exhausted
					dmgsp CHARA_PLAYER, sdataref(SKILL_DATAREF_COST, efid) / 2 + 1
					ens = 0
					goto *effect_end
				}
			}
			dmgsp CHARA_PLAYER, rnd(sdataref(SKILL_DATAREF_COST, efid) / 2 + 1) + sdataref(SKILL_DATAREF_COST, efid) / 2 + 1
		}
		invsubroutine = 1
		invctrl = 27, 0
		snd SOUNDLIST_INV
		gosub *com_inventory
		goto *effect_end
	}
	if ( _switch_val == SKILL_ACTIVE_RIDING | _switch_sw ) {
		_switch_sw = 0
		if ( cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_SP, CHARA_PLAYER) < 50 ) {
				if ( cdata(CDATA_SP, CHARA_PLAYER) < rnd(75) ) {
					txt_exhausted
					dmgsp CHARA_PLAYER, sdataref(SKILL_DATAREF_COST, efid) / 2 + 1
					ens = 0
					goto *effect_end
				}
			}
			dmgsp CHARA_PLAYER, rnd(sdataref(SKILL_DATAREF_COST, efid) / 2 + 1) + sdataref(SKILL_DATAREF_COST, efid) / 2 + 1
		}
		if ( gdata(GDATA_RIDER) != 0 ) {
			if ( tc == cc ) {
				cell_findspace cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 1
				if ( stat == 0 ) {
					txt lang("ç~ÇËÇÈÉXÉyÅ[ÉXÇ™Ç»Ç¢ÅB", "There's no place to get off.")
					goto *effect_end
				}
				cell_setchara gdata(GDATA_RIDER), rtval, rtval(1)
				if ( cdata(CDATA_RIDING, gdata(GDATA_RIDER)) == 0 ) {
					txt lang(name(gdata(GDATA_RIDER)) + "Ç©ÇÁç~ÇËÇΩÅB", "You dismount from " + name(gdata(GDATA_RIDER)) + ".")
				}
				if ( cdata(CDATA_RIDING, gdata(GDATA_RIDER)) == 1 ) {
					txt lang(name(gdata(GDATA_RIDER)) + "ÇÕÇ†Ç»ÇΩÇ©ÇÁç~ÇËÇΩÅB", name(gdata(GDATA_RIDER)) + " dismounts from you.")
				}
				if ( cdata(CDATA_RIDING, gdata(GDATA_RIDER)) == 0 ) {
					customtalk gdata(GDATA_RIDER), DBMODE_FLAVOR_RIDE_OFF
					gosub *convert_word
					if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
						txtef COLOR_SKY_BLUE
						if ( jp ) {
							txt name(gdata(GDATA_RIDER)) + "ÅuÇ”Ç£Åv", name(gdata(GDATA_RIDER)) + "ÅuèÊÇËêSínÇÕÇÊÇ©Ç¡ÇΩÅHÅv", name(gdata(GDATA_RIDER)) + "ÅuîÊÇÍÇΩÅcÅv", name(gdata(GDATA_RIDER)) + "ÅuÇ‹ÇΩÇ¢Ç¬Ç≈Ç‡èÊÇ¡ÇƒÇÀÅÙÅv"
						}
						if ( en ) {
							txt name(gdata(GDATA_RIDER)) + " " + cnvtalk("Phew."), name(gdata(GDATA_RIDER)) + " " + cnvtalk("How was my ride?"), name(gdata(GDATA_RIDER)) + " " + cnvtalk("Tired...tired..."), name(gdata(GDATA_RIDER)) + " " + cnvtalk("It was nice.")
						}
					}
				}
				if ( cdata(CDATA_RIDING, gdata(GDATA_RIDER)) == 1 ) {
					customtalk gdata(GDATA_RIDER), DBMODE_FLAVOR_RIDE_OFF_PC
					gosub *convert_word
					if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
						txtef COLOR_SKY_BLUE
						if ( jp ) {
							txt name(gdata(GDATA_RIDER)) + "ÅuÇÊÇ¢ÇµÇÂÅv", name(gdata(GDATA_RIDER)) + "ÅuèÊÇËêSínÇÊÇ©Ç¡ÇΩÅIÅv", name(gdata(GDATA_RIDER)) + "ÅuîÊÇÍÇΩÅHÅv", name(gdata(GDATA_RIDER)) + "ÅuÇ‹ÇΩèÊÇËÇΩÇ¢Ç»ÅÙÅv"
						}
						if ( en ) {
							txt name(gdata(GDATA_RIDER)) + " " + cnvtalk("Phew."), name(gdata(GDATA_RIDER)) + " " + cnvtalk("How was my ride?"), name(gdata(GDATA_RIDER)) + " " + cnvtalk("Tired...tired..."), name(gdata(GDATA_RIDER)) + " " + cnvtalk("It was nice.")
						}
					}
				}
				cdata(CDATA_RIDING, gdata(GDATA_RIDER)) = 0
				ride_end
				goto *effect_end
			}
		}
		if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
			snd SOUNDLIST_FAIL1
			txtef COLOR_RED
			txt lang("É^ÉbÉOÇâéUÇ∑ÇÈïKóvÇ™Ç†ÇÈÅB", "You need to dissolve the tag-team.")
			goto *effect_end
		}
		if ( tc >= MAX_CHARA_FOLLOWER ) {
			txt lang("íáä‘Ç…ÇµÇ©ãRèÊÇ≈Ç´Ç»Ç¢ÅB", "You can only ride an ally.")
			goto *effect_end
		}
		if ( cbit(CHARA_BIT_BODYGUARD, tc) == 1 | cbit(CHARA_BIT_GUARD_TEMP, tc) == 1 ) {
			txt lang("åÏâqëŒè€Ç…ÇÕãRèÊÇ≈Ç´Ç»Ç¢ÅB", "You can't ride a client.")
			goto *effect_end
		}
		if ( tc == cc ) {
			if ( gdata(GDATA_RIDER) == 0 ) {
				txt lang(name(cc) + "ÇÕé©ï™Ç…èÊÇÎÇ§Ç∆ÇµÇΩÅB", "You try to ride yourself.")
			}
			goto *effect_end
		}
		if ( cdata(CDATA_AREA, tc) != AREA_NONE ) {
			txt lang("ÇªÇÃíáä‘ÇÕÇ±ÇÃèÍèäÇ…ëÿç›íÜÇæÅB", "The ally currently stays in this area.")
			goto *effect_end
		}
		if ( gdata(GDATA_RIDER) != 0 ) {
			if ( cdata(CDATA_RIDING, gdata(GDATA_RIDER)) == 0 ) {
				txt lang("åªç›" + name(cc) + "ÇÕ" + name(gdata(GDATA_RIDER)) + "Ç…ãRèÊÇµÇƒÇ¢ÇÈÅB", name(cc) + " " + is(cc) + " currently riding " + name(gdata(GDATA_RIDER)) + ".")
			}
			if ( cdata(CDATA_RIDING, gdata(GDATA_RIDER)) == 1 ) {
				txt lang("åªç›" + name(cc) + "ÇÕ" + name(gdata(GDATA_RIDER)) + "ÇèÊÇπÇƒÇ¢ÇÈÅB", name(gdata(GDATA_RIDER)) + " " + is(gdata(GDATA_RIDER)) + " currently riding " + name(cc) + ".")
			}
		}
		else {
			txtsetride 3
			repeat 3
				promptAdd s(cnt), key_select(cnt)
			loop
			val = promptx, prompty, 200, 0
			gosub *prompt_key
			if ( rtval == 2 ) {
				goto *effect_end
			}
			if ( rtval == 0 ) {
				cdata(CDATA_RIDING, tc) = 0
			}
			if ( rtval == 1 ) {
				cdata(CDATA_RIDING, tc) = 1
			}
			if ( cdata(CDATA_RIDING, tc) == 0 ) {
				customtalk tc, DBMODE_FLAVOR_RIDE_ON
				gosub *convert_word
				if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
					txtef COLOR_SKY_BLUE
					if ( jp ) {
						txt name(tc) + "ÅuÇ§ÇÆÇ£Åv", name(tc) + "ÅuÉ_ÉCÉGÉbÉgÇµÇƒÇÊÅcÅv", name(tc) + "ÅuÇ¢Ç≠ÇÊÅIÅv", name(tc) + "ÅuÇ‚Ç≥ÇµÇ≠ÇµÇƒÇÀÅÙÅv"
					}
					if ( en ) {
						txt name(tc) + " " + cnvtalk("Awww."), name(tc) + " " + cnvtalk("You should go on a diet."), name(tc) + " " + cnvtalk("Let's roll!"), name(tc) + " " + cnvtalk("Be gentle.")
					}
				}
			}
			if ( cdata(CDATA_RIDING, tc) == 1 ) {
				customtalk tc, DBMODE_FLAVOR_RIDE_ON_PC
				gosub *convert_word
				if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
					txtef COLOR_SKY_BLUE
					if ( jp ) {
						txt name(tc) + "Åu" + cdatan(CDATAN_AKA, CHARA_PLAYER) + "ÅA" + cdatan(CDATAN_NAME, CHARA_PLAYER) + "Ç…ÉâÉCÉhÅIÅv", name(tc) + "ÅuèdÇ≠Ç»Ç¢ÅHÅv", name(tc) + "ÅuÇ†ÇÒÇ‹ÇËóhÇÁÇ≥Ç»Ç¢Ç≈ÇÀÅv", name(tc) + "ÅuÉåÉbÉcÉSÅ[ÅÙÅv"
					}
					if ( en ) {
						txt name(tc) + " " + cnvtalk("Awww."), name(tc) + " " + cnvtalk("You should go on a diet."), name(tc) + " " + cnvtalk("Let's roll!"), name(tc) + " " + cnvtalk("Be gentle.")
					}
				}
			}
			ride_begin tc
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_NORMAL_PERFORMER | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			f = 0
			inv_getheader cc
			repeat invrange, invhead
				if ( inv(INV_ITEM_NUM, cnt) == 0 ) {
					continue
				}
				if ( inv(INV_ITEM_SKILL_REF, cnt) == SKILL_NORMAL_PERFORMER ) {
					ci = cnt
					f = 1
					break
				}
				if ( inv(INV_ITEM_ID, cnt) == ITEM_ID_MELODYUS ) {
					ci = cnt
					f = 1
					break
				}
			loop
			if ( f == 0 ) {
				return 0
			}
		}
		if ( sdata(SKILL_NORMAL_PERFORMER, cc) == 0 ) {
			if ( synccheck(cc, -1) ) {
				txt lang(name(cc) + "ÇÕââëtÇÃÇ‚ÇËï˚ÇímÇÁÇ»Ç¢ÅB", name(cc) + " " + does(cc == CHARA_PLAYER) + "n't know how to play an instrument.")
				return 0
			}
		}
		if ( cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_SP, CHARA_PLAYER) < 50 ) {
				if ( cdata(CDATA_SP, CHARA_PLAYER) < rnd(75) ) {
					txt_exhausted
					dmgsp CHARA_PLAYER, sdataref(SKILL_DATAREF_COST, efid) / 2 + 1
					ens = 0
					goto *effect_end
				}
			}
			dmgsp CHARA_PLAYER, rnd(sdataref(SKILL_DATAREF_COST, efid) / 2 + 1) + sdataref(SKILL_DATAREF_COST, efid) / 2 + 1
		}
		gosub *perform
		goto *effect_end
	}
	if ( _switch_val == SKILL_NORMAL_COOKING | _switch_sw ) {
		_switch_sw = 0
		if ( sdata(SKILL_NORMAL_COOKING, CHARA_PLAYER) == 0 ) {
			txt lang("óøóùÇÃédï˚ÇímÇÁÇ»Ç¢ÅB", "You don't know how to cook.")
			return 0
		}
		cooktool = ci
		invsubroutine = 1
		invctrl = 16
		snd SOUNDLIST_INV
		gosub *com_inventory
		if ( stat == 0 ) {
			return 0
		}
		if ( cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_SP, CHARA_PLAYER) < 50 ) {
				if ( cdata(CDATA_SP, CHARA_PLAYER) < rnd(75) ) {
					txt_exhausted
					dmgsp CHARA_PLAYER, sdataref(SKILL_DATAREF_COST, efid) / 2 + 1
					ens = 0
					goto *effect_end
				}
			}
			dmgsp CHARA_PLAYER, rnd(sdataref(SKILL_DATAREF_COST, efid) / 2 + 1) + sdataref(SKILL_DATAREF_COST, efid) / 2 + 1
		}
		gosub *item_cook
		goto *effect_end
	}
	if ( _switch_val == SKILL_NORMAL_FISHING | _switch_sw ) {
		_switch_sw = 0
		if ( sdata(SKILL_NORMAL_FISHING, CHARA_PLAYER) == 0 ) {
			txt lang("íﬁÇËÇÃédï˚ÇímÇÁÇ»Ç¢ÅB", "You don't know how to fish.")
			return 0
		}
		if ( inv_getspace() == 0 ) {
			txt_invfull
			return 0
		}
		if ( inv(INV_ITEM_CHARGE, ci) == 0 ) {
			txt lang("íﬁä∆Ç…ÇÕâaÇ™ïtÇ¢ÇƒÇ¢Ç»Ç¢ÅB", "You need a bait to fish.")
			return 0
		}
		f = 0
		repeat 3
			y = cdata(CDATA_Y, cc) + cnt - 1
			x = cdata(CDATA_X, cc)
			if ( x < 0 | y < 0 | x >= mdata(MDATA_WIDTH) | y >= mdata(MDATA_HEIGHT) ) {
				continue
			}
			if ( chipm(CHIPM_ROLE, map(x, y, 0)) == MAP_CHIP_ROLE_WATER ) {
				f = 1
				break
			}
		loop
		if ( f == 0 ) {
			repeat 3
				y = cdata(CDATA_Y, cc)
				x = cdata(CDATA_X, cc) + cnt - 1
				if ( x < 0 | y < 0 | x >= mdata(MDATA_WIDTH) | y >= mdata(MDATA_HEIGHT) ) {
					continue
				}
				if ( chipm(CHIPM_ROLE, map(x, y, 0)) == MAP_CHIP_ROLE_WATER ) {
					f = 1
					break
				}
			loop
		}
		if ( f == 0 ) {
			msgdup++
			txt lang("íﬁÇËÇÇ∑ÇÈèÍèäÇ™å©ìñÇΩÇÁÇ»Ç¢ÅB", "This isn't a good place to fish.")
			gosub *screen_draw
			return 0
		}
		if ( chipm(CHIPM_ROLE, map(cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 0)) == MAP_CHIP_ROLE_WATER ) {
			txt lang("êÖÇÃíÜÇ©ÇÁÇÕíﬁÇÍÇ»Ç¢ÅB", "You can't fish while swimming.")
			gosub *screen_draw
			return 0
		}
		if ( cdata(CDATA_X, CHARA_PLAYER) - x > 0 ) {
			cdata(CDATA_DIR, CHARA_PLAYER) = 1
		}
		if ( cdata(CDATA_X, CHARA_PLAYER) - x < 0 ) {
			cdata(CDATA_DIR, CHARA_PLAYER) = 2
		}
		if ( cdata(CDATA_Y, CHARA_PLAYER) - y > 0 ) {
			cdata(CDATA_DIR, CHARA_PLAYER) = 3
		}
		if ( cdata(CDATA_Y, CHARA_PLAYER) - y < 0 ) {
			cdata(CDATA_DIR, CHARA_PLAYER) = 0
		}
		gdata(GDATA_RUN_DIR) = cdata(CDATA_DIR, CHARA_PLAYER)
		fishx = x
		fishy = y
		addefmap fishx, fishy, 1, 3
		if ( cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_SP, CHARA_PLAYER) < 50 ) {
				if ( cdata(CDATA_SP, CHARA_PLAYER) < rnd(75) ) {
					txt_exhausted
					dmgsp CHARA_PLAYER, sdataref(SKILL_DATAREF_COST, efid) / 2 + 1
					ens = 0
					goto *effect_end
				}
			}
			dmgsp CHARA_PLAYER, rnd(sdataref(SKILL_DATAREF_COST, efid) / 2 + 1) + sdataref(SKILL_DATAREF_COST, efid) / 2 + 1
		}
		item_separate ci
		inv(INV_ITEM_CHARGE, ci)--
		rowactre = 0
		gosub *fishing
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_HOLY_LIGHT | _switch_sw ) {
		_switch_sw = 0
		if ( efstatus <= (-1) ) {
			if ( synccheck(tc, -1) ) {
				txt lang(name(tc) + "ÇÕà´ñÇÇ™èŒÇ§ê∫Çï∑Ç¢ÇΩÅB", name(tc) + " hear" + _s(tc) + " devils laugh.")
			}
			goto *spUncurse_cursed
		}
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			p = 0
			repeat MAX_BLESSINGS + MAX_HEXES
				i = MAX_BLESSINGS + MAX_HEXES - cnt - 1
				if ( efid == SKILL_SPELL_HOLY_LIGHT ) {
					if ( p >= 1 ) {
						break
					}
				}
				if ( bdataref(0, cdata(STARTING_CDATA_BUFF + i * ARRAY_CDATA_BUFF, tc)) != 2 ) {
					continue
				}
				if ( cdata(STARTING_CDATA_BUFF + i * ARRAY_CDATA_BUFF, tc) == BUFF_PUNISHMENT ) {
					continue
				}
				if ( cdata(STARTING_CDATA_BUFF + i * ARRAY_CDATA_BUFF, tc) == 0 ) {
					continue
				}
				if ( rnd(efp * 2 + 1) > rnd(cdata(STARTING_CDATA_BUFF + i * ARRAY_CDATA_BUFF + 1, tc) + 1) ) {
					delbuff tc, i
					p++
					continue cnt
				}
			loop
			animeload ANIMATION_HEAL_FAST, tc
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_VANQUISH_HEX | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			tc = cc
		}
		if ( efstatus <= (-1) ) {
			if ( synccheck(tc, -1) ) {
				txt lang(name(tc) + "ÇÕà´ñÇÇ™èŒÇ§ê∫Çï∑Ç¢ÇΩÅB", name(tc) + " hear" + _s(tc) + " devils laugh.")
			}
			goto *spUncurse_cursed
		}
		p = 0
		repeat MAX_BLESSINGS + MAX_HEXES
			i = MAX_BLESSINGS + MAX_HEXES - cnt - 1
			if ( efid == SKILL_SPELL_HOLY_LIGHT ) {
				if ( p >= 1 ) {
					break
				}
			}
			if ( bdataref(0, cdata(STARTING_CDATA_BUFF + i * ARRAY_CDATA_BUFF, tc)) != 2 ) {
				continue
			}
			if ( cdata(STARTING_CDATA_BUFF + i * ARRAY_CDATA_BUFF, tc) == BUFF_PUNISHMENT ) {
				continue
			}
			if ( cdata(STARTING_CDATA_BUFF + i * ARRAY_CDATA_BUFF, tc) == 0 ) {
				continue
			}
			if ( rnd(efp * 2 + 1) > rnd(cdata(STARTING_CDATA_BUFF + i * ARRAY_CDATA_BUFF + 1, tc) + 1) ) {
				delbuff tc, i
				p++
				continue cnt
			}
		loop
		animeload ANIMATION_HEAL_FAST, tc
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_ELIXER | _switch_sw ) {
		_switch_sw = 0
		txtef COLOR_YELLOW
		txt lang(name(tc) + "ÇÕâ©ã‡ÇÃãPÇ´Ç…ïÔÇ‹ÇÍÇΩÅI", "A golden aura envelops " + name(tc) + "!")
		gosub *effect_elixer
		animeid = ANIMATION_HEAL
		gosub *anime
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_CREATE_MATERIAL | _switch_sw ) {
		_switch_sw = 0
		if ( tc >= MAX_CHARA_FOLLOWER ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		if ( efstatus >= 0 ) {
			s = lang("ëfçﬁ", "materials")
		}
		else {
			s = lang("ÉNÉY", "junks")
		}
		snd SOUNDLIST_DING2
		txt lang("ÇΩÇ≠Ç≥ÇÒÇÃ" + s + "Ç™ç~Ç¡ÇƒÇ´ÇΩÅI", "Some " + s + " fall from above!")
		autosave = 1 * (gdata(GDATA_AREA) != AREA_SHOW_HOUSE)
		repeat rnd(3) + 3 + (efstatus >= 1) * 6
			txtmore
			atxspot = ATX_GENERAL1
			if ( rnd(10) == 0 ) {
				atxspot = ATX_REMAIN1
			}
			if ( rnd(10) == 0 ) {
				atxspot = ATX_MINE1
			}
			if ( rnd(10) == 0 ) {
				atxspot = ATX_BUSH1
			}
			if ( rnd(10) == 0 ) {
				atxspot = ATX_DUNGEON1
			}
			if ( rnd(10) == 0 ) {
				atxspot = ATX_BUILDING1
			}
			if ( rnd(10) == 0 ) {
				atxspot = ATX_WATER1
			}
			if ( rnd(10) == 0 ) {
				atxspot = ATX_FIELD1
			}
			if ( rnd(10) == 0 ) {
				atxspot = ATX_FOREST1
			}
			if ( efstatus >= 0 ) {
				p = random_material(efp / 10, efp / 50)
			}
			else {
				p = 0
			}
			matgetmain p, 1
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_MUTATION | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_ID, cc) == CREATURE_ID_SPIRAL_KING ) {
			goto *effect_end
		}
		if ( cdata(CDATA_ID, cc) == CREATURE_ID_BADGER | (cdata(CDATA_ID, cc) == CREATURE_ID_METAMORPHOSE & cdata(CDATA_ALLIED, cc) == 100) ) {
			if ( cdata(CDATA_ALLIED, cc) == 0 ) {
				efid = SKILL_SPELL_TELEPORT
				gosub *effect
			}
			repeat MAX_CHARA_TOTAL
				if ( cdata(CDATA_EXIST, cc) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( cc == cnt ) {
					continue
				}
				if ( cnt == CHARA_PLAYER ) {
					continue
				}
				if ( cbit(CHARA_BIT_PCC, cnt) == 1 ) {
					continue
				}
				if ( rnd(2) == 0 ) {
					continue
				}
				if ( cnt != (-1) ) {
					cdata(CDATA_PIC, cc) = cdata(CDATA_PIC, cnt)
				}
			loop
			goto *effect_end
		}
		if ( tc != CHARA_PLAYER ) {
			goto *jump_changeCreature
		}
		txt lang("Ç†Ç»ÇΩÇÕé©ï™é©êgÇ™ïœÇÌÇ¡ÇƒÇ¢Ç≠ÇÃÇä¥Ç∂ÇΩÅB", "You feel yourself changing.")
		val = 0
		goto *com_aka
	}
	if ( _switch_val == SKILL_EFFECT_MUTATE | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_SPACT_EYE_OF_MUTATION | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_EFFECT_POTION_EVOLUTION | _switch_sw ) {
		_switch_sw = 0
		if ( tc != CHARA_PLAYER ) {
			goto *jump_changeCreature
		}
		if ( efid == SKILL_SPACT_EYE_OF_MUTATION ) {
			txtmore
			txt_check 0
			txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇãCÇÃã∂Ç¢ÇªÇ§Ç»ä·ç∑ÇµÇ≈å©ÇΩÅB", name(cc) + " cast" + _s(cc) + " an insane glance on " + name(tc) + ".")
			if ( rnd(3) ) {
				goto *effect_end
			}
			txtmore
		}
		if ( tc != CHARA_PLAYER ) {
			txt_nothinghappens
			goto *effect_end
		}
		if ( encfind(tc, ENCHANT_RES_MUTATION) != (-1) ) {
			if ( rnd(5) ) {
				txt lang("Ç†Ç»ÇΩÇÕïœàŸÇéÛÇØïtÇØÇ»Ç©Ç¡ÇΩÅB", "You resist the threat of mutation.")
				goto *effect_end
			}
		}
*delMutation_cursed
		f = 0
		p = 1
		if ( efid == SKILL_EFFECT_POTION_EVOLUTION ) {
			p = 2 + rnd(3)
		}
		repeat p
			repeat 100
				tid = rnd(MAX_NORMAL_TRAIT)
				traitmode = 0
				gosub *trait_ref
				if ( stat == 0 | traitref != 1 ) {
					continue
				}
				if ( rnd(2) ) {
					p = 1
				}
				else {
					p = -1
				}
				if ( trait(tid) >= traitref(2) ) {
					p = -1
				}
				if ( trait(tid) <= traitref(1) ) {
					p = 1
				}
				if ( efstatus <= (-1) ) {
					if ( p == 1 ) {
						continue
					}
				}
				else {
					if ( p == (-1) ) {
						if ( efstatus >= 1 ) {
							if ( rnd(3) == 0 ) {
								continue
							}
						}
						if ( efid == SKILL_EFFECT_POTION_EVOLUTION ) {
							continue
						}
					}
				}
				trait(tid) += p
				txt lang("Ç†Ç»ÇΩÇÕïœóeÇµÇΩÅI ", "You mutate.")
				if ( p > 0 ) {
					txtef COLOR_GREEN
					txt traitrefn(0)
				}
				else {
					txtef COLOR_RED
					txt traitrefn(1)
				}
				animeload ANIMATION_FIZZLE, CHARA_PLAYER
				f = 1
				break
			loop
		loop
		if ( f == 0 ) {
			txt_nothinghappens
			obvious = 0
		}
		r1 = CHARA_PLAYER
		gosub *charaRefresh
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_LOSE_MUTATION | _switch_sw ) {
		_switch_sw = 0
		if ( tc != CHARA_PLAYER ) {
			txt_nothinghappens
			goto *effect_end
		}
		if ( efstatus <= (-1) ) {
			if ( synccheck(tc, -1) ) {
				txt lang("Ç±ÇÍÇÕéÙÇÌÇÍÇƒÇ¢ÇÈÅI", "It's cursed!")
			}
			goto *delMutation_cursed
		}
		f = 0
		repeat 1 + (efstatus >= 1) + (efstatus >= 0) + rnd(2)
			repeat 100
				tid = rnd(MAX_TRAIT)
				traitmode = 0
				gosub *trait_ref
				if ( stat == 0 | traitref != 1 ) {
					continue
				}
				if ( trait(tid) == 0 ) {
					continue
				}
				if ( trait(tid) > 0 ) {
					p = -1
				}
				if ( trait(tid) < 0 ) {
					p = 1
				}
				trait(tid) = 0
				txt lang("Ç†Ç»ÇΩÇÕå≥ÇÃé©ï™Ç…ãﬂÇ√Ç¢ÇΩãCÇ™ÇµÇΩÅB", "You are now one step closer to your normal self.")
				if ( p > 0 ) {
					txtef COLOR_GREEN
					txt traitrefn(0)
				}
				else {
					txtef COLOR_RED
					txt traitrefn(1)
				}
				f = 1
				break
			loop
		loop
		if ( f == 0 ) {
			txt_nothinghappens
			obvious = 0
		}
		r1 = CHARA_PLAYER
		gosub *charaRefresh
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_IDENTIFY | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		invsubroutine = 1
		invctrl = 13
		snd SOUNDLIST_INV
		gosub *com_inventory
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_RESURRECTION | _switch_sw ) {
		_switch_sw = 0
		if ( mdata(MDATA_TYPE) == MAP_TYPE_WORLD ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		f = get_freeallyne()
		if ( f == 0 ) {
			txt lang("íáä‘ÇÃç≈ëÂêîÇ…íBÇµÇƒÇ¢ÇÈÇΩÇﬂÅAåƒÇ—ñﬂÇπÇ»Ç¢ÅB", "Your party is full. You can't invite anyone else.")
			goto *effect_end
		}
		if ( efstatus <= (-1) ) {
			txt lang("ñªäEÇ©ÇÁéÄóÏÇ™åƒÇ—èoÇ≥ÇÍÇΩÅI", "Hordes of undead arise from hell!")
			repeat 4 + rnd(4)
				flt calcobjlv(cdata(CDATA_LEVEL, CHARA_PLAYER)), calcfixlv(FIX_QUALITY_GREAT)
				fltn "undead"
				characreate -1, CREATURE_ID_BUG, cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER)
			loop
			obvious = 0
			goto *effect_end
		}
		allyctrl = 2
		gosub *com_listNpc
		if ( stat == (-1) ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		if ( cdata(CDATA_CAN_REVIVE, stat) <= 0 ) {
			txt lang("É}ÉbÉvÇêÿë÷Ç¶ÇÈÇ‹Ç≈ïúäàÇ≈Ç´Ç»Ç¢ÅB", "It can not be revived until you switch area.")
			goto *effect_end
		}
		if ( bonus < rnd(100) ) {
			if ( synccheck(cc, -1) ) {
				txt lang(name(cc) + "ÇÃóÕÇÕñªäEÇ…ãyÇŒÇ»Ç©Ç¡ÇΩÅB", name(cc) + your(cc) + " prayer doesn't reach the underworld.")
			}
			goto *effect_end
		}
		rc = stat
		gosub *resurrect
		cxinit = cdata(CDATA_X, cc)
		cyinit = cdata(CDATA_Y, cc)
		gosub *place_chara
		cdata(CDATA_AREA, rc) = AREA_NONE
		txtef COLOR_YELLOW
		txt cnven(cdatan(CDATAN_NAME, rc)) + lang("ÇÕïúäàÇµÇΩÅI", " " + have(rc) + " been resurrected!")
		txt lang("ÅuÇ†ÇËÇ™Ç∆Ç§ÅIÅv", cnvtalk("Thanks!"))
		cdata(CDATA_CAN_REVIVE, rc)--
		animeid = ANIMATION_HOLY
		animode = 100 + rc
		gosub *anime
		snd SOUNDLIST_PRAY2
		cdata(CDATA_EMO_ICON, rc) = 17 + 100 * 3
		if ( cc == CHARA_PLAYER ) {
			modimp rc, 15
			if ( rc >= MAX_CHARA_FOLLOWER ) {
				modkarma CHARA_PLAYER, 2
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_UNCURSE | _switch_sw ) {
		_switch_sw = 0
		if ( efstatus == 0 ) {
			if ( synccheck(tc, -1) ) {
				txt lang(name(tc) + "ÇÃëïîıïiÇÕîíÇ¢åıÇ…ïÔÇ‹ÇÍÇΩÅB", his2(tc) + your2(tc) + " equipment is surrounded by a white aura.")
			}
		}
		if ( efstatus >= 1 ) {
			if ( synccheck(tc, -1) ) {
				txt lang(name(tc) + "ÇÕêπÇ»ÇÈåıÇ…ïÔÇ›çûÇ‹ÇÍÇΩÅB", name(tc) + " " + is(tc) + " surrounded by a holy aura.")
			}
		}
		if ( efstatus <= (-1) ) {
			if ( synccheck(tc, -1) ) {
				txt lang(name(tc) + "ÇÕà´ñÇÇ™èŒÇ§ê∫Çï∑Ç¢ÇΩÅB", name(tc) + " hear" + _s(tc) + " devils laugh.")
			}
			goto *spUncurse_cursed
		}
		inv_getheader tc
		p(1) = 0, 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 ) {
				continue
			}
			if ( inv(INV_ITEM_STATUS, cnt) >= ITEM_STATUS_NORMAL ) {
				continue
			}
			ci = cnt
			p = 0
			if ( inv(INV_ITEM_STATUS, ci) == ITEM_STATUS_CURSED ) {
				p = rnd(200) + 1
			}
			if ( inv(INV_ITEM_STATUS, ci) == ITEM_STATUS_DOOMED ) {
				p = rnd(1000) + 1
			}
			if ( efstatus >= 1 ) {
				p = p / 2 + 1
			}
			else {
				if ( inv(INV_ITEM_EQUIP, ci) == 0 ) {
					continue
				}
			}
			if ( p != 0 ) {
				if ( efp >= p ) {
					p(1)++
					inv(INV_ITEM_STATUS, ci) = ITEM_STATUS_NORMAL
					item_stack tc, ci, 1
				}
				else {
					p(2)++
				}
			}
		loop
		if ( efstatus >= 1 ) {
			if ( p(1) != 0 ) {
				if ( synccheck(tc, -1) ) {
					txt lang("äÙÇ¬Ç©ÇÃÉAÉCÉeÉÄÇ™èÚâªÇ≥ÇÍÇΩÅB", "The aura uncurses some " + his(tc) + " stuff.")
				}
			}
		}
		else {
			if ( p(1) != 0 ) {
				if ( synccheck(tc, -1) ) {
					txt lang("êgÇ…ïtÇØÇƒÇ¢ÇÈëïîıÇÃäÙÇ¬Ç©Ç™èÚâªÇ≥ÇÍÇΩÅB", "The aura uncurses some of " + his(tc) + " equipment.")
				}
			}
		}
		if ( p(2) != 0 ) {
			if ( synccheck(tc, -1) ) {
				txt lang("äÙÇ¬Ç©ÇÃÉAÉCÉeÉÄÇÕíÔçRÇµÇΩÅB", "Several items resist the aura and remain cursed.")
			}
		}
		if ( p(1) == 0 & p(2) == 0 ) {
			txt_nothinghappens
			obvious = 0
		}
		else {
			animeload ANIMATION_BLOOD, tc
		}
		r1 = tc
		gosub *charaRefresh
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_ORACLE | _switch_sw ) {
		_switch_sw = 0
		if ( tc >= MAX_CHARA_FOLLOWER ) {
			txt_nothinghappens
			goto *effect_end
		}
		if ( efstatus <= (-1) ) {
			artifactlocation = ""
			txt lang("âΩÇ©Ç™Ç†Ç»ÇΩÇÃé®å≥Ç≈Ç≥Ç≥Ç‚Ç¢ÇΩÇ™ÅAÇ†Ç»ÇΩÇÕï∑Ç´éÊÇÈÇ±Ç∆Ç™Ç≈Ç´Ç»Ç©Ç¡ÇΩÅB", "You hear a sepulchral whisper but the voice is too small to distinguish a word.")
			goto *effect_end
		}
		if ( artifactlocation == "" ) {
			txt lang("Ç‹Çæì¡éÍÇ»ÉAÉCÉeÉÄÇÕê∂ê¨Ç≥ÇÍÇƒÇ¢Ç»Ç¢ÅB", "No artifacts have been generated yet.")
		}
		else {
			notesel artifactlocation
			repeat noteinfo(0)
				noteget s, 0
				txt cnven(s)
				notedel 0
			loop
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_GAIN_SPELL | _switch_sw ) {
		_switch_sw = 0
		if ( tc != CHARA_PLAYER ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		f = 0
		repeat 1 + (efstatus >= 1)
			cnt2 = cnt
			repeat 2000
				await
				p = rnd(MAX_SPELL - STARTING_SKILL_SPELL) + STARTING_SKILL_SPELL
				if ( p == SKILL_SPELL_WISH ) {
					if ( rnd(10) ) {
						continue
					}
				}
				if ( efstatus >= 0 ) {
					if ( sdataref(SKILL_DATAREF_USE, p) != 0 ) {
						if ( cnt2 == 0 ) {
							s = lang("ìÀëRÅA", "Suddenly, ")
						}
						else {
							s = lang("Ç≥ÇÁÇ…ÅA", "Futhermore, ")
						}
						skillgain CHARA_PLAYER, p, 1, 100 * 2
						txtef COLOR_GREEN
						txt lang(s + name(CHARA_PLAYER) + "ÇÕ" + skillname(p) + "ÇÃñÇñ@ÇÃíméØÇìæÇΩÅB", s + "you gain knowledge of a spell, " + skillname(p) + ".")
						snd SOUNDLIST_DING2
						f = 1
						break
					}
				}
				else {
					p = p - STARTING_SKILL_SPELL
					if ( spell(p) > 0 ) {
						spell(p) = 0
						txt lang("Ç±ÇÍÇÕéÙÇÌÇÍÇƒÇ¢ÇÈÅI", "It's cursed!")
						txtef COLOR_RED
						txt lang("ìÀëRÅA" + name(CHARA_PLAYER) + "ÇÕ" + skillname(p + STARTING_SKILL_SPELL) + "ÇÃñÇñ@ÇÃíméØÇé∏Ç¡ÇΩÅB", "Suddenly, you lose knowledge of a spell, " + skillname(p + STARTING_SKILL_SPELL) + ".")
						snd SOUNDLIST_CURSE3
						animeload ANIMATION_CRUSH, CHARA_PLAYER
						f = 1
						break
					}
				}
			loop
		loop
		if ( f == 0 ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		autosave = 1 * (gdata(GDATA_AREA) != AREA_SHOW_HOUSE)
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_DESCENT | _switch_sw ) {
		_switch_sw = 0
		if ( efstatus <= 0 ) {
			if ( cdata(CDATA_LEVEL, tc) <= 1 ) {
				txt_nothinghappens
				obvious = 0
				goto *effect_end
			}
			cdata(CDATA_LEVEL, tc)--
			cdata(CDATA_EXP, tc) = 0
			r1 = tc
			gosub *calcExpToNextLevel
			txtef COLOR_PURPLE
			txt lang(name(tc) + "ÇÃÉåÉxÉãÇ™â∫Ç™Ç¡ÇΩÅc", name(tc) + " lose" + _s(tc) + " a level...")
		}
		else {
			cdata(CDATA_EXP, tc) = cdata(CDATA_EXP_TO_NEXT_LVL, tc)
			r1 = tc
			r2 = 0
			gosub *calcLevelUp
			if ( cbit(CHARA_BIT_LIVESTOCK, r1) != 1 ) {
				if ( synccheck(tc, -1) ) {
					snd SOUNDLIST_DING1
				}
			}
			else {
				txt lang(name(tc) + "ÇÃÉåÉxÉãÇÕè„Ç™ÇÁÇ»Ç¢Åc", name(tc) + " cannot gain a level...")
			}
		}
		if ( efstatus <= (-1) ) {
			txt lang("Ç±ÇÍÇÕéÙÇÌÇÍÇƒÇ¢ÇÈÅI", "It's cursed!")
			repeat STARTING_SKILL_RESIST - STARTING_SKILL_ATTR, STARTING_SKILL_ATTR
				if ( rnd(3) == 0 ) {
					if ( cnt <= 17 ) {
						if ( sdata(cnt, tc) != 0 ) {
							skillexp cnt, tc, -1000
						}
					}
				}
			loop
			animeload ANIMATION_FIZZLE, tc
		}
		gosub *charaRefresh
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_GAIN_SKILL | _switch_sw ) {
		_switch_sw = 0
		repeat
			await
			p = rnd(STARTING_SKILL_SPELL - STARTING_SKILL_WEAPON) + STARTING_SKILL_WEAPON
			if ( sdataref(SKILL_DATAREF_USE, p) != 0 ) {
				if ( efstatus >= 0 ) {
					if ( cnt < efstatusfix(0, 0, 100, 2000) ) {
						if ( sdata(p, tc) != 0 ) {
							continue
						}
					}
					skillgain tc, p, 1
					if ( synccheck(tc, -1) ) {
						snd SOUNDLIST_DING2
						txtef COLOR_GREEN
						txt lang("" + name(tc) + "ÇÕ" + skillname(p) + "ÇÃãZèpÇälìæÇµÇΩÅI", name(tc) + " gain" + _s(tc) + " a skill of " + skillname(p) + "!")
					}
					break
				}
				else {
					if ( sdata(p, tc) == 0 ) {
						continue
					}
					if ( synccheck(tc, -1) ) {
						snd SOUNDLIST_CURSE1
						txt lang("Ç±ÇÍÇÕéÙÇÌÇÍÇƒÇ¢ÇÈÅI", "It's cursed!")
					}
					skillexp p, tc, -1000
					break
				}
			}
		loop
		r1 = tc
		gosub *charaRefresh
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_GAIN_FAITH | _switch_sw ) {
		_switch_sw = 0
		if ( tc != CHARA_PLAYER ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		if ( cdata(CDATA_GOD, CHARA_PLAYER) == GOD_EYTH ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		if ( efstatus <= (-1) ) {
			txt lang("Ç†Ç»ÇΩÇÃê_ÇÕÇ†Ç»ÇΩÇÃêMã¬Ç…ã^ñ‚Çï¯Ç¢ÇΩÅB", "Your god doubts your faith.")
			snd SOUNDLIST_CURSE3
			animeload ANIMATION_CRUSH, CHARA_PLAYER
			skillexp SKILL_NORMAL_FAITH, CHARA_PLAYER, -1000
			goto *effect_end
		}
		if ( cdata(CDATA_GOD, CHARA_PLAYER) == GOD_EYTH ) {
			txt_nothinghappens
			obvious = 0
		}
		else {
			txtef COLOR_GREEN
			txt lang("Ç†Ç»ÇΩÇÕ" + godname(cdata(CDATA_GOD, CHARA_PLAYER)) + "ÇÃígÇ©Ç¢ä·ç∑ÇµÇä¥Ç∂ÇΩÅB", "You feel as if " + godname(cdata(CDATA_GOD, CHARA_PLAYER)) + " is watching you.")
			if ( efstatus >= 1 ) {
				txt lang("ãÛÇ©ÇÁéOÇ¬ótÇÃÉNÉçÅ[ÉoÅ[Ç™Ç”Ç¡ÇƒÇ´ÇΩÅB", "A three-leaved clover falls from the sky.")
			}
			animeid = ANIMATION_HOLY
			animode = 100 + tc
			gosub *anime
			snd SOUNDLIST_PRAY2
			cdata(CDATA_PRAY, CHARA_PLAYER) += 500
			modpiety 75
			skillexp SKILL_NORMAL_FAITH, CHARA_PLAYER, 1000 + (efstatus >= 1) * 750, 6, 1000
		}
		r1 = tc
		gosub *charaRefresh
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_GAIN_GROWTH | _switch_sw ) {
		_switch_sw = 0
		repeat 300
			repeat
				await
				p = rnd(STARTING_SKILL_SPELL - STARTING_SKILL_WEAPON) + STARTING_SKILL_WEAPON
				if ( sdataref(SKILL_DATAREF_USE, p) != 0 ) {
					if ( sorg(p, tc) == 0 ) {
						continue
					}
					modgrowth tc, p, efp * efstatusfix(-3, -2, 4, 5) / 900
					break
				}
			loop
		loop
		if ( efstatus >= 0 ) {
			if ( synccheck(tc, -1) ) {
				snd SOUNDLIST_DING2
				txtef COLOR_GREEN
				txt lang(name(tc) + "ÇÃÉXÉLÉãÇÃêˆç›î\óÕÇ™è„è∏ÇµÇΩÅB", "The potentials of " + name(tc) + your(tc) + " skills increase" + _s(tc) + ".")
			}
		}
		else {
			if ( synccheck(tc, -1) ) {
				snd SOUNDLIST_CURSE3
				txtef COLOR_RED
				txt lang(name(tc) + "ÇÃÉXÉLÉãÇÃêˆç›î\óÕÇ™å∏è≠ÇµÇΩÅB", "The potentials of " + name(tc) + "'s skills decreases.")
			}
		}
		r1 = tc
		gosub *charaRefresh
		autosave = 1 * (gdata(GDATA_AREA) != AREA_SHOW_HOUSE)
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_DECREASE_STAT | _switch_sw ) {
		_switch_sw = 0
		i = rnd(20 - 10) + 10
		skillexp i, tc, efstatusfix(-2000, -2000, -1000, -250)
		animeid = ANIMATION_CURSE
		gosub *anime
		r1 = tc
		gosub *charaRefresh
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_GAIN_SPEED | _switch_sw ) {
		_switch_sw = 0
		txt lang(name(tc) + "ÇÃååÇÕï¶Ç´Ç†Ç™ÇÈÇÊÇ§Ç…îMÇ≠Ç»Ç¡ÇΩÅB", name(tc) + your(tc) + " blood burns and a new strength fills " + his(tc) + " body!")
		if ( tc == CHARA_PLAYER ) {
			skillmod SKILL_ATTR_SPD, CHARA_PLAYER, efstatusfix(-4000, -1000, 1000 * 6, 1000 * 8)
		}
		else {
			skillmod SKILL_ATTR_SPD, tc, efstatusfix(-4000, -1000, 1000 * 15, 1000 * 20)
		}
		r1 = tc
		gosub *charaRefresh
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_GAIN_SPEED_2 | _switch_sw ) {
		_switch_sw = 0
		skillmod SKILL_ATTR_SPD, tc, 1000
		txt lang("Ç≥ÇÁÇ…" + name(tc) + "ÇÃë¨ìxÇÃêˆç›î\óÕÇ™ç≈ëÂÇ‹Ç≈âÒïúÇµÇΩÅB", name(tc) + your(tc) + " blood burns and a new strength fills " + his(tc) + " body!")
		modgrowth tc, SKILL_ATTR_SPD, 400
		r1 = tc
		gosub *charaRefresh
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_POTENTIAL | _switch_sw ) {
		_switch_sw = 0
		procid = (procid + 1) \ 4
		proclist(procid) = "efPotential:Begin" + " ct:" + ct
		if ( efstatus >= 1 ) {
			repeat (STARTING_SKILL_ATTR + MAX_SKILL_ATTR_BASIC) - STARTING_SKILL_ATTR, STARTING_SKILL_ATTR
				modgrowth tc, cnt, 100
			loop
			txt lang(name(tc) + "ÇÃëSÇƒÇÃî\óÕÇÃêˆç›î\óÕÇ™è„è∏ÇµÇΩÅB", name(tc) + your(tc) + " potential of every attribute expands.")
			animeid = ANIMATION_HOLY
			animode = 100 + tc
			gosub *anime
			snd SOUNDLIST_DING3
		}
		else {
			i = rnd((STARTING_SKILL_ATTR + MAX_SKILL_ATTR_BASIC) - STARTING_SKILL_ATTR) + STARTING_SKILL_ATTR
			valn = skillname(i)
			if ( efstatus == 0 ) {
				txt lang(name(tc) + "ÇÃ" + valn + "ÇÃêˆç›î\óÕÇ™è„è∏ÇµÇΩÅB", name(tc) + your(tc) + " potential of " + valn + " expands.")
				modgrowth tc, i, 100
				snd SOUNDLIST_DING2
			}
			else {
				txt lang(name(tc) + "ÇÃ" + valn + "ÇÃêˆç›î\óÕÇ™å∏è≠ÇµÇΩÅB", name(tc) + your(tc) + " potential of " + valn + " decreases.")
				modgrowth tc, i, (rnd(sgrowth(i, tc) / 10 + 10) + 1) * (-1)
				snd SOUNDLIST_CURSE3
			}
			autosave = 1 * (gdata(GDATA_AREA) != AREA_SHOW_HOUSE)
		}
		procid = (procid + 1) \ 4
		proclist(procid) = "efPotential:End" + " ct:" + ct
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_VANISH | _switch_sw ) {
		_switch_sw = 0
		if ( gdata(GDATA_AREA) == AREA_PET_ARENA | gdata(GDATA_AREA) == AREA_SHOW_HOUSE | gdata(GDATA_AREA) == AREA_ARENA ) {
			goto *effect_end
		}
		if ( tc < 57 ) {
			goto *effect_end
		}
		if ( adata(ADATA_BOSS, gdata(GDATA_AREA)) == tc ) {
			goto *effect_end
		}
		if ( gdata(GDATA_FLAG_DUEL_TARGET) == tc ) {
			goto *effect_end
		}
		if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE ) {
			goto *effect_end
		}
		if ( cbit(CHARA_BIT_LIVESTOCK, tc) == 1 ) {
			goto *effect_end
		}
		txt lang(name(tc) + "ÇÕè¡Ç¶ãéÇ¡ÇΩÅB", name(tc) + " vanish" + _s(tc, 1) + ".")
		chara_vanquish tc
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_SENSE_OBJECT | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_SPELL_MAGIC_MAP | _switch_sw ) {
		_switch_sw = 0
		if ( tc >= MAX_CHARA_FOLLOWER ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		p = 1
		if ( efid == SKILL_SPELL_SENSE_OBJECT ) {
			p = 2
		}
		repeat p
			repeat mdata(MDATA_HEIGHT)
				y = cnt
				repeat mdata(MDATA_WIDTH)
					x = cnt
					p = dist(cdata(CDATA_X, tc), cdata(CDATA_Y, tc), x, y)
					if ( efstatus <= (-1) ) {
						if ( efid == SKILL_SPELL_MAGIC_MAP ) {
							map(x, y, 2) = tile_default
						}
						if ( efid == SKILL_SPELL_SENSE_OBJECT ) {
							map(x, y, 5) = 0
						}
						continue
					}
					if ( p <= 7 | rnd(efp + 1) > rnd(p * 8 + 1) | efstatus >= 1 ) {
						if ( efid == SKILL_SPELL_MAGIC_MAP ) {
							map(x, y, 2) = map(x, y, 0)
						}
						if ( efid == SKILL_SPELL_SENSE_OBJECT ) {
							if ( map(x, y, 6) != 0 | map(x, y, 5) != 0 | map(x, y, 1) != 0 | map(x, y, 4) != 0 ) {
								map(x, y, 2) = map(x, y, 0)
							}
						}
					}
				loop
			loop
		loop
		if ( efstatus <= (-1) ) {
			txt lang("Ç†ÇÍÅcÅHÇ†Ç»ÇΩÇÕåyÇ¢ãLâØè·äQÇéÛÇØÇΩÅB", "Hmm? You suffer minor memory defect.")
		}
		else {
			if ( efid == SKILL_SPELL_MAGIC_MAP ) {
				txt lang(name(tc) + "ÇÕé¸àÕÇÃínå`Çé@ímÇµÇΩÅB", name(tc) + " sense" + _s(tc) + " nearby locations.")
			}
			if ( efid == SKILL_SPELL_SENSE_OBJECT ) {
				txt lang(name(tc) + "ÇÕé¸àÕÇÃï®éøÇä¥ímÇµÇΩÅB", name(tc) + " sense" + _s(tc) + " nearby objects.")
			}
		}
		if ( efid == SKILL_SPELL_SENSE_OBJECT ) {
			gdata(GDATA_SENSE_OBJECT) = 10
		}
		animeload ANIMATION_BLOOD, tc
		redraw 0
		gosub *screen_raderRefresh
		if ( efid == SKILL_SPELL_SENSE_OBJECT ) {
			if ( efstatus > (-1) ) {
				repeat 13
					y = cdata(CDATA_Y, tc) + cnt - 5
					if ( y < 0 | y >= mdata(MDATA_HEIGHT) ) {
						continue
					}
					repeat 13
						x = cdata(CDATA_X, tc) + cnt - 5
						if ( x < 0 | x >= mdata(MDATA_WIDTH) ) {
							continue
						}
						if ( map(x, y, 6) != 0 ) {
							cell_featread x, y
							refx = x
							refy = y
							if ( abs(cdata(CDATA_Y, tc) - y) <= 7 & abs(cdata(CDATA_X, tc) - x) <= 7 ) {
								if ( feat(1) == CELL_FEATURE_TRAP ) {
									if ( feat(0) == 0 ) {
										gosub *revealTrap
										txt lang("„©Çä¥ímÇµÇΩÅB", "You discover a trap.")
									}
								}
								if ( feat(1) == CELL_FEATURE_HIDDEN_PATH ) {
									gosub *revealHiddenPath
									txt lang("âBÇÍÇΩí òHÇä¥ímÇµÇΩÅB", "You discover a hidden path.")
								}
							}
							if ( feat(1) == CELL_FEATURE_SMALL_MEDAL ) {
								if ( gdata(GDATA_AREA) != AREA_SHOW_HOUSE ) {
									snd SOUNDLIST_DING2
									txt lang("è¨Ç≥Ç»ÉÅÉ_ÉãÇä¥ímÇµÇΩÅI", "You find a small coin!")
									map(x, y, 6) = 0
									flt
									itemcreate -1, ITEM_ID_SMALL_MEDAL, x, y, 0
								}
							}
						}
					loop
				loop
			}
		}
		if ( efid == SKILL_SPELL_SENSE_OBJECT ) {
			msg_halt
			gdata(GDATA_SENSE_OBJECT) = 0
			screenupdate = -1
			gosub *screen_refresh
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_TIME_STOP | _switch_sw ) {
		_switch_sw = 0
		if ( gdata(GDATA_TIME_STOP_TIME) != 0 ) {
			txtef COLOR_SKY_BLUE
			txt lang("éûÇÕä˘Ç…é~Ç‹Ç¡ÇƒÇ¢ÇÈÅB", "Time is already stopped.")
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		snd SOUNDLIST_CHEST1
		animeload ANIMATION_UNISON_IMPACT4, cc
		txtef COLOR_YELLOW
		txt_skillname
		if ( cc == CHARA_PLAYER ) {
			cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) = 0
		}
		txtef COLOR_SKY_BLUE
		txt lang(name(cc) + "ÇÕéûÇé~ÇﬂÇΩÅB", name(cc) + " stop" + _s(cc) + " time.")
		gdata(GDATA_TIME_STOP_TIME) = 8
		snd SOUNDLIST_CHEST1
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			gdata(GDATA_TIME_STOP_TIME) += 2
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_DIFFUSION_WAVE | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
			goto *effect_end
		}
		if ( tc == cc ) {
			goto *effect_end
		}
		if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
			if ( tc < MAX_CHARA_FOLLOWER | tc == CHARA_PLAYER ) {
				goto *effect_end
			}
		}
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( cc == CHARA_PLAYER ) {
			cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) = 0
		}
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕñÇóÕÇé¸àÕÇÃÉ}ÉiÇ∆ìØí≤Ç≥ÇπÇƒï˙Ç¡ÇΩÅI", name(cc) + " attune" + _s(cc) + " " + yourself(cc) + " with the mana in the air and let" + _s(cc) + " out a blast!")
		snd SOUNDLIST_ENC
		animeload 43, cc
		snd SOUNDLIST_ENC
		animeload 43, cc
		snd SOUNDLIST_ENC
		animeload 43, cc
		snd SOUNDLIST_PUNISH1
		weap = sdata(SKILL_NORMAL_CASTING, cc)
		if ( sdata(SKILL_NORMAL_CASTING, cc) < sdata(SKILL_NORMAL_MAGIC_DEVICE, cc) ) {
			weap = sdata(SKILL_NORMAL_MAGIC_DEVICE, cc)
		}
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				if ( sdata(SKILL_NORMAL_CASTING, cc) < sdata(SKILL_NORMAL_MAGIC_DEVICE, cc) ) {
					skillexp SKILL_NORMAL_MAGIC_DEVICE, cc, 400
				}
				else {
					skillexp SKILL_NORMAL_CASTING, cc, 400 // As far as I can understand this is what this is supposed to be, rather than trying to give experience to magic device in either case, since it uses the skill with highest level
				}
			}
		}
		if ( synccheck(tc, -1) ) {
			txtmore
			if ( tc >= MAX_CHARA_FOLLOWER ) {
				gdata(GDATA_DMG_TYPE) = 2
				txt3rd = 1
				txt lang(name(tc) + "Ç…ñΩíÜÇµ", "The breath hits " + name(tc) + " and")
			}
			else {
				txt lang(name(tc) + "Ç…ñΩíÜÇµÇΩÅB", "The breath hits " + name(tc) + ".")
			}
		}
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		dmghp tc, limit((weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap * 2 + 1), cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
		healhp cc, (limit((weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap * 2 + 1)) / 5
		healmp cc, (limit((weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap * 2 + 1)) / 5
		eqlv = 0
		eqbui = 0
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_DECAPITATION | _switch_sw ) {
		_switch_sw = 0
		snd SOUNDLIST_STAB
		txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÃéÒÇë_Ç¡ÇƒçUåÇÇµÇΩÅB", name(cc) + " aim" + _s(cc) + " at " + name(tc) + your(tc) + " head and attack" + _s(cc) + ".")
		if ( cdatan(CDATAN_CLASS, cc) == "farmer" ) {
			ha = 1
		}
		else {
			ha = 0
		}
		if ( cdata(CDATA_HP, tc) > cdata(CDATA_MAX_HP, tc) / (8 - ha) ) {
			gosub *act_melee
			goto *effect_end
		}
		if ( attackskill == SKILL_WEAPON_FIREARM ) {
			if ( synccheck(tc, -1) ) {
				snd SOUNDLIST_ATKSWORD
				txtef COLOR_RED
				txt lang(" *ÉYÉoÉVÉÖÉb* ", " *Bang* ")
				if ( tc >= MAX_CHARA_FOLLOWER ) {
					gdata(GDATA_DMG_TYPE) = 2
					txt3rd = 1
					txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÃì™ÇêÅÇ´îÚÇŒÇµ", name(cc) + " blew " + name(tc) + your(tc) + " head off and")
				}
				else {
					txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÃì™ÇêÅÇ´îÚÇŒÇµÇΩÅB", name(cc) + " blew " + name(tc) + your(tc) + " head off.")
				}
			}
		}
		else {
			if ( synccheck(tc, -1) ) {
				snd SOUNDLIST_ATKSWORD
				txtef COLOR_RED
				txt lang(" *ÉuÉVÉÖÉb* ", " *Gash* ")
				if ( tc >= MAX_CHARA_FOLLOWER ) {
					gdata(GDATA_DMG_TYPE) = 2
					txt3rd = 1
					txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÃéÒÇÇøÇÂÇÒÇ¨ÇË", name(cc) + " cut" + _s(cc) + " " + name(tc) + your(tc) + " neck and")
				}
				else {
					txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÃéÒÇÇøÇÂÇÒÇ¨Ç¡ÇΩÅB", name(cc) + " cut" + _s(cc) + " " + name(tc) + your(tc) + " neck.")
				}
			}
		}
		dmghp tc, cdata(CDATA_MAX_HP, tc), cc, SKILL_SPACT_DECAPITATION
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_DECAPITATION2 | _switch_sw ) {
		_switch_sw = 0
		if ( cdatan(CDATAN_CLASS, cc) == "farmer" ) {
			ha = 1
		}
		else {
			ha = 0
		}
		if ( cdata(CDATA_HP, tc) > cdata(CDATA_MAX_HP, tc) / (8 - ha) ) {
			goto *effect_end
		}
		if ( attackskill == SKILL_WEAPON_FIREARM ) {
			if ( synccheck(tc, -1) ) {
				snd SOUNDLIST_ATKSWORD
				txtef COLOR_RED
				txt lang(" *ÉYÉoÉVÉÖÉb* ", " *Bang* ")
				if ( tc >= MAX_CHARA_FOLLOWER ) {
					gdata(GDATA_DMG_TYPE) = 2
					txt3rd = 1
					txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÃì™ÇêÅÇ´îÚÇŒÇµ", name(cc) + " blew " + name(tc) + "'s head off and")
				}
				else {
					txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÃì™ÇêÅÇ´îÚÇŒÇµÇΩÅB", name(cc) + " blew " + name(tc) + "'s head off.")
				}
			}
		}
		else {
			if ( synccheck(tc, -1) ) {
				snd SOUNDLIST_ATKSWORD
				txtef COLOR_RED
				txt lang(" *ÉuÉVÉÖÉb* ", " *Gash* ")
				if ( tc >= MAX_CHARA_FOLLOWER ) {
					gdata(GDATA_DMG_TYPE) = 2
					txt3rd = 1
					txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÃéÒÇÇøÇÂÇÒÇ¨ÇË", name(cc) + " cut" + _s(cc) + " " + name(tc) + your(tc) + " neck and")
				}
				else {
					txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÃéÒÇÇøÇÂÇÒÇ¨Ç¡ÇΩÅB", name(cc) + " cut" + _s(cc) + " " + name(tc) + your(tc) + " neck.")
				}
			}
		}
		dmghp tc, cdata(CDATA_MAX_HP, tc), cc, SKILL_SPACT_DECAPITATION
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_MATERIALIZE | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_HP, tc) > cdata(CDATA_MAX_HP, tc) / 8 ) {
			goto *effect_end
		}
		if ( cbit(CHARA_BIT_SANDBAG, tc) == 1 ) {
			goto *effect_end
		}
		if ( synccheck(tc, -1) ) {
			txtef COLOR_RED
			if ( tc >= MAX_CHARA_FOLLOWER ) {
				gdata(GDATA_DMG_TYPE) = 2
				txt3rd = 1
				txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÃêgëÃÇÉ}ÉeÉäÉAÉãÇ…ïœä∑Çµ", name(cc) + " convert" + _s(cc) + " " + name(tc) + your(tc) + " body to material and")
			}
			else {
				txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÃêgëÃÇÉ}ÉeÉäÉAÉãÇ…ïœä∑ÇµÇΩÅB", name(cc) + " convert" + _s(cc) + " " + name(tc) + your(tc) + " body to material.")
			}
		}
		dmghp tc, cdata(CDATA_MAX_HP, tc), cc, SKILL_SPACT_DECAPITATION
		efp = sdata(SKILL_NORMAL_ALCHEMY, cc) + 50
		snd SOUNDLIST_DING2
		repeat rnd(2) + 1
			txtmore
			atxspot = ATX_GENERAL1
			if ( rnd(10) == 0 ) {
				atxspot = ATX_REMAIN1
			}
			if ( rnd(10) == 0 ) {
				atxspot = ATX_MINE1
			}
			if ( rnd(10) == 0 ) {
				atxspot = ATX_BUSH1
			}
			if ( rnd(10) == 0 ) {
				atxspot = ATX_DUNGEON1
			}
			if ( rnd(10) == 0 ) {
				atxspot = ATX_BUILDING1
			}
			if ( rnd(10) == 0 ) {
				atxspot = ATX_WATER1
			}
			if ( rnd(10) == 0 ) {
				atxspot = ATX_FIELD1
			}
			if ( rnd(10) == 0 ) {
				atxspot = ATX_FOREST1
			}
			p = random_material(efp / 10, efp / 50)
			matgetmain p, 1
		loop
		autosave = 1 * (gdata(GDATA_AREA) != AREA_SHOW_HOUSE)
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_ROCKET_FIRE | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 25 ) {
			if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
				tc = cdata(CDATA_TARGET, cc)
				gosub *act_melee
				goto *effect_end
			}
			gosub *FindRangeWeapon
			if ( stat == 1 ) {
				if ( ammo == (-1) ) {
					goto *effect_end
				}
				attackitem = cw
				attackrange = 1
				extraattack = 0
				gosub *act_attack
				goto *effect_end
			}
		}
		txt lang(name(cc) + "ÇÕì¡éÍñCíeÇï˙Ç¡ÇΩÅB", name(cc) + " shot the special cannon.")
		cdata(CDATA_POWER_GAUGE, cc) -= 25
		animeid = ANIMATION_NUCLEAR
		gosub *anime
		aniref = 0
		animeid = ANIMATION_BALL
		anix = cdata(CDATA_X, tc)
		aniy = cdata(CDATA_Y, tc)
		gosub *anime
		cdata(CDATA_PROT_PENALTY, tc) = 2
		dmg = rnd(5) + sdata(SKILL_ATTR_PER, CHARA_PLAYER) * 2 + sdata(SKILL_NORMAL_MARKSMAN, CHARA_PLAYER) * sqrt(sdata(SKILL_NORMAL_MARKSMAN, CHARA_PLAYER) + 1)
		dmghp tc, dmg, cc, SKILL_RESDMG_CRUSH, 1000
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_NUCLEAR_FIRE | _switch_sw ) {
		_switch_sw = 0
		txt lang(name(cc) + "ÇÕäjñCíeÇï˙Ç¡ÇΩÅB", name(cc) + " shot the nuclear artillery.")
		if ( cdata(CDATA_POWER_GAUGE, cc) < 25 ) {
			if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
				tc = cdata(CDATA_TARGET, cc)
				gosub *act_melee
				goto *effect_end
			}
			gosub *FindRangeWeapon
			if ( stat == 1 ) {
				if ( ammo == (-1) ) {
					goto *effect_end
				}
				attackrange = 1
				extraattack = 0
				gosub *act_attack
				goto *effect_end
			}
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 25
		tlocx = cdata(CDATA_X, tc)
		tlocy = cdata(CDATA_Y, tc)
		animeid = ANIMATION_NUCLEAR
		gosub *anime
		repeat 40
			if ( cnt == 14 ) {
				snd SOUNDLIST_ATK_FIRE
			}
			await cfg_animewait + 20
		loop
		range = 6
		ele = SKILL_RES_CHAOS
		aniref = range
		animeid = ANIMATION_BALL_NUKE
		anix = tlocx
		aniy = tlocy
		gosub *anime
		gosub *screen_draw
		repeat range * 2 + 1
			dy = tlocy - range + cnt
			if ( dy < 0 | dy >= mdata(MDATA_HEIGHT) ) {
				continue
			}
			repeat range * 2 + 1
				dx = tlocx - range + cnt
				if ( dx < 0 | dx >= mdata(MDATA_WIDTH) ) {
					continue
				}
				if ( dist(tlocx, tlocy, dx, dy) > range ) {
					continue
				}
				f = 0
				if ( map(dx, dy, 0) != 701 & map(dx, dy, 0) != 671 ) {
					map(dx, dy, 0) = 37
				}
				if ( map(dx, dy, 1) != 0 ) {
					tc = map(dx, dy, 1) - 1
					if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
						if ( tc != CHARA_PLAYER ) {
							if ( rnd(cdata(CDATA_HP, tc) + 1) < rnd(cdata(CDATA_HP, cdata(CDATA_TAGTEAM_PARTNER, tc)) + 1) ) {
								tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
							}
							txt_guard
						}
					}
					dmg = 1000 + (sdata(SKILL_NORMAL_CARPENTRY, CHARA_PLAYER) + 50) / 5 * limit(sdata(SKILL_NORMAL_DISARM_TRAP, CHARA_PLAYER) + 50, 50, 1000) + sdata(SKILL_NORMAL_MARKSMAN, CHARA_PLAYER) / 5 * sqrt(sdata(SKILL_NORMAL_MARKSMAN, CHARA_PLAYER) + 1)
					dmghp tc, dmg, cc, SKILL_RESDMG_CRUSH, 1000
				}
				mapitem_fire dx, dy
			loop
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_PIERCING_ZERO_SHOOT | _switch_sw ) {
		_switch_sw = 0
		if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
			tc = cdata(CDATA_TARGET, cc)
			gosub *act_melee
			goto *effect_end
		}
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( cc == CHARA_PLAYER ) {
			cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) = 0
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		zero2 = 200
		motox = cdata(CDATA_X, cc)
		motoy = cdata(CDATA_Y, cc)
		efid = SKILL_SPACT_SHADOW_STEP
		gosub *effect
		gosub *FindRangeWeapon
		if ( stat == 1 ) {
			if ( ammo == (-1) ) {
				goto *effect_end
			}
			cdata(CDATA_GAUGE_COOLDOWN, cc) = 1
			gdata(GDATA_TEMPORARY_FLAGS3) = 1500
			attackrange = 1
			extraattack = 0
			gosub *act_attack
			if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
				if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
					skillexp SKILL_NORMAL_MARKSMAN, cc, 400
					if ( attackskill == SKILL_WEAPON_BOW ) {
						skillexp SKILL_WEAPON_BOW, cc, 400
					}
					if ( attackskill == SKILL_WEAPON_FIREARM ) {
						skillexp SKILL_WEAPON_FIREARM, cc, 400
					}
					if ( attackskill == SKILL_WEAPON_CROSSBOW ) {
						skillexp SKILL_WEAPON_CROSSBOW, cc, 400
					}
				}
			}
			if ( cc == CHARA_PLAYER | cc != gdata(GDATA_RIDER) ) {
				if ( cdata(CDATA_IN_TAGTEAM, cc) != 1 ) {
					if ( rnd(2) == 0 ) {
						cdata(CDATA_X_NEW, cc) = cdata(CDATA_X, tc) + cdata(CDATA_AI_DISTANCE, cc)
					}
					else {
						cdata(CDATA_X_NEW, cc) = cdata(CDATA_X, tc) - cdata(CDATA_AI_DISTANCE, cc)
					}
					if ( rnd(2) == 0 ) {
						cdata(CDATA_Y_NEW, cc) = cdata(CDATA_Y, tc) + cdata(CDATA_AI_DISTANCE, cc)
					}
					else {
						cdata(CDATA_Y_NEW, cc) = cdata(CDATA_Y, tc) - cdata(CDATA_AI_DISTANCE, cc)
					}
					cell_check cdata(CDATA_X_NEW, cc), cdata(CDATA_Y_NEW, cc)
					if ( cellaccess != 1 | cc == CHARA_PLAYER | cdata(CDATA_IN_TAGTEAM, cc) == (-1) ) {
						cdata(CDATA_X_NEW, cc) = motox
						cdata(CDATA_Y_NEW, cc) = motoy
					}
					ccprev = cc
					gosub *procMove
					cc = ccprev
				}
			}
			if ( cc == CHARA_PLAYER ) {
				gosub *screen_draw
			}
		}
		zero2 = 0
		gdata(GDATA_TEMPORARY_FLAGS3) = 0
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_SPINNING_THROW | _switch_sw ) {
		_switch_sw = 0
		if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
			tc = cdata(CDATA_TARGET, cc)
			gosub *act_melee
			goto *effect_end
		}
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		txtef COLOR_YELLOW
		txt_skillname
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		snd SOUNDLIST_BOLT1
		animeload ANIMATION_FIREWORK, cc
		gosub *FindRangeWeapon
		if ( stat == 1 ) {
			if ( ammo != (-1) ) {
				goto *effect_end
			}
			txtef COLOR_GREEN
			txt lang(name(cc) + "ÇÕïêäÌÇ…ã≠óÛÇ»âÒì]ÇÇ©ÇØÇΩÅI", name(cc) + " increase" + _s(cc) + " the force of the blow through extreme rotation!")
			cdata(CDATA_POWER_GAUGE, cc) -= 100
			if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
				snd SOUNDLIST_POWER
				exgauge = 100
				if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
					gdata(GDATA_TIME_STOP_TIME) = 2
				}
			}
			cdata(CDATA_GAUGE_COOLDOWN, cc) = 1
			ele = SKILL_NONE
			gdata(GDATA_TEMPORARY_FLAGS) = 100
			attackrange = 1
			extraattack = 0
			gosub *act_attack
		}
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				skillexp SKILL_NORMAL_TACTICS, cc, 400
				skillexp SKILL_WEAPON_THROWING, cc, 400
			}
		}
		gdata(GDATA_TEMPORARY_FLAGS) = 0
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_GAUGE_RELEASE | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			goto *effect_end
		}
		if ( cdata(CDATA_POWER_GAUGE, cc) < 98 ) {
			txt_nothinghappens
			return 0
		}
		if ( cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) == 0 ) {
			cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) = 1
			txtef COLOR_GREEN
			txt lang(name(cc) + "ÇÕéüÇÃçUåÇÇ…à”éØÇèWíÜÇ≥ÇπÇΩÅI", "You put all of your strength into the next blow!")
		}
		else {
			cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) = 0
			txt lang(name(cc) + "ÇÕéüÇÃçUåÇÇ…à”éØÇèWíÜÇ≥ÇπÇƒÇ¢ÇΩÇ™ÅAÇ‚Ç¡ÇœÇËÇ‚ÇﬂÇΩÅB", "You decide not to put all of your strength into the next blow.")
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_CHAOS_CHILD, cc
		return 0
	}
	if ( _switch_val == SKILL_SPACT_MANA_SLASH | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( weap == 0 ) {
			weap = sdata(SKILL_WEAPON_SCYTHE, cc)
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕäôÇ≈ëÂÇ´Ç≠ì„Ç¨ï•Ç¡ÇΩÅI", name(cc) + " mow" + _s(cc) + " " + name(tc) + " down!")
		if ( cdata(CDATA_WEAPON_STYLE_TYPE, tc) == WEAPON_STYLE_SICKLE & cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
			if ( rnd(sdata(SKILL_NORMAL_GREATER_EVASION, tc) + 1000) > rnd(2000) ) {
				txtef COLOR_YELLOW
				txt lang(name(tc) + "ÇÕôÚölÇ…ïêäÌÇ≈" + name(cc) + "ÇÃçUåÇÇíeÇ¢ÇΩÅI", name(tc) + " stop" + _s(tc) + " " + name(cc) + your(cc) + " attack with " + his(tc) + " weapon!")
				snd SOUNDLIST_AMMO
				goto *effect_end
			}
			txtef COLOR_RED
			txt lang(name(tc) + "ÇÕôÚölÇ…ïêäÌÇ≈" + name(cc) + "ÇÃçUåÇÇñhÇ¢ÇæÅI", name(tc) + " fend" + _s(tc) + " off " + name(cc) + your(cc) + " attack with " + his(tc) + " weapon!")
			snd SOUNDLIST_AMMO
			weap = limit(weap - sdata(SKILL_NORMAL_GREATER_EVASION, tc), 1, 2000)
		}
		snd SOUNDLIST_BOLT1
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		dmgmp tc, limit(limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) / 5, 1, cdata(CDATA_MAX_MP, tc) / 2)
		dmghp tc, limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap + 1), cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				skillexp SKILL_NORMAL_TACTICS, cc, 400
				skillexp SKILL_WEAPON_SCYTHE, cc, 400
			}
		}
		eqlv = 0
		eqbui = 0
		cdata(CDATA_GAUGE_COOLDOWN, cc) = 1
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_FLASH_OF_SWIFTNESS | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( weap == 0 ) {
			weap = sdata(SKILL_WEAPON_LONGSWORD, cc)
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕñ⁄Ç…Ç‡Ç∆Ç‹ÇÁÇ ë¨Ç≥Ç≈" + name(tc) + "ÇéaÇËÇ¬ÇØÇΩÅI", name(cc) + " slashed " + name(tc) + " in the blink of an eye!")
		snd SOUNDLIST_THROW1
		if ( cdata(CDATA_WEAPON_STYLE_TYPE, tc) == WEAPON_STYLE_LONGSWORD | cdata(CDATA_WEAPON_STYLE_TYPE, tc) == WEAPON_STYLE_SHORTSWORD | cdata(WEAPON_STYLE_TYPE, tc) == WEAPON_STYLE_SWORDCANE ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
				if ( rnd(sdata(SKILL_NORMAL_GREATER_EVASION, tc) + 1000) > rnd(2000) ) {
					txtef COLOR_YELLOW
					txt lang(name(tc) + "ÇÕôÚölÇ…ïêäÌÇ≈" + name(cc) + "ÇÃçUåÇÇíeÇ¢ÇΩÅI", name(tc) + " stop" + _s(tc) + " " + name(cc) + your(cc) + " attack with " + his(tc) + " weapon!")
					snd SOUNDLIST_AMMO
					goto *effect_end
				}
				txtef COLOR_RED
				txt lang(name(tc) + "ÇÕôÚölÇ…ïêäÌÇ≈" + name(cc) + "ÇÃçUåÇÇñhÇ¢ÇæÅI", name(tc) + " fend" + _s(tc) + " off " + name(cc) + your(cc) + " attack with " + his(tc) + " weapon!")
				snd SOUNDLIST_AMMO
				weap = limit(weap - sdata(SKILL_NORMAL_GREATER_EVASION, tc), 1, 2000)
			}
		}
		snd SOUNDLIST_PUNISH1
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		dmghp tc, limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap + 1), cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
		eqlv = 0
		eqbui = 0
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc | TweakData(52, 2) == 1) != 1 ) {
				if ( cdata(CDATA_WEAPON_STYLE_TYPE, cc) == WEAPON_STYLE_LONGSWORD ) {
					skillexp SKILL_NORMAL_TACTICS, cc, 400
					skillexp SKILL_WEAPON_LONGSWORD, cc, 400
				}
				if ( cdata(CDATA_WEAPON_STYLE_TYPE, cc) == WEAPON_STYLE_SHORTSWORD ) {
					skillexp SKILL_NORMAL_TACTICS, cc, 400
					skillexp SKILL_WEAPON_SHORTSWORD, cc, 400
				}
				if ( cdata(CDATA_WEAPON_STYLE_TYPE, cc) == WEAPON_STYLE_SWORDCANE ) {
					skillexp SKILL_NORMAL_TACTICS, cc, 400
					skillexp SKILL_WEAPON_STAVE, cc, 400
				}
			}
		}
		cdata(CDATA_GAUGE_COOLDOWN, cc) = 1
		if ( cdata(CDATA_POWER_GAUGE, tc) > 0 ) {
			cdata(CDATA_POWER_GAUGE, tc) = cdata(CDATA_POWER_GAUGE, tc) / 2
		}
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_UNDERHAND_DROP | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( weap == 0 ) {
			weap = sdata(SKILL_WEAPON_SHORTSWORD, cc)
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕïêäÌÇãtéËÇ≈êUÇËè„Ç∞ÇÈÇ∆" + name(tc) + "Ç…ê®Ç¢ÇÊÇ≠ìÀÇ´éhÇµÇΩÅI", name(cc) + " hold" + _s(cc) + " " + his(cc) + " weapon overhead in a reverse grip and vigorously stab" + _s(cc) + " " + name(tc) + "!")
		snd SOUNDLIST_THROW1
		if ( cdata(CDATA_WEAPON_STYLE_TYPE, tc) == WEAPON_STYLE_SHORTSWORD2 & cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
			if ( rnd(sdata(SKILL_NORMAL_GREATER_EVASION, tc) + 1000) > rnd(2000) ) {
				txtef COLOR_YELLOW
				txt lang(name(tc) + "ÇÕôÚölÇ…ïêäÌÇ≈" + name(cc) + "ÇÃçUåÇÇíeÇ¢ÇΩÅI", name(tc) + " stop" + _s(tc) + " " + name(cc) + your(cc) + " attack with " + his(tc) + " weapon!")
				snd SOUNDLIST_AMMO
				goto *effect_end
			}
			txtef COLOR_RED
			txt lang(name(tc) + "ÇÕôÚölÇ…ïêäÌÇ≈" + name(cc) + "ÇÃçUåÇÇñhÇ¢ÇæÅI", name(tc) + " fend" + _s(tc) + " off " + name(cc) + your(cc) + " attack with " + his(tc) + " weapon!")
			snd SOUNDLIST_AMMO
			weap = limit(weap - sdata(SKILL_NORMAL_GREATER_EVASION, tc), 1, 2000)
		}
		snd SOUNDLIST_STAB
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		dmghp tc, limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap + 1), cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				skillexp SKILL_NORMAL_TACTICS, cc, 400
				skillexp SKILL_WEAPON_SHORTSWORD, cc, 400
			}
		}
		eqlv = 0
		eqbui = 0
		if ( cdata(CDATA_CONDITION_FEAR, tc) == 0 ) {
			cdata(CDATA_CONDITION_FEAR, tc) = 5
		}
		cdata(CDATA_GAUGE_COOLDOWN, cc) = 1
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_BISECTION | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( weap == 0 ) {
			weap = sdata(SKILL_WEAPON_AXE, cc)
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕèdÇ≥ÇèÊÇπÇΩéaåÇÇ" + name(tc) + "Ç…í@Ç´çûÇÒÇæÅI", name(cc) + " drive" + _s(cc) + " a heavy slash into " + name(tc) + "!")
		if ( cdata(CDATA_WEAPON_STYLE_TYPE, tc) == WEAPON_STYLE_LONGSWORD2 | cdata(CDATA_WEAPON_STYLE_TYPE, tc) == WEAPON_STYLE_AXE ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
				if ( rnd(sdata(SKILL_NORMAL_GREATER_EVASION, tc) + 1000) > rnd(2000) ) {
					txtef COLOR_YELLOW
					txt lang(name(tc) + "ÇÕôÚölÇ…ïêäÌÇ≈" + name(cc) + "ÇÃçUåÇÇíeÇ¢ÇΩÅI", name(tc) + " stop" + _s(tc) + " " + name(cc) + your(cc) + " attack with " + his(tc) + " weapon!")
					snd SOUNDLIST_AMMO
					goto *effect_end
				}
				txtef COLOR_RED
				txt lang(name(tc) + "ÇÕôÚölÇ…ïêäÌÇ≈" + name(cc) + "ÇÃçUåÇÇñhÇ¢ÇæÅI", name(tc) + " fend" + _s(tc) + " off " + name(cc) + your(cc) + " attack with " + his(tc) + " weapon!")
				snd SOUNDLIST_AMMO
				weap = limit(weap - sdata(SKILL_NORMAL_GREATER_EVASION, tc), 1, 2000)
			}
		}
		snd SOUNDLIST_BOLT1
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		dmghp tc, limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap + 1), cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				if ( cdata(CDATA_WEAPON_STYLE_TYPE, cc) == WEAPON_STYLE_LONGSWORD2 ) {
					skillexp SKILL_NORMAL_TACTICS, cc, 400
					skillexp SKILL_WEAPON_LONGSWORD, cc, 400
				}
				if ( cdata(CDATA_WEAPON_STYLE_TYPE, cc) == WEAPON_STYLE_AXE ) {
					skillexp SKILL_NORMAL_TACTICS, cc, 400
					skillexp SKILL_WEAPON_AXE, cc, 400
				}
			}
		}
		eqlv = 0
		eqbui = 0
		if ( cdata(CDATA_CONDITION_BLEED, tc) < 15 ) {
			cdata(CDATA_CONDITION_BLEED, tc) = 15
		}
		cdata(CDATA_GAUGE_COOLDOWN, cc) = 1
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_ARROW_RAIN | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( weap == 0 ) {
			weap = sdata(SKILL_WEAPON_BOW, cc)
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕñÓÇë©ÇÀÇƒè„ãÛÇ÷ï˙Ç¡ÇΩÅI", name(cc) + " shoot" + _s(cc) + " a bundle of arrows into the sky!")
		repeat 8
			snd SOUNDLIST_BOW1
			await 50
		loop
		txtef COLOR_GREEN
		txt lang("ñÓÇ™" + name(tc) + "ÇÃé¸àÕÇ÷ëÍÇÃî@Ç≠ç~ÇËíçÇ¢ÇæÅB", "Arrows rain down on " + name(tc) + " like a waterfall!")
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		tcbk = tc
		animeid = ANIMATION_ARROW_RAIN
		anic = tc
		gosub *anime
		animeid = ANIMATION_ARROW_RAIN
		anic = tc
		gosub *anime
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cc) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cnt != tcbk ) {
				if ( cc < MAX_CHARA_FOLLOWER ) {
					if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
						continue
					}
				}
				if ( cc >= MAX_CHARA_FOLLOWER ) {
					if ( cdata(CDATA_RELATION_ORG, cnt) == cdata(CDATA_RELATION_ORG, cc) | cdata(CDATA_RELATION, cnt) == cdata(CDATA_RELATION, cc) | (cdata(CDATA_RELATION, cc) >= (-1) & cdata(CDATA_RELATION, cnt) >= (-1)) ) {
						continue
					}
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, tcbk), cdata(CDATA_Y, tcbk), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_SWARM) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, tcbk), cdata(CDATA_Y, tcbk), dx, dy) == 0 ) {
				continue
			}
			weap = sdata(SKILL_WEAPON_BOW, cc)
			if ( rnd(sdata(SKILL_NORMAL_GREATER_EVASION, tc) + 1000) > rnd(4000) & cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
				txtef COLOR_RED
				txt lang(name(tc) + "ÇÕôÚölÇ…" + name(cc) + "ÇÃçUåÇÇñhÇ¢ÇæÅI", name(tc) + " fend" + _s(tc) + " off " + name(cc) + your(cc) + " attack!")
				snd SOUNDLIST_AMMO
				weap = limit(weap * 2 - sdata(SKILL_NORMAL_GREATER_EVASION, tc), 2, 4000) / 2
			}
			dmghp tc, limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap + 1), cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
			if ( cdata(CDATA_CONDITION_WINCE, tc) < 2 ) {
				cdata(CDATA_CONDITION_WINCE, tc) = 2
				if ( synccheck(tc, -1) ) {
					txtmore
					txtef COLOR_PURPLE
					txt lang(name(tc) + "ÇÕãØÇÒÇæÅB", name(tc) + " " + was(tc) + " frightened.")
				}
			}
		loop
		eqlv = 0
		eqbui = 0
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				skillexp SKILL_NORMAL_MARKSMAN, cc, 400
				skillexp SKILL_WEAPON_BOW, cc, 400
			}
		}
		cdata(CDATA_GAUGE_COOLDOWN, cc) = 1
		weap = 0
		tc = tcbk
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_HELM_SMASHER | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( weap == 0 ) {
			weap = sdata(SKILL_WEAPON_CROSSBOW, cc)
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕñÓÇë©ÇÀÇƒ" + name(tc) + "ÇÃì™ïîÇ÷ï˙Ç¡ÇΩÅI", name(cc) + " fire" + _s(cc) + " a bundle of bolts at " + name(tc) + your(tc) + " head!")
		snd SOUNDLIST_BOLT1
		animeload 62, tc
		snd SOUNDLIST_STAB
		if ( rnd(sdata(SKILL_NORMAL_GREATER_EVASION, tc) + 1000) > rnd(4000) & cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
			txtef COLOR_RED
			txt lang(name(tc) + "ÇÕôÚölÇ…" + name(cc) + "ÇÃçUåÇÇñhÇ¢ÇæÅI", name(tc) + " fend" + _s(tc) + " off " + name(cc) + your(cc) + " attack!")
			snd SOUNDLIST_AMMO
			weap = limit(weap * 2 - sdata(SKILL_NORMAL_GREATER_EVASION, tc), 2, 4000) / 2
		}
		animeload ANIMATION_OFFER, tc
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		dmghp tc, limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap + 1), cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				skillexp SKILL_NORMAL_MARKSMAN, cc, 400
				skillexp SKILL_WEAPON_CROSSBOW, cc, 400
			}
		}
		eqlv = 0
		eqbui = 0
		if ( cdata(CDATA_CONDITION_PARALYZE, tc) < 2 ) {
			cdata(CDATA_CONDITION_PARALYZE, tc) = 2
			if ( synccheck(tc, -1) ) {
				txtmore
				txtef COLOR_PURPLE
				txt lang(name(tc) + "ÇÕñÉ·ÉÇµÇΩÅB", name(tc) + " " + is(tc) + " paralyzed.")
			}
		}
		cdata(CDATA_GAUGE_COOLDOWN, cc) = 1
		weap = 0
		if ( cdata(CDATA_HP, tc) >= 0 ) {
			if ( cdata(CDATA_HP, tc) < cdata(CDATA_MAX_HP, tc) / 8 ) {
				attackskill = SKILL_WEAPON_FIREARM
				efid = SKILL_SPACT_DECAPITATION2
				gosub *effect
			}
		}
		attackskill = SKILL_WEAPON_CROSSBOW
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_IMPACT_GUNFIRE | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( weap == 0 ) {
			weap = sdata(SKILL_WEAPON_FIREARM, cc)
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕîΩìÆÇ…îıÇ¶Ç»Ç™ÇÁ" + name(tc) + "Ç÷î≠ñCÇµÇΩÅI", name(cc) + " brace" + _s(cc) + " for recoil and fire" + _s(cc) + " at " + name(tc) + "!")
		snd SOUNDLIST_GUNSHOT3
		if ( rnd(sdata(SKILL_NORMAL_GREATER_EVASION, tc) + 1000) > rnd(4000) & cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
			txtef COLOR_RED
			txt lang(name(tc) + "ÇÕôÚölÇ…" + name(cc) + "ÇÃçUåÇÇñhÇ¢ÇæÅI", name(tc) + " fend" + _s(tc) + " off " + name(cc) + your(cc) + " attack!")
			snd SOUNDLIST_AMMO
			weap = limit(weap * 2 - sdata(SKILL_NORMAL_GREATER_EVASION, tc), 2, 4000) / 2
		}
		animeload ANIMATION_UNISON_IMPACT1, tc
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		dmghp tc, limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap + 1), cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				skillexp SKILL_NORMAL_MARKSMAN, cc, 400
				skillexp SKILL_WEAPON_FIREARM, cc, 400
			}
		}
		eqlv = 0
		eqbui = 0
		if ( cdata(CDATA_CONDITION_INVERT, tc) < 2 ) {
			cdata(CDATA_CONDITION_INVERT, tc) = 2
		}
		if ( synccheck(tc, -1) ) {
			txtmore
			txtef COLOR_PURPLE
			txt lang(name(tc) + "ÇÕì]ì|ÇµÇΩÅB", name(tc) + " " + was(tc) + " knocked down.")
		}
		cdata(CDATA_GAUGE_COOLDOWN, cc) = 1
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_ONE_POINT_SHOOT | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( weap == 0 ) {
			weap = sdata(SKILL_WEAPON_FIREARM, cc)
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕê≥ämñ≥î‰Ç…" + name(tc) + "Ç÷íeä€Çï˙Ç¡ÇΩÅI", name(cc) + " fire" + _s(cc) + " a bullet at " + name(tc) + " with perfect accuracy!")
		snd SOUNDLIST_GUNSHOT1
		await 300
		snd SOUNDLIST_GUNSHOT1
		await 300
		snd SOUNDLIST_GUNSHOT1
		if ( rnd(sdata(SKILL_NORMAL_GREATER_EVASION, tc) + 1000) > rnd(4000) & cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
			txtef COLOR_RED
			txt lang(name(tc) + "ÇÕôÚölÇ…" + name(cc) + "ÇÃçUåÇÇñhÇ¢ÇæÅI", name(tc) + " fend" + _s(tc) + " off " + name(cc) + your(cc) + " attack!")
			snd SOUNDLIST_AMMO
			weap = limit(weap * 2 - sdata(SKILL_NORMAL_GREATER_EVASION, tc), 2, 4000) / 2
		}
		animeload ANIMATION_MP_BREATH, tc
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		dmghp tc, limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap + 1), cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				skillexp SKILL_NORMAL_MARKSMAN, cc, 400
				skillexp SKILL_WEAPON_FIREARM, cc, 400
			}
		}
		eqlv = 0
		eqbui = 0
		if ( cdata(CDATA_PROT_PENALTY, tc) < 3 ) {
			cdata(CDATA_PROT_PENALTY, tc) = 3
		}
		cdata(CDATA_GAUGE_COOLDOWN, cc) = 1
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_CRITICAL_PARTICLE_CANNON | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		ele = SKILL_RES_FIRE
		repeat MAX_SKILL_RESIST - STARTING_SKILL_RESIST, STARTING_SKILL_RESIST
			if ( sdata(cnt, cc) >= sdata(ele, cc) ) {
				ele = cnt
			}
		loop
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕó±éqÇÃñzó¨Çï˙Ç¡ÇΩÅI", name(cc) + " fire" + _s(cc) + " a particle beam!")
		animeid = ANIMATION_PARTICLE_CANNON
		gosub *anime
		ele = SKILL_NONE
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		get_route cdata(CDATA_X, cc), cdata(CDATA_Y, cc), cdata(CDATA_X, tc), cdata(CDATA_Y, tc)
		if ( stat == 0 ) {
			goto *effect_end
		}
		dx = cdata(CDATA_X, cc)
		dy = cdata(CDATA_Y, cc)
		repeat 20
			route_info dx, dy, cnt
			if ( stat == 0 ) {
				break
			}
			else {
				if ( stat == (-1) ) {
					continue
				}
			}
			if ( dist(dx, dy, cdata(CDATA_X, cc), cdata(CDATA_Y, cc)) > sdataref(SKILL_DATAREF_TG_RANGE, efid) \ EXT_SDATAREF + 1 ) {
				break
			}
			if ( dx == cdata(CDATA_X, cc) & dy == cdata(CDATA_Y, cc) ) {
				continue
			}
			if ( map(dx, dy, 1) != 0 ) {
				tc = map(dx, dy, 1) - 1
				if ( cc != tc ) {
					weap = sdata(SKILL_WEAPON_FIREARM, cc)
					if ( weap < 0 ) {
						weap = 1
					}
					if ( cc < MAX_CHARA_FOLLOWER ) {
						if ( cdata(CDATA_RELATION, tc) != (-3) ) {
							continue
						}
					}
					if ( cc >= MAX_CHARA_FOLLOWER ) {
						if ( cdata(CDATA_RELATION_ORG, tc) == cdata(CDATA_RELATION_ORG, cc) | cdata(CDATA_RELATION, tc) == cdata(CDATA_RELATION, cc) | (cdata(CDATA_RELATION, cc) >= (-1) & cdata(CDATA_RELATION, tc) >= (-1)) ) {
							continue
						}
					}
					if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
						if ( tc != CHARA_PLAYER ) {
							if ( rnd(cdata(CDATA_HP, tc) + 1) < rnd(cdata(CDATA_HP, cdata(CDATA_TAGTEAM_PARTNER, tc)) + 1) ) {
								tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
							}
							txt_guard
						}
					}
					if ( rnd(sdata(SKILL_NORMAL_GREATER_EVASION, tc) + 1000) > rnd(4000) & cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
						txtef COLOR_RED
						txt lang(name(tc) + "ÇÕôÚölÇ…" + name(cc) + "ÇÃçUåÇÇñhÇ¢ÇæÅI", name(tc) + " fend" + _s(tc) + " off " + name(cc) + your(cc) + " attack!")
						snd SOUNDLIST_AMMO
						weap = limit(weap * 2 - sdata(SKILL_NORMAL_GREATER_EVASION, tc), 2, 4000) / 2
					}
					dmghp tc, limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap + 1), cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
					if ( cdata(CDATA_CONDITION_BLIND, tc) < 2 ) {
						cdata(CDATA_CONDITION_BLIND, tc) = 2
					}
				}
			}
		loop
		weap = 0
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				skillexp SKILL_NORMAL_MARKSMAN, cc, 400
				skillexp SKILL_WEAPON_FIREARM, cc, 400
			}
		}
		eqlv = 0
		eqbui = 0
		cdata(CDATA_GAUGE_COOLDOWN, cc) = 1
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_PULVERIZATION | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( weap == 0 ) {
			weap = sdata(SKILL_WEAPON_BLUNT, cc)
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕóÕîCÇπÇÃçãâıÇ»àÍåÇÇ" + name(tc) + "Ç…í@Ç´çûÇÒÇæÅI", name(cc) + " drive" + _s(cc) + " a heroic blow into " + name(tc) + " with all " + his(cc) + " might!")
		snd SOUNDLIST_THROW1
		if ( cdata(CDATA_WEAPON_STYLE_TYPE, tc) == WEAPON_STYLE_BLUDGEON & cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
			if ( rnd(sdata(SKILL_NORMAL_GREATER_EVASION, tc) + 1000) > rnd(2000) ) {
				txtef COLOR_YELLOW
				txt lang(name(tc) + "ÇÕôÚölÇ…ïêäÌÇ≈" + name(cc) + "ÇÃçUåÇÇíeÇ¢ÇΩÅI", name(tc) + " stop" + _s(tc) + " " + name(cc) + your(cc) + " attack with " + his(tc) + " weapon!")
				snd SOUNDLIST_AMMO
				goto *effect_end
			}
			txtef COLOR_RED
			txt lang(name(tc) + "ÇÕôÚölÇ…ïêäÌÇ≈" + name(cc) + "ÇÃçUåÇÇñhÇ¢ÇæÅI", name(tc) + " fend" + _s(tc) + " off " + name(cc) + your(cc) + " attack with " + his(tc) + " weapon!")
			snd SOUNDLIST_AMMO
			weap = limit(weap - sdata(SKILL_NORMAL_GREATER_EVASION, tc), 1, 2000)
		}
		snd SOUNDLIST_CRUSH1
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		dmghp tc, limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap + 1), cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				skillexp SKILL_NORMAL_TACTICS, cc, 400
				skillexp SKILL_WEAPON_BLUNT, cc, 400
			}
		}
		eqlv = 0
		eqbui = 0
		cdata(CDATA_PROT_PENALTY, tc) = 4
		cdata(CDATA_GAUGE_COOLDOWN, cc) = 1
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_PENETRATION | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( weap == 0 ) {
			weap = sdata(SKILL_WEAPON_POLEARM, cc)
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕàÍì_Ç…ë_Ç¢ÇíËÇﬂ" + name(tc) + "ÇìÀÇ´éhÇµÇΩÅI", name(cc) + " aim" + _s(cc) + " at one point and pierce" + _s(cc) + " " + name(tc) + "!")
		if ( cdata(CDATA_WEAPON_STYLE_TYPE, tc) == WEAPON_STYLE_POLEARM | cdata(CDATA_WEAPON_STYLE_TYPE, tc) == WEAPON_STYLE_STAVE ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
				if ( rnd(sdata(SKILL_NORMAL_GREATER_EVASION, tc) + 1000) > rnd(2000) ) {
					txtef COLOR_YELLOW
					txt lang(name(tc) + "ÇÕôÚölÇ…ïêäÌÇ≈" + name(cc) + "ÇÃçUåÇÇíeÇ¢ÇΩÅI", name(tc) + " stop" + _s(tc) + " " + name(cc) + your(cc) + " attack with " + his(tc) + " weapon!")
					snd SOUNDLIST_AMMO
					goto *effect_end
				}
				txtef COLOR_RED
				txt lang(name(tc) + "ÇÕôÚölÇ…ïêäÌÇ≈" + name(cc) + "ÇÃçUåÇÇñhÇ¢ÇæÅI", name(tc) + " fend" + _s(tc) + " off " + name(cc) + your(cc) + " attack with " + his(tc) + " weapon!")
				snd SOUNDLIST_AMMO
				weap = limit(weap - sdata(SKILL_NORMAL_GREATER_EVASION, tc), 1, 2000)
			}
		}
		snd SOUNDLIST_PUNISH1
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		dmghp tc, limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap + 1), cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				if ( cdata(CDATA_WEAPON_STYLE_TYPE, cc) == WEAPON_STYLE_POLEARM ) {
					skillexp SKILL_NORMAL_TACTICS, cc, 400
					skillexp SKILL_WEAPON_POLEARM, cc, 400
				}
				if ( cdata(CDATA_WEAPON_STYLE_TYPE, cc) == WEAPON_STYLE_STAVE ) {
					skillexp SKILL_NORMAL_TACTICS, cc, 400
					skillexp SKILL_WEAPON_STAVE, cc, 400
				}
			}
		}
		eqlv = 0
		eqbui = 0
		if ( cdata(CDATA_CONDITION_DIM, tc) < 10 ) {
			cdata(CDATA_CONDITION_DIM, tc) = 10
		}
		cdata(CDATA_GAUGE_COOLDOWN, cc) = 1
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_DANCE_OF_BLOW | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( weap == 0 ) {
			weap = sdata(SKILL_WEAPON_MARTIAL_ARTS, cc)
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕ" + name(tc) + "Ç…ì{ììÇÃòAë±çUåÇÇédä|ÇØÇΩÅI", name(cc) + " hit" + _s(cc) + " " + name(tc) + " with a furious succession of attacks!")
		if ( cdata(CDATA_WEAPON_STYLE_TYPE, tc) == WEAPON_STYLE_STAVE2 & cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
			if ( rnd(sdata(SKILL_NORMAL_GREATER_EVASION, tc) + 1000) > rnd(2000) ) {
				txtef COLOR_YELLOW
				txt lang(name(tc) + "ÇÕôÚölÇ…ïêäÌÇ≈" + name(cc) + "ÇÃçUåÇÇíeÇ¢ÇΩÅI", name(tc) + " stop" + _s(tc) + " " + name(cc) + your(cc) + " attacks with " + his(tc) + " weapon!")
				snd SOUNDLIST_AMMO
				goto *effect_end
			}
			txtef COLOR_RED
			txt lang(name(tc) + "ÇÕôÚölÇ…ïêäÌÇ≈" + name(cc) + "ÇÃçUåÇÇñhÇ¢ÇæÅI", name(tc) + " fend" + _s(tc) + " off " + name(cc) + your(cc) + " attacks with " + his(tc) + " weapon!")
			snd SOUNDLIST_AMMO
			weap = limit(weap - sdata(SKILL_NORMAL_GREATER_EVASION, tc), 1, 2000)
		}
		gdata(GDATA_TEMPORARY_FLAGS2) = 1000
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		repeat 17
			if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
				continue
			}
			animeid = ANIMATION_ATTACK
			gosub *anime
			snd SOUNDLIST_ATK2
			dmghp tc, limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 16, 2500) / 16 * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap / 10 + 1), cc, SKILL_SPACT_DANCE_OF_BLOW
		loop
		eqlv = 0
		eqbui = 0
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				skillexp SKILL_NORMAL_TACTICS, cc, 400
				skillexp SKILL_WEAPON_STAVE, cc, 400
			}
		}
		snd SOUNDLIST_BOLT1
		cdata(CDATA_EVASION_PENALTY, tc) = 5
		cdata(CDATA_GAUGE_COOLDOWN, cc) = 1
		weap = 0
		gdata(GDATA_TEMPORARY_FLAGS2) = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_SHIELD_STRIKE | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		if ( cdata(CDATA_ATTACK_STYLE, cc) & STYLE_SHIELD ) {
			cdata(CDATA_POWER_GAUGE, cc) -= 100
			if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
				snd SOUNDLIST_POWER
				exgauge = 100
				if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
					gdata(GDATA_TIME_STOP_TIME) = 2
				}
			}
			txtef COLOR_YELLOW
			txt_skillname
			if ( weap == 0 ) {
				weap = sdata(SKILL_NORMAL_SHIELD, cc)
			}
			snd SOUNDLIST_ENC
			animeload ANIMATION_UNISON_IMPACT2, cc
			customtalk cc, DBMODE_FLAVOR_SPECIAL
			gosub *convert_word
			if ( synccheck(cc, -1) ) {
				txt lang(name(cc) + "ÇÕèÇÇ≈" + name(tc) + "Çâ£ÇËÇ¬ÇØÇΩÅB", name(cc) + " bash" + _s(cc) + " " + name(tc) + " with " + his(cc) + " shield.")
			}
			if ( cdata(CDATA_ATTACK_STYLE, tc) & STYLE_SHIELD & cdata(CDATA_SHIELD_STYLE_TYPE, tc) == SHIELD_STYLE_NORMAL & cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
				txtef COLOR_RED
				txt lang(name(tc) + "ÇÕôÚölÇ…ëïîıÇµÇΩèÇÇ≈" + name(cc) + "ÇÃçUåÇÇñhÇ¢ÇæÅI", name(tc) + " fend" + _s(tc) + " off " + name(cc) + your(cc) + " attack with " + his(tc) + " shield!")
				snd SOUNDLIST_AMMO
				weap = limit(sdata(SKILL_NORMAL_SHIELD, cc) - sdata(SKILL_NORMAL_SHIELD, tc) - sdata(SKILL_NORMAL_GREATER_EVASION, tc), 1, 2000)
			}
			snd SOUNDLIST_BASH1
			inv_getheader cc
			eqlv = 1
			eqbui = 0
			repeat invrange, invhead
				if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
					continue
				}
				eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
				eqbui++
			loop
			if ( eqlv <= 0 ) {
				eqlv = 1
			}
			if ( eqbui <= 0 ) {
				eqbui = 1
			}
			eqlv = limit(eqlv / eqbui * 3, 3, 30)
			dmghp tc, limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 2, 2500) / 2 * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap + 1), cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
			dmgcon tc, CONDITION_DIM, 50 + int(sqrt(sdata(SKILL_NORMAL_SHIELD, cc))) * 15 + cbit(CHARA_BIT_BREAK_WALLS, cc) * 30
			if ( cdata(CDATA_CONDITION_PARALYZE, tc) == 0 ) {
				cdata(CDATA_CONDITION_PARALYZE, tc) += rnd(2) + cbit(CHARA_BIT_BREAK_WALLS, cc)
			}
			if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
				if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
					skillexp SKILL_NORMAL_TACTICS, cc, 400
					skillexp SKILL_NORMAL_SHIELD, cc, 400
				}
			}
			weap = 0
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_EXPLOSION | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( weap == 0 ) {
			weap = sdata(SKILL_WEAPON_MARTIAL_ARTS, cc)
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕì¨éuÇã…å¿Ç…Ç‹Ç≈çÇÇﬂ" + name(tc) + "Ç…ë≈ÇøçûÇÒÇæÅI", name(cc) + " unleash" + _s(cc, 1) + " the utmost limit of " + his(cc) + " fighting spirit and pummel" + _s(cc) + " " + name(tc) + "!")
		if ( exgauge != 100 ) {
			if ( cdata(CDATA_WEAPON_STYLE_TYPE, tc) == 0 ) {
				if ( cdata(CDATA_SHIELD_STYLE_TYPE, tc) == 0 ) {
					if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
						if ( rnd(sdata(SKILL_NORMAL_GREATER_EVASION, tc) + 1000) > rnd(2000) ) {
							txtef COLOR_YELLOW
							txt lang(name(tc) + "ÇÕôÚölÇ…ì¨ãCÇÇ‘Ç¬ÇØ" + name(cc) + "ÇÃçUåÇÇéÛÇØé~ÇﬂÇΩÅI", name(tc) + " stop" + _s(tc) + " " + name(cc) + your(cc) + " attack with " + his(tc) + " own unleashed fighting spirit!")
							snd SOUNDLIST_PUNISH1
							goto *effect_end
						}
						txtef COLOR_RED
						txt lang(name(tc) + "ÇÕôÚölÇ…ì¨ãCÇÇ‘Ç¬ÇØ" + name(cc) + "ÇÃçUåÇÇàÌÇÁÇµÇΩÅI", name(tc) + " fend" + _s(tc) + " off " + name(cc) + your(cc) + " attack with " + his(tc) + " own unleashed fighting spirit!")
						snd SOUNDLIST_PUNISH1
						weap = limit(weap - sdata(SKILL_NORMAL_GREATER_EVASION, tc), 1, 2000)
					}
				}
			}
		}
		snd SOUNDLIST_PUNISH1
		animeload ANIMATION_UNISON_IMPACT1, tc
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		cdata(444, cc) = limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap + 1)
		if ( TweakData(50, 4) > 0 & cdata(444, cc) >= cdata(CDATA_HP, tc) ) {
			txtef COLOR_YELLOW
			switch TweakData(50, 4)
				case 1
					txt "ÅuÇ®ëOÇÕÇ‡Ç§éÄÇÒÇ≈Ç¢ÇÈÅBÅv"
					swbreak
				case 2
					txt cnvtalk("You are already dead.")
					swbreak
				default
					txt cnvtalk("Omae wa mou shindeiru.")
					swbreak
			swend
			msg_halt
		}
		dmghp tc, cdata(444, cc), cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				skillexp SKILL_NORMAL_TACTICS, cc, 400
				skillexp SKILL_WEAPON_MARTIAL_ARTS, cc, 400
			}
		}
		eqlv = 0
		eqbui = 0
		cdata(CDATA_POWER_GAUGE, cc) += 16
		cdata(CDATA_GAUGE_COOLDOWN, cc) = 1
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_RESTORE_SPIRIT | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_SPELL_RESTORE_BODY | _switch_sw ) {
		_switch_sw = 0
		if ( efstatus <= (-1) ) {
			if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE ) {
				txt_nothinghappens
				goto *effect_end
			}
		}
		if ( efid == SKILL_SPELL_RESTORE_BODY ) {
			healsp tc, 3
			if ( synccheck(tc, -1) ) {
				if ( efstatus <= (-1) ) {
					snd SOUNDLIST_CURSE3
					txt lang(name(tc) + "ÇÃì˜ëÃÇÕêIÇ‹ÇÍÇΩÅB", name(tc) + your(tc) + " body is damaged.")
				}
				else {
					txt lang(name(tc) + "ÇÃì˜ëÃÇÕïúäàÇµÇΩÅB", name(tc) + your(tc) + " body is restored.")
					animeload ANIMATION_BLOOD, tc
				}
				if ( efstatus >= 1 ) {
					txt lang("Ç≥ÇÁÇ…ÅA" + name(tc) + "ÇÃì˜ëÃÇÕã≠âªÇ≥ÇÍÇΩÅB", "In addition, " + his(tc) + " body is enhanced.")
					animeload ANIMATION_BLOOD, tc
				}
			}
			p = 10, 11, 12, 17, 18, -1
		}
		if ( efid == SKILL_SPELL_RESTORE_SPIRIT ) {
			if ( cdata(CDATA_POWER_GAUGE, tc) < 50 ) {
				cdata(CDATA_POWER_GAUGE, tc) += 4
			}
			if ( synccheck(tc, -1) ) {
				if ( efstatus <= (-1) ) {
					snd SOUNDLIST_CURSE3
					txt lang(name(tc) + "ÇÃê∏ê_ÇÕêIÇ‹ÇÍÇΩÅB", name(tc) + your(tc) + " spirit is damaged.")
				}
				else {
					txt lang(name(tc) + "ÇÃê∏ê_ÇÕïúäàÇµÇΩÅB", name(tc) + your(tc) + " spirit is restored.")
					animeload ANIMATION_BLOOD, tc
				}
				if ( efstatus >= 1 ) {
					txt lang("Ç≥ÇÁÇ…ÅA" + name(tc) + "ÇÃê∏ê_ÇÕã≠âªÇ≥ÇÍÇΩÅB", "In addition, " + his(tc) + " spirit is enhanced.")
					animeload ANIMATION_BLOOD, tc
				}
			}
			p = SKILL_ATTR_LER, SKILL_ATTR_PER, SKILL_ATTR_MAG, SKILL_ATTR_WIL, SKILL_ATTR_LUC, -1
		}
		repeat
			if ( p(cnt) == (-1) ) {
				break
			}
			i = p(cnt) + STARTING_CDATA_ATTR - STARTING_SKILL_ATTR
			if ( efstatus <= (-1) ) {
				if ( cdata(CDATA_QUALITY, tc) <= FIX_QUALITY_GREAT ) {
					cdata(i, tc) -= rnd(sorg(p(cnt), tc)) / 5 + rnd(5)
					continue
				}
			}
			if ( cdata(i, tc) < 0 ) {
				cdata(i, tc) = 0
			}
			if ( efstatus >= 1 ) {
				cdata(i, tc) = sorg(p(cnt), tc) / 10 + 5
			}
		loop
		r1 = tc
		gosub *charaRefresh
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_WISH | _switch_sw ) {
		_switch_sw = 0
		if ( gdata(GDATA_AREA) == AREA_SHOW_HOUSE ) {
			if ( cc != CHARA_PLAYER ) {
				txt_nothinghappens
				goto *effect_end
			}
		}
		if ( gdata(GDATA_AREA) == AREA_CHAOS_CRADLE & gdata(GDATA_LEVEL) == 179 ) {
			txtef COLOR_PURPLE
			txt lang("äËÇ¢ÇÃèóê_ÇÃóÕÇ‡ÅAÇ±Ç±Ç…ìÕÇ©Ç»Ç¢ÇÊÇ§ÇæÅcÅB", "The power of the Wish Goddess does not seem to reach here...")
			goto *effect_end
		}
		gdata(GDATA_FLAG_WISHES_MADE)++
		gosub *com_wish
		screenupdate = -1
		gosub *screen_refresh
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_ESCAPE | _switch_sw ) {
		_switch_sw = 0
		if ( tc != CHARA_PLAYER ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		if ( gdata(GDATA_AREA) == AREA_REMIDO & gdata(GDATA_LEVEL) == 129 ) {
			txt lang("Ç±ÇÃäKëwÇ≈ÇÕíEèoÇ™èoóàÇ»Ç¢ÇÊÇ§ÇæÅB", "This floor gradually loses power.")
			obvious = 0
			goto *effect_end
		}
		if ( gdata(GDATA_FLAG_MAIN) >= 715 & gdata(GDATA_FLAG_MAIN) < 760 & gdata(GDATA_AREA) == AREA_CHAOS_CRADLE & gdata(GDATA_LEVEL) == 179 ) {
			snd SOUNDLIST_FAIL1
			txt lang("ñ≥óÕâªÇµÇ»Ç¢Ç∆ìzÇ™ê_ÇÃä‘Ç©ÇÁèoÇƒÇ´ÇƒÇµÇ‹Ç§ÅI", "If you do not weaken the <Chaos Child>, it will come out of God's Prison!")
			obvious = 0
			goto *effect_end
		}
		if ( gdata(GDATA_RETURN) != 0 ) {
			txt lang("íEèoÇíÜé~ÇµÇΩÅB", "The air around you gradually loses power.")
			gdata(GDATA_RETURN) = 0
		}
		else {
			gosub *check_return
			if ( stat == 1 ) {
				txt lang("àÀóäêøïâíÜÇÃíEèoÇÕñ@ó•Ç≈ã÷é~Ç≥ÇÍÇƒÇ¢ÇÈÅBÇªÇÍÇ≈Ç‡íEèoÇ∑ÇÈÅH", "Returning while taking a quest is forbidden. Are you sure you want to return?")
				promptYesNo
				if ( rtval != 0 ) {
					goto *effect_end
				}
			}
			txt lang("é¸àÕÇÃëÂãCÇ™Ç¥ÇÌÇﬂÇ´ÇæÇµÇΩÅB", "The air around you becomes charged.")
			if ( adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_RANDOM_DUNGEON ) {
				if ( gdata(GDATA_LEVEL) == adata(ADATA_MAX_LEVEL, gdata(GDATA_AREA)) ) {
					if ( adata(ADATA_BOSS, gdata(GDATA_AREA)) != (-1) ) {
						txt lang("Ç±ÇÃÇ‹Ç‹É_ÉìÉWÉáÉìÇèoÇÈÇ∆ÅAÇ±ÇÃäKÇÃÉNÉGÉXÉgÇÕíBê¨Ç≈Ç´Ç»Ç¢Åc", "The lord of the dungeon might disappear if you escape now.")
					}
				}
			}
			gdata(GDATA_TELEPORT_AREA) = gdata(GDATA_WORLD), 1
			if ( efstatus <= (-1) ) {
				if ( gdata(GDATA_WORLD) != AREA_LOST_YLVA ) {
					if ( rnd(3) == 0 ) {
						gdata(GDATA_TELEPORT_AREA) = AREA_JAIL, 1
					}
				}
			}
			gdata(GDATA_RETURN) = 5 + rnd(10)
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_RETURN | _switch_sw ) {
		_switch_sw = 0
		if ( tc != CHARA_PLAYER ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		if ( gdata(GDATA_AREA) == AREA_REMIDO & gdata(GDATA_LEVEL) == 129 ) {
			txt lang("Ç±ÇÃäKëwÇ≈ÇÕãAä“Ç™èoóàÇ»Ç¢ÇÊÇ§ÇæÅB", "This floor gradually loses power.")
			obvious = 0
			goto *effect_end
		}
		if ( gdata(GDATA_RETURN) != 0 ) {
			txt lang("ãAä“ÇíÜé~ÇµÇΩÅB", "The air around you gradually loses power.")
			gdata(GDATA_RETURN) = 0
		}
		else {
			gosub *com_return
			if ( efstatus <= (-1) ) {
				if ( gdata(GDATA_WORLD) != AREA_LOST_YLVA ) {
					if ( rnd(3) == 0 ) {
						gdata(GDATA_TELEPORT_AREA) = AREA_JAIL, 1
					}
				}
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_HARVEST_MANA | _switch_sw ) {
		_switch_sw = 0
		if ( tc == CHARA_PLAYER ) {
			healmp tc, efp / 2 + rnd(efp / 2 + 1)
		}
		else {
			healmp tc, cdata(CDATA_MAX_MP, tc) / 10 + rnd(sdata(SKILL_ATTR_MAG, tc)) + 5
		}
		if ( synccheck(tc, -1) ) {
			txt lang(name(tc) + "ÇÃÉ}ÉiÇ™âÒïúÇµÇΩÅB", name(tc) + your(tc) + " mana is restored.")
			animeid = ANIMATION_HEAL
			gosub *anime
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_ABSORB_MAGIC | _switch_sw ) {
		_switch_sw = 0
		healmp tc, role(dice1, dice2, bonus)
		if ( synccheck(tc, -1) ) {
			txt lang(name(tc) + "ÇÕé¸àÕÇ©ÇÁÉ}ÉiÇãzÇ¢éÊÇ¡ÇΩÅB", name(tc) + " absorb" + _s(tc) + " mana from the air.")
			animeid = ANIMATION_HEAL
			gosub *anime
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_GREEN_TEA | _switch_sw ) {
		_switch_sw = 0
		animeid = ANIMATION_HEAL
		gosub *anime
		healcon tc, CONDITION_FEAR, inv(INV_ITEM_LEVEL, ci) * 2 + 15
		healcon tc, CONDITION_POISON, inv(INV_ITEM_LEVEL, ci) * 2 + 15
		healcon tc, CONDITION_CONFUSE, inv(INV_ITEM_LEVEL, ci) * 2 + 15
		healcon tc, CONDITION_DIM, inv(INV_ITEM_LEVEL, ci) * 2 + 15
		healcon tc, CONDITION_PARALYZE, inv(INV_ITEM_LEVEL, ci) * 2 + 15
		healcon tc, CONDITION_SICK, inv(INV_ITEM_LEVEL, ci) + 5
		if ( cdata(CDATA_VOMIT, tc) > 0 ) {
			cdata(CDATA_VOMIT, tc)--
		}
		inv_find ITEM_ID_BIO_BATTERY, tc
		if ( stat == (-1) ) {
			omosa = limit(cdata(CDATA_WEIGHT, tc), 1, 100000000)
			cdata(CDATA_WEIGHT, tc) -= omosa * (inv(INV_ITEM_LEVEL, ci) + 1) / 100 + 1
			if ( cdata(CDATA_WEIGHT, tc) < 0 ) {
				cdata(CDATA_WEIGHT, tc) = 0
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_BLACK_TEA | _switch_sw ) {
		_switch_sw = 0
		animeid = ANIMATION_HEAL
		gosub *anime
		healsp tc, 5
		healmp tc, 5 + (inv(INV_ITEM_LEVEL, ci) + 5) * cdata(CDATA_MAX_MP, tc) / 100
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POISON | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang(name(tc) + "ÇÕì≈ÇóÅÇ—ÇΩÅI", name(tc) + " " + is(tc) + " hit by poison!")
		}
		if ( cbit(CHARA_BIT_PREGNANT, tc) ) {
			cbitmod CHARA_BIT_PREGNANT, tc, 0
			if ( synccheck(tc, -1) ) {
				txt lang(name(tc) + "ÇÃëÃì‡ÇÃàŸï®ÇÕónÇØÇΩÅB", name(tc) + your(tc) + " child melts in " + his(tc) + " stomach.")
			}
			cdata(CDATA_INFANT, tc) = 0
			if ( tc == CHARA_PLAYER ) {
				spact(SKILL_SPACT_PREGNANT - STARTING_SKILL_SPACT) = 0
			}
		}
		dmgcon tc, CONDITION_POISON, efp
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_BLIND | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang(name(tc) + "ÇÕñnÇóÅÇ—ÇΩÅI", "Ink squirts into " + name(tc) + your(tc) + " face!")
		}
		dmgcon tc, CONDITION_BLIND, efp
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_CONFUSE | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang(name(tc) + "ÇÕÇ–Ç«Ç¢ì™í…Ç…Ç®ÇªÇÌÇÍÇΩÅI", "A foul stench floods " + name(tc) + your(tc) + " nostrils!")
		}
		dmgcon tc, CONDITION_CONFUSE, efp
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_PARALYZE | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang(name(tc) + "ÇÕ·ÉÇÍÇΩÅI", name(tc) + " get" + _s(tc) + " numbness!")
		}
		dmgcon tc, CONDITION_PARALYZE, efp
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_SLEEP | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang(name(tc) + "ÇÕä√Ç¢âtëÃÇóÅÇ—ÇΩÅI", "Strange sweet liquid splashes onto " + name(tc) + "!")
		}
		dmgcon tc, CONDITION_SLEEP, efp
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_CURSE | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_EFFECT_CURSE | _switch_sw ) {
		_switch_sw = 0
*spUncurse_cursed
		if ( efid == SKILL_SPACT_CURSE ) {
			if ( synccheck(tc, -1) ) {
				txt lang(name(cc) + "ÇÕ" + name(tc) + "Çéwç∑ÇµÇƒéÙÇ¢ÇÃåæótÇôÍÇ¢ÇΩÅB", name(cc) + " point" + _s(cc) + " " + name(tc) + " and mutter" + _s(cc) + " a curse.")
			}
		}
		p = 75 + sdata(SKILL_ATTR_LUC, tc)
		if ( encfind(tc, ENCHANT_RES_CURSE) != (-1) ) {
			p += encfind(tc, ENCHANT_RES_CURSE) / 2
		}
		if ( rnd(p) > efp / 2 + (efstatus <= (-1)) * 100 ) {
			goto *effect_end
		}
		if ( tc < MAX_CHARA_FOLLOWER ) {
			if ( rnd(3) ) {
				if ( trait(TRAIT_NORMAL_OTHER_RES_CURSE) ) {
					txt lang("Ç†Ç»ÇΩÇÕãFìòÇï˘Ç∞éÙÇ¢ÇÃÇ¬Ç‘Ç‚Ç´Çñ≥å¯Ç…ÇµÇΩÅB", "Your prayer nullifies the curse.")
					goto *effect_end
				}
			}
		}
		i = 0
		repeat MAX_EQUIP_SLOT_TOTAL, CDATA_STARTING_EQUIP_SLOTS
			if ( cdata(cnt, tc) \ EXT_EQUIP_SLOTS == 0 ) {
				continue
			}
			p(i) = cdata(cnt, tc) \ EXT_EQUIP_SLOTS - 1
			if ( inv(INV_ITEM_STATUS, p(i)) == ITEM_STATUS_BLESSED ) {
				if ( rnd(10) ) {
					continue
				}
			}
			i++
		loop
		if ( i == 0 ) {
			inv_getheader tc
			repeat 200
				p = invhead + rnd(invrange)
				if ( inv(INV_ITEM_NUM, p) == 0 ) {
					continue
				}
				if ( inv(INV_ITEM_STATUS, p) == ITEM_STATUS_BLESSED ) {
					if ( rnd(10) ) {
						continue
					}
				}
				i = 1
				break
			loop
		}
		if ( i > 0 ) {
			i = p(rnd(i))
			valn = itemname(i, 1, 1)
			if ( inv(INV_ITEM_STATUS, i) == ITEM_STATUS_CURSED ) {
				inv(INV_ITEM_STATUS, i) = ITEM_STATUS_DOOMED
			}
			else {
				inv(INV_ITEM_STATUS, i) = ITEM_STATUS_CURSED
			}
			if ( synccheck(tc, -1) ) {
				txt lang(name(tc) + "ÇÃ" + valn + "ÇÕçïÇ≠ãPÇ¢ÇΩÅB", name(tc) + your(tc) + " " + valn + " glows black.")
			}
			r1 = tc
			gosub *charaRefresh
			snd SOUNDLIST_CURSE3
			animeload ANIMATION_CRUSH, tc
			item_stack tc, i, 1
		}
		else {
			txt_nothinghappens
			obvious = 0
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_DECREASE_RESIST | _switch_sw ) {
		_switch_sw = 0
		efid = SKILL_SPELL_ELEMENT_SCAR
		gosub *effect
		efid = SKILL_SPELL_NIGHTMARE
		gosub *effect
		r1 = tc
		gosub *charaRefresh
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_MYSTERIOUS_DIARY | _switch_sw ) {
		_switch_sw = 0
		if ( cc == CHARA_PLAYER ) {
			if ( gdata(GDATA_CROWD) + 100 >= MAX_CHARA_TOTAL - MAX_CHARA_SAVE ) {
				txt_nothinghappens
				obvious = 0
				goto *effect_end
			}
		}
		efp = gdata(GDATA_DEEPEST_LEVEL) / 2 + 1
		if ( efp < 1 ) {
			efp = 1
		}
		flt calcobjlv(efp), 2
		dbid = 0
		gdata(STARTING_GDATA_FLAG + 356)++
		if ( gdata(STARTING_GDATA_FLAG + 356) >= 12 ) {
			if ( gdata(STARTING_GDATA_FLAG + 356) \ 12 == 0 ) {
				dbid = CREATURE_ID_FOX_BROTHER
			}
		}
		if ( cdata(CDATA_X, CHARA_PLAYER) > 1 ) {
			sux = cdata(CDATA_X, CHARA_PLAYER) - 1
		}
		novoidlv = 1
		characreate -1, dbid, sux, cdata(CDATA_Y, CHARA_PLAYER)
		if ( stat != 0 ) {
			cdata(CDATA_RELATION, rc) = -1
			cdata(CDATA_RELATION_ORG, rc) = -1
		}
		txt lang("ì˙ãLÇÃéÂÇ™åªÇÍÇΩÅB", "The owner of the diary appears.")
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_GAIN_CAT_SISTER | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_EFFECT_GAIN_SISTER | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_EFFECT_GAIN_ALLY | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_EFFECT_GAIN_GIRL | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_EFFECT_BUTLERS_DIARY | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_EFFECT_GAIN_OLDER_SISTER | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_EFFECT_GAIN_DOG_SISTER | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_EFFECT_GAIN_WRANGWRANG | _switch_sw ) {
		_switch_sw = 0
		if ( efid == SKILL_EFFECT_GAIN_ALLY ) {
			if ( gdata(GDATA_AREA) == AREA_SHOW_HOUSE ) {
				inv(INV_ITEM_NUM, ci)++
				txt lang("Ç±ÇÃÉGÉäÉAÇ≈ÇÕégÇ¶Ç»Ç¢ÅB", "You can't use it in this area.")
				goto *effect_end
			}
		}
		if ( cc != CHARA_PLAYER & cc < MAX_CHARA_FOLLOWER ) {
			txt_nothinghappens
			goto *effect_end
		}
		flt cdata(CDATA_LEVEL, CHARA_PLAYER) / 2 + 5, 3
		p = 0
		if ( rnd(3) == 0 ) {
			fltn "man"
		}
		if ( efid == SKILL_EFFECT_GAIN_CAT_SISTER ) {
			txt lang("Ç»ÇÒÇ∆ÅAÇ†Ç»ÇΩÇ…ÇÕê∂Ç´ï ÇÍÇΩååÇÃåqÇ™Ç¡ÇƒÇ¢Ç»Ç¢Ç Ç±ÇÃñÖÇ™Ç¢ÇΩÅI", "How...! You suddenly get a younger cat sister!")
			p = CREATURE_ID_YOUNGER_CAT_SISTER
		}
		if ( efid == SKILL_EFFECT_GAIN_SISTER ) {
			txt lang("Ç»ÇÒÇ∆ÅAÇ†Ç»ÇΩÇ…ÇÕê∂Ç´ï ÇÍÇΩååÇÃåqÇ™Ç¡ÇƒÇ¢Ç»Ç¢ñÖÇ™Ç¢ÇΩÅI", "How...! You suddenly get a younger sister!")
			p = CREATURE_ID_YOUNGER_SISTER
		}
		if ( efid == SKILL_EFFECT_GAIN_GIRL ) {
			txt lang("Ç®èÏÇ≥ÇÒÇ™ãÛÇ©ÇÁç~Ç¡ÇƒÇ´ÇΩÅI", "A young lady falls from the sky.")
			p = CREATURE_ID_YOUNG_LADY
		}
		if ( efid == SKILL_EFFECT_BUTLERS_DIARY ) {
			txt lang("é∑éñÇ™ãÛÇ©ÇÁç~Ç¡ÇƒÇ´ÇΩÅI", "A butler falls from the sky.")
			p = CREATURE_ID_BUTLER
		}
		if ( efid == SKILL_EFFECT_GAIN_OLDER_SISTER ) {
			txt lang("Ç»ÇÒÇ∆ÅAÇ†Ç»ÇΩÇ…ÇÕê∂Ç´ï ÇÍÇΩååÇÃåqÇ™Ç¡ÇƒÇ¢Ç»Ç¢éoÇ™Ç¢ÇΩÅI", "How...! You suddenly get an older sister!")
			p = CREATURE_ID_OLDER_SISTER
		}
		if ( efid == SKILL_EFFECT_GAIN_DOG_SISTER ) {
			txt lang("Ç»ÇÒÇ∆ÅAÇ†Ç»ÇΩÇ…ÇÕê∂Ç´ï ÇÍÇΩååÇÃåqÇ™Ç¡ÇƒÇ¢Ç»Ç¢ÇÌÇÒÇ±ÇÃéoÇ™Ç¢ÇΩÅI", "How...! You suddenly get an older dog sister!")
			p = CREATURE_ID_OLDER_DOG_SISTER
		}
		if ( efid == SKILL_EFFECT_GAIN_WRANGWRANG ) {
			txt lang("ÉtÉHÅ[É}Çê∂Ç´ÇÈÇÊÇÈÇ◊Ç∆ÇµÇ»Ç≥Ç¢ÅBÇªÇÍÇÕÇ†Ç»ÇΩÇÅAóEä∏Ç≈ÅAêeêÿÇ≈ÅAåíçNÇ≈ÅAçKïüÇ»êlä‘Ç…Ç∑ÇÈÅB", "Live by the foma that make you brave and kind and healthy and happy.")
			p = CREATURE_ID_WRANG_WRANG
		}
		novoidlv = 1
		fixlv = FIX_QUALITY_GOOD
		characreate MAX_CHARA_NC, p, -3, 0
		rc = MAX_CHARA_NC
		gosub *add_ally

		/********** ORIGINAL - BEGINNING **********

		if ( efid == SKILL_EFFECT_GAIN_ALLY ) {
			autosave = 1 * (gdata(GDATA_AREA) != AREA_SHOW_HOUSE)
		}

		 ********** ORIGINAL - ENDING **********/

		/********** BLOODYSHADE CUSTOM - BEGINNING **********/ // Re-enable save-scumming.

		if ( efid == SKILL_EFFECT_GAIN_ALLY & ( TweakData(TWEAK_GAMEPLAY_ENABLE_SAVE_SCUMMING, TWEAK_CATEGORY_GAMEPLAY) == 1 | gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_PURGE ) ) {
			autosave = 1 * (gdata(GDATA_AREA) != AREA_SHOW_HOUSE)
		}

		/********** BLOODYSHADE CUSTOM - ENDING **********/

		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_DOMINATE | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER | tc == CHARA_PLAYER | cdata(CDATA_RELATION, tc) == 10 | tc < MAX_CHARA_FOLLOWER ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		if ( cbit(CHARA_BIT_NECRO, tc) == 1 ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		if ( gdata(GDATA_AREA) == AREA_ARENA | gdata(GDATA_AREA) == AREA_PET_ARENA | gdata(GDATA_AREA) == AREA_CHAOS_CRADLE | gdata(GDATA_AREA) == AREA_VOID | adata(ADATA_WAKEUP_NEFIA, gdata(GDATA_AREA)) != WAKEUP_NEFIA_NONE | (gdata(GDATA_AREA) == AREA_SHELTER & gdata(GDATA_LEVEL) == 1) ) {
			obvious = 0
			txt lang("Ç±ÇÃèÍèäÇ≈ÇÕå¯â Ç™Ç»Ç¢ÅB", "The effect doesn't work in this area.")
			goto *effect_end
		}
		f = 1
		inv_find ITEM_ID_MONSTER_HEART, cc
		if ( stat != (-1) ) {
			efp = efp * 3 / 2
		}
		if ( rnd(efp / 15 + 5) < cdata(CDATA_LEVEL, tc) ) {
			f = 0
		}
		if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE | cdata(CDATA_ROLE, tc) != ROLE_NONE | cbit(CHARA_BIT_PRECIOUS, tc) == 1 | cdata(CDATA_CHARACTER_TIER, tc) == CHARACTER_TIER_SUMMONED_NORMAL | cbit(CHARA_BIT_BODYGUARD, tc) == 1 ) {
			f = -1
		}
		if ( f == 1 ) {
			rc = tc
			gosub *add_ally
			check_quest
		}
		else {
			if ( f == 0 ) {
				txt lang(name(tc) + "ÇÕíÔçRÇµÇΩÅB", name(tc) + " resist" + _s(tc) + ".")
			}
			else {
				txt lang(name(tc) + "ÇÕéxîzÇ≈Ç´Ç»Ç¢ÅB", name(tc) + " cannot be charmed.")
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_WEB | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_SPELL_MIST_OF_DARKNESS | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_SPELL_ACID_GROUND | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_SPACT_ETHER_GROUND | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_SPELL_FIRE_WALL | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_SPELL_MIST_OF_DAZZLING | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_SPACT_CURTAIN_OF_SMOKE | _switch_sw ) {
		_switch_sw = 0
		if ( efid == SKILL_SPACT_CURTAIN_OF_SMOKE ) {
			txt lang("ï”ÇËÇçïâåÇ™ï¢Ç¡ÇΩÅB", "The air is wrapped in a dense smoke.")
			efp = 1000
			p = 3, 120
		}
		if ( efid == SKILL_SPELL_WEB ) {
			p = 3, 2 + rnd(efp / 50 + 1)
			txt lang("íwÂÅÇÃëÉÇ™ï”ÇËÇï¢Ç¡ÇΩÅB", "The ground is covered with thick webbing.")
		}
		if ( efid == SKILL_SPELL_MIST_OF_DARKNESS ) {
			txt lang("ï”ÇËÇîZÇ¢à≈ÇÃñ∂Ç™ï¢Ç¡ÇΩÅB", "The air is wrapped in a dense fog.")
			p = 3, 2 + rnd(efp / 50 + 1)
		}
		if ( efid == SKILL_SPELL_MIST_OF_DAZZLING ) {
			txt lang("ï”ÇËÇ·øÇ¢åıÇÃñ∂Ç™ï¢Ç¡ÇΩÅB", "The air is wrapped in dazzling light.")
			p = 3, 2 + rnd(efp / 50 + 1)
		}
		if ( efid == SKILL_SPELL_ACID_GROUND ) {
			txt lang("é_ÇÃêÖó≠ÇËÇ™î≠ê∂ÇµÇΩÅB", "Acid puddles are generated.")
			p = 2, 2 + rnd(efp / 50 + 1)
		}
		if ( efid == SKILL_SPELL_FIRE_WALL ) {
			txt lang("âŒíåÇ™î≠ê∂ÇµÇΩÅB", "Walls of fire come out from the ground.")
			p = 2, 2 + rnd(efp / 50 + 1)
		}
		if ( efid == SKILL_SPACT_ETHER_GROUND ) {
			txt lang("ÉGÅ[ÉeÉãÇÃñ∂Ç™î≠ê∂ÇµÇΩÅB", "Ether mist spreads.")
			p = 2, 1 + rnd(efp / 100 + 2)
		}
		if ( efid == SKILL_SPACT_CURTAIN_OF_SMOKE ) {
			snd SOUNDLIST_ATK_DARK
		}
		else {
			snd SOUNDLIST_WEB
		}
		repeat p(1)
			x = rnd(p) + tlocx - rnd(p)
			y = rnd(p) + tlocy - rnd(p)
			f = 1
			if ( x < 0 | y < 0 | x >= mdata(MDATA_WIDTH) | y >= mdata(MDATA_HEIGHT) ) {
				f = 0
			}
			else {
				if ( chipm(CHIPM_ATTRIB, map(x, y, 0)) & CHIPM_ATTRIB_CANT_PASS ) {
					f = 0
				}
			}
			if ( dist(tlocx, tlocy, x, y) >= p ) {
				f = 0
			}
			if ( f == 0 ) {
				if ( rnd(2) == 0 ) {
					continue
				}
				else {
					continue cnt
				}
			}
			if ( efid == SKILL_SPELL_ACID_GROUND | efid == SKILL_SPELL_FIRE_WALL ) {
				tcbk = tc
				if ( map(x, y, 1) != 0 ) {
					tc = map(x, y, 1) - 1
					if ( cc != tc ) {
						if ( gdata(GDATA_RIDER) != 0 ) {
							if ( gdata(GDATA_RIDER) == cc ) {
								if ( tc == CHARA_PLAYER ) {
									continue
								}
							}
						}
						if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
							if ( tc != CHARA_PLAYER ) {
								if ( rnd(cdata(CDATA_HP, tc) + 1) < rnd(cdata(CDATA_HP, cdata(CDATA_TAGTEAM_PARTNER, tc)) + 1) ) {
									tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
								}
							}
						}
						if ( efid == SKILL_SPELL_ACID_GROUND ) {
							cdata(CDATA_ENVIRONMENT_EFFECT, tc) = ENVIRONMENT_EFFECT_ACID
						}
						if ( efid == SKILL_SPELL_FIRE_WALL ) {
							cdata(CDATA_ENVIRONMENT_EFFECT, tc) = ENVIRONMENT_EFFECT_FIRE
						}
					}
				}
				tc = tcbk
			}
			if ( efid == SKILL_SPACT_ETHER_GROUND ) {
				addmef x, y, 4, 20, rnd(4) + 2, efp, cc
			}
			if ( efid == SKILL_SPELL_ACID_GROUND ) {
				addmef x, y, 3, 19, rnd(10) + 5, efp, cc
			}
			if ( efid == SKILL_SPELL_FIRE_WALL ) {
				addmef x, y, 5, 24, rnd(10) + 5, efp, cc
				mapitem_fire x, y
			}
			if ( efid == SKILL_SPELL_WEB ) {
				addmef x, y, 1, 11, -1, efp * 2
			}
			if ( efid == SKILL_SPELL_MIST_OF_DARKNESS ) {
				addmef x, y, 2, 30, 8 + rnd(15 + efp / 25), efp
			}
			if ( efid == SKILL_SPELL_MIST_OF_DAZZLING ) {
				addmef x, y, 8, 4, 8 + rnd(15 + efp / 25), efp
			}
			if ( efid == SKILL_SPACT_CURTAIN_OF_SMOKE ) {
				addmef x, y, 9, 963, 15, efp
			}
		loop
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_ENVIRONMENT_EFFECT, cnt) == ENVIRONMENT_EFFECT_NONE ) {
				continue
			}
			if ( cdata(CDATA_ENVIRONMENT_EFFECT, cnt) == ENVIRONMENT_EFFECT_ACID ) {
				txt lang(name(cnt) + "ÇÕëÂó ÇÃé_ÇóÅÇ—ÇΩÅB", name(cnt) + " was showered by a large amount of acid.")
				cdata(CDATA_ENVIRONMENT_EFFECT, cnt) = ENVIRONMENT_EFFECT_NONE
				hostileaction cc, cnt
				dmghp cnt, rnd(efp / 10 + 5) + efp / 10 + 1, DAMAGE_FROM_ACID, SKILL_RESDMG_ACID, efp
			}
			if ( cdata(CDATA_ENVIRONMENT_EFFECT, cnt) == ENVIRONMENT_EFFECT_FIRE ) {
				txt lang(name(cnt) + "ÇÕâäÇ…ïÔÇ‹ÇÍÇΩÅB", name(cnt) + " was surrounded by flames.")
				cdata(CDATA_ENVIRONMENT_EFFECT, cnt) = ENVIRONMENT_EFFECT_NONE
				hostileaction cc, cnt
				dmghp cnt, rnd(efp / 3 + 5) + efp / 3 + 1, DAMAGE_FROM_FIRE, SKILL_RES_FIRE, efp
			}
			cdata(CDATA_ENVIRONMENT_EFFECT, cnt) = ENVIRONMENT_EFFECT_NONE
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_RENAME_ITEM | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		invsubroutine = 1
		invctrl = 23, 16
		snd SOUNDLIST_INV
		gosub *com_inventory
		if ( inv(INV_ITEM_QUALITY, ci) < FIX_QUALITY_MIRACLE | inv(INV_ITEM_QUALITY, ci) == FIX_QUALITY_UNIQUE ) {
			txt_impossible
			obvious = 0
			goto *effect_end
		}
		if ( inv(INV_ITEM_QUALITY, ci) == FIX_QUALITY_MIRACLE | inv(INV_ITEM_QUALITY, ci) == FIX_QUALITY_GODLY ) {
			txt lang("ÉAÅ[ÉeÉBÉtÉ@ÉNÉgÇÃêVÇµÇ¢ñ¡ÇÕÅH", "What do you want to name this artifact?")
			val = 3
			gosub *com_aka
			if ( stat == 0 ) {
				obvious = 0
				randomize
				goto *effect_end
			}
			p = stat
			inv(INV_ITEM_SUB_NAME, ci) = list(1, p) + 40000
			randomize
			txt lang("ÇªÇÍÇÕ" + listn(0, p) + "Ç∆Ç¢Ç§ñ¡Ç…Ç»Ç¡ÇΩÅB", "It's now called " + listn(0, p) + ".")
		}
		goto *effect_end
	}
	if ( _switch_val == EFFECT_GAROK_HAMMER | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		invsubroutine = 1
		invctrl = 23, 7
		snd SOUNDLIST_INV
		gosub *com_inventory
		f = stat
		if ( key == key_cancel ) {
			goto *effect_end
		}
		if ( inv(INV_ITEM_QUALITY, ci) >= FIX_QUALITY_MIRACLE | ibit(ITEM_BIT_ALIVE, ci) == 1 ) {
			txt lang("ÇªÇÃÉAÉCÉeÉÄÇ…â¸ó«ÇÃó]ínÇÕÇ»Ç¢ÅB", "This item has no room for improvement.")
			fixmaterial = ITEM_MATERIAL_SAND
			objfix = 0
			goto *effect_end
		}
		randomize inv(INV_ITEM_PARAM1, efcibk)
		equip = inv(INV_ITEM_EQUIP, ci)
		animeload ANIMATION_FIZZLE, cc
		inv(INV_ITEM_QUALITY, ci) = FIX_QUALITY_MIRACLE
		randomize inv(INV_ITEM_PARAM1, efcibk)
		inv(INV_ITEM_SUB_NAME, ci) = 40000 + rnd(30000)
		if ( refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE) == FILTER_HELM ) {
			encadd ci, ENCHANT_IMMUNE_DAMAGE, 250, 0, 1, 0, 1
		}
		if ( refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE) == FILTER_ACCESSORY_AMULET ) {
			encadd ci, ENCHANT_ENHANCE_BREATH, 400, 0, 1, 0, 1
		}
		if ( refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE) == FILTER_CLOAK ) {
			encadd ci, ENCHANT_ENHANCE_SPELL, 300, 0, 1, 0, 1
		}
		if ( refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE) == FILTER_ARMOR ) {
			encadd ci, ENCHANT_REFLECT_MAGIC, 250, 0, 1, 0, 1
		}
		if ( refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE) == FILTER_ACCESSORY_RING ) {
			encadd ci, ENCHANT_FAST_TRAVEL, 400, 0, 1, 0, 1
		}
		if ( refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE) == FILTER_GLOVES ) {
			encadd ci, ENCHANT_RES_PHYSICAL, 250, 0, 1, 0, 1
		}
		if ( refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE) == FILTER_GIRDLE ) {
			encadd ci, ENCHANT_PIERCING_CHANCE, 250, 0, 1, 0, 1
		}
		if ( refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE) == FILTER_BOOTS ) {
			encadd ci, ENCHANT_SHOOTING_MECHANISM, 300, 0, 1, 0, 1
		}
		if ( refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE) == FILTER_WEAPON ) {
			encadd ci, ENCHANT_EXTRA_MELEE, 250, 0, 1, 0, 1
		}
		if ( refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE) == FILTER_RANGE ) {
			encadd ci, ENCHANT_EXTRA_RANGED, 250, 0, 1, 0, 1
		}
		if ( refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE) == FILTER_SHIELD ) {
			encadd ci, ENCHANT_PROXIMITY_ASSIST, 250, 0, 1, 0, 1
		}
		if ( refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE) == FILTER_AMMO ) {
			encadd ci, ENCHANT_CRIT_CHANCE, 600, 0, 1, 0, 1
		}
		txt lang("ÇªÇÍÇÕ" + itemname(ci, 1) + "Ç…Ç»Ç¡ÇΩÅB", "It becomes " + itemname(ci, 1) + ".")
		if ( equip != 0 ) {
			cdata(equip, cc) = cdata(equip, cc) / 10000 * 10000 + ci + 1
			inv(INV_ITEM_EQUIP, ci) = equip
		}
		r1 = cc
		gosub *charaRefresh
		fixmaterial = ITEM_MATERIAL_SAND
		objfix = 0
		ci = efcibk
		inv(INV_ITEM_NUM, ci)--
		cell_refresh inv(INV_ITEM_X, ci), inv(INV_ITEM_Y, ci)
		goto *effect_end
	}
	if ( _switch_val == EFFECT_MATERIAL_KIT | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_EFFECT_CHANGE_MATERIAL | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		cibk = ci
		invsubroutine = 1
		invctrl = 23, 0
		snd SOUNDLIST_INV
		gosub *com_inventory
		f = stat
		if ( inv(INV_ITEM_QUALITY, ci) == FIX_QUALITY_GODLY | ibit(ITEM_BIT_ALIVE, ci) == 1 ) {
			if ( efid == SKILL_EFFECT_CHANGE_MATERIAL ) {
				f = 0
			}
		}
		equip = inv(INV_ITEM_EQUIP, ci)
		if ( f == 1 ) {
			if ( inv(INV_ITEM_QUALITY, ci) == FIX_QUALITY_UNIQUE ) {
				if ( efp < 350 ) {
					txt lang("ÉAÅ[ÉeÉBÉtÉ@ÉNÉgÇÃçƒê∂ê¨Ç…ÇÕÉpÉèÅ[Ç™ë´ÇËÇ»Ç¢ÅB", "More magic power is needed to reconstruct an artifact.")
					goto *effect_end
				}
				animeload ANIMATION_FIZZLE, cc
				txt lang(name(cc) + "ÇÃ" + itemname(ci, 1) + "ÇÕçƒê∂ê¨Ç≥ÇÍÇΩÅB", name(cc) + your(cc) + " " + itemname(ci, 1, 1) + " is reconstructed.")
				inv(INV_ITEM_NUM, ci)--
				cell_refresh inv(INV_ITEM_X, ci), inv(INV_ITEM_Y, ci)
				flt
				itemcreate 0, inv(INV_ITEM_ID, ci), -1, -1, 0
			}
			else {
				animeload ANIMATION_FIZZLE, cc
				s = itemname(ci, 1, 1)
				if ( inv(INV_ITEM_ID, cibk) == ITEM_ID_SCROLL_INFERIOR_MATERIAL ) {
					fixmaterial = ITEM_MATERIAL_SAND
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_PAPER ) {
						fixmaterial = ITEM_MATERIAL_CLOTH
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_CLOTH ) {
						fixmaterial = ITEM_MATERIAL_SILK
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_SILK ) {
						fixmaterial = ITEM_MATERIAL_MICA
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_MICA ) {
						fixmaterial = ITEM_MATERIAL_BAMBOO
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_BAMBOO ) {
						fixmaterial = ITEM_MATERIAL_RAW
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_RAW ) {
						fixmaterial = ITEM_MATERIAL_LEATHER
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_LEATHER ) {
						fixmaterial = ITEM_MATERIAL_GLASS
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_GLASS ) {
						fixmaterial = ITEM_MATERIAL_SCALE
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_SCALE ) {
						fixmaterial = ITEM_MATERIAL_CORAL
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_CORAL ) {
						fixmaterial = ITEM_MATERIAL_BRONZE
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_BRONZE ) {
						fixmaterial = ITEM_MATERIAL_IRON
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_IRON ) {
						fixmaterial = ITEM_MATERIAL_BONE
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_BONE ) {
						fixmaterial = ITEM_MATERIAL_PAPER
					}
					if ( fixmaterial == ITEM_MATERIAL_SAND ) {
						fixmaterial = ITEM_MATERIAL_PAPER
					}
				}
				if ( inv(INV_ITEM_ID, cibk) == ITEM_ID_SCROLL_CHANGE_MATERIAL ) {
					fixmaterial = ITEM_MATERIAL_SAND
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_ZYLON ) {
						fixmaterial = ITEM_MATERIAL_WOOD
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_WOOD ) {
						fixmaterial = ITEM_MATERIAL_OBSIDIAN
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_OBSIDIAN ) {
						fixmaterial = ITEM_MATERIAL_CHROME
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_CHROME ) {
						fixmaterial = ITEM_MATERIAL_METAL
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_METAL ) {
						fixmaterial = ITEM_MATERIAL_STEEL
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_STEEL ) {
						fixmaterial = ITEM_MATERIAL_CHAIN
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_CHAIN ) {
						fixmaterial = ITEM_MATERIAL_SILVER
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_SILVER ) {
						fixmaterial = ITEM_MATERIAL_PLATINUM
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_PLATINUM ) {
						fixmaterial = ITEM_MATERIAL_GOLD
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_GOLD ) {
						fixmaterial = ITEM_MATERIAL_PEARL
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_PEARL ) {
						fixmaterial = ITEM_MATERIAL_GRIFFON
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_GRIFFON ) {
						if ( inv(INV_ITEM_STATUS, cibk) < ITEM_STATUS_BLESSED ) {
							fixmaterial = ITEM_MATERIAL_ZYLON
						}
						else {
							fixmaterial = ITEM_MATERIAL_DRAGON
						}
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_DRAGON ) {
						if ( inv(INV_ITEM_STATUS, cibk) < ITEM_STATUS_BLESSED ) {
							fixmaterial = ITEM_MATERIAL_ZYLON
						}
						else {
							fixmaterial = ITEM_MATERIAL_ADAMANTIUM
						}
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_ADAMANTIUM ) {
						fixmaterial = ITEM_MATERIAL_ZYLON
					}
					if ( fixmaterial == ITEM_MATERIAL_SAND ) {
						fixmaterial = ITEM_MATERIAL_ZYLON
					}
				}
				if ( inv(INV_ITEM_ID, cibk) == ITEM_ID_SCROLL_SUPERIOR_MATERIAL ) {
					fixmaterial = ITEM_MATERIAL_SAND
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_DUSK ) {
						fixmaterial = ITEM_MATERIAL_SPIRIT
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_SPIRIT ) {
						fixmaterial = ITEM_MATERIAL_DRAGON
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_DRAGON ) {
						fixmaterial = ITEM_MATERIAL_CRYSTAL
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_CRYSTAL ) {
						fixmaterial = ITEM_MATERIAL_TITANIUM
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_TITANIUM ) {
						fixmaterial = ITEM_MATERIAL_NANOMACHINE
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_NANOMACHINE ) {
						fixmaterial = ITEM_MATERIAL_MITHRIL
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_MITHRIL ) {
						fixmaterial = ITEM_MATERIAL_ADAMANTIUM
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_ADAMANTIUM ) {
						fixmaterial = ITEM_MATERIAL_EMERALD
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_EMERALD ) {
						fixmaterial = ITEM_MATERIAL_DIAMOND
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_DIAMOND ) {
						if ( inv(INV_ITEM_STATUS, cibk) < ITEM_STATUS_BLESSED ) {
							fixmaterial = ITEM_MATERIAL_DUSK
						}
						else {
							fixmaterial = ITEM_MATERIAL_RUBYNUS
						}
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_RUBYNUS ) {
						if ( inv(INV_ITEM_STATUS, cibk) < ITEM_STATUS_BLESSED ) {
							fixmaterial = ITEM_MATERIAL_DUSK
						}
						else {
							fixmaterial = ITEM_MATERIAL_ETHER
						}
					}
					if ( inv(INV_ITEM_MATERIAL, ci) == ITEM_MATERIAL_ETHER ) {
						fixmaterial = ITEM_MATERIAL_DUSK
					}
					if ( fixmaterial == ITEM_MATERIAL_SAND ) {
						fixmaterial = ITEM_MATERIAL_DUSK
					}
				}
				gosub *remake_material
				txt lang(name(cc) + "ÇÃ" + s + "ÇÕ" + itemname(ci, 1) + "Ç…ïœâªÇµÇΩÅB", name(cc) + your(cc) + " " + s + " transforms into " + itemname(ci, 1) + ".")
			}
		}
		else {
			txt_nothinghappens
			obvious = 0
		}
		if ( equip != 0 ) {
			cdata(equip, cc) = cdata(equip, cc) / 10000 * 10000 + ci + 1
			inv(INV_ITEM_EQUIP, ci) = equip
		}
		r1 = cc
		gosub *charaRefresh
		fixmaterial = ITEM_MATERIAL_SAND
		objfix = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_HEIR_DEED | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		snd SOUNDLIST_DING2
		p = 3
		gdata(GDATA_HEIR_DEED) += p
		txtef COLOR_YELLOW
		txt lang("Ç†Ç»ÇΩÇÕà‚éYëäë±êlÇ∆ÇµÇƒîFÇﬂÇÁÇÍÇΩ(+" + p + ")", "You claim the right of succession. (+" + p + ")")
		txt lang("ç°Ç‚Ç†Ç»ÇΩÇÕ" + gdata(GDATA_HEIR_DEED) + "å¬ÇÃà‚éYÇëäë±Ç≈Ç´ÇÈÅB", "You can now inherit " + gdata(GDATA_HEIR_DEED) + " items.")
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_ENCHANT_WEAPON | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_EFFECT_ENCHANT_ARMOR | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			txt_nothinghappens
			goto *effect_end
		}
		invsubroutine = 1
		if ( efid == SKILL_EFFECT_ENCHANT_WEAPON ) {
			invctrl = 23, 1
		}
		else {
			invctrl = 23, 2
		}
		snd SOUNDLIST_INV
		gosub *com_inventory
		if ( stat == 1 ) {
			if ( inv(INV_ITEM_LEVEL, ci) - 3 < efp / 100 ) {
				snd SOUNDLIST_DING2
				txt lang(itemname(ci) + "ÇÕâ©ã‡ÇÃåıÇ…ïÔÇ‹ÇÍÇΩÅB", itemname(ci) + " " + is2(inv(INV_ITEM_NUM, ci)) + " surrounded by a golden aura.")
				inv(INV_ITEM_LEVEL, ci)++
			}
			else {
				txt lang(itemname(ci) + "ÇÕíÔçRÇµÇΩÅB", itemname(ci) + " resist" + _s2(inv(INV_ITEM_NUM, ci)) + ".")
			}
			r1 = cc
			gosub *charaRefresh
		}
		else {
			obvious = 0
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_FILL_CHARGE | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_EFFECT_RECHARGE | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		if ( efid == SKILL_SPACT_FILL_CHARGE ) {
			if ( gdata(GDATA_ABSORB_CHARGE) < 10 ) {
				txt lang("è[ìUÇ∑ÇÈÇ…ÇÕç≈í·Ç≈Ç‡ñÇóÕÇÃíôí~Ç™10ïKóvÇæÅB", "You need at least 10 recharge powers to recharge items.")
				goto *effect_end
			}
			gdata(GDATA_ABSORB_CHARGE) -= 10
			txt lang("ñÇóÕÇÃíôí~Ç10è¡îÔÇµÇΩ(écÇË" + gdata(GDATA_ABSORB_CHARGE) + ")", "You spend 10 recharge powers. (Remaining:" + gdata(GDATA_ABSORB_CHARGE) + ")")
		}
		invsubroutine = 1
		invctrl = 23, 3
		snd SOUNDLIST_INV
		gosub *com_inventory
		if ( stat == 1 ) {
			dbid = inv(INV_ITEM_ID, ci)
			dbmode = DBMODE_REF
			gosub *db_item
			if ( ichargelevel < 1 | inv(INV_ITEM_ID, ci) == ITEM_ID_ROD_WISHING | inv(INV_ITEM_ID, ci) == ITEM_ID_ROD_DOMINATION | inv(INV_ITEM_ID, ci) == ITEM_ID_SPELLBOOK_WISHING | inv(INV_ITEM_ID, ci) == ITEM_ID_SPELLBOOK_HARVEST | (inv(INV_ITEM_ID, ci) == ITEM_ID_ANCIENT_BOOK & inv(INV_ITEM_PARAM2, ci) != 0) ) {
				txt lang("ÇªÇÍÇÕè[ìUÇ™Ç≈Ç´Ç»Ç¢ÇÊÇ§ÇæÅB", "You can't recharge this item.")
				goto *effect_end
			}
			f = 1
			if ( inv(INV_ITEM_CHARGE, ci) > ichargelevel ) {
				f = -1
			}
			if ( f == (-1) ) {
				txt lang(itemname(ci) + "ÇÕÇ±ÇÍà»è„è[ìUÇ≈Ç´Ç»Ç¢ÇÊÇ§ÇæÅB", itemname(ci) + " cannot be recharged anymore.")
				goto *effect_end
			}
			if ( rnd(efp / 25 + 1) == 0 ) {
				f = 0
			}
			if ( refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE) == FILTER_ITEM_SPELLBOOK ) {
				if ( rnd(4) == 0 ) {
					f = 0
				}
			}
			if ( rnd(ichargelevel * ichargelevel + 1) == 0 ) {
				f = 0
			}
			if ( f == 1 ) {
				p = 2
				if ( p + inv(INV_ITEM_CHARGE, ci) > ichargelevel ) {
					p = ichargelevel - inv(INV_ITEM_CHARGE, ci) + 1
				}
				if ( refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE) == FILTER_ITEM_SPELLBOOK ) {
					p = 1
				}
				txt lang(itemname(ci) + "ÇÕè[ìUÇ≥ÇÍÇΩ(+" + p + ")", itemname(ci) + " " + is2(inv(INV_ITEM_NUM, ci)) + " recharged by +" + p + ".")
				inv(INV_ITEM_CHARGE, ci) += p
				animeload ANIMATION_FIZZLE, cc
				if ( cc == CHARA_PLAYER ) {
					item_stack CHARA_PLAYER, ci, 1
				}
			}
			else {
				if ( rnd(limit(sdata(SKILL_NORMAL_CONTROL_MAGIC, CHARA_PLAYER), 0, 100) + 2) == 0 ) {
					txt lang(itemname(ci) + "ÇÕîjóÙÇµÇΩÅB", itemname(ci) + " explode" + _s2(inv(INV_ITEM_NUM, ci)) + ".")
					inv(INV_ITEM_NUM, ci)--
					gosub *calcBurdenPc
					goto *effect_end
				}
				txt lang(itemname(ci) + "Ç÷ÇÃè[ìUÇÕé∏îsÇµÇΩÅB", "You fail to recharge " + itemname(ci) + ".")
			}
		}
		else {
			obvious = 0
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_DRAW_CHARGE | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		invsubroutine = 1
		invctrl = 23, 5
		snd SOUNDLIST_INV
		gosub *com_inventory
		if ( stat == 1 ) {
			if ( ibit(ITEM_BIT_NO_DROP, ci) ) {
				snd SOUNDLIST_FAIL1
				txt_nodrop
				item_stack CHARA_PLAYER, ci
				goto *effect_end
			}
			dbid = inv(INV_ITEM_ID, ci)
			dbmode = DBMODE_REF
			gosub *db_item
			repeat 1
				if ( ichargelevel == 1 ) {
					p = 100
					break
				}
				if ( ichargelevel == 2 ) {
					p = 25
					break
				}
				if ( ichargelevel <= 4 ) {
					p = 5
					break
				}
				if ( ichargelevel <= 6 ) {
					p = 3
					break
				}
				p = 1
			loop
			animeload ANIMATION_FIZZLE, cc
			if ( ichargelevel >= 14 ) {
				p = (inv(INV_ITEM_CHARGE, ci) + 1) / 2
				gdata(GDATA_ABSORB_CHARGE) += p
			}
			else {
				p = p * inv(INV_ITEM_CHARGE, ci)
				gdata(GDATA_ABSORB_CHARGE) += p
			}
			txt lang(itemname(ci) + "ÇîjâÛÇµÇƒ" + p + "ÇÃñÇóÕÇíäèoÇµÇΩ(åv" + gdata(GDATA_ABSORB_CHARGE) + ")", "You destroy " + itemname(ci) + " and extract " + p + " recharge powers. (Total:" + gdata(GDATA_ABSORB_CHARGE) + ")")
			inv(INV_ITEM_NUM, ci) = 0
			gosub *calcBurdenPc
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_CHANGE | _switch_sw ) {
		_switch_sw = 0
*jump_changeCreature
		if ( tc == CHARA_PLAYER ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		f = 1
		if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE | cdata(CDATA_ROLE, tc) != ROLE_NONE | cbit(CHARA_BIT_BODYGUARD, tc) == 1 | cbit(CHARA_BIT_PRECIOUS, tc) == 1 | cbit(CHARA_BIT_LIVESTOCK, tc) == 1 | cbit(CHARA_BIT_NECRO, tc) == 1 | gdata(GDATA_FLAG_DUEL_TARGET) == tc ) {
			f = -1
		}
		if ( tc < 57 ) {
			f = 0
		}
		if ( f == 1 ) {
			animeload ANIMATION_FIZZLE, tc
			txt lang(name(tc) + "ÇÕïœâªÇµÇΩÅB", name(tc) + " change" + _s(tc) + ".")
			flt calcobjlv(cdata(CDATA_LEVEL, tc) + 3), 2
			characreate MAX_CHARA_NC, CREATURE_ID_BUG, -3, 0
			relocate_chara 56, tc, 1
			cdata(CDATA_TARGET, tc) = cc
			cbitmod CHARA_BIT_QUEST_TARGET, tc, 0
			check_quest
		}
		else {
			if ( f == 0 ) {
				txt lang(name(tc) + "ÇÕíÔçRÇµÇΩÅB", name(tc) + " resist" + _s(tc) + ".")
			}
			else {
				txt lang(name(tc) + "ÇÕïœâªÇ≈Ç´Ç»Ç¢ÅB", name(tc) + " cannot be changed.")
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_DECREASE_WEIGHT | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			txt_nothinghappens
			obvious = 0
			goto *effect_end
		}
		invsubroutine = 1
		invctrl = 23, 6
		snd SOUNDLIST_INV
		gosub *com_inventory
		if ( stat == 1 ) {
			autosave = 1 * (gdata(GDATA_AREA) != AREA_SHOW_HOUSE)
			animeload ANIMATION_FIZZLE, cc
			if ( efstatus >= 0 ) {
				if ( inv(INV_ITEM_WEIGHT, ci) > 0 ) {
					inv(INV_ITEM_WEIGHT, ci) = limit(inv(INV_ITEM_WEIGHT, ci) * (100 - efp / 10) / 100, 1, inv(INV_ITEM_WEIGHT, ci))
				}
				txt lang("" + itemname(ci, 1) + "ÇÕâHÇ™ê∂Ç¶ÇΩÇÊÇ§Ç…åyÇ≠Ç»Ç¡ÇΩÅB", itemname(ci, 1) + " becomes as light as a feather.")
			}
			else {
				inv(INV_ITEM_WEIGHT, ci) = inv(INV_ITEM_WEIGHT, ci) * 150 / 100 + 1000
				txt lang("" + itemname(ci, 1) + "ÇÕÇ∏ÇµÇËÇ∆èdÇ≠Ç»Ç¡ÇΩÅB", itemname(ci, 1) + " becomes heavy.")
			}
			gosub *calcBurdenPc
		}
		else {
			txt_nothinghappens
			obvious = 0
		}
		r1 = cc
		gosub *charaRefresh
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_CHANGE_ITEM | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			txt_nothinghappens
			obvisou = 0
			goto *effect_end
		}
		invsubroutine = 1
		invctrl = 23, 4
		snd SOUNDLIST_INV
		gosub *com_inventory
		f = stat
		if ( f ) {
			if ( inv(INV_ITEM_QUALITY, ci) > FIX_QUALITY_MIRACLE | ibit(ITEM_BIT_PRECIOUS, ci) == 1 ) {
				f = 0
			}
		}
		if ( refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE) == FILTER_CONTAINER ) {
			f = 0
		}
		if ( ibit(ITEM_BIT_NO_DROP, ci) ) {
			snd SOUNDLIST_FAIL1
			txt_nodrop
			f = 0
		}
		if ( f == 1 ) {
			autosave = 1 * (gdata(GDATA_AREA) != AREA_SHOW_HOUSE)
			animeload ANIMATION_FIZZLE, cc
			fltbk = refitem(inv(INV_ITEM_ID, ci), DBSPEC_TYPE)
			valuebk = calcitemvalue(ci, 0)
			inv(INV_ITEM_NUM, ci) = 0
			repeat
				await
				flt calcobjlv(efp / 10) + 5, calcfixlv(FIX_QUALITY_GREAT)
				if ( cnt < 10 ) {
					flttypemajor = fltbk
				}
				itemcreate 0, ITEM_ID_DUMMY, -1, -1, 0
				if ( stat == 0 ) {
					continue
				}
				if ( inv(INV_ITEM_VALUE, ci) > valuebk * 3 / 2 + 1000 ) {
					inv(INV_ITEM_NUM, ci) = 0
					continue
				}
				else {
					break
				}
			loop
			txt lang("ÇªÇÍÇÕ" + itemname(ci, 1) + "Ç…ïœóeÇµÇΩÅB", "It metamorphosed into " + itemname(ci, 1) + ".")
			gosub *calcBurdenPc
		}
		else {
			txt_nothinghappens
			obvious = 0
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_DOOR_CREATION | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_SPELL_WALL_CREATION | _switch_sw ) {
		_switch_sw = 0
		x = tlocx
		y = tlocy
		f = 1
		if ( x < 0 | y < 0 | x >= mdata(MDATA_WIDTH) | y >= mdata(MDATA_HEIGHT) ) {
			f = 0
		}
		else {
			if ( chipm(CHIPM_ATTRIB, map(x, y, 0)) & CHIPM_ATTRIB_CANT_PASS ) {
				if ( homemapmode == 0 ) {
					if ( efid != SKILL_SPELL_DOOR_CREATION ) {
						f = 0
					}
					else {
						if ( chipm(CHIPM_ROLE, map(x, y, 0)) == MAP_CHIP_ROLE_WATER ) {
							f = 0
						}
					}
				}
			}
			if ( map(x, y, 1) != 0 | map(x, y, 6) != 0 ) {
				f = 0
			}
		}
		if ( f == 1 ) {
			if ( efid == SKILL_SPELL_WALL_CREATION ) {
				if ( homemapmode == 0 ) {
					txt lang("è∞Ç™ê∑ÇËè„Ç™Ç¡ÇƒÇ´ÇΩÅB", "A wall appears.")
					p = tile_wall
				}
				else {
					p = tile
				}
				if ( map(x, y, 0) != p ) {
					snd SOUNDLIST_OFFER1
				}
				map(x, y, 0) = p
				map(x, y, 2) = p
			}
			if ( efid == SKILL_SPELL_DOOR_CREATION ) {
				snd SOUNDLIST_OFFER1
				if ( chipm(CHIPM_ROLE, map(x, y, 0)) == MAP_CHIP_ROLE_HARD_WALL ) {
					txt lang("Ç±ÇÃï«ÇÕñÇñ@ÇéÛÇØïtÇØÇ»Ç¢ÇÊÇ§ÇæÅB", "These walls seem to resist your magic.")
					goto *effect_end
				}
				txt lang("î‡Ç™èoåªÇµÇΩÅB", "A door appears.")
				cell_featset x, y, tile_doorclosed, CELL_FEATURE_DOOR_CLOSED, rnd(efp / 10 + 1)
				if ( chipm(CHIPM_ATTRIB, map(x, y, 0)) & CHIPM_ATTRIB_CANT_PASS ) {
					map(x, y, 0) = tile_tunnel
				}
			}
		}
		else {
			if ( homemapmode == 0 ) {
				txt_nothinghappens
			}
			obvious = 0
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_HOUZANHA | _switch_sw ) {
		_switch_sw = 0
		animeload ANIMATION_HEAL_FAST, cc
		txtef COLOR_BLUE
		txt lang("ínñ Ç©ÇÁñ≥êîÇÃãCÇ™ÁûÇÈÅI", "Haaaaaaaaaa!")
		if ( gdata(GDATA_AREA) == AREA_PET_ARENA | mdata(MDATA_TYPE) == MAP_TYPE_WORLD | gdata(GDATA_AREA) == AREA_PYRAMID | gdata(GDATA_AREA) == AREA_JAIL ) {
			if ( synccheck(tc, -1) ) {
				txt lang("ÇﬁÇ£ ç≈ëÂÇÃâúã`Ç™Ç©Ç´è¡Ç≥ÇÍÇÈÇ∆ÇÕÅI", "These walls seem to resist your magic.")
				goto *effect_end
			}
		}
		repeat 400
			repeat 2
				x = rnd(mdata(MDATA_WIDTH))
				y = rnd(mdata(MDATA_HEIGHT))
				if ( map(x, y, 0) != 701 & map(x, y, 0) != 671 ) {
					map(x, y, 0) = 38
				}
			loop
			x = rnd(inf_screenw) + scx
			y = rnd(inf_screenh) + scy
			if ( x < 0 | y < 0 | x >= mdata(MDATA_WIDTH) | y >= mdata(MDATA_HEIGHT) ) {
				x = rnd(mdata(MDATA_WIDTH))
				y = rnd(mdata(MDATA_HEIGHT))
			}
			if ( cnt \ 7 == 0 ) {
				gosub *screen_draw
				if ( rnd(3) == 0 ) {
					snd SOUNDLIST_CRUSH1
				}
				await 25
			}
		loop
		skillexp SKILL_NORMAL_MINING, cc, 500
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_GOLDEN_STORM | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_GOLD, cc) < 2000 ) {
			goto *effect_end
		}
		repeat 10
			gosub *com_findTarget
			if ( listmax == 0 ) {
				break
			}
			tc = list(0, rnd(listmax))
			if ( cc == CHARA_PLAYER | cdata(CDATA_RELATION, cc) >= 0 ) {
				if ( cdata(CDATA_RELATION, tc) >= 0 ) {
					if ( cnt == 0 ) {
						continue
					}
				}
				if ( cdata(CDATA_RELATION, tc) >= 0 ) {
					if ( cnt != 0 ) {
						continue cnt + (rnd(10) == 0)
					}
				}
			}
			else {
				if ( cdata(CDATA_RELATION, tc) == cdata(CDATA_RELATION, cc) ) {
					continue cnt + (rnd(10) == 0)
				}
			}
			if ( cnt == 1 ) {
				if ( synccheck(cc, -1) ) {
					if ( cdata(CDATA_ID, cc) == CREATURE_ID_YACATECT | cdata(CDATA_ID, cc) == CREATURE_ID_HYPER_YACATECT ) {
						txt lang("ÅuÇ±ÇßÇßÇÒÇÃÇ¡ÅIÉAÉzÅ[Å[Å[Å[ÉbÅIÅIÅIÅv", "*Ooban-Burumai*")
					}
				}
			}
			animeid = ANIMATION_GOLDENSTORM
			gosub *anime
			dmghp tc, sdata(SKILL_WEAPON_THROWING, cc) / 5 * sqrt(sdata(SKILL_NORMAL_INVESTING, cc) + 1) * 3 + rnd(10) + 5, cc, SKILL_RESDMG_CRUSH, 1000
			dmgcon tc, CONDITION_BLIND, 100 + gdata(GDATA_LEVEL) * 2
			if ( cdata(CDATA_CONDITION_BLIND, tc) == 0 ) {
				if ( rnd(20) == 0 ) {
					cdata(CDATA_CONDITION_BLIND, tc) = 1
					txt lang(name(tc) + "ÇÕñ⁄Ç™·øÇÒÇæÅI", name(tc) + " dazzle" + _s(tc) + ".")
				}
			}
			cdata(CDATA_GOLD, cc) -= 200
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_SMASH_GROUND | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕínñ Çç”Ç¢ÇΩÅI", name(cc) + " smash" + _s(cc, 1) + " the ground!")
		}
		snd SOUNDLIST_CRUSH1
		snd SOUNDLIST_BALL1
		animeload ANIMATION_BALL_NUKE, cc
		map(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 0) = 12
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cc) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_SWARM) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			calcmagiccontrol cc, tc
			if ( stat == 1 ) {
				continue
			}
			if ( synccheck(tc, -1) ) {
				txt lang(name(tc) + "Ç…îjï–Ç™ñΩíÜÇµÇΩÅB", name(tc) + " " + was(tc) + " struck by debris.")
			}
			dmg = rnd(sdata(SKILL_ATTR_STR, cc) * sqrt(sdata(SKILL_ATTR_STR, cc)) + sdata(SKILL_ATTR_STR, cc) * 2)
			dmghp tc, dmg, cc, SKILL_RESDMG_CRUSH, 1000
			if ( cdata(CDATA_CONDITION_WINCE, tc) <= 0 ) {
				cdata(CDATA_CONDITION_WINCE, tc) = 1 + rnd(5)
				txt lang(name(tc) + "ÇÕãØÇÒÇæÅB", name(tc) + " " + was(tc) + " frightened.")
			}
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_SWARM | _switch_sw ) {
		_switch_sw = 0
		if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
			tc = cdata(CDATA_TARGET, cc)
			gosub *act_melee
			goto *effect_end
		}
		txtef COLOR_BLUE
		txt lang("ÉXÉEÉHÅ[ÉÄÅI", "Swarm!")
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cc) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cdata(CDATA_ID, cc) != CREATURE_ID_BERSERK_DRAGON ) {
				if ( findbuff(cc, BUFF_RUN_WILDLY) == (-1) ) {
					if ( cc < MAX_CHARA_FOLLOWER ) {
						if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
							continue
						}
					}
					if ( cc >= MAX_CHARA_FOLLOWER ) {
						if ( cdata(CDATA_RELATION_ORG, cnt) == cdata(CDATA_RELATION_ORG, cc) | cdata(CDATA_RELATION, cnt) == cdata(CDATA_RELATION, cc) | (cdata(CDATA_RELATION, cc) >= (-1) & cdata(CDATA_RELATION, cnt) >= (-1)) ) {
							continue
						}
					}
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_SWARM) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			animeid = ANIMATION_ATTACK
			gosub *anime
			gosub *act_melee
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_OVER_LONG_THROW | _switch_sw ) {
		_switch_sw = 0
		if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
			tc = cdata(CDATA_TARGET, cc)
			gosub *act_melee
			goto *effect_end
		}
		tcbk = tc
		gosub *FindRangeWeapon
		if ( stat == 1 ) {
			if ( ammo != (-1) ) {
				goto *effect_end
			}
			longthrow = 100
			attackitem = cw
			attackrange = 1
			extraattack = 0
			gosub *act_attack
		}
		longthrow = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_STRUCK_OUT | _switch_sw ) {
		_switch_sw = 0
		if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
			tc = cdata(CDATA_TARGET, cc)
			gosub *act_melee
			goto *effect_end
		}
		txtef COLOR_BLUE
		txt lang("ÉXÉgÉâÉbÉNÉAÉEÉgÅI", "Struck Out!")
		tcbk = tc
		gosub *FindRangeWeapon
		if ( stat == 1 ) {
			if ( ammo != (-1) ) {
				goto *effect_end
			}
			repeat MAX_CHARA_TOTAL
				gdata(GDATA_TEMPORARY_FLAGS) = 0
				if ( cdata(CDATA_EXIST, cc) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( cc == cnt ) {
					continue
				}
				if ( cnt != tcbk ) {
					if ( cc < MAX_CHARA_FOLLOWER ) {
						if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
							continue
						}
					}
					if ( cc >= MAX_CHARA_FOLLOWER ) {
						if ( cdata(CDATA_RELATION_ORG, cnt) == cdata(CDATA_RELATION_ORG, cc) | cdata(CDATA_RELATION, cnt) == cdata(CDATA_RELATION, cc) | (cdata(CDATA_RELATION, cc) >= (-1) & cdata(CDATA_RELATION, cnt) >= (-1)) ) {
							continue
						}
					}
				}
				tc = cnt
				dx = cdata(CDATA_X, tc)
				dy = cdata(CDATA_Y, tc)
				if ( dist(cdata(CDATA_X, tcbk), cdata(CDATA_Y, tcbk), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_SWARM) \ EXT_SDATAREF + 1 ) {
					continue
				}
				if ( fov_los(cdata(CDATA_X, tcbk), cdata(CDATA_Y, tcbk), dx, dy) == 0 ) {
					continue
				}
				ele = SKILL_NONE
				gdata(GDATA_TEMPORARY_FLAGS) = 300
				attackrange = 1
				extraattack = 0
				gosub *act_fire
			loop
		}
		gdata(GDATA_TEMPORARY_FLAGS) = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_DROP_MINE | _switch_sw ) {
		_switch_sw = 0
		if ( mdata(MDATA_TYPE) == MAP_TYPE_WORLD ) {
			goto *effect_end
		}
		if ( map(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 6) != 0 ) {
			goto *effect_end
		}
		cell_featset cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 0, CELL_FEATURE_TRAP, CELL_SUB_FEATURE_TRAP_QUEST_MINE, cc
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕâΩÇ©Çìäâ∫ÇµÇΩÅB", name(cc) + " drop" + _s(cc) + " something on the ground.")
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_GRAVITY | _switch_sw ) {
		_switch_sw = 0
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cbit(CHARA_BIT_IMMUNE_MINE, cnt) ) {
				continue
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > 2 * 2 ) {
				continue
			}
			if ( findbuff(tc, BUFF_FEATHER) != (-1) ) {
				continue
			}
			if ( synccheck(tc, -1) ) {
				txt lang(name(tc) + "ÇÕèdóÕÇä¥Ç∂ÇΩÅB", name(tc) + " feel" + _s(tc) + " gravity.")
			}
			cdata(CDATA_CONDITION_GRAVITY, tc) += 50 + rnd(50)
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_MEWMEWMEW | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
				efid = SKILL_SPACT_INTENSIVE_POWER
				gosub *effect
				goto *effect_end
			}
		}
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 ) {
				efid = SKILL_SPACT_TIME_STOP
				gosub *effect
				goto *effect_end
			}
		}
		txtef COLOR_BLUE
		txt lang("Ç§Ç›Ç›Ç·ÇüÅI", "Mewmewmew!")
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cbit(CHARA_BIT_LIVESTOCK, cc) == 1 ) {
				txt_nothinghappens
				goto *effect_end
			}
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		animeid = ANIMATION_HOLY
		animode = 0
		gosub *anime
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cc) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			tc = cnt
			if ( tc >= MAX_CHARA_FOLLOWER & cdatan(CDATAN_RACE, tc) == "god" ) {
				dmghp tc, 49999, cc
			}
			else {
				dmghp tc, 99999, cc
			}
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_MANIS_DISASSEMBLY | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
				efid = SKILL_SPACT_INTENSIVE_POWER
				gosub *effect
				goto *effect_end
			}
		}
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 ) {
				efid = SKILL_SPACT_TIME_STOP
				gosub *effect
				goto *effect_end
			}
		}
		txt lang("Åuó]ï™Ç»ã@î\ÇÕçÌèúÇµÇƒÇµÇ‹Ç¶Åv", cnvtalk("Delete."))
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cbit(CHARA_BIT_LIVESTOCK, cc) == 1 ) {
				txt_nothinghappens
				goto *effect_end
			}
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		snd SOUNDLIST_CRUSH1
		animeload ANIMATION_BALL_NUKE, tc
		if ( tc >= MAX_CHARA_FOLLOWER & cdatan(CDATAN_RACE, tc) == "god" ) {
			cdata(CDATA_HP, tc) = cdata(CDATA_MAX_HP, tc) / 3 + 1
		}
		else {
			cdata(CDATA_HP, tc) = cdata(CDATA_MAX_HP, tc) / 12 + 1
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_SUPER_VIBRATING_FIST | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
				efid = SKILL_SPACT_INTENSIVE_POWER
				gosub *effect
				goto *effect_end
			}
		}
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 ) {
				efid = SKILL_SPACT_TIME_STOP
				gosub *effect
				goto *effect_end
			}
		}
		txt lang("ÅuÇ≠ÇÁÇ¶ÉBÅIÉtÉnÉnÉnÅ[ÉbÅIÅv", cnvtalk("Muwahahahaha!"))
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cbit(CHARA_BIT_LIVESTOCK, cc) == 1 ) {
				txt_nothinghappens
				goto *effect_end
			}
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		snd SOUNDLIST_OFFER2
		animeload ANIMATION_OFFER, tc
		snd SOUNDLIST_BALL1
		if ( tc >= MAX_CHARA_FOLLOWER & cdatan(CDATAN_RACE, tc) == "god" ) {
			dmghp tc, 333333, cc
		}
		else {
			dmghp tc, 999999, cc
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_EXCESSIVE_HEAL | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
				efid = SKILL_SPACT_INTENSIVE_POWER
				gosub *effect
				goto *effect_end
			}
		}
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 ) {
				efid = SKILL_SPACT_TIME_STOP
				gosub *effect
				goto *effect_end
			}
		}
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cbit(CHARA_BIT_LIVESTOCK, cc) == 1 ) {
				txt_nothinghappens
				goto *effect_end
			}
		}
		txt lang("âﬂèËÇ»Ç‹Ç≈ÇÃñ¸ÇµÇÃóÕÇ™" + name(tc) + "ÇÃëÃëgêDÇïˆâÛÇ≥ÇπÇÈÅcÅI", "Excessive heal power break tissue of target!")
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		animeid = ANIMATION_HEAL
		gosub *anime
		if ( tc >= MAX_CHARA_FOLLOWER & cdatan(CDATAN_RACE, tc) == "god" ) {
			dmgcon tc, CONDITION_BLEED, 9999
		}
		else {
			dmgcon tc, CONDITION_BLEED, 999999
		}
		healhp cc, 999999
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_SHINE_SNAIL | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			if ( cdata(CDATA_POWER_GAUGE, cc) < 10 ) {
				efid = SKILL_SPACT_INTENSIVE_POWER
				gosub *effect
				goto *effect_end
			}
		}
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 ) {
				cdata(CDATA_POWER_GAUGE, cc) -= 100
				efid = SKILL_SPACT_PIERCING_ZERO_SHOOT
				gosub *effect
				goto *effect_end
			}
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txt lang("ÅuÇ§Ç®Ç®Ç®Ç®Ç®ÅIÉVÉÉÉBÉBÉBÉCÉìÉXÉlÉFÉFÉFÉFÉCÉãÅIÅIÅv", cnvtalk("OK? Shine-Snail!!"))
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cbit(CHARA_BIT_LIVESTOCK, cc) == 1 ) {
				txt_nothinghappens
				goto *effect_end
			}
		}
		animeid = ANIMATION_HOLY
		animode = 100 + tc
		gosub *anime
		dmghp tc, 30000, cc
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_ELEMENTIA | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
				efid = SKILL_SPACT_INTENSIVE_POWER
				gosub *effect
				goto *effect_end
			}
		}
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 ) {
				efid = SKILL_SPACT_TIME_STOP
				gosub *effect
				goto *effect_end
			}
		}
		if ( synccheck(tc, -1) ) {
			txt lang("Åuâ‰ÇÕì±Ç≠ å≥ëfÇÃí≤òa äÆê¨ÇπÇÊ ãÜã…å≥ëfñÇñ@ÅiÉGÉåÉÅÉìÉeÉBÉAÅjÅv", cnvtalk("Complete Elementia!"))
		}
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cbit(CHARA_BIT_LIVESTOCK, cc) == 1 ) {
				txt_nothinghappens
				goto *effect_end
			}
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		animeload ANIMATION_SAND, tc
		snd SOUNDLIST_BOLT1
		if ( tc >= MAX_CHARA_FOLLOWER & cdatan(CDATAN_RACE, tc) == "god" ) {
			dmgmp tc, 333333
		}
		else {
			dmgmp tc, 999999
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_GOLD_RUSH | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			if ( cdata(CDATA_POWER_GAUGE, cc) < 98 ) {
				efid = SKILL_SPACT_INTENSIVE_POWER
				gosub *effect
				goto *effect_end
			}
		}
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 ) {
				efid = SKILL_SPACT_TIME_STOP
				gosub *effect
				goto *effect_end
			}
		}
		if ( synccheck(tc, -1) ) {
			txt lang("ÅuÉEÉ`ÇÃåJÇËèoÇ∑â©ã‡ÇÃñ“åÇÅAå©ÇΩÇ¡ÇƒÇ‚ÅIÅv", cnvtalk("This is my rush!"))
		}
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cbit(CHARA_BIT_LIVESTOCK, cc) == 1 ) {
				txt_nothinghappens
				goto *effect_end
			}
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		addbuff tc, BUFF_SPEED, 9999, 30
		addbuff tc, BUFF_HERO, 50000, 30
		addbuff tc, BUFF_CONTINGENCY, 9999, 30
		addbuff tc, BUFF_HOLY_SHIELD, 9999, 30
		addbuff tc, BUFF_REGENERATION, 9999, 30
		addbuff tc, BUFF_ATTRIBUTE_SHIELD, 9999, 30
		addbuff tc, BUFF_HOLY_VEIL, 9999, 30
		snd SOUNDLIST_ATK_ELEC
		animeload ANIMATION_THROW, tc
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_METEOR | _switch_sw ) {
		_switch_sw = 0
		if ( gdata(GDATA_AREA) == AREA_PET_ARENA | mdata(MDATA_TYPE) == MAP_TYPE_WORLD | gdata(GDATA_AREA) == AREA_PYRAMID | gdata(GDATA_AREA) == AREA_JAIL ) {
			if ( synccheck(tc, -1) ) {
				txt lang("Ë¶êŒÇÕëÂãCåóÇ≈îRÇ¶êsÇ´ÇƒÇµÇ‹Ç¡ÇΩÇÊÇ§ÇæÅcÅB", "These walls seem to resist your magic.")
				goto *effect_end
			}
		}
		txtef COLOR_BLUE
		txt lang("Ë¶êŒÇ™óéÇøÇƒÇ´ÇΩÅI", "Innumerable meteorites fall all over the area!")
		animeid = ANIMATION_METEOR
		gosub *anime
		repeat mdata(MDATA_HEIGHT)
			dy = cnt
			repeat mdata(MDATA_WIDTH)
				dx = cnt
				if ( rnd(3) == 0 ) {
					map(dx, dy, 0) = 12 + rnd(2)
				}
				if ( rnd(40) == 0 ) {
					addmef dx, dy, 5, 24, rnd(4) + 3, 50
				}
				if ( map(dx, dy, 1) != 0 ) {
					tc = map(dx, dy, 1) - 1
					if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
						if ( tc != CHARA_PLAYER ) {
							if ( rnd(cdata(CDATA_HP, tc) + 1) < rnd(cdata(CDATA_HP, cdata(CDATA_TAGTEAM_PARTNER, tc)) + 1) ) {
								tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
							}
							txt_guard
						}
					}
					dmg = sdata(SKILL_ATTR_MAG, cc) * efp / 10
					dmghp tc, dmg, cc, SKILL_RES_FIRE, 1000
					if ( cdata(CDATA_REFLECT_MAGIC, tc) > 0 ) {
						if ( cc >= MAX_CHARA_FOLLOWER | tc >= MAX_CHARA_FOLLOWER ) {
							dmghp cc, limit(dmg * cdata(CDATA_REFLECT_MAGIC, tc) / 200 + 1, 1, cdata(CDATA_MAX_HP, cc) / 10), tc, SKILL_RES_FIRE, 1000
							if ( synccheck(tc, -1) ) {
								txtef COLOR_PURPLE
								txt lang(name(tc) + "ÇÕñÇñ@ÇÃàÍïîÇîΩéÀÇµÇΩÅB", name(tc) + " reflected magic.")
							}
						}
					}
				}
			loop
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_MANA_BURST | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕÉ}ÉiÇâÇ´ï˙Ç¡ÇΩÅB", name(cc) + " released own mana.")
		}
		snd SOUNDLIST_BREATH1
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cdata(CDATA_RELATION, cc) == 10 | cc == CHARA_PLAYER ) {
				if ( cdata(CDATA_RELATION, cnt) == 10 | cnt == CHARA_PLAYER ) {
					continue
				}
			}
			if ( cc == cnt ) {
				continue
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			calcmagiccontrol cc, tc
			if ( stat == 1 ) {
				continue
			}
			if ( cdata(CDATA_MP, cc) > sdata(SKILL_ATTR_MAG, cc) ) {
				dmghp tc, cdata(CDATA_MP, cc), cc
			}
			else {
				dmghp tc, sdata(SKILL_ATTR_MAG, cc), cc
			}
		loop
		if ( cdata(CDATA_MP, cc) > sdata(SKILL_ATTR_MAG, cc) ) {
			cdata(CDATA_MP, cc) = 0
		}
		else {
			dmgmp cc, sdata(SKILL_ATTR_MAG, cc)
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_MP_BREATH | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_MP, cc) < cdata(CDATA_MAX_MP, cc) / 4 ) {
			txt_nothinghappens
			goto *effect_end
		}
		snd SOUNDLIST_ATK_MIND
		animeload ANIMATION_MP_BREATH, cc
		ele = SKILL_RES_FIRE
		repeat MAX_SKILL_RESIST - STARTING_SKILL_RESIST, STARTING_SKILL_RESIST
			if ( sdata(cnt, cc) >= sdata(ele, cc) ) {
				ele = cnt
			}
		loop
		get_route cdata(CDATA_X, cc), cdata(CDATA_Y, cc), tlocx, tlocy
		if ( stat == 0 ) {
			goto *effect_end
		}
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕ" + skillname(efid) + "ÇåJÇËèoÇµÇΩÅB", name(cc) + " blast" + _s(cc) + " " + skillname(efid) + ".")
		}
		dx = cdata(CDATA_X, cc)
		dy = cdata(CDATA_Y, cc)
		breath_list
		waitbk = cfg_animewait
		if ( cfg_animewait > 0 ) {
			cfg_animewait = 1
		}
		repeat 8
			snd SOUNDLIST_CRUSH1
			animeid = ANIMATION_MP_BREATH
			gosub *anime
			snd SOUNDLIST_ATK_FIRE
		loop
		cfg_animewait = waitbk
		ele = SKILL_RES_MAGIC
		repeat maxbreath
			dx = breathlist(0, cnt)
			dy = breathlist(1, cnt)
			if ( map(dx, dy, 0) != 701 & map(dx, dy, 0) != 671 ) {
				map(dx, dy, 0) = 38
			}
			if ( dx == cdata(CDATA_X, cc) & dy == cdata(CDATA_Y, cc) ) {
				continue
			}
			if ( gdata(GDATA_RIDER) != 0 ) {
				if ( gdata(GDATA_RIDER) == cc ) {
					if ( tc == CHARA_PLAYER ) {
						continue
					}
				}
			}
			if ( map(dx, dy, 1) != 0 ) {
				tc = map(dx, dy, 1) - 1
				if ( cc != tc ) {
					if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
						if ( tc != CHARA_PLAYER ) {
							if ( rnd(cdata(CDATA_HP, tc) + 1) < rnd(cdata(CDATA_HP, cdata(CDATA_TAGTEAM_PARTNER, tc)) + 1) ) {
								tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
							}
							txt_guard
						}
					}
					dmg = role(dice1, dice2, bonus)
					if ( cdata(CDATA_ENHANCE_BREATH, cc) != 0 ) {
						dmg = dmg * (11 + limit(cdata(CDATA_ENHANCE_BREATH, cc) / 10, 0, 200) / 10) / 10
					}
					calcmagiccontrol cc, tc
					if ( stat == 1 ) {
						continue
					}
					if ( synccheck(tc, -1) ) {
						txtmore
						if ( tc >= MAX_CHARA_FOLLOWER ) {
							gdata(GDATA_DMG_TYPE) = 2
							txt3rd = 1
							txt lang(name(tc) + "Ç…ñΩíÜÇµ", "The breath hits " + name(tc) + " and")
						}
						else {
							txt lang(name(tc) + "Ç…ñΩíÜÇµÇΩÅB", "The breath hits " + name(tc) + ".")
						}
					}
					dmghp tc, dmg, cc, ele, elep
				}
			}
		loop
		dmgmp cc, cdata(CDATA_MAX_MP, cc) / 4
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_READING_PARTY | _switch_sw ) {
		_switch_sw = 0
		ens2 = 0
		if ( cc != CHARA_PLAYER ) {
			goto *effect_end
		}
		txt lang("ì«ÇﬁëŒè€ÇÕÅH", "Which book?")
		invsubroutine = 1
		invctrl = 23, 12
		snd SOUNDLIST_INV
		gosub *com_inventory
		if ( stat == 1 ) {
			studybuddy = ""
			repeat MAX_CHARA_TOTAL
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( cc == cnt ) {
					continue
				}
				if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
					if ( cnt >= MAX_CHARA_FOLLOWER ) {
						continue
					}
				}
				if ( cc >= MAX_CHARA_FOLLOWER ) {
					if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
						continue
					}
				}
				tc = cnt
				dx = cdata(CDATA_X, tc)
				dy = cdata(CDATA_Y, tc)
				if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
					continue
				}
				if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
					continue
				}
				if ( studybuddy == "" ) {
					studybuddy = name(tc)
				}
				else {
					studybuddy = "your friends"
				}
				ens2 += limit((sdata(SKILL_NORMAL_LITERACY, tc) + sdata(SKILL_NORMAL_MEMORIZATION, tc) + 1) / 2, 3, 3 + sdata(SKILL_NORMAL_LITERACY, cc) / 5)
			loop
			if ( ens2 > 100 ) {
				ens2 = 100
			}
			if ( ens2 == 0 ) {
				txt lang("Ç†Ç»ÇΩÇÕÇ–Ç∆ÇËÇ⁄Ç¡ÇøÇæÅcÅB", "You're all alone.")
				goto *effect_end
			}
			txt lang("Ç†Ç»ÇΩÇ∆íáä‘ÇΩÇøÇÕì«èëâÔÇénÇﬂÇΩÅB", "You started a reading party with " + studybuddy + ".")
			gosub *readSpellbook
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_LOCK_BREAK | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			goto *effect_end
		}
		txt lang("äJÇØÇÈëŒè€ÇÕÅH", "Which target?")
		invsubroutine = 1
		invctrl = 23, 14
		snd SOUNDLIST_INV
		gosub *com_inventory
		if ( stat == 1 ) {
			item_separate ci
			if ( inv(INV_ITEM_PARAM1, ci) != 0 ) {
				if ( inv(INV_ITEM_PARAM2, ci) != 0 ) {
					if ( inv(INV_ITEM_ID, ci) != ITEM_ID_CARD_PACK ) {
						breakstr = 0
						repeat MAX_CHARA_FOLLOWER - 1, 1
							if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
								continue
							}
							if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), cdata(CDATA_X, cnt), cdata(CDATA_Y, cnt)) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
								continue
							}
							if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), cdata(CDATA_X, cnt), cdata(CDATA_Y, cnt)) == 0 ) {
								continue
							}
							breakstr += sdata(SKILL_ATTR_STR, cnt)
							if ( sdata(SKILL_NORMAL_LOCK_PICKING, cnt) > 0 ) {
								breakstr += sdata(SKILL_NORMAL_LOCK_PICKING, cnt)
							}
						loop
						breakstr += sdata(SKILL_ATTR_STR, CHARA_PLAYER)
						if ( sdata(SKILL_NORMAL_LOCK_PICKING, CHARA_PLAYER) > 0 ) {
							breakstr += sdata(SKILL_NORMAL_LOCK_PICKING, CHARA_PLAYER)
						}
						snd SOUNDLIST_LOCKED1
						await 70
						snd SOUNDLIST_LOCKED1
						await 70
						snd SOUNDLIST_LOCKED1
						await 70
						snd SOUNDLIST_BASH1
						await 100
						snd SOUNDLIST_BASH1
						await 100
						snd SOUNDLIST_BALL1
						if ( breakstr / 2 < inv(INV_ITEM_PARAM2, ci) ) {
							txtef COLOR_BLUE
							txt lang("ÅcóÕîCÇπÇ≈Ç‡ñ≥óùÇæÇ∆Ç¢Ç§Ç±Ç∆Ç™ÇÌÇ©Ç¡ÇΩÅB", "...It's impossible to open.")
							goto *effect_end
						}
						if ( rnd(rnd(breakstr + 1) + 1) < inv(INV_ITEM_PARAM2, ci) ) {
							txtef COLOR_BLUE
							txt lang("ÅcÇ»Ç©Ç»Ç©äÊè‰ÇæÅB", "...It's quite sturdy.")
							goto *effect_end
						}
						snd SOUNDLIST_CRUSH1
						txtef COLOR_GREEN
						txt lang("è˘ÇÃîjâÛÇ…ê¨å˜ÇµÇΩÅI", "You succeeded in destroying the lock!")
						ri = ci
						cc = CHARA_PLAYER
						gosub *open_chest
						skillexp SKILL_ATTR_STR, CHARA_PLAYER, 50
						skillexp SKILL_NORMAL_LOCK_PICKING, CHARA_PLAYER, 40 + inv(INV_ITEM_PARAM2, ci) / 3
						repeat MAX_CHARA_FOLLOWER - 1, 1
							if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
								continue
							}
							if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), cdata(CDATA_X, cnt), cdata(CDATA_Y, cnt)) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
								continue
							}
							if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), cdata(CDATA_X, cnt), cdata(CDATA_Y, cnt)) == 0 ) {
								continue
							}
							skillexp SKILL_ATTR_STR, cnt, 50
							if ( sdata(SKILL_NORMAL_LOCK_PICKING, cnt) > 0 ) {
								skillexp SKILL_NORMAL_LOCK_PICKING, cnt, 40
							}
						loop
					}
				}
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_DUPLICANE | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			goto *effect_end
		}
		if ( gdata(GDATA_FLAG_DUPLICANE) == 100 ) {
			gdata(GDATA_FLAG_DUPLICANE) = 0
			txt lang("Ç†Ç»ÇΩÇÕïÅí Ç…èÒÇ≈çUåÇÇ∑ÇÈÇ±Ç∆Ç…ÇµÇΩÅB", name(cc) + " will attack by normal cane.")
			return
		}
		if ( gdata(GDATA_FLAG_DUPLICANE) == 0 ) {
			gdata(GDATA_FLAG_DUPLICANE) = 100
			snd SOUNDLIST_ENC2
			txt lang("Ç†Ç»ÇΩÇÕï°êªÇµÇΩèÒÇ≈çUåÇÇ∑ÇÈÇ±Ç∆Ç…ÇµÇΩÅB", name(cc) + " will attack by duplicated cane.")
			return
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_VINDALIAN_JIUJITSU | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_CONDITION_JIU_JITSU, cc) != 0 ) {
			cdata(CDATA_CONDITION_JIU_JITSU, cc) = 0
			txt lang(name(cc) + "ÇÕåƒãzÇêÆÇ¶ÅAç\Ç¶ÇïœÇ¶ÇΩÅB", name(cc) + " established a breathing and changed the posture.")
			goto *effect_end
		}
		if ( cdata(CDATA_CONDITION_JIU_JITSU, cc) == 0 ) {
			snd SOUNDLIST_SWING
			cdata(CDATA_CONDITION_JIU_JITSU, cc) = 100
			txt lang(name(cc) + "ÇÕåƒãzÇêÆÇ¶ÅAè_èpÇÃç\Ç¶ÇÇ∆Ç¡ÇΩÅB", name(cc) + " established a breathing and changed the posture.")
			goto *effect_end
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_ALCHEMICAL_RAIN | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			snd SOUNDLIST_RAIN
			txtef COLOR_BLUE
			txt lang("âJÇ™ï”ÇËÇ…ç~ÇËíçÇ¢ÇæÅB", "The rain pours down nearby.")
			repeat MAX_CHARA_TOTAL
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				tc = cnt
				dx = cdata(CDATA_X, tc)
				dy = cdata(CDATA_Y, tc)
				if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
					continue
				}
				if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
					continue
				}
				wet tc, 30
				if ( tc >= MAX_CHARA_FOLLOWER ) {
					hostileaction cc, tc
				}
			loop
			goto *effect_end
		}
		txt lang("égópÇ∑ÇÈÉ|Å[ÉVÉáÉìÇÕÅH", "Which potion?")
		invsubroutine = 1
		invctrl = 23, 11
		snd SOUNDLIST_INV
		gosub *com_inventory
		if ( stat == 1 ) {
			snd SOUNDLIST_RAIN
			txtef COLOR_BLUE
			txt lang(itemname(ci) + "ÇÃâJÇ™ï”ÇËÇ…ç~ÇËíçÇ¢ÇæÅB", itemname(ci) + " rain began to fall.")
			ccthrowpotion = cc
			cibk = ci
			inv(INV_ITEM_NUM, ci)--
			gosub *calcBurdenPc
			repeat MAX_CHARA_TOTAL
				potionthrow = 90
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				tc = cnt
				dx = cdata(CDATA_X, tc)
				dy = cdata(CDATA_Y, tc)
				if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
					continue
				}
				if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
					continue
				}
				if ( inv(INV_ITEM_ID, ci) != ITEM_ID_ESSENTIAL_OIL & inv(INV_ITEM_ID, ci) != ITEM_ID_GASOLINE ) {
					wet tc, 25
				}
				if ( tc >= MAX_CHARA_FOLLOWER ) {
					hostileaction CHARA_PLAYER, tc
				}
				cc = tc
				ci = cibk
				dbmode = DBMODE_ON_DRINK
				dbid = inv(INV_ITEM_ID, ci)
				gosub *db_item
			loop
			cc = ccthrowpotion
			potionthrow = 0
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_HAZARD_RECIPE | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			txt_nothinghappens
			goto *effect_end
			snd SOUNDLIST_RAIN
			txtef COLOR_BLUE
			txt lang("âJÇ™ï”ÇËÇ…ç~ÇËíçÇ¢ÇæÅB", "Rain pours down all around.")
			repeat MAX_CHARA_TOTAL
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				tc = cnt
				dx = cdata(CDATA_X, tc)
				dy = cdata(CDATA_Y, tc)
				if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
					continue
				}
				if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
					continue
				}
				wet tc, 30
				if ( tc >= MAX_CHARA_FOLLOWER ) {
					hostileaction cc, tc
				}
			loop
			goto *effect_end
		}
		txt lang("ëŒè€Ç…Ç∑ÇÈêHïiÇÕÅH", "Which food?")
		invsubroutine = 1
		invctrl = 23, 19
		snd SOUNDLIST_INV
		gosub *com_inventory
		if ( stat == 1 ) {
			snd SOUNDLIST_ATK_POISON
			item_separate ci
			txtef COLOR_RED
			txt lang(itemname(ci) + "Ç…ÉAÉåÉìÉWÇâ¡Ç¶ÇΩÅI", "You arranged " + itemname(ci) + ".")
			ibitmod ITEM_BIT_HAZARD, ci, 1
			inv(INV_ITEM_COL, ci) = COLOR_DARK_GRAY3
			inv(INV_ITEM_VALUE, ci) = 1
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_ZERO_SHOOT | _switch_sw ) {
		_switch_sw = 0
		if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
			tc = cdata(CDATA_TARGET, cc)
			gosub *act_melee
			goto *effect_end
		}
		gosub *FindRangeWeapon
		if ( stat == 1 ) {
			if ( ammo == (-1) ) {
				goto *effect_end
			}
			gdata(GDATA_TEMPORARY_FLAGS3) = 150
			attackrange = 1
			extraattack = 0
			gosub *act_attack
		}
		gdata(GDATA_TEMPORARY_FLAGS3) = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_SHADOW_RUSH | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 75 ) {
			if ( cc == CHARA_PLAYER ) {
				txt_nothinghappens
				goto *effect_end
			}
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 75
		if ( cdata(CDATA_ID, cc) == CREATURE_ID_GETUEI_THE_NINJA_MASTER ) {
			txt lang("Åuí¥îEñ@ÅEâeÇÃïëÅIÅv", "*Shadow Dance*")
			snd SOUNDLIST_CARD1
			redraw 0
			gosub *screen_draw
			gosub *screen_fade
			gsel 4
			pos 0, 0
			picload exedir + "graphic\\face1" + devfile + ".bmp", 1
			gsel 0
		}
		else {
			snd SOUNDLIST_ENC
			animeload ANIMATION_GIGA, cc
		}
		tcbk = tc
		gdata(GDATA_TEMPORARY_FLAGS2) = 100
		repeat MAX_CHARA_TOTAL
			if ( gdata(GDATA_AREA) == AREA_PET_ARENA ) {
				if ( cnt == CHARA_PLAYER ) {
					continue
				}
			}
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
					continue
				}
			}
			if ( cdata(CDATA_DIRECTIVE_MODE, cnt) == DIRECTIVE_MODE_DEFENSIVE ) {
				continue
			}
			cc = cnt
			dx = cdata(CDATA_X, cc)
			dy = cdata(CDATA_Y, cc)
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( cdata(CDATA_CONDITION_SLEEP, cc) != 0 | cdata(CDATA_CONDITION_DIM, cc) >= 60 | cdata(CDATA_CONDITION_BLIND, cc) != 0 | cdata(CDATA_CONDITION_PARALYZE, cc) != 0 | cdata(CDATA_CONDITION_SUFFOCATION, cc) != 0 | cdata(CDATA_CONDITION_BRAINWASH, cc) != 0 ) {
				continue
			}
			tc = tcbk
			efid = SKILL_SPACT_SHADOW_STEP
			gosub *effect
			if ( cc < MAX_CHARA_FOLLOWER ) {
				hostileaction cc, tc
			}
		loop
		gdata(GDATA_TEMPORARY_FLAGS2) = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_FIRE_A_VOLLEY | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 50 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 50
		snd SOUNDLIST_ENC
		animeload ANIMATION_GIGA, cc
		tcbk = tc
		gdata(GDATA_TEMPORARY_FLAGS2) = 100
		repeat 3
			repeat MAX_CHARA_TOTAL
				if ( gdata(GDATA_AREA) == AREA_PET_ARENA ) {
					if ( cnt == 0 ) {
						continue
					}
				}
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
					if ( cnt >= MAX_CHARA_FOLLOWER ) {
						continue
					}
				}
				if ( cc >= MAX_CHARA_FOLLOWER ) {
					if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
						continue
					}
				}
				if ( cdata(CDATA_DIRECTIVE_MODE, cnt) == DIRECTIVE_MODE_DEFENSIVE ) {
					continue
				}
				cc = cnt
				dx = cdata(CDATA_X, cc)
				dy = cdata(CDATA_Y, cc)
				if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
					continue
				}
				if ( cdata(CDATA_CONDITION_SLEEP, cc) != 0 | cdata(CDATA_CONDITION_DIM, cc) >= 60 | cdata(CDATA_CONDITION_BLIND, cc) != 0 | cdata(CDATA_CONDITION_PARALYZE, cc) != 0 | cdata(CDATA_CONDITION_SUFFOCATION, cc) != 0 | cdata(CDATA_CONDITION_BRAINWASH, cc) != 0 ) {
					continue
				}
				tc = tcbk
				if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
					extraattack = 0
					gosub *act_melee
					if ( cc != CHARA_PLAYER ) {
						snd SOUNDLIST_ATK_FIRE
					}
					attackvar = 0
					ammoproc = -1
					if ( tc >= MAX_CHARA_FOLLOWER ) {
						hostileaction CHARA_PLAYER, tc
					}
				}
				if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) != 1 ) {
					gosub *FindRangeWeapon
					if ( stat == 1 ) {
						attackrange = 1
						extraattack = 0
						gosub *act_attack
						if ( cc != CHARA_PLAYER ) {
							snd SOUNDLIST_ATK_FIRE
						}
						attackvar = 0
						ammoproc = -1
						if ( tc >= MAX_CHARA_FOLLOWER ) {
							hostileaction CHARA_PLAYER, tc
						}
					}
				}
			loop
		loop
		gdata(GDATA_TEMPORARY_FLAGS2) = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_OVERRAY | _switch_sw ) {
		_switch_sw = 0
		if ( findbuff(cc, BUFF_MIST_OF_SILENCE) != (-1) ) {
			txt lang("íæñŸÇÃñ∂Ç™ñÇóÕÇÃî≠ê∂Çëjé~ÇµÇΩÅB", "The mist of silence interrupts a spell.")
			goto *effect_end
		}
		if ( cdata(CDATA_POWER_GAUGE, cc) < 50 ) {
			txt_nothinghappens
			goto *effect_end
		}
		tcbk = tc
		malm = 0
		waitbk = cfg_animewait
		if ( cfg_animewait > 0 ) {
			cfg_animewait = 1
		}
		repeat MAX_CHARA_TOTAL
			if ( gdata(GDATA_AREA) == AREA_PET_ARENA ) {
				if ( cnt == CHARA_PLAYER ) {
					continue
				}
			}
			if ( cnt == cc ) {
				continue
			}
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
					continue
				}
			}
			if ( findbuff(cnt, BUFF_MIST_OF_SILENCE) != (-1) ) {
				continue
			}
			if ( cdata(CDATA_DIRECTIVE_MODE, cnt) == DIRECTIVE_MODE_DEFENSIVE ) {
				continue
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( cdata(CDATA_CONDITION_SLEEP, tc) != 0 | cdata(CDATA_CONDITION_DIM, cc) >= 60 | cdata(CDATA_CONDITION_PARALYZE, tc) != 0 | cdata(CDATA_CONDITION_SUFFOCATION, tc) != 0 | cdata(CDATA_CONDITION_BRAINWASH, tc) != 0 ) {
				continue
			}
			customtalk tc, DBMODE_FLAVOR_MULTIPLE
			gosub *convert_word
			if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
				if ( jp ) {
					txt cdatan(CDATAN_NAME, tc) + "ÇÕ" + cdatan(CDATAN_NAME, cc) + "Ç…èdÇÀÇƒârè•ÇµÇΩÅB"
				}
			}
			animeload 46, tc
			snd SOUNDLIST_ATK_MIND
			cdata(CDATA_MP, tc) -= cdata(CDATA_MAX_MP, tc) / 10 + 1
			malm += sdata(SKILL_ATTR_MAG, tc) + 10
		loop
		cfg_animewait = waitbk
		if ( malm == 0 ) {
			txt lang(cdatan(CDATAN_NAME, cc) + "ÇÕÇ–Ç∆ÇËÇ⁄Ç¡ÇøÇæÅcÅB", cdatan(CDATAN_NAME, cc) + " is lonely.")
			goto *effect_end
		}
		if ( malm > sdata(SKILL_ATTR_MAG, cc) * 9 ) {
			malm = sdata(SKILL_ATTR_MAG, cc) * 9
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 50
		tc = tcbk
		gdata(GDATA_TEMPORARY_FLAGS) = 666
		motomag = sdata(SKILL_ATTR_MAG, cc)
		sdata(SKILL_ATTR_MAG, cc) += malm
		efid = SKILL_SPELL_CRYSTAL_SPEAR
		gosub *cast_proc
		sdata(SKILL_ATTR_MAG, cc) = motomag
		gdata(GDATA_TEMPORARY_FLAGS) = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_CONTINUOUS_ATTACKS | _switch_sw ) {
		_switch_sw = 0
		if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
			tc = cdata(CDATA_TARGET, cc)
			gosub *act_melee
			goto *effect_end
		}
		waitbk = cfg_animewait
		attackbk = cfg_attackanime
		if ( cfg_animewait > 0 ) {
			cfg_animewait = 1
		}
		if ( cfg_attackanime > 0 ) {
			cfg_attackanime = 0
		}
		gdata(GDATA_TEMPORARY_FLAGS2) = 1200
		repeat 17
			if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
				continue
			}
			extraattack = 0
			animeid = ANIMATION_NORMAL_ATTACK
			gosub *anime
			snd SOUNDLIST_ATK2
			gosub *act_melee
		loop
		if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
			snd SOUNDLIST_BOLT1
		}
		if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
			animeid = ANIMATION_NORMAL_ATTACK
			gosub *anime
			snd SOUNDLIST_BOLT1
			gosub *act_melee
		}
		cfg_animewait = waitbk
		cfg_attackanime = attackbk
		gdata(GDATA_TEMPORARY_FLAGS2) = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_RAMPAGE | _switch_sw ) {
		_switch_sw = 0
		animeload ANIMATION_GENE, cc
		snd SOUNDLIST_ATK_FIRE
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( cdata(CDATA_CONDITION_ANGRY, tc) > 0 ) {
				if ( synccheck(tc, -1) ) {
					txt lang(name(tc) + "ÇÕÇ∑Ç≈Ç…ã∂ñ\âªÇµÇƒÇ¢ÇÈÅB", name(cc) + " has already gone berserk.")
				}
			}
			else {
				if ( synccheck(tc, -1) ) {
					txt lang(name(tc) + "ÇÕã∂ñ\âªÇµÇΩÅB", name(cc) + " went berserk.")
				}
				snd SOUNDLIST_ATK_FIRE
				cdata(CDATA_CONDITION_ANGRY, tc) += rnd(20) + 10
			}
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_SYNCHRO_HEARTS | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) / 4 ) {
			txt lang("ãáínÇ≈Ç»ÇØÇÍÇŒî≠ìÆÇµÇ»Ç¢ÅB", "Did not meet the conditions of use.")
			goto *effect_end
		}
		txtef COLOR_BLUE
		txt lang("èWÇ¢Çµ„JÇ™ÅAçXÇ»ÇÈóÕÇñaÇ¨ÇæÇ∑ÅI", "With our hearts united, we spin off even more power!")
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( cdata(CDATA_IMPRESSION, tc) < 100 ) {
				continue
			}
			snd SOUNDLIST_OFFER2
			customtalk tc, DBMODE_FLAVOR_KIZUNA
			gosub *convert_word
			if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
				txt lang("ÅuÇ‹ÇæêÌÇ¶ÇÈÅIÅv", cnvtalk("I can still fight!")), lang("ÅuèüïâÇÕÇ±ÇÍÇ©ÇÁÅIÅv", cnvtalk("The game is just starting!")), lang("ÅuêSÇàÍÇ¬Ç…ÅcÅIÅv", cnvtalk("Together as one...!")), lang("Åu„JÉpÉèÅ[ÅIÅv", cnvtalk("Alliance Power!"))
			}
			addbuff tc, BUFF_BOOST, cdata(CDATA_IMPRESSION, tc) * 2, 50
			addbuff tc, BUFF_REGENERATION, cdata(CDATA_IMPRESSION, tc) * 2, 50
			healhp tc, cdata(CDATA_MAX_HP, tc) / 2
			if ( cdata(CDATA_CONDITION_BRAINWASH, tc) > 1 ) {
				cdata(CDATA_CONDITION_BRAINWASH, tc) = 1
			}
			healhp cc, cdata(CDATA_MAX_HP, cc) / 10
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_SUPER_REGEN | _switch_sw ) {
		_switch_sw = 0
		txtef COLOR_YELLOW
		txt_skillname
		healhp tc, cdata(CDATA_MAX_HP, tc) / 10 + 1
		addbuff tc, BUFF_SUPER_REGEN, 4000, 20
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_BROWBEAT | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_CONDITION_ATROPHY, tc) > 0 ) {
			txt_nothinghappens
		}
		else {
			if ( synccheck(tc, -1) ) {
				txt lang(name(tc) + "ÇÕàÿèkÇµÇΩÅB", name(tc) + " was daunted by the browbeat.")
			}
			cdata(CDATA_CONDITION_ATROPHY, tc) += 5
			animeload ANIMATION_FIZZLE, tc
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_SHINING_WAVE | _switch_sw ) {
		_switch_sw = 0
		txt lang(name(cc) + "ÇÕè’åÇîgìÆÇï˙Ç¡ÇΩÅB", name(cc) + " sends out a shockwave.")
		if ( gdata(GDATA_ACTIVATE_PROC) == 100 ) {
			if ( ammo != (-1) ) {
				efp = sdata(SKILL_NORMAL_MARKSMAN, cc)
			}
			else {
				efp = sdata(SKILL_NORMAL_TACTICS, cc)
			}
		}
		else {
			efp = sdata(SKILL_NORMAL_TACTICS, cc)
		}
		get_route cdata(CDATA_X, cc), cdata(CDATA_Y, cc), tlocx, tlocy
		if ( stat == 0 ) {
			goto *effect_end
		}
		zannku = 10
		animeid = ANIMATION_BOLT
		gosub *anime
		dx = cdata(CDATA_X, cc)
		dy = cdata(CDATA_Y, cc)
		repeat 20
			route_info dx, dy, cnt
			if ( stat == 0 ) {
				break
			}
			else {
				if ( stat == (-1) ) {
					continue
				}
			}
			if ( dist(dx, dy, cdata(CDATA_X, cc), cdata(CDATA_Y, cc)) > sdataref(SKILL_DATAREF_TG_RANGE, efid) \ EXT_SDATAREF + 1 ) {
				break
			}
			if ( dx == cdata(CDATA_X, cc) & dy == cdata(CDATA_Y, cc) ) {
				continue
			}
			if ( map(dx, dy, 1) != 0 ) {
				tc = map(dx, dy, 1) - 1
				if ( cc != tc ) {
					if ( gdata(GDATA_RIDER) != 0 ) {
						if ( gdata(GDATA_RIDER) == cc ) {
							if ( tc == CHARA_PLAYER ) {
								continue
							}
						}
					}
					calcmagiccontrol cc, tc
					if ( stat == 1 ) {
						continue
					}
					if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
						if ( tc != CHARA_PLAYER ) {
							if ( rnd(cdata(CDATA_HP, tc) + 1) < rnd(cdata(CDATA_HP, cdata(CDATA_TAGTEAM_PARTNER, tc)) + 1) ) {
								tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
							}
							txt_guard
						}
					}
					dmghp tc, sqrt(efp + 50) * efp + rnd(sdata(SKILL_ATTR_STR, cc) * 2), cc, SKILL_RESDMG_CRUSH, 1000
				}
			}
		loop
		zannku = 0
		efp = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_BLOOD_STREAM | _switch_sw ) {
		_switch_sw = 0
		txt lang(name(cc) + "ÇÕé©ï™ÇÃååâtÇà≥èkÇµÇƒï˙Ç¡ÇΩÅB", name(cc) + " compressed and released a stream of blood.")
		if ( cdata(CDATA_CONDITION_BLEED, cc) < 100 ) {
			cdata(CDATA_CONDITION_BLEED, cc) += 8
		}
		efp = sdata(SKILL_ATTR_WIL, cc)
		get_route cdata(CDATA_X, cc), cdata(CDATA_Y, cc), tlocx, tlocy
		if ( stat == 0 ) {
			goto *effect_end
		}
		zannku = 10
		animeid = ANIMATION_BOLT
		gosub *anime
		dx = cdata(CDATA_X, cc)
		dy = cdata(CDATA_Y, cc)
		repeat 20
			route_info dx, dy, cnt
			if ( stat == 0 ) {
				break
			}
			else {
				if ( stat == (-1) ) {
					continue
				}
			}
			if ( dist(dx, dy, cdata(CDATA_X, cc), cdata(CDATA_Y, cc)) > sdataref(SKILL_DATAREF_TG_RANGE, efid) \ EXT_SDATAREF + 1 ) {
				break
			}
			if ( dx == cdata(CDATA_X, cc) & dy == cdata(CDATA_Y, cc) ) {
				continue
			}
			if ( map(dx, dy, 1) != 0 ) {
				tc = map(dx, dy, 1) - 1
				if ( cc != tc ) {
					if ( gdata(GDATA_RIDER) != 0 ) {
						if ( gdata(GDATA_RIDER) == cc ) {
							if ( tc == CHARA_PLAYER ) {
								continue
							}
						}
					}
					calcmagiccontrol cc, tc
					if ( stat == 1 ) {
						continue
					}
					if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
						if ( tc != CHARA_PLAYER ) {
							if ( rnd(cdata(CDATA_HP, tc) + 1) < rnd(cdata(CDATA_HP, cdata(CDATA_TAGTEAM_PARTNER, tc)) + 1) ) {
								tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
							}
							txt_guard
						}
					}
					dmg = sqrt(sdata(SKILL_ATTR_CON, cc) + 1) * efp + rnd(sdata(SKILL_ATTR_CON, cc) * 2)
					if ( cdata(CDATA_CONDITION_BLEED, cc) >= 10 & cdata(CDATA_CONDITION_BLEED, cc) < 20 ) {
						dmg = dmg * 3 / 2
					}
					if ( cdata(CDATA_CONDITION_BLEED, cc) >= 20 & cdata(CDATA_CONDITION_BLEED, cc) < 30 ) {
						dmg = dmg * 2
					}
					if ( cdata(CDATA_CONDITION_BLEED, cc) >= 30 & cdata(CDATA_CONDITION_BLEED, cc) < 40 ) {
						dmg = dmg * 5 / 2
					}
					if ( cdata(CDATA_CONDITION_BLEED, cc) >= 40 ) {
						dmg = dmg * 3
					}
					dmghp tc, dmg, cc, SKILL_RESDMG_CRUSH, 1000
				}
			}
		loop
		zannku = 0
		efp = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_MEGID_FLAME | _switch_sw ) {
		_switch_sw = 0
		txt lang(name(cc) + "ÇÕèjïüÇèƒÇ´êsÇ≠Ç∑îgìÆÇï˙Ç¡ÇΩÅB", name(cc) + " released a wave of dispelling flames.")
		animeid = ANIMATION_RAGNA
		gosub *anime
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) == cdata(CDATA_RELATION, cc) ) {
					continue
				}
			}
			tc = cnt
			addbuff tc, BUFF_ELEMENT_SCAR, 150, 20
			p = 0
			repeat MAX_BLESSINGS + MAX_HEXES
				i = MAX_BLESSINGS + MAX_HEXES - cnt - 1
				if ( bdataref(0, cdata(STARTING_CDATA_BUFF + i * ARRAY_CDATA_BUFF, tc)) != 1 ) {
					continue
				}
				if ( cdata(STARTING_CDATA_BUFF + i * ARRAY_CDATA_BUFF, tc) == BUFF_PUNISHMENT ) {
					continue
				}
				if ( cdata(STARTING_CDATA_BUFF + i * ARRAY_CDATA_BUFF, tc) == 0 ) {
					continue
				}
				delbuff tc, i
				p++
				continue cnt
			loop
			if ( p > 0 ) {
				snd SOUNDLIST_ATK_FIRE
				animeload ANIMATION_GENE, tc
				p = 0
			}
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_BIND | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_CONDITION_BIND, tc) > 0 ) {
			goto *effect_end
		}
		else {
			snd SOUNDLIST_EAT1
			if ( synccheck(tc, -1) ) {
				txt lang(name(tc) + "ÇÕë©îõÇ≥ÇÍÇΩÅB", name(tc) + " was bound.")
			}
			cdata(CDATA_CONDITION_BIND, tc) += 10
			animeload ANIMATION_ARROW_RAIN, tc
			snd SOUNDLIST_EAT1
			snd SOUNDLIST_EAT1
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_SMOKE_MIRROR | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cbit(CHARA_BIT_LIVESTOCK, cc) == 1 | cdata(CDATA_ALLIED, cc) == 100 ) {
				txt_nothinghappens
				goto *effect_end
			}
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		cdata(CDATA_POWER_GAUGE, cc) -= 50
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 50 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		addbuff cc, BUFF_BLACK_MIRROR, 300, 300
		snd SOUNDLIST_ATK_DARK
		repeat mdata(MDATA_HEIGHT)
			dy = cnt
			repeat mdata(MDATA_WIDTH)
				dx = cnt
				if ( chipm(CHIPM_ATTRIB, map(dx, dy, 0)) & CHIPM_ATTRIB_CANT_PASS ) {
					continue
				}
				addmef dx, dy, 9, 963, 300, 300
			loop
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_INSANE_WAVE | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
				efid = SKILL_SPACT_INTENSIVE_POWER
				gosub *effect
				goto *effect_end
			}
		}
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 ) {
				efid = SKILL_SPACT_TIME_STOP
				gosub *effect
				goto *effect_end
			}
		}
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cbit(CHARA_BIT_LIVESTOCK, cc) == 1 ) {
				txt_nothinghappens
				goto *effect_end
			}
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txt lang("ÅuÇ”Ç”Ç”ÅcÇ†ÇÕÇÕÇÕÇÕÇÕÇ¡ÅIê‚ëŒÇ…ì¶Ç™Ç≥Ç»Ç¢ÅcÅv", cnvtalk("You'll not escape..."))
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cbit(CHARA_BIT_LIVESTOCK, cc) == 1 ) {
				txt_nothinghappens
				goto *effect_end
			}
		}
		snd SOUNDLIST_CURSE3
		animeload ANIMATION_GARDEN, tc
		snd SOUNDLIST_OFFER2
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cc) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			tc = cnt
			if ( tc >= MAX_CHARA_FOLLOWER & cdatan(CDATAN_RACE, tc) == "god" ) {
				dmgcon tc, CONDITION_INSANE, 1000
			}
			else {
				dmgcon tc, CONDITION_INSANE, 2000
			}
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_GROUP_HYPNOSIS | _switch_sw ) {
		_switch_sw = 0
		txtef COLOR_PURPLE
		txt lang(name(cc) + "ÇÕçLîÕàÕÇ…ç√ñ∞èpÇï˙Ç¡ÇΩÅI", name(cc) + " spread hypnotism extensively!")
		snd SOUNDLIST_CHEST1
		animeload 48, tc
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cbit(CHARA_BIT_NECRO, cnt) ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION_ORG, cnt) == cdata(CDATA_RELATION_ORG, cc) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( cdata(CDATA_CONDITION_SLEEP, tc) == 0 ) {
				dmgcon tc, CONDITION_SLEEP, limit(sdata(SKILL_RES_MIND, cc), 10, 2000)
				if ( cdata(CDATA_CONDITION_SLEEP, tc) > 10 ) {
					cdata(CDATA_CONDITION_SLEEP, tc) = 10
				}
			}
			addbuff tc, BUFF_NIGHTMARE, 150, 10
			if ( cdata(CDATA_CONDITION_SLEEP, tc) != 0 | cc == CHARA_PLAYER | cdata(CDATA_ALLIED, cc) != 0 ) {
				continue
			}
			if ( tc == CHARA_PLAYER ) {
				dmgcon CHARA_PLAYER, CONDITION_CONFUSE, 100
				if ( rnd(sdata(SKILL_ATTR_CHA, cc)) >= rnd(sdata(SKILL_ATTR_WIL, CHARA_PLAYER)) * 2 & findbuff(CHARA_PLAYER, BUFF_TAG_FORCE) == (-1) ) {
					animeload ANIMATION_FIZZLE, tc
					body = rnd(MAX_EQUIP_SLOT) + 1
					repeat MAX_EQUIP_SLOT_TOTAL, CDATA_STARTING_EQUIP_SLOTS
						if ( cdata(cnt, CHARA_PLAYER) / EXT_EQUIP_SLOTS == body ) {
							p = cdata(cnt, CHARA_PLAYER) \ EXT_EQUIP_SLOTS
							if ( p == 0 ) {
								continue
							}
							p--
							inv(INV_ITEM_EQUIP, p) = 0
							cdata(cnt, CHARA_PLAYER) = cdata(cnt, CHARA_PLAYER) / EXT_EQUIP_SLOTS * EXT_EQUIP_SLOTS
							txtef COLOR_PURPLE
							txt lang(name(CHARA_PLAYER) + "ÇÕ" + name(cc) + "Ç…åæÇÌÇÍÇÈÇ™Ç‹Ç‹ÅAëïîıÇäOÇµÇƒÇµÇ‹Ç¡ÇΩÅB", name(tc) + " " + was(tc) + " brainwashed into removing " + his(tc) + " equipment.")
						}
					loop
					cdata(CDATA_CONDITION_BRAINWASH, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_CHA, cc) / 5 - sdata(SKILL_ATTR_WIL, CHARA_PLAYER) / 5, 5, 25)
					r1 = CHARA_PLAYER
					gosub *charaRefresh
				}
				else {
					txtef COLOR_GREEN
					txt lang("Ç†Ç»ÇΩÇÕ" + name(cc) + "ÇÃêÙî]ÇíµÇÀèúÇØÇΩÅB", "You resist " + name(cc) + "'s brainwashing.")
				}
				continue
			}
			sennnou = limit(cdata(CDATA_IMPRESSION, tc), 1, 300)
			if ( rnd(sennnou + sdata(SKILL_ATTR_CHA, CHARA_PLAYER)) > 50 + rnd(sdata(SKILL_ATTR_CHA, cc)) | findbuff(tc, BUFF_TAG_FORCE) != (-1) ) {
				txtef COLOR_GREEN
				txt lang(name(tc) + "ÇÕ" + name(cc) + "ÇÃêÙî]ÇíµÇÀèúÇØÇΩÅB", name(tc) + " resists " + name(cc) + "'s brainwashing.")
				continue
			}
			animeload ANIMATION_FIZZLE, tc
			cdata(CDATA_CONDITION_BRAINWASH, tc) = limit((300 - cdata(CDATA_IMPRESSION, tc)) * 1 / 10, 2, 15)
			cdata(CDATA_AI_AGGRO, tc) = 5
			cdata(CDATA_TARGET, tc) = 0
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_PSYCHIC_WAVE | _switch_sw ) {
		_switch_sw = 0
		txtef COLOR_PURPLE
		txt lang(name(cc) + "ÇÕã≠óÛÇ»ê∏ê_îgÇï˙Ç¡ÇΩÅI", name(cc) + " was overwhelmed.")
		snd SOUNDLIST_ATK_MIND
		animeload ANIMATION_GARDEN, tc
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION_ORG, cnt) == cdata(CDATA_RELATION_ORG, cc) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			dmghp tc, cdata(CDATA_LEVEL, cc) * 3 / 2 + rnd(cdata(CDATA_LEVEL, cc) * 1 / 2 + 1), cc, SKILL_RESDMG_BRAIN, 1000
			cdata(CDATA_CONDITION_BIND, tc)++
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_DEATH_SONG | _switch_sw ) {
		_switch_sw = 0
		txtef COLOR_PURPLE
		txt lang(name(cc) + "ÇÕîjñ≈ÇçÇÇÁÇ©Ç…âÃÇ¢è„Ç∞ÇΩÅB", name(cc) + " sang doom loudly.")
		snd SOUNDLIST_CURSE3
		animeload ANIMATION_GARDEN, tc
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cbit(CHARA_BIT_DEATH_COUNT, cnt) == 1 ) {
				continue
			}
			if ( cc == cnt ) {
				addbuff cc, BUFF_DEATH_WORD, 70000000, 20
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( sdata(SKILL_RES_SOUND, tc) > 0 ) {
				if ( rnd(sdata(SKILL_ATTR_MAG, cc) + 1) > rnd(sdata(SKILL_RES_SOUND, tc) + 1) ) {
					addbuff tc, BUFF_DEATH_WORD, 70000000, 44
				}
				else {
					txt lang(name(tc) + "ÇÕíÔçRÇµÇΩÅB", name(tc) + " resist" + _s(tc) + ".")
				}
			}
			if ( sdata(SKILL_RES_SOUND, tc) <= 0 ) {
				addbuff tc, BUFF_DEATH_WORD, 70000000, 20
			}
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_BLADE_TURBULENCE | _switch_sw ) {
		_switch_sw = 0
		txtef COLOR_YELLOW
		txt lang(name(cc) + "ÇÕïóÇÃênÇï˙Ç¡ÇΩÅB", name(cc) + " emanated blades of wind.")
		if ( synccheck(cc, -1) ) {
			snd SOUNDLIST_SONIC
		}
		waitbk = cfg_animewait
		if ( cfg_animewait > 0 ) {
			cfg_animewait = 1
		}
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION_ORG, cnt) == cdata(CDATA_RELATION_ORG, cc) | cdata(CDATA_RELATION, cnt) == cdata(CDATA_RELATION, cc) | (cdata(CDATA_RELATION, cc) >= (-1) & cdata(CDATA_RELATION, cnt) >= (-1)) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( synccheck(cc, -1) ) {
				snd SOUNDLIST_SONIC
			}
			animeload 50, cnt
			dmghp tc, sdata(SKILL_NORMAL_CONTROL_MAGIC, cc) * 2 + 5, cc, SKILL_RESDMG_CUT, 100
			dmgcon tc, CONDITION_BLEED, cdata(CDATA_INIT_SPEED, tc)
		loop
		cfg_animewait = waitbk
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_HOMING_LASER | _switch_sw ) {
		_switch_sw = 0
		homing = 0
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION_ORG, cnt) == cdata(CDATA_RELATION_ORG, cc) | cdata(CDATA_RELATION, cnt) == cdata(CDATA_RELATION, cc) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			homing++
		loop
		if ( homing <= 0 ) {
			goto *effect_end
		}
		txtef COLOR_YELLOW
		txt lang(name(cc) + "ÇÕé¸àÕÇÃìGÇ…ë_Ç¢ÇíËÇﬂÇΩÅB", name(cc) + " emanated blades of wind.")
		snd SOUNDLIST_SHOTS
		animeload 49, cc
		snd SOUNDLIST_SHOTS
		animeload 49, cc
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION_ORG, cnt) == cdata(CDATA_RELATION_ORG, cc) | cdata(CDATA_RELATION, cnt) == cdata(CDATA_RELATION, cc) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			dmghp tc, (sdata(SKILL_ATTR_PER, cc) / 30 * limit(sdata(SKILL_ATTR_PER, cc), 1, 1000) + rnd(sdata(SKILL_NORMAL_MARKSMAN, cc) + 1) + (sdata(SKILL_NORMAL_MARKSMAN, cc) + 1) / 30 * sdata(SKILL_NORMAL_MARKSMAN, cc)) / homing + 1, cc, SKILL_RESDMG_CRUSH, 100
		loop
		homing = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_CHARGE | _switch_sw ) {
		_switch_sw = 0
		snd SOUNDLIST_OFFER2
		animeload ANIMATION_AROMAGEDDON, tc
		cc = tc
		gosub *skill_charge
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_EMERGENCY_EVASION | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_SPACT_MAGIC_EQUIP | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_SPACT_SUPER_ARMOR | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_SPACT_SHIELD_PARRY | _switch_sw ) {
		_switch_sw = 0
		snd SOUNDLIST_OFFER2
		animeload ANIMATION_AROMAGEDDON, cc
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( efid == SKILL_SPACT_EMERGENCY_EVASION ) {
				if ( cdata(CDATA_EQUIP_WEIGHT, tc) < 15000 ) {
					addbuff tc, BUFF_EMERGENCY_EVASION, 10, 10
				}
			}
			if ( efid == SKILL_SPACT_MAGIC_EQUIP ) {
				if ( cdata(CDATA_EQUIP_WEIGHT, tc) < 35000 & cdata(CDATA_EQUIP_WEIGHT, tc) >= 15000 ) {
					addbuff tc, BUFF_MAGIC_EQUIP, 15, 15
				}
			}
			if ( efid == SKILL_SPACT_SUPER_ARMOR ) {
				if ( cdata(CDATA_EQUIP_WEIGHT, tc) >= 35000 ) {
					addbuff tc, BUFF_SUPER_ARMOR, 20, 20
				}
			}
			if ( efid == SKILL_SPACT_SHIELD_PARRY ) {
				if ( cdata(CDATA_SHIELD_STYLE_TYPE, tc) == SHIELD_STYLE_NORMAL ) {
					if ( cdata(CDATA_ATTACK_STYLE, tc) & STYLE_SHIELD ) {
						addbuff tc, BUFF_SHIELD_PARRY, 40, 40
					}
				}
			}
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_GRAVITY_ACCEL | _switch_sw ) {
		_switch_sw = 0
		snd SOUNDLIST_ATK_MIND
		animeload ANIMATION_GARDEN, tc
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			p = limit(cdata(CDATA_CONDITION_GRAVITY, tc) + 20, 20, sorg(SKILL_ATTR_SPD, tc) / 2)
			if ( p > 300 ) {
				p = 300
			}
			addbuff tc, BUFF_GRAVITY_ACCEL, p, 40
			cdata(CDATA_CONDITION_GRAVITY, tc) += 20
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_RESOLUTION_HAND | _switch_sw ) {
		_switch_sw = 0
		snd SOUNDLIST_OFFER2
		animeload ANIMATION_AROMAGEDDON, cc
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			addbuff tc, BUFF_RESOLUTION_HAND, 50, 50
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_CALL_FAMILIAR | _switch_sw ) {
		_switch_sw = 0
		if ( gdata(GDATA_AREA) == AREA_ARENA ) {
			txt_nothinghappens
			goto *effect_end
		}
		allyctrl = 0
		gosub *com_ally
		if ( stat != (-1) ) {
			rc = stat
			if ( cbit(CHARA_BIT_GUARD_TEMP, rc) == 1 ) {
				txt_nothinghappens
				goto *effect_end
			}
			if ( cdata(CDATA_EXIST, rc) == CHAR_STATE_ALIVE ) {
				txt lang("Ç†Ç»ÇΩÇÕÅA" + cdatan(CDATAN_NAME, rc) + "Çë“ã@Ç≥ÇπÇΩÅB", "You order " + cdatan(CDATAN_NAME, rc) + " to wait in town.")
				if ( cdata(CDATA_ROW_ACT, rc) != ACTION_NONE ) {
					rowactend rc
				}
				map(cdata(CDATA_X, rc), cdata(CDATA_Y, rc), 1) = 0
				cdata(CDATA_EXIST, rc) = CHAR_STATE_ALLY_WAIT
				cdata(CDATA_AREA, rc) = AREA_NONE
				if ( cdata(CDATA_IN_TAGTEAM, rc) == (-1) ) {
					ttc = cdata(CDATA_TAGTEAM_PARTNER, rc)
					cell_setchara ttc, cdata(CDATA_X, rc), cdata(CDATA_Y, rc)
					tag_end rc
				}
				if ( cdata(CDATA_IN_TAGTEAM, rc) == 1 ) {
					ttc = cdata(CDATA_TAGTEAM_PARTNER, rc)
					tag_end rc
					cell_movechara ttc, cdata(CDATA_X, ttc), cdata(CDATA_Y, ttc)
				}
				gosub *screen_draw
				return 0
			}
			if ( cdata(CDATA_EXIST, rc) != CHAR_STATE_ALLY_WAIT ) {
				txt_nothinghappens
				goto *effect_end
			}
			f = get_freeallyne()
			if ( f == 0 ) {
				txt lang("íáä‘ÇÃç≈ëÂêîÇ…íBÇµÇƒÇ¢ÇÈÇΩÇﬂÅAåƒÇ—èoÇπÇ»Ç¢ÅB", "Your party is already full. You can't invite someone anymore.")
				goto *effect_end
			}
			if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
				txt lang("Ç±ÇÃÉÇÅ[ÉhÇ≈ÇÕégÇ¶Ç»Ç¢Åc ", "You can not use it in Abnormal mode...")
				goto *effect_end
			}
			listmax = 0
			snd SOUNDLIST_TELEPORT1
			txtef COLOR_YELLOW
			txt cnven(cdatan(CDATAN_NAME, rc)) + lang("ÇåƒÇ—èoÇµÇΩÅB", " " + have(rc) + " appeared out of nowhere.")
			cdata(CDATA_EXIST, rc) = CHAR_STATE_ALIVE
			cdata(CDATA_RELATION, rc) = cdata(CDATA_RELATION_ORG, rc)
			cxinit = cdata(CDATA_X, CHARA_PLAYER)
			cyinit = cdata(CDATA_Y, CHARA_PLAYER)
			gosub *place_chara
			cdata(CDATA_AREA, rc) = AREA_NONE
		}
		gosub *screen_draw
		return 0
	}
	if ( _switch_val == SKILL_SPACT_FASCINATION_DANCE | _switch_sw ) {
		_switch_sw = 0
		gosub *perform_dance
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_PREACHING | _switch_sw ) {
		_switch_sw = 0
		gosub *perform_preach
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_ENSEMBLE | _switch_sw ) {
		_switch_sw = 0
		ens = 0
		txtef COLOR_BLUE
		txt lang("ÉAÉìÉTÉìÉuÉãÅI", "Ensemble!")
		performerpal = ""
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( performerpal == "" ) {
				performerpal = name(tc)
			}
			else {
				performerpal = "your friends"
			}
			ens += limit(sdata(SKILL_NORMAL_PERFORMER, tc), 3, 3 + sdata(SKILL_NORMAL_PERFORMER, cc) / 5)
		loop
		if ( ens > 200 ) {
			ens = 200
		}
		if ( ens == 0 ) {
			txt lang("Ç†Ç»ÇΩÇÕÇ–Ç∆ÇËÇ⁄Ç¡ÇøÇæÅcÅB", "You're all alone.")
			goto *effect_end
		}
		txt lang("Ç†Ç»ÇΩÇ∆íáä‘ÇΩÇøÇÕÉAÉìÉTÉìÉuÉãÇénÇﬂÇΩÅB", "You started the ensemble with " + performerpal + ".")

		/********** ANNA CUSTOM - BEGINNING **********/

		EnsembleStart = 1

		/********** ANNA CUSTOM - ENDING **********/

		efid = SKILL_NORMAL_PERFORMER
		gosub *effect
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_EXPLOSIVE_FIST | _switch_sw ) {
		_switch_sw = 0
		if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
			tc = cdata(CDATA_TARGET, cc)
			gosub *act_melee
			goto *effect_end
		}
		bakuretu = 100
		gosub *act_melee
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_CLASH_RUSH | _switch_sw ) {
		_switch_sw = 0
		if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
			tc = cdata(CDATA_TARGET, cc)
			gosub *act_melee
			goto *effect_end
		}
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 25 ) {
			snd SOUNDLIST_ATK_FIRE
			animeload ANIMATION_GENE, cc
			txtef COLOR_RED
			txt lang(name(cc) + "ÇÕäoåÂÇåàÇﬂÇΩÅI", name(cc) + " was ready!")
			cdata(CDATA_POWER_GAUGE, cc) -= 25
			sutemi = 100
		}
		efid = SKILL_SPACT_SHADOW_STEP
		gosub *effect
		sutemi = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_THUNDERCLAP_KICK | _switch_sw ) {
		_switch_sw = 0
		if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
			tc = cdata(CDATA_TARGET, cc)
			gosub *act_melee
			goto *effect_end
		}
		bakuretu = 200
		efid = SKILL_SPACT_SHADOW_STEP
		gosub *effect
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_BODY_BLOW | _switch_sw ) {
		_switch_sw = 0
		if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
			tc = cdata(CDATA_TARGET, cc)
			gosub *act_melee
			goto *effect_end
		}
		bakuretu = 300
		gosub *act_melee
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_KNOCKOUT | _switch_sw ) {
		_switch_sw = 0
		if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
			tc = cdata(CDATA_TARGET, cc)
			gosub *act_melee
			goto *effect_end
		}
		if ( tc == cc ) {
			txt_impossible
			return
		}
		if ( cdata(CDATA_HP, tc) < cdata(CDATA_MAX_HP, tc) / 20 | cdata(CDATA_HP, tc) == 0 ) {
			txt lang("Ç±ÇÍà»è„Ç‚ÇÈÇ∆éÄÇÒÇ≈ÇµÇ‹Ç§ÅcÅB", "If you attack any more, the opponent will die...")
			return
		}
		gdata(GDATA_TEMPORARY_FLAGS2) = 888
		gosub *act_melee
		gdata(GDATA_TEMPORARY_FLAGS2) = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_DIMENSION_FISHING | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_X, cc) > 0 ) {
			x = cdata(CDATA_X, cc) - 1
			cdata(CDATA_DIR, cc) = 1
		}
		if ( cdata(CDATA_X, cc) == 0 ) {
			x = cdata(CDATA_X, cc) + 1
			cdata(CDATA_DIR, cc) = 2
		}
		y = cdata(CDATA_Y, cc)
		if ( cc == CHARA_PLAYER ) {
			gdata(GDATA_RUN_DIR) = cdata(CDATA_DIR, CHARA_PLAYER)
		}
		fishx = x
		fishy = y
		addefmap fishx, fishy, 1, 3
		aniref = 0
		animeid = ANIMATION_BALL
		anix = fishx
		aniy = fishy
		gosub *anime
		snd SOUNDLIST_DOOR2
		chipbk = map(fishx, fishy, 0)
		map(fishx, fishy, 0) = 233
		tc = CHARA_PLAYER
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
				continue
			}
			tc = cnt
		loop
		if ( tc == CHARA_PLAYER ) {
			txt lang("íﬁÇÍÇÈälï®Ç™Ç¢Ç»Ç¢ÇÊÇ§ÇæÅcÅB", "A waste of time...")
			map(fishx, fishy, 0) = chipbk
			goto *effect_end
		}
		txt lang("àüãÛíﬁÇËÇénÇﬂÇΩÅB", "You start fishing.")
		snd SOUNDLIST_FISH_CAST
		fishstat = 1
		if ( fishstat == 1 ) {
			repeat 4 + rnd(4)
				redraw 0
				fishanime = 1, 3 + rnd(3)
				addefmap fishx, fishy, 4, 2
				scrturn++
				gosub *screen_draw
				redraw 1
				await cfg_wait1 * 2
			loop
			fishstat = 2
			fishanime = 0
		}
		if ( fishstat == 2 ) {
			fishanime = 2
			snd SOUNDLIST_WATER2
			cdata(CDATA_EMO_ICON, CHARA_PLAYER) = 20 + 100 * 2
			repeat 8 + rnd(10)
				redraw 0
				scrturn++
				gosub *screen_draw
				redraw 1
				await cfg_wait1 * 2
			loop
			fishstat = 3
			fishanime = 0
		}
		if ( fishstat == 3 ) {
			fishanime = 3
			repeat 28 + rnd(15)
				if ( cnt \ 7 == 0 ) {
					snd SOUNDLIST_FISH_FIGHT
				}
				redraw 0
				fishanime(1) = cnt
				scrturn++
				gosub *screen_draw
				addefmap fishx, fishy, 5, 2
				redraw 1
				await cfg_wait1 * 2
			loop
			fishstat = 4
			fishanime = 0
		}
		if ( fishstat == 4 ) {
			fishanime = 4
			snd SOUNDLIST_FISH_GET
			repeat 21
				redraw 0
				fishanime(1) = cnt
				if ( cnt == 1 ) {
					addefmap fishx, fishy, 1, 3
				}
				scrturn++
				gosub *screen_draw
				redraw 1
				await cfg_wait1 * 2
			loop
			snd SOUNDLIST_GET1 + rnd(2)
			fishanime = 0
			gosub *expFishing
			snd SOUNDLIST_MIZU
			map(fishx, fishy, 0) = chipbk
			efid = SKILL_SPACT_DRAW_SHADOW
			gosub *effect
			cdata(CDATA_EMO_ICON, CHARA_PLAYER) = 6 + 100 * 3
		}
		map(fishx, fishy, 0) = chipbk
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_GIGA_GRAVITATION | _switch_sw ) {
		_switch_sw = 0
		dmgmp cc, cdata(CDATA_MAX_MP, cc) / 10
		if ( synccheck(cc, -1) ) {
			animeid = ANIMATION_GIGA
			gosub *anime
		}
		txtef COLOR_PURPLE
		txt lang(name(cc) + "ÇÕí¥èdóÕÇÃâÚÇêUÇËâ∫ÇÎÇµÇΩÅB", name(cc) + " swung down the mass of super gravity.")
		snd SOUNDLIST_POP3
		snd SOUNDLIST_POP3
		f = 0
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) == cdata(CDATA_RELATION, cc) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			dmg = limit((sdata(SKILL_ATTR_DEX, cc) / 5 + 2) * ((sdata(SKILL_NORMAL_MAGIC_CAPACITY, cc) + 1) / 5 + 2) + rnd(sdata(SKILL_ATTR_CON, cc) + 5), 5, 80000)
			if ( cdata(CDATA_CONDITION_GRAVITY, tc) >= 50 & cdata(CDATA_CONDITION_GRAVITY, tc) < 100 ) {
				dmg = dmg * 3 / 2
			}
			if ( cdata(CDATA_CONDITION_GRAVITY, tc) >= 100 & cdata(CDATA_CONDITION_GRAVITY, tc) < 150 ) {
				dmg = dmg * 2
			}
			if ( cdata(CDATA_CONDITION_GRAVITY, tc) >= 150 & cdata(CDATA_CONDITION_GRAVITY, tc) < 200 ) {
				dmg = dmg * 5 / 2
			}
			if ( cdata(CDATA_CONDITION_GRAVITY, tc) >= 200 ) {
				dmg = dmg * 3
			}
			cdata(CDATA_CONDITION_GRAVITY, tc) += 30
			if ( cdata(CDATA_CONDITION_BIND, tc) == 0 ) {
				cdata(CDATA_CONDITION_BIND, tc)++
			}
			if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 & tc != CHARA_PLAYER ) {
				if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
					f = 1
				}
			}
			dmghp tc, dmg, cc, SKILL_RES_MAGIC, 1000
		loop
		if ( f == 1 ) {
			f = 0
			skillexp SKILL_NORMAL_MAGIC_CAPACITY, cc, 50
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_SILENT_OCEAN | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(cc, -1) ) {
			animeid = ANIMATION_GIGA
			gosub *anime
		}
		txtef COLOR_LIGHT_BLUE
		txt lang("ñ∂Ç∆Ç∆Ç‡Ç…é¸àÕÇ…äCÇ™çLÇ™Ç¡ÇΩÅB", "An expanse of ocean and fog spreads out.")
		snd SOUNDLIST_MIZU
		p = 6
		repeat 1000
			x = rnd(p) + tlocx - rnd(p)
			y = rnd(p) + tlocy - rnd(p)
			f = 1
			if ( x < 0 | y < 0 | x >= mdata(MDATA_WIDTH) | y >= mdata(MDATA_HEIGHT) ) {
				f = 0
			}
			else {
				if ( chipm(CHIPM_ATTRIB, map(x, y, 0)) & CHIPM_ATTRIB_CANT_PASS ) {
					f = 0
				}
			}
			if ( dist(tlocx, tlocy, x, y) >= p ) {
				f = 0
			}
			if ( f == 0 ) {
				continue cnt
			}
			tcbk = tc
			if ( map(x, y, 1) != 0 ) {
				tc = map(x, y, 1) - 1
				if ( gdata(GDATA_RIDER) != 0 ) {
					if ( tc == CHARA_PLAYER ) {
						cdata(CDATA_ENVIRONMENT_EFFECT, gdata(GDATA_RIDER)) = ENVIRONMENT_EFFECT_WATER
					}
				}
				if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
					cdata(CDATA_ENVIRONMENT_EFFECT, cdata(CDATA_TAGTEAM_PARTNER, tc)) = ENVIRONMENT_EFFECT_WATER
				}
				cdata(CDATA_ENVIRONMENT_EFFECT, tc) = ENVIRONMENT_EFFECT_WATER
			}
			tc = tcbk
			if ( map(x, y, 0) < 363 ) {
				map(x, y, 0) = 168
			}
			if ( map(x, y, 8) != 0 ) {
				delmef map(x, y, 8) - 1
			}
		loop
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_ENVIRONMENT_EFFECT, cnt) == ENVIRONMENT_EFFECT_NONE ) {
				continue
			}
			if ( cdata(CDATA_ENVIRONMENT_EFFECT, cnt) == ENVIRONMENT_EFFECT_WATER ) {
				cdata(CDATA_ENVIRONMENT_EFFECT, cnt) = ENVIRONMENT_EFFECT_NONE
				addbuff cnt, BUFF_MIST_OF_SILENCE, 150, 20
				if ( cbit(CHARA_BIT_FLOAT, cnt) == 0 | cdata(CDATA_CONDITION_GRAVITY, cnt) > 0 | findbuff(cnt, BUFF_GRAVITY_ACCEL) != (-1) ) {
					wet cnt, 25
				}
			}
			cdata(CDATA_ENVIRONMENT_EFFECT, cnt) = ENVIRONMENT_EFFECT_NONE
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_PLATINUM_SONG | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_GOLD, CHARA_PLAYER) > 100 ) {
			cdata(CDATA_GOLD, CHARA_PLAYER) -= 100
			snd SOUNDLIST_PAYGOLD1
		}
		if ( synccheck(cc, -1) ) {
			txt lang("ÅuÉîÉ@ÉÇÉXÅEÉJÉìÉ^Å[ÉãÅIÅv", cnvtalk("This is my song!"))
		}
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cdata(CDATA_ID, cc) == CREATURE_ID_KARAVIKA ) {
				if ( cnt != cc ) {
					continue
				}
			}
			if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			addbuff tc, BUFF_HOLY_SHIELD, sdata(SKILL_ATTR_CHA, cc) * 3 + 100, 60
			addbuff tc, BUFF_DIVINE_WISDOM, sdata(SKILL_ATTR_CHA, cc) * 3 + 100, 60
			addbuff tc, BUFF_FEATHER, sdata(SKILL_ATTR_CHA, cc) * 3 + 100, 60
			if ( cdata(CDATA_CONDITION_BRAINWASH, tc) > 1 ) {
				cdata(CDATA_CONDITION_BRAINWASH, tc) = 1
			}
		loop
		snd SOUNDLIST_CHEER
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_DIVINE_STREAM | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 ) {
				efid = SKILL_SPACT_INTENSIVE_POWER
				gosub *effect
				goto *effect_end
			}
		}
		snd SOUNDLIST_OFFER2
		animeload ANIMATION_DISTANT_ATK, cc
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cdata(CDATA_RELATION, cc) != 0 ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
			}
			if ( cdata(CDATA_RELATION, cc) == 0 ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			sinp = 0
			if ( sdata(SKILL_ATTR_SPD, tc) > sdata(SKILL_ATTR_SPD, cc) ) {
				sinp += sdata(SKILL_ATTR_SPD, tc)
			}
			else {
				sinp += 100
			}
			if ( sdata(SKILL_ATTR_STR, tc) > sdata(SKILL_ATTR_STR, cc) ) {
				sinp += sdata(SKILL_ATTR_STR, tc)
			}
			else {
				sinp += 100
			}
			if ( sdata(SKILL_ATTR_CON, tc) > sdata(SKILL_ATTR_CON, cc) ) {
				sinp += sdata(SKILL_ATTR_CON, tc)
			}
			else {
				sinp += 100
			}
			if ( sdata(SKILL_ATTR_DEX, tc) > sdata(SKILL_ATTR_DEX, cc) ) {
				sinp += sdata(SKILL_ATTR_DEX, tc)
			}
			else {
				sinp += 100
			}
			if ( sdata(SKILL_ATTR_PER, tc) > sdata(SKILL_ATTR_PER, cc) ) {
				sinp += sdata(SKILL_ATTR_PER, tc)
			}
			else {
				sinp += 100
			}
			if ( sdata(SKILL_ATTR_LER, tc) > sdata(SKILL_ATTR_LER, cc) ) {
				sinp += sdata(SKILL_ATTR_LER, tc)
			}
			else {
				sinp += 100
			}
			if ( sdata(SKILL_ATTR_WIL, tc) > sdata(SKILL_ATTR_WIL, cc) ) {
				sinp += sdata(SKILL_ATTR_WIL, tc)
			}
			else {
				sinp += 100
			}
			if ( sdata(SKILL_ATTR_MAG, tc) > sdata(SKILL_ATTR_MAG, cc) ) {
				sinp += sdata(SKILL_ATTR_MAG, tc)
			}
			else {
				sinp += 100
			}
			dmghp tc, sinp, cc
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_PROVOKE | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕíßî≠ÇçsÇ¡ÇΩÅB", name(cc) + " provokes the enemy.")
		}
		txtmore
		txtef COLOR_SKY_BLUE
		customtalk cc, DBMODE_FLAVOR_INSULT
		gosub *convert_word
		if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
			if ( jp ) {
				if ( cdata(CDATA_SEX, cc) == 0 ) {
					txt "ÅuñΩÇÇ©ÇØÇƒÇ©Ç©Ç¡ÇƒÇ±Ç¢Åv", "ÅuÇ®ëOÇÃëSÇƒÇî€íËÇµÇƒÇ‚ÇÈÅv", "ÅuïﬂÇ‹Ç¶ÇƒÇ›Ç»Åv", "ÅuóVÇ⁄Ç§Ç©Åv", "ÅuäoåÂÇÕÇ¢Ç¢Ç©ÅHÅv", "Åuñ≥óùÇÇ∑ÇÈÇ»ÅBåãâ ÇÕÇ«Ç§ÇπàÍèèÇæÅv", "ÅuÇªÇ§êàÇ™ÇÈÇ»ÇÊÅv"
				}
				else {
					txt "ÅuéÑÇ∆óVÇ—ÇΩÇ¢ÇÃÅHÅv", "ÅuÇ©Ç©Ç¡ÇƒÇ´Ç»Ç≥Ç¢Åv", "ÅuÇ±Ç¡ÇøÇ≈Ç∑ÇÊÇßÅHÅv", "ÅuÇŸÇÁÅAÇ¢ÇÁÇ¡ÇµÇ·Ç¢Åv", "ÅuéËíZÇ…éÄÇÒÇ≈Ç‡ÇÁÇ¶ÇÈÅHÅv", "ÅuëäéËÇÇµÇƒÇ†Ç∞ÇÊÇ§Ç©ÅHÅv", "Åuîèéqî≤ÇØÇµÇøÇ·Ç§Ç»ÇüÅ`Åv", "Åuñ{ãCÇèoÇµÇƒÇ¢ÇÈÇÃÅHÅv"
				}
			}
			else {
				if ( rnd(2) ) {
					txt cnvtalk("You suck!"), cnvtalk("You will die alone."), cnvtalk("Bow down before me."), cnvtalk("Go jump off a bridge."), cnvtalk("Bang your head against the wall!"), cnvtalk("Why do you sniff under your dog's tail?")
				}
				else {
					txt cnvtalk("The world is against you because you are a unsavory decomposing virus."), cnvtalk("You are no better than a immoral guzzling bureaucrat."), cnvtalk("You are so lowly."), cnvtalk("Get off me.")
				}
			}
		}
		tyouhatu = 0
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cdata(CDATA_RELATION, cc) > (-3) | cc == CHARA_PLAYER ) {
				if ( cdata(CDATA_RELATION, cnt) > (-3) ) {
					continue
				}
			}
			if ( cdata(CDATA_RELATION, cc) == (-3) ) {
				if ( cdata(CDATA_RELATION, cnt) == (-3) & cnt != 0 ) {
					continue
				}
			}
			if ( cbit(CHARA_BIT_SANDBAG, cnt) ) {
				continue
			}
			if ( cdata(CDATA_RELATION, cc) == (-3) ) {
				if ( gdata(GDATA_AREA) == AREA_PET_ARENA ) {
					if ( cdata(CDATA_RELATION, cnt) != 10 ) {
						continue
					}
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( synccheck(tc, -1) ) {
				txtef COLOR_RED
				txt lang(name(tc) + "ÇÕíßî≠Ç…ÇÃÇ¡ÇΩÅI", name(tc) + " fell for the provocation.")
			}
			cdata(CDATA_AI_AGGRO, tc) = 30
			cdata(CDATA_TARGET, tc) = cc
			if ( tc != CHARA_PLAYER ) {
				cdata(CDATA_KARMA, tc) = 3
			}
			if ( cdata(CDATA_CONDITION_ANGRY, tc) == 0 ) {
				cdata(CDATA_CONDITION_ANGRY, tc) += rnd(10) + 10
			}
			tyouhatu++
			if ( tyouhatu <= 21 ) {
				cdata(CDATA_POWER_GAUGE, cc)++
			}
		loop
		if ( cdata(CDATA_POWER_GAUGE, cc) > 100 ) {
			if ( cdata(CDATA_SHIFT_FORM, cc) <= SHIFT_FORM_NONE & (cdata(CDATA_EVOLUTION_STAGE, cc) <= 0 | cc == CHARA_PLAYER) & (cdata(CDATA_QUALITY, cc) < FIX_QUALITY_MIRACLE | cc < MAX_CHARA_FOLLOWER) ) {
				cdata(CDATA_POWER_GAUGE, cc) = 100
			}
		}
		if ( cdata(CDATA_POWER_GAUGE, cc) > 200 ) {
			cdata(CDATA_POWER_GAUGE, cc) = 200
		}
		tyouhatu = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_NECRO_FORCE | _switch_sw ) {
		_switch_sw = 0
		if ( cc == CHARA_PLAYER ) {
			txtsetnecro 6
			repeat 6
				promptAdd s(cnt), key_select(cnt)
			loop
			val = promptx, prompty, 250, 0
			gosub *prompt_key
			if ( rtval == 0 ) {
				return 0
			}
			if ( rtval == 4 ) {
				if ( cdata(CDATA_TARGET, CHARA_PLAYER) == 0 ) {
					gosub *findTarget
				}
				gosub *com_findTarget
				if ( listmax == 0 ) {
					txt lang("éãäEì‡Ç…É^Å[ÉQÉbÉgÇÕë∂ç›ÇµÇ»Ç¢ÅB", "You look around and find nothing.")
					return 0
				}
			}
			if ( rtval == 2 ) {
				txtef COLOR_YELLOW
				txt lang(" *ñÇóÕëùã≠*Å@", " *MP Charge* ")
			}
			if ( rtval == 3 ) {
				txtef COLOR_YELLOW
				txt lang(" *ê∂ñΩÇÃì]ä∑*Å@", " *HP Convert* ")
			}
			if ( rtval == 4 ) {
				txtef COLOR_YELLOW
				txt lang(" *äOìπéÆ‡yóÙíe*Å@", " *Brutal Burst* ")
			}
			if ( rtval == 5 ) {
				txtef COLOR_YELLOW
				txt lang(" *ÉRÅ[ÉãÉAÉìÉfÉbÉh*Å@", " *Convocation* ")
			}
			if ( rtval == 5 ) {
				snd SOUNDLIST_CURSE3
				repeat MAX_CHARA_TOTAL
					if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
						continue
					}
					if ( cnt == CHARA_PLAYER ) {
						continue
					}
					if ( cbit(CHARA_BIT_NECRO, cnt) == 1 ) {
						cc = cnt
						tc = CHARA_PLAYER
						efid = SKILL_SPACT_SHADOW_STEP
						gosub *effect
					}
				loop
				goto *effect_end
			}
			nelv = 0
			repeat MAX_CHARA_TOTAL
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( cc == cnt ) {
					continue
				}
				tc = cnt
				dx = cdata(CDATA_X, tc)
				dy = cdata(CDATA_Y, tc)
				if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
					continue
				}
				if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
					continue
				}
				if ( cbit(CHARA_BIT_LIVESTOCK, tc) != 1 ) {
					if ( tc >= MAX_CHARA_FOLLOWER ) {
						if ( cbit(CHARA_BIT_NECRO, tc) == 1 ) {
							if ( rtval == 1 ) {
								necrop = 0
								if ( cdata(CDATA_ID, tc) == CREATURE_ID_CAT_ZOMBIE ) {
									necrop = 2
								}
								if ( cdata(CDATA_ID, tc) == CREATURE_ID_ZOMBIE ) {
									necrop = 3
								}
								if ( cdata(CDATA_ID, tc) == CREATURE_ID_MUMMY ) {
									necrop = 4
								}
								if ( cdata(CDATA_ID, tc) == CREATURE_ID_SKELETON_WARRIOR ) {
									necrop = 5
								}
								if ( cdata(CDATA_ID, tc) == CREATURE_ID_LICH ) {
									necrop = 6
								}
								if ( cdata(CDATA_ID, tc) == CREATURE_ID_NECRO_DOLL ) {
									necrop = 7
								}
								if ( cdata(CDATA_ID, tc) == CREATURE_ID_DRAGON_ZOMBIE ) {
									necrop = 8
								}
								if ( cdata(CDATA_ID, tc) == CREATURE_ID_DEAD_EYES_BLOOD_DRAGON ) {
									necrop = 9
								}
								necrop3 = cdata(CDATA_CHARA_PIC, tc)
								if ( necrop != 0 ) {
									txt lang(name(tc) + "ÇäªÇ…ñﬂÇµÇΩÅB", "You push " + name(tc) + " back into the coffin.")
									flt
									itemcreate -1, ITEM_ID_COFFIN_OF_NECROMANCY, cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 0
									inv(INV_ITEM_PARAM1, ci) = necrop
									inv(INV_ITEM_PARAM2, ci) = cdata(CDATA_FORM_SHIFT_PIC, tc)
									inv(INV_ITEM_WEIGHT, ci) += necrop * 1000
									inv(INV_ITEM_CHARGE, ci) = gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 + inv(INV_ITEM_PARAM3, ci)
									inv(INV_ITEM_STATUS, ci) = ITEM_STATUS_NORMAL
									inv(INV_ITEM_KNOWN, ci) = ITEM_KNOWN_NECRO
									inv(INV_ITEM_CHARA_PIC, ci) = necrop3
									chara_vanquish tc
									gosub *screen_draw
								}
							}
							if ( rtval == 2 ) {
								txtef COLOR_BLUE
								txt lang(name(tc) + "ÇÕñÇóÕÇíçÇ™ÇÍã∂ñ\âªÇµÇΩÅI", name(tc) + " became enraged through magic!")
								addbuff tc, BUFF_BOOST, 20, 30
								nelv += cdata(CDATA_LEVEL, tc)
							}
							if ( rtval == 3 ) {
								txtef COLOR_BLUE
								txt lang(name(tc) + "ÇÃêgëÃÇÕà≈Ç…ïÔÇ‹ÇÍÇƒçƒê∂ÇµÇΩÅI", name(tc) + "'s body was enveloped by darkness and regenerated!")
								healhp tc, cdata(CDATA_MAX_HP, tc) / 3
								if ( cdata(CDATA_CONDITION_POISON, tc) != 0 ) {
									cdata(CDATA_CONDITION_POISON, tc) = cdata(CDATA_CONDITION_POISON, tc) / 5 + 1
								}
								if ( cdata(CDATA_CONDITION_MPOISON, tc) != 0 ) {
									cdata(CDATA_CONDITION_MPOISON, tc) = cdata(CDATA_CONDITION_MPOISON, tc) / 5 + 1
								}
								if ( cdata(CDATA_CONDITION_SLEEP, tc) != 0 ) {
									cdata(CDATA_CONDITION_SLEEP, tc) = cdata(CDATA_CONDITION_SLEEP, tc) / 5 + 1
								}
								if ( cdata(CDATA_CONDITION_CONFUSE, tc) != 0 ) {
									cdata(CDATA_CONDITION_CONFUSE, tc) = cdata(CDATA_CONDITION_CONFUSE, tc) / 5 + 1
								}
								if ( cdata(CDATA_CONDITION_BLIND, tc) != 0 ) {
									cdata(CDATA_CONDITION_BLIND, tc) = cdata(CDATA_CONDITION_BLIND, tc) / 5 + 1
								}
								if ( cdata(CDATA_CONDITION_PARALYZE, tc) != 0 ) {
									cdata(CDATA_CONDITION_PARALYZE, tc) = cdata(CDATA_CONDITION_PARALYZE, tc) / 5 + 1
								}
								if ( cdata(CDATA_CONDITION_DIM, tc) != 0 ) {
									cdata(CDATA_CONDITION_DIM, tc) = cdata(CDATA_CONDITION_DIM, tc) / 5 + 1
								}
								if ( cdata(CDATA_CONDITION_DRUNK, tc) != 0 ) {
									cdata(CDATA_CONDITION_DRUNK, tc) = cdata(CDATA_CONDITION_DRUNK, tc) / 5 + 1
								}
								if ( cdata(CDATA_CONDITION_BLEED, tc) != 0 ) {
									cdata(CDATA_CONDITION_BLEED, tc) = cdata(CDATA_CONDITION_BLEED, tc) / 5 + 1
								}
								nelv += cdata(CDATA_LEVEL, tc)
							}
							if ( rtval == 4 ) {
								if ( cdata(CDATA_NECRO_FORCE, tc) == 10 ) {
									cdata(CDATA_NECRO_FORCE, tc) = 0
									txt lang(name(tc) + "ÇÃä·Ç™å≥Ç…ñﬂÇ¡ÇΩÅB", name(tc) + "'s eyes come back to normal.")
									continue
								}
								txtef COLOR_RED
								txt lang(name(tc) + "ÇÃä·Ç™ïsãCñ°Ç…åıÇËèoÇµÇΩÅB", name(tc) + "'s eyes began to shine omniously.")
								cdata(CDATA_NECRO_FORCE, tc) = 10
								cdata(CDATA_TARGET, tc) = cdata(CDATA_TARGET, cc)
								cdata(CDATA_AI_AGGRO, tc) = 30
							}
						}
					}
				}
			loop
			snd SOUNDLIST_CURSE3
			if ( rtval == 2 ) {
				if ( nelv != 0 ) {
					dmgmp cc, 1
					cdata(CDATA_MP, cc) += -nelv
				}
			}
			if ( rtval == 3 ) {
				if ( nelv != 0 ) {
					dmghp cc, 1
					cdata(CDATA_HP, cc) += -nelv
				}
			}
			nelv = 0
		}
		else {
			tc = cc
			repeat MAX_CHARA_TOTAL
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( cdata(CDATA_ALLIED, cc) != 100 ) {
					if ( cdata(CDATA_ID, cnt) != CREATURE_ID_ZOMBIE ) {
						continue
					}
					if ( cbit(CHARA_BIT_SUMMONED, cnt) != 1 ) {
						continue
					}
				}
				else {
					if ( cdata(CDATA_ALLIED, cnt) == 100 ) {
						continue
					}
					if ( cbit(CHARA_BIT_NECRO, cnt) != 1 ) {
						continue
					}
				}
				if ( cnt < MAX_CHARA_FOLLOWER ) {
					continue
				}
				if ( cdata(CDATA_HP, cnt) < cdata(CDATA_MAX_HP, cnt) * 1 / 4 ) {
					continue
				}
				if ( cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) * 3 / 4 ) {
					addbuff cnt, BUFF_SPEED, sdata(SKILL_ATTR_CHA, cc) * 5 + 50, 10
					addbuff cnt, BUFF_HERO, sdata(SKILL_ATTR_CHA, cc) * 5 + 100, 10
					addbuff cnt, BUFF_CONTINGENCY, 1500, 10
				}
				tc = cnt
			loop
			if ( tc == cc ) {
				goto *effect_end
			}
			snd SOUNDLIST_CURSE3
			if ( cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) * 3 / 4 ) {
				txtef COLOR_RED
				txt lang(" *éÄé“ã∂óê*Å@", " *Necro Charge* ")
				txt lang(name(cc) + "ÇÕéËãÓÇã≠âªÇµÇΩÅB", name(cc) + " strengthens those under " + his(cc) + " control.")
			}
			else {
				txtef COLOR_RED
				txt lang(" *ìzóÍçÔéÊ*Å@", " *HP Drain* ")
				txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÃëÃóÕÇãzé˚ÇµÇΩÅB", name(cc) + " has absorbed " + name(tc) + "'s vitality.")
				cdata(CDATA_HP, cc) += cdata(CDATA_HP, tc) * 3
				cdata(CDATA_HP, tc) = 0
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_CLOSE_SUICIDE | _switch_sw ) {
		_switch_sw = 0
		aniref = 0
		animeid = ANIMATION_BALL
		anix = cdata(CDATA_X, tc)
		aniy = cdata(CDATA_Y, tc)
		gosub *anime
		stxt cc, lang(name(cc) + "ÇÕ" + name(tc) + "ÇìπòAÇÍÇ…é©îöÇµÇΩÅB", name(cc) + " explode with " + tc + ".")
		dmghp tc, (limit(sdata(SKILL_ATTR_MAG, cc) / 6, 1, 350) + rnd(limit(sdata(SKILL_ATTR_MAG, cc) / 20, 1, 100))) * limit(sdata(SKILL_ATTR_CON, cc) / 2, 1, 1000), cc, SKILL_RES_MAGIC, 1000
		if ( cc != CHARA_PLAYER ) {
			cdata(CDATA_HP, cc) = 0
		}
		dmghp cc, 1, DAMAGE_FROM_SUICIDE
		if ( cdata(CDATA_HP, cc) == 0 ) {
			dmghp cc, 1, DAMAGE_FROM_SUICIDE
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_TAG_FORCE | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 50 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 50
		addbuff tc, BUFF_TAG_FORCE, 50, 51
		if ( cdata(CDATA_TAGTEAM_PARTNER, cc) > 0 ) {
			healhp 0, cdata(CDATA_MAX_HP, cc) * (cdata(CDATA_POWER_GAUGE, cc) + 40) / 200
		}
		txtef COLOR_YELLOW
		txt_skillname
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( cdata(CDATA_IN_TAGTEAM, tc) == 0 ) {
				continue
			}
			cdata(CDATA_POWER_GAUGE, tc) -= 50
			if ( cdata(CDATA_POWER_GAUGE, tc) < 0 ) {
				cdata(CDATA_POWER_GAUGE, tc) = 0
			}
			healhp tc, cdata(CDATA_MAX_HP, tc) * (cdata(CDATA_POWER_GAUGE, tc) + 40) / 200
			addbuff tc, BUFF_TAG_FORCE, 50, 50
		loop
		snd SOUNDLIST_CHEER
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_CHEER | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕíáä‘Çå€ïëÇµÇΩÅB", name(cc) + " cheer" + _s(cc) + ".")
		}
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( synccheck(tc, -1) ) {
				txtef COLOR_BLUE
				txt lang(name(tc) + "ÇÕãªï±ÇµÇΩÅI", name(tc) + " " + is(tc) + " excited!")
			}
			addbuff tc, BUFF_SPEED, sdata(SKILL_ATTR_CHA, cc) * 3 + 50, 75
			addbuff tc, BUFF_HERO, sdata(SKILL_ATTR_CHA, cc) * 3 + 100, 75
		loop
		snd SOUNDLIST_CHEER
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_UNISON_IMPACT | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		if ( cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_RELATION, tc) >= (-1) ) {
				txt lang("Ç≥Ç∑Ç™Ç…î⁄ãØÇ»ãCÇ™Ç∑ÇÈÅcÅB", "It feels sneaky...")
				goto *effect_end
			}
		}
		over = 0
		waitbk = cfg_animewait
		if ( cfg_animewait > 0 ) {
			cfg_animewait = 1
		}
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cdata(CDATA_POWER_GAUGE, cnt) < 0 ) {
				continue
			}
			if ( cdata(CDATA_RELATION, cnt) == 10 | cc == CHARA_PLAYER ) {
				if ( cdata(CDATA_RELATION, cnt) < 10 ) {
					continue
				}
			}
			if ( cdata(CDATA_RELATION, cnt) < 10 & cc != CHARA_PLAYER ) {
				if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
					continue
				}
			}
			ovtc = cnt
			dx = cdata(CDATA_X, ovtc)
			dy = cdata(CDATA_Y, ovtc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			animeload 68, ovtc
			snd SOUNDLIST_BREATH1
			overs = 0
			if ( sdata(SKILL_NORMAL_TACTICS, ovtc) >= sdata(SKILL_NORMAL_MARKSMAN, ovtc) & sdata(SKILL_NORMAL_TACTICS, ovtc) >= sdata(SKILL_NORMAL_CASTING, ovtc) & sdata(SKILL_NORMAL_TACTICS, ovtc) >= sdata(SKILL_NORMAL_MAGIC_DEVICE, ovtc) ) {
				overs = sdata(SKILL_NORMAL_TACTICS, ovtc) * cdata(CDATA_POWER_GAUGE, ovtc) / 100
			}
			if ( sdata(SKILL_NORMAL_MARKSMAN, ovtc) >= sdata(SKILL_NORMAL_TACTICS, ovtc) & sdata(SKILL_NORMAL_MARKSMAN, ovtc) >= sdata(SKILL_NORMAL_CASTING, ovtc) & sdata(SKILL_NORMAL_MARKSMAN, ovtc) >= sdata(SKILL_NORMAL_MAGIC_DEVICE, ovtc) ) {
				overs = sdata(SKILL_NORMAL_MARKSMAN, ovtc) * cdata(CDATA_POWER_GAUGE, ovtc) / 100
			}
			if ( sdata(SKILL_NORMAL_CASTING, ovtc) >= sdata(SKILL_NORMAL_MARKSMAN, ovtc) & sdata(SKILL_NORMAL_CASTING, ovtc) >= sdata(SKILL_NORMAL_TACTICS, ovtc) & sdata(SKILL_NORMAL_CASTING, ovtc) >= sdata(SKILL_NORMAL_MAGIC_DEVICE, ovtc) ) {
				overs = sdata(SKILL_NORMAL_CASTING, ovtc) * cdata(CDATA_POWER_GAUGE, ovtc) / 100
			}
			if ( sdata(SKILL_NORMAL_MAGIC_DEVICE, ovtc) >= sdata(SKILL_NORMAL_MARKSMAN, ovtc) & sdata(SKILL_NORMAL_MAGIC_DEVICE, ovtc) >= sdata(SKILL_NORMAL_CASTING, ovtc) & sdata(SKILL_NORMAL_MAGIC_DEVICE, ovtc) >= sdata(SKILL_NORMAL_TACTICS, ovtc) ) {
				overs = sdata(SKILL_NORMAL_MAGIC_DEVICE, ovtc) * cdata(CDATA_POWER_GAUGE, ovtc) / 100
			}
			if ( overs > 0 ) {
				over += overs * sqrt(overs) * 5 + rnd(overs + 1)
			}
			cdata(CDATA_POWER_GAUGE, ovtc) = 0
			customtalk ovtc, DBMODE_FLAVOR_SPECIAL
			gosub *convert_word
		loop
		cfg_animewait = waitbk
		if ( over == 0 ) {
			txt lang("óÕÇ™ë´ÇËÇ»Ç¢ÅcÅB", "Force is not enough...")
			goto *effect_end
		}
		overs = 0
		if ( sdata(SKILL_NORMAL_TACTICS, cc) >= sdata(SKILL_NORMAL_MARKSMAN, cc) & sdata(SKILL_NORMAL_TACTICS, cc) >= sdata(SKILL_NORMAL_CASTING, cc) & sdata(SKILL_NORMAL_TACTICS, cc) >= sdata(SKILL_NORMAL_MAGIC_DEVICE, cc) ) {
			overs = sdata(SKILL_NORMAL_TACTICS, cc) * cdata(CDATA_POWER_GAUGE, cc) / 100
		}
		if ( sdata(SKILL_NORMAL_MARKSMAN, cc) >= sdata(SKILL_NORMAL_TACTICS, cc) & sdata(SKILL_NORMAL_MARKSMAN, cc) >= sdata(SKILL_NORMAL_CASTING, cc) & sdata(SKILL_NORMAL_MARKSMAN, cc) >= sdata(SKILL_NORMAL_MAGIC_DEVICE, cc) ) {
			overs = sdata(SKILL_NORMAL_MARKSMAN, cc) * cdata(CDATA_POWER_GAUGE, cc) / 100
		}
		if ( sdata(SKILL_NORMAL_CASTING, cc) >= sdata(SKILL_NORMAL_MARKSMAN, cc) & sdata(SKILL_NORMAL_CASTING, cc) >= sdata(SKILL_NORMAL_TACTICS, cc) & sdata(SKILL_NORMAL_CASTING, cc) >= sdata(SKILL_NORMAL_MAGIC_DEVICE, cc) ) {
			overs = sdata(SKILL_NORMAL_CASTING, cc) * cdata(CDATA_POWER_GAUGE, cc) / 100
		}
		if ( sdata(SKILL_NORMAL_MAGIC_DEVICE, cc) >= sdata(SKILL_NORMAL_MARKSMAN, cc) & sdata(SKILL_NORMAL_MAGIC_DEVICE, cc) >= sdata(SKILL_NORMAL_CASTING, cc) & sdata(SKILL_NORMAL_MAGIC_DEVICE, cc) >= sdata(SKILL_NORMAL_TACTICS, cc) ) {
			overs = sdata(SKILL_NORMAL_MAGIC_DEVICE, cc) * cdata(CDATA_POWER_GAUGE, cc) / 100
		}
		cdata(CDATA_POWER_GAUGE, cc) = 0
		if ( overs > 0 ) {
			over += overs * sqrt(overs) * 5 + rnd(overs + 1)
		}
		animeload 68, cc
		snd SOUNDLIST_BREATH1
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		animeid = ANIMATION_UNISON_IMPACT1
		anic = tc
		gosub *anime
		snd SOUNDLIST_ENC
		snd SOUNDLIST_PUNISH1
		animeid = ANIMATION_UNISON_IMPACT4
		anic = tc
		gosub *anime
		dmg = over
		if ( cdata(CDATA_HP, tc) < dmg ) {
			snd SOUNDLIST_BOM03
			animeload 70, tc
			snd SOUNDLIST_BOM06
			animeid = ANIMATION_UNISON_IMPACT2
			anic = tc
			gosub *anime
			snd SOUNDLIST_BOM15
			animeid = ANIMATION_UNISON_IMPACT3
			anic = tc
			gosub *anime
		}
		dmghp tc, dmg, cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				repeat MAX_CHARA_TOTAL
					if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
						continue
					}
					if ( cdata(CDATA_POWER_GAUGE, cnt) < 0 ) {
						continue
					}
					if ( cdata(CDATA_RELATION, cnt) == 10 | cc == CHARA_PLAYER ) {
						if ( cdata(CDATA_RELATION, cnt) < 10 ) {
							continue
						}
					}
					if ( cdata(CDATA_RELATION, cnt) < 10 & cc != CHARA_PLAYER ) {
						if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
							continue
						}
					}
					ovtc = cnt
					dx = cdata(CDATA_X, ovtc)
					dy = cdata(CDATA_Y, ovtc)
					if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
						continue
					}
					if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
						continue
					}
					skillexp SKILL_NORMAL_TACTICS, ovtc, 200
					skillexp SKILL_NORMAL_MARKSMAN, ovtc, 200
					skillexp SKILL_NORMAL_CASTING, ovtc, 200
					skillexp SKILL_NORMAL_MAGIC_DEVICE, ovtc, 200
				loop
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_PURGE | _switch_sw ) {
		_switch_sw = 0
		if ( gdata(GDATA_FLAG_GAME_MODE) != GAMEMODE_PURGE ) {
			goto *effect_end
		}
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
				continue
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			cdata(CDATA_HP, tc) = 0
			cdata(CDATA_MP, tc) = 0
		loop
		snd SOUNDLIST_ENC
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_BOUND_IN_BLOOD | _switch_sw ) {
		_switch_sw = 0
		ens3 = 0
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "ÇÕé¸àÕÇÃìØë∞Ç…åƒÇ—Ç©ÇØÇΩÅB", name(cc) + " encouraged the cognate.")
		}
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cdata(CDATA_RACE_ID, cnt) != cdata(CDATA_RACE_ID, cc) ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			ens3++
		loop
		if ( ens3 == 0 ) {
			txt lang(name(cc) + "ÇÕÇ–Ç∆ÇËÇ⁄Ç¡ÇøÇæÅcÅB", name(cc) + " was all alone.")
			goto *effect_end
		}
		dmgcon cc, CONDITION_BLEED, 1000
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cdata(CDATA_RACE_ID, cnt) != cdata(CDATA_RACE_ID, cc) ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( synccheck(tc, -1) ) {
				txtef COLOR_BLUE
				txt lang(name(tc) + "ÇÕåàà”Çå≈ÇﬂÇΩÅI", name(tc) + " " + is(tc) + " excited!")
			}
			if ( cdata(CDATA_POWER_GAUGE, tc) < 50 ) {
				cdata(CDATA_POWER_GAUGE, tc) += limit((ens3 + 1) * 2, 0, 30)
			}
			addbuff tc, BUFF_SPEED, sdata(SKILL_ATTR_WIL, tc) * 3 + 50, 50
			addbuff tc, BUFF_HERO, sdata(SKILL_ATTR_WIL, tc) * 3 + 100, 50
			addbuff tc, BUFF_ATTRIBUTE_SHIELD, sdata(SKILL_ATTR_WIL, tc) * 3 + 100, 50
			if ( tc == CHARA_PLAYER ) {
				addbuff tc, BUFF_CONTINGENCY, 150, 5
			}
			else {
				addbuff tc, BUFF_CONTINGENCY, 1500, 50
			}
		loop
		ens3 = 0
		snd SOUNDLIST_CHEER
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_DISTURBANCE | _switch_sw ) {
		_switch_sw = 0
		powsel = 0
		if ( gdata(GDATA_FLAG_MAIN) < 350 ) {
			if ( cdata(CDATA_LEVEL, tc) >= 130 ) {
				powsel = 100
			}
		}
		if ( gdata(GDATA_FLAG_MAIN) >= 350 ) {
			if ( cdata(CDATA_LEVEL, tc) >= 50 ) {
				powsel = 100
			}
		}
		if ( tc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, tc) == 100 | tc == CHARA_PLAYER ) {
			powsel = 100
		}
		if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
			powsel = 100
		}
		if ( powsel == 0 ) {
			goto *effect_end
		}
		if ( cdata(CDATA_POWER_GAUGE, cc) <= 1 ) {
			txt_nothinghappens
			goto *effect_end
		}
		gaugedown = cdata(CDATA_POWER_GAUGE, cc) / 2
		if ( cdata(CDATA_POWER_GAUGE, cc) < gaugedown ) {
			txt_nothinghappens
			goto *effect_end
		}
		txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇähóêÇµÇΩÅB", name(cc) + " disturbed " + name(tc) + ".")
		waitbk = cfg_animewait
		if ( cfg_animewait > 0 ) {
			cfg_animewait = 1
		}
		animeid = ANIMATION_CURSE
		gosub *anime
		cfg_animewait = waitbk
		cdata(CDATA_POWER_GAUGE, cc) -= gaugedown
		cdata(CDATA_POWER_GAUGE, tc) -= gaugedown
		if ( cdata(CDATA_POWER_GAUGE, tc) < 0 ) {
			cdata(CDATA_POWER_GAUGE, tc) = 0
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_CUT_TREE | _switch_sw ) {
		_switch_sw = 0
		citree = -1
		cell_itemlist cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER)
		f = 0
		repeat listmax
			p = list(0, cnt)
			if ( inv(INV_ITEM_ID, p) == ITEM_ID_TREE_SAKURA | inv(INV_ITEM_ID, p) == ITEM_ID_TREE_FIR | inv(INV_ITEM_ID, p) == ITEM_ID_TREE_NAKED | inv(INV_ITEM_ID, p) == ITEM_ID_TREE_ASH | inv(INV_ITEM_ID, p) == ITEM_ID_TREE_PALM | inv(INV_ITEM_ID, p) == ITEM_ID_TREE_ZELKOVA | inv(INV_ITEM_ID, p) == ITEM_ID_TREE_DEAD_TREE | inv(INV_ITEM_ID, p) == ITEM_ID_TREE_FRUIT | inv(INV_ITEM_ID, p) == ITEM_ID_TREE_FRUITLESS | inv(INV_ITEM_ID, p) == ITEM_ID_TREE_CEDAR | inv(INV_ITEM_ID, p) == ITEM_ID_TREE_BEECH ) {
				citree = p
				break
			}
		loop
		if ( citree == (-1) ) {
			txt lang("î∞çÃÇ≈Ç´ÇÈé˜ñÿÇ™ñ≥Ç¢ÅB", "You can not find a tree.")
			goto *effect_end
		}
		ci = p
		axeitem = 0
		item_find ITEM_ID_BARDISH, 3, 1
		if ( stat != (-1) ) {
			if ( inv(INV_ITEM_NUM, stat) >= 1 ) {
				axeitem = 100
			}
		}
		item_find ITEM_ID_CHAINSAW, 3, 1
		if ( stat != (-1) ) {
			if ( inv(INV_ITEM_NUM, stat) >= 1 ) {
				axeitem = 30
			}
		}
		item_find ITEM_ID_NEGATIVE_EDGE, 3, 1
		if ( stat != (-1) ) {
			if ( inv(INV_ITEM_NUM, stat) >= 1 ) {
				axeitem = 30
			}
		}
		if ( axeitem == 0 ) {
			txt lang("î∞çÃÇ∑ÇÈÇΩÇﬂÇÃìπãÔÇéùÇ¡ÇƒÇ¢Ç»Ç¢ÅB", "You have no item that can cut trees.")
			goto *effect_end
		}
		gdata(GDATA_ROW_ACT) = ACTION_CUT_TREE
		gosub *generalAct
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_PERSUASION | _switch_sw ) {
		_switch_sw = 1
	}
	if ( _switch_val == SKILL_SPACT_PECULIAR_JOKE | _switch_sw ) {
		_switch_sw = 1
	}
	if ( _switch_val == SKILL_SPACT_BLENDED_LIE | _switch_sw ) {
		_switch_sw = 1
	}
	if ( _switch_val == SKILL_SPACT_INTIMIDATION | _switch_sw ) {
		_switch_sw = 1
	}
	if ( _switch_val == SKILL_SPACT_MYSTERIOUS_SONG | _switch_sw ) {
		_switch_sw = 0
		if ( cc == CHARA_PLAYER ) {
			talking = 0
			repeat MAX_CHARA_TOTAL
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( cc == cnt ) {
					continue
				}
				if ( cc < MAX_CHARA_FOLLOWER ) {
					if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
						continue
					}
				}
				if ( cc >= MAX_CHARA_FOLLOWER ) {
					if ( cdata(CDATA_RELATION, cnt) == cdata(CDATA_RELATION, cc) ) {
						continue
					}
				}
				tc = cnt
				dx = cdata(CDATA_X, tc)
				dy = cdata(CDATA_Y, tc)
				if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG, SKILL_SPACT_CHEER) \ 1000 + 1 ) {
					continue
				}
				if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
					continue
				}
				talking++
			loop
			if ( talking == 0 ) {
				txt lang("ì¡Ç…ïKóvÇÕÇ»Ç≥ÇªÇ§ÇæÅB", "It doesn't seem to be especially necessary.")
				goto *effect_end
			}
			talking = 0
		}
		if ( cdata(CDATA_ACTION_PERIOD, cc) > 0 ) {
			goto *effect_end
		}
		if ( efid == SKILL_SPACT_PERSUASION ) {
			snd SOUNDLIST_CHAT
			animeload 73, cc
			gosub *skill_persuasion
		}
		if ( efid == SKILL_SPACT_PECULIAR_JOKE ) {
			snd SOUNDLIST_CHAT
			animeload 73, cc
			gosub *skill_peculiar_joke
		}
		if ( efid == SKILL_SPACT_BLENDED_LIE ) {
			snd SOUNDLIST_CHAT
			animeload 73, cc
			gosub *skill_blended_lie
		}
		if ( efid == SKILL_SPACT_INTIMIDATION ) {
			snd SOUNDLIST_CHAT
			animeload 73, cc
			gosub *skill_intimidation
		}
		if ( efid == SKILL_SPACT_MYSTERIOUS_SONG ) {
			snd SOUNDLIST_OFFER2
			animeload ANIMATION_MP_BREATH, cc
			gosub *skill_mysterious_song
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_RUBBING | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_ID, tc) == CREATURE_ID_JURE | cdata(CDATA_ID, tc) == CREATURE_ID_BLESSED_JURE ) {
			repeat MAX_CHARA_TOTAL
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( cdata(CDATA_ID, cnt) == CREATURE_ID_ROVID ) {
					snd SOUNDLIST_AMMO
					txt lang(cdatan(CDATAN_NAME, cnt) + "ÅuÇ»ÇÒÇ≈Ç∑Ç©ÅAÇªÇÃÇ¢Ç‚ÇÁÇµÇ¢éËÇ¬Ç´ÇÕÅIÉtÉPÉcÇ≈Ç∑ÅIÅv", cdatan(CDATAN_NAME, cnt) + " says: " + cnvtalk("Just where do you think you're putting those perverted hands of yours?! Stop this at once!"))
					goto *effect_end
				}
			loop
		}
		if ( cc == CHARA_PLAYER & (cbit(CHARA_BIT_LIVESTOCK, tc) == 1 | getworker(gdata(GDATA_AREA)) == tc) & adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_RANCH ) {
			item_find ITEM_ID_BIG_BRUSH, 3, 1
			if ( stat != (-1) ) {
				ci = stat
				if ( inv(INV_ITEM_NUM, ci) >= 1 ) {
					txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÉuÉâÉbÉVÉìÉOÇµÇΩÅB", "You rub " + name(tc) + " with a brush.")
					snd SOUNDLIST_BUSH1
					if ( getworker(gdata(GDATA_AREA)) == tc ) {
						if ( cdata(CDATA_LIVESTOCK_QUALITY, tc) > 0 ) {
							txtef COLOR_YELLOW
							txt lang("ÉuÉäÅ[É_Å[å¯â ÅF" + _impression3(cdata(CDATA_LIVESTOCK_QUALITY, tc)) + "ÅB", "Your thoughts on this breeder's offspring: " + _impression3(cdata(CDATA_LIVESTOCK_QUALITY, tc)) + ".")
						}
						if ( cdata(CDATA_LIVESTOCK_PRODUCE_QUALITY, tc) > 0 ) {
							txtef COLOR_YELLOW
							txt lang("ÉuÉäÅ[É_Å[å¯â ÅF" + _impression4(cdata(CDATA_LIVESTOCK_PRODUCE_QUALITY, tc)) + "ÅB", "Your thoughts on this breeder's offspring: " + _impression4(cdata(CDATA_LIVESTOCK_PRODUCE_QUALITY, tc)) + ".")
						}
					}
					if ( getworker(gdata(GDATA_AREA)) != tc ) {
						if ( cdata(CDATA_LIVESTOCK_QUALITY, tc) > 0 ) {
							txtef COLOR_YELLOW
							txt lang("Ç±ÇÃâ∆í{Ç©ÇÁÇÕ" + _impression3(cdata(CDATA_LIVESTOCK_QUALITY, tc)) + "Ç∆ä¥Ç∂ÇΩÅB", "Your thoughts on this creature: " + _impression3(cdata(CDATA_LIVESTOCK_QUALITY, tc)) + ".")
						}
						if ( cdata(CDATA_LIVESTOCK_PRODUCE_QUALITY, tc) > 0 ) {
							if ( cdata(CDATA_LIVESTOCK_QUALITY, tc) > 0 ) {
								txtef COLOR_YELLOW
								txt lang("Ç‹ÇΩÅA", "Further,")
							}
							txtef COLOR_YELLOW
							txt lang("Ç±ÇÃâ∆í{ÇÕ" + _impression4(cdata(CDATA_LIVESTOCK_PRODUCE_QUALITY, tc)) + "Ç∆ä¥Ç∂ÇΩÅB", "Your thoughts on this creature: " + _impression4(cdata(CDATA_LIVESTOCK_PRODUCE_QUALITY, tc)) + ".")
						}
					}
					if ( cbit(CHARA_BIT_BRUSHED, tc) == 1 ) {
						txt lang("ç≈ãﬂÉuÉâÉbÉVÉìÉOÇµÇΩÇŒÇ©ÇËÇ»ÇÃÇ≈å¯â ÇÕÇ»Ç¢ÅB", name(tc) + " was already brushed recently.")
						goto *effect_end
					}
					cdata(CDATA_EMO_ICON, tc) = 6 + 100 * 3
					cdata(CDATA_BRUSH_LEVEL, tc)++
					if ( cdata(CDATA_BRUSH_LEVEL, tc) >= 5 ) {
						cdata(CDATA_BRUSH_LEVEL, tc) = 5
					}
					modimp tc, 10
					cbitmod CHARA_BIT_BRUSHED, tc, 1
					if ( cdata(CDATA_BRUSH_LEVEL, tc) == 1 ) {
						txtef COLOR_YELLOW
						txt name(tc) + lang("ÇÕÇøÇÂÇ¡Ç∆ìæà”Ç∞ÇæÅBÅu„YóÌÇ…Ç»Ç¡ÇΩÅHÅv", " looks proud. \"Did it make me beautiful?\"")
					}
					if ( cdata(CDATA_BRUSH_LEVEL, tc) == 2 ) {
						txtef COLOR_YELLOW
						txt name(tc) + lang("ÇÕè¨äÔóÌÇ»ä¥Ç∂Ç™Ç∑ÇÈÅBÅuÇ¶ÅAÇ‡Ç§èIÇÌÇËÅHÅv", " looks clean. \"Aww, it's already over?\"")
					}
					if ( cdata(CDATA_BRUSH_LEVEL, tc) == 3 ) {
						txtef COLOR_YELLOW
						txt name(tc) + lang("ÇÕÇ©Ç»ÇËóßîhÇ…å©Ç¶ÇÈÅBÅuÇ†ÇËÇ™Ç∆ÅIÅv", " looks marvelous. \"Thank you!\"")
					}
					if ( cdata(CDATA_BRUSH_LEVEL, tc) == 4 ) {
						txtef COLOR_YELLOW
						txt name(tc) + lang("ÇÕÇ∆ÇƒÇ‡åíçNÇªÇ§ÇæÅIÅuÇ¢Ç¬Ç‡Ç†ÇËÇ™Ç∆Ç§Åv", " looks quite healthy! \"Thank you for everything!\"")
					}
					if ( cdata(CDATA_BRUSH_LEVEL, tc) == 5 ) {
						txtef COLOR_YELLOW
						txt name(tc) + lang("Ç™ÉLÉâÉLÉâãPÇ¢Çƒå©Ç¶ÇÈÅIÅuëÂçDÇ´ÅIÅv", " is positively shining! \"I love you!\"")
					}
					goto *effect_end
				}
			}
		}
		if ( cc == CHARA_PLAYER & tc == CHARA_PLAYER ) {
			txt lang(name(cc) + "ÇÕé©ï™ÇïèÇ≈ÇΩÅB", "You brush yourself.")
			goto *effect_end
		}
		txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇïèÇ≈ÇΩÅB*Ç»Ç≈Ç»Ç≈* ", name(cc) + " rubbed " + name(tc) + ".")
		if ( cdata(CDATA_CONDITION_BRAINWASH, tc) > 1 ) {
			if ( rnd(5) == 0 ) {
				cdata(CDATA_CONDITION_BRAINWASH, tc) = 1
			}
		}
		if ( cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_IMPRESSION, tc) < 100 & rnd(sdata(SKILL_ATTR_DEX, cc) + 1) < rnd(200) ) {
				if ( cdata(CDATA_ID, tc) == CREATURE_ID_SPACE_HORNED_OWL ) {
					txtef COLOR_RED
					txt lang("ÅuÉRÉèÉCÉRÉèÉCÅcÉAÉbÅAÉAÅJÉAÅJÉAÅJÅ[Å[Å[ÅIÅv", cnvtalk("I'm scared, I'm scared... Ah, ah ah ah---!"))
				}
				else {
					txtef COLOR_RED
					txt name(tc) + lang("ÇÃê_åoÇãtïèÇ≈ÇµÇƒÇµÇ‹Ç¡ÇΩÇÊÇ§ÇæÅB", " appears to be irritated."), name(tc) + lang("ÇÕåôÇªÇ§Ç…", " looks disgusted and brushes ") + name(cc) + lang("Çï•Ç¢ÇÃÇØÇΩÅB", " away."), lang("ÅuÉZÉNÉnÉâÅIÅv", cnvtalk("Sexual harassment!")), lang("ÅuêGÇÁÇ»Ç¢Ç≈Åv", cnvtalk("Don't touch me."))
				}
				if ( cdata(CDATA_CONDITION_ANGRY, tc) == 0 ) {
					cangury(tc) = 5
				}
				goto *effect_end
			}
			if ( cdata(CDATA_IMPRESSION, tc) < 150 ) {
				if ( cdata(CDATA_ID, tc) == CREATURE_ID_SPACE_HORNED_OWL ) {
					txtef COLOR_YELLOW
					txt lang("ÅuÉAÉnÉqÉÉÉqÉÉÅIÉÇÉbÉgÅIÉÇÉbÉgÉIÉlÉKÅcÉAÉqÉÉÉqÉÉÅIÅv", cnvtalk("Ahyahya! More! Do it more... Ahyahya!"))
				}
				else {
					txtef COLOR_YELLOW
					txt lang(name(tc) + "ÇÕç¢òfÇµÇƒÇ¢ÇÈÅcÅB", name(tc) + " looks puzzled."), lang(name(tc) + "ÇÕî˜ñ≠Ç…ÉCÉÑÇªÇ§ÇæÅI", name(tc) + " looks slightly upset!"), lang(name(tc) + "ÇÕñ≥åæÇ≈" + name(cc) + "Ç©ÇÁó£ÇÍÇΩÅB", name(tc) + " silently steps away from " + name(cc) + ".")
				}
				goto *effect_end
			}
			if ( cdata(CDATA_IMPRESSION, tc) < 200 ) {
				cdata(CDATA_EMO_ICON, tc) = 6 + 100 * 3
				if ( cdata(CDATA_ID, tc) == CREATURE_ID_SPACE_HORNED_OWL ) {
					txtef COLOR_YELLOW
					txt lang("ÅuÉÇÉbÉgÉiÉfÉiÉfÉVÉeÅ[ÅIÅv", cnvtalk("More! More brush brush!"))
				}
				else {
					txtef COLOR_YELLOW
					txt lang(name(tc) + "ÇÕÇøÇÂÇ¡Ç∆äÇµÇªÇ§ÇæÅB", name(tc) + " looks somewhat happy."), lang(name(tc) + "ÇÕípÇ∏Ç©ÇµÇ™Ç¡ÇƒÇ¢ÇÈÅcÅB", name(tc) + " blushes shyly...")
				}
				addbuff tc, BUFF_BOOST, 20, 3
				goto *effect_end
			}
			if ( cdata(CDATA_IMPRESSION, tc) >= 200 ) {
				cdata(CDATA_EMO_ICON, tc) = 17 + 100 * 3
				customtalk tc, DBMODE_FLAVOR_NADE
				gosub *convert_word
				if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
					if ( cdata(CDATA_ID, tc) == CREATURE_ID_SPACE_HORNED_OWL ) {
						txtef COLOR_YELLOW
						txt lang("ÅuÉtÉ@Å[ÅcÉuÉãÉXÉRÅcÉtÉ@Å[ÅcÉuÉãÉXÉRÅcÅv", cnvtalk("Haa... *purr*... haa... *purr*"))
					}
					else {
						txtef COLOR_YELLOW
						txt name(tc) + lang("ÇÕÇ∆Ç¡ÇƒÇ‡äÇµÇªÇ§ÇæÅI", " looks very happy!"), name(tc) + lang("ÇÕñ≥åæÇ≈", " silently snuggles up next to ") + name(cc) + lang("Ç…äÒÇËìYÇ¡ÇƒÇ´ÇΩÅB", ".")
					}
				}
				addbuff tc, BUFF_BOOST, cdata(CDATA_IMPRESSION, tc), 5
				goto *effect_end
			}
			goto *effect_end
		}
		else {
			txtef COLOR_RED
			txt name(tc) + lang("ÇÃê_åoÇãtïèÇ≈ÇµÇƒÇµÇ‹Ç¡ÇΩÇÊÇ§ÇæÅB", " appears to be irritated."), name(tc) + lang("ÇÕåôÇªÇ§Ç…", " looks disgusted and brushes ") + name(cc) + lang("Çï•Ç¢ÇÃÇØÇΩÅB", " away.")
			if ( cdata(CDATA_CONDITION_ANGRY, tc) == 0 ) {
				cangury(tc) = 5
			}
			goto *effect_end
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_BEWITCH | _switch_sw ) {
		_switch_sw = 0
		snd SOUNDLIST_PRAY1
		animeload ANIMATION_GOLDENSTORM, cc
		if ( tc == cc ) {
			goto *effect_end
		}
		if ( jp ) {
			txt name(cc) + "ÇÕ" + name(tc) + "Ç…ëSóÕÇ≈ä√Ç¶ÇΩÅI", name(cc) + "ÇÕ" + name(tc) + "Çè„ñ⁄å≠Ç¢Ç≈å©ÇΩÅI", name(cc) + "ÇÕ" + name(tc) + "Ç…Ç∑ÇËäÒÇ¡ÇΩÅI", "*Ç”ÇüÇÃÅ[ÇÒ*"
		}
		if ( en ) {
			txt lang(name(cc) + "ÇÕ" + name(tc) + "Ç…ä√Ç¶ÇƒÇ›ÇΩÅB", name(cc) + " tried fawn on " + name(tc) + ".")
		}
		if ( cdata(CDATA_CONDITION_PARALYZE, tc) == (-1) ) {
			txt lang(name(tc) + "ÇÕóéÇøíÖÇ¢ÇƒÇ¢ÇÈÅB", name(tc) + " come" + _s(tc) + " to " + yourself(tc) + " again.")
			goto *effect_end
		}
		if ( cdata(CDATA_INTEREST, tc) <= 0 ) {
			cdata(CDATA_INTEREST, tc) = 0
			txt lang(name(tc) + "ÇÕãªñ°Ç»Ç≥ÇªÇ§Ç…" + name(cc) + "Çå©ÇƒÇ¢ÇÈÅB", name(tc) + " does not seem to be interested.")
			goto *effect_end
		}
		if ( rnd(sdata(SKILL_ATTR_CHA, cc) + cdata(CDATA_IMPRESSION, tc)) >= rnd(sdata(SKILL_ATTR_WIL, tc)) ) {
			cdata(CDATA_EMO_ICON, tc) = 17 + 100 * 3
			customtalk tc, DBMODE_FLAVOR_FAWN_ON
			gosub *convert_word
			if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
				if ( jp ) {
					txtef COLOR_YELLOW
					txt name(tc) + "ÇÕê√Ç©Ç…ñ„Ç¶ÇƒÇ¢ÇÈÅI", "ÅuÇªÅAÇªÇÒÇ»ñ⁄Ç≈å©Ç»Ç¢Ç≈" + _kure(3) + "ÅIÅv", "*ÉLÉÖÉìÅÙ1*"
				}
				if ( en ) {
					txtef COLOR_YELLOW
					txt name(tc) + " " + is(tc) + " crazy about " + name(cc) + "!"
				}
			}
			if ( tc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, tc) >= 0 ) {
					txt lang(name(tc) + "ÇÕévÇÌÇ∏ç‡ïzÇéÊÇËÇæÇµÇΩÅBÅuÇ®è¨å≠Ç¢Ç†Ç∞ÇøÇ·" + _u(3) + "ÅIÅv", name(tc) + " took out the wallet without thinking \"I'll give you pocket money!\"")
				}
				if ( cdata(CDATA_RELATION, tc) < 0 ) {
					txt lang(name(tc) + "ÇÕévÇÌÇ∏ç‡ïzÇéÊÇËÇæÇµÇΩÅBÅuÇ–ÅAî⁄ãØ" + _da(3) + "ÅIÅv", name(tc) + " took out the wallet without thinking \"I'll give you pocket money!\"")
				}
				sexvalue = sdata(SKILL_ATTR_CHA, cc) * (10 + rnd(10)) + 50
				if ( cdata(CDATA_GOLD, tc) <= sexvalue ) {
					sexvalue = cdata(CDATA_GOLD, tc)
				}
				cdata(CDATA_GOLD, tc) -= sexvalue
				if ( cdata(CDATA_GOLD, tc) <= 0 ) {
					cdata(CDATA_GOLD, tc) = 1
				}
				snd SOUNDLIST_PAYGOLD1
				flt
				itemcreate -1, ITEM_ID_GOLD_PIECE, cdata(CDATA_X, cc), cdata(CDATA_Y, cc), sexvalue
				if ( cc == CHARA_PLAYER ) {
					txt_questitem
				}
				cdata(CDATA_INTEREST, tc) -= rnd(10) + 20
				cdata(CDATA_INTEREST_RENEW, tc) = gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 + 12
			}
			if ( cdata(CDATA_CONDITION_PARALYZE, tc) == 0 ) {
				cdata(CDATA_CONDITION_PARALYZE, tc) = 1
			}
		}
		else {
			if ( jp ) {
				txtef COLOR_RED
				txt name(tc) + "ÇÕïΩëRÇ∆ÇµÇƒÇ¢ÇÈÅI", name(tc) + "ÇÕê^äÁÇ≈" + name(cc) + "Çå©ÇƒÇ¢ÇÈÅcÅB"
			}
			if ( en ) {
				txtef COLOR_RED
				txt name(tc) + " is nonchalant!"
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_MELT_CLINCH | _switch_sw ) {
		_switch_sw = 0
		snd SOUNDLIST_ATK_POISON
		await 100
		snd SOUNDLIST_ATK_POISON
		await 100
		snd SOUNDLIST_ATK_POISON
		if ( cdata(CDATA_CONDITION_BIND, tc) < 1 ) {
			cdata(CDATA_CONDITION_BIND, tc) = 1
		}
		if ( cdata(CDATA_CONDITION_ATROPHY, tc) < 1 ) {
			cdata(CDATA_CONDITION_ATROPHY, tc) = 1
		}
		if ( cdata(CDATA_CONDITION_BIND, cc) < 2 ) {
			cdata(CDATA_CONDITION_BIND, cc) = 2
		}
		txt lang(name(cc) + "ÇÕ" + name(tc) + "Ç…ëgÇ›ïtÇ¢ÇƒónÇ©ÇµénÇﬂÇΩÅB", name(cc) + " assembled with " + name(tc) + " and started to melt.")
		if ( jp ) {
			txt "ÅuÇ–Ç¡ÅIÅv", "ÅuÇ∆ÅAónÇ©Ç≥ÇÍÇÈÅIÅv", "ÅuÇ†ÇüÇüÇ†Ç¡ÅIÅHÅv", "ÅuÇ¨Ç·Ç†Ç†Ç†ÅcÅIÅv"
		}
		dmghp tc, sdata(SKILL_ATTR_STR, cc) * 2 + sdata(SKILL_ATTR_CON, cc) * 2 + rnd(sdata(SKILL_ATTR_STR, cc) + 10), DAMAGE_FROM_ACID, SKILL_RESDMG_ACID, 1000
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_FORMLESS_FETTER | _switch_sw ) {
		_switch_sw = 0
		txt lang(name(cc) + "ÇÕé¸àÕÇ…ñÇóÕÇï˙Ç¡ÇΩÅI", name(cc) + " devoted magical power to the surroundings!")
		snd SOUNDLIST_ATK_MIND
		animeload 48, cc
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cdata(CDATA_RELATION, cc) > (-3) | cc == CHARA_PLAYER ) {
				if ( cdata(CDATA_RELATION, cnt) > (-3) ) {
					continue
				}
			}
			if ( cdata(CDATA_RELATION, cc) == (-3) ) {
				if ( cdata(CDATA_RELATION, cnt) == (-3) & cnt != 0 ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( map(cdata(CDATA_X, tc), cdata(CDATA_Y, tc), 8) != 0 ) {
				i = map(cdata(CDATA_X, tc), cdata(CDATA_Y, tc), 8) - 1
				s = ""
				if ( mef(0, i) == 1 ) {
					s = lang("éÖ", "web")
				}
				if ( mef(0, i) == 2 ) {
					s = lang("à≈", "darkness")
				}
				if ( mef(0, i) == 3 ) {
					s = lang("é_", "acid")
				}
				if ( mef(0, i) == 4 ) {
					s = lang("ÉGÅ[ÉeÉã", "ether")
				}
				if ( mef(0, i) == 5 ) {
					s = lang("âä", "fire")
				}
				if ( mef(0, i) == 6 ) {
					s = lang("âtëÃ", "potion")
				}
				if ( mef(0, i) == 8 ) {
					s = lang("åı", "light")
				}
				if ( mef(0, i) == 9 ) {
					s = lang("âå", "smoke")
				}
				if ( s == "" ) {
					continue
				}
				txt lang("Ç‹ÇÈÇ≈ê∂Ç´ÇƒÇ¢ÇÈÇ©ÇÃÇÊÇ§Ç…ÅA" + s + "Ç™" + name(tc) + "Ç…óçÇ›Ç¬Ç¢ÇΩÅI", "As if it were alive, the " + s + " caught " + name(tc) + "!")
				snd SOUNDLIST_EAT1
				if ( cdata(CDATA_CONDITION_BIND, tc) < 1 ) {
					cdata(CDATA_CONDITION_BIND, tc) = 1
				}
				dmghp tc, sdata(SKILL_ATTR_MAG, cc) * (sdata(SKILL_NORMAL_CONTROL_MAGIC, cc) + 100) / 30 + rnd(sdata(SKILL_ATTR_MAG, cc) + 100), cc, SKILL_RES_MAGIC, 1000
				if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
					p = (MAX_SKILL_ATTR - MAX_SKILL_ATTR_BASIC) - STARTING_SKILL_ATTR
					if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE | encfind(tc, ENCHANT_SUSTAIN * EXT_ENCHANTMENT + STARTING_SKILL_ATTR + p) != (-1) ) {
						p = -1
					}
					if ( sdata(SKILL_ATTR_DEX, tc) < sorg(SKILL_ATTR_DEX, tc) / 2 ) {
						p = -1
					}
					if ( findbuff(tc, BUFF_DISINFECTION) != (-1) ) {
						p = -1
					}
					if ( p != (-1) ) {
						i = sorg(STARTING_SKILL_ATTR + p, tc) - cdata(STARTING_CDATA_ATTR + p, tc)
						if ( i > 0 ) {
							efp = (sdata(SKILL_NORMAL_CONTROL_MAGIC, cc) + 1) / 4 + 20
							i = i * efp / 2000 + 5
							cdata(STARTING_CDATA_ATTR + p, tc) -= i
						}
						if ( synccheck(tc, -1) ) {
							txtmore
							txtef COLOR_PURPLE
							txt lang(name(tc) + "ÇÕé„Ç≠Ç»Ç¡ÇΩÅB", name(tc) + " " + is(tc) + " weakened.")
						}
						r1 = tc
						gosub *charaRefresh
					}
				}
			}
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_SQUEEZE | _switch_sw ) {
		_switch_sw = 0
		if ( cc == CHARA_PLAYER & (cbit(CHARA_BIT_LIVESTOCK, tc) == 1 | getworker(gdata(GDATA_AREA)) == tc) & adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_RANCH ) {
			if ( cbit(CHARA_BIT_SQUEEZED, tc) == 1 ) {
				txt lang("Ç‹Çæì˚Ç™ó≠Ç‹Ç¡ÇƒÇ»Ç¢ÅB", name(tc) + " has not accumulated milk yet.")
				goto *effect_end
			}
			if ( TweakData(54, 2) == 1 & cdata(CDATA_SPRITE_SIZE_MILK, tc) != 0 ) {
				txt lang("ì˚ÇçÔÇÍÇÈÇŸÇ«ê¨í∑ÇµÇƒÇ¢Ç»Ç¢ÅB", name(tc) + " is not old enough to produce milk.")
				goto *effect_end
			}
			if ( sorg(SKILL_ATTR_LIFE, tc) <= 2 ) {
				txtef COLOR_RED
				txt lang("ñ≥óùÇ…çÔÇËéÊÇÈÇ∆éÄÇ…ÇªÇ§ÇæÅBÇ‚ÇﬂÇƒÇ®Ç±Ç§Ç©ÅH", "If you squeeze more milk, " + name(tc) + " will die. Stop it?")
				promptYesNo
				if ( rtval != 1 ) {
					goto *effect_end
				}
				txt lang("Ç†Ç»ÇΩÇÕ" + name(tc) + "Ç©ÇÁçÔÇËêsÇ≠ÇµÇΩÅB", "You squeezed " + name(tc) + " to exhaustion.")
				snd SOUNDLIST_DRINK1
				await 100
				snd SOUNDLIST_DRINK1
				await 100
				snd SOUNDLIST_DRINK1
				milkp = 0
				if ( cdata(CDATA_LIVESTOCK_PRODUCE_QUALITY, tc) >= 10 & cdata(CDATA_LIVESTOCK_PRODUCE_QUALITY, tc) <= 12 ) {
					milkp = cdata(CDATA_LIVESTOCK_PRODUCE_QUALITY, tc) - 9
				}
				flt
				itemcreate -1, ITEM_ID_BOTTLE_MILK, cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 0
				if ( stat ) {
					inv(INV_ITEM_SUB_NAME, ci) = cdata(CDATA_ID, tc)
					if ( TweakData(54, 2) == 1 ) {
						inv(INV_ITEM_LEVEL, ci) = cdata(CDATA_BRUSH_LEVEL, tc) + milkp + 5 + cdata(CDATA_SPRITE_SIZE_MILK, tc) + rnd(limit(sdata(SKILL_ATTR_DEX, CHARA_PLAYER) / 100, 0, 2) + 1)
					}
					else {
						inv(INV_ITEM_LEVEL, ci) = cdata(CDATA_BRUSH_LEVEL, tc) + 2 + milkp + rnd(limit(sdata(SKILL_ATTR_DEX, CHARA_PLAYER) / 50, 0, 5) + 1)
					}
				}
				milkp = 0
				cbitmod CHARA_BIT_SQUEEZED, tc, 1
				evadd EVENT_SQUEEZE, tc
				goto *effect_end
			}
			snd SOUNDLIST_DRINK1
			await 100
			snd SOUNDLIST_DRINK1
			await 100
			snd SOUNDLIST_DRINK1
			milkp = 0
			if ( cdata(CDATA_LIVESTOCK_PRODUCE_QUALITY, tc) >= 10 & cdata(CDATA_LIVESTOCK_PRODUCE_QUALITY, tc) <= 12 ) {
				milkp = cdata(CDATA_LIVESTOCK_PRODUCE_QUALITY, tc) - 9
			}
			flt
			itemcreate -1, ITEM_ID_BOTTLE_MILK, cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 0
			if ( stat ) {
				inv(INV_ITEM_SUB_NAME, ci) = cdata(CDATA_ID, tc)
				if ( TweakData(54, 2) == 1 ) {
					inv(INV_ITEM_LEVEL, ci) = cdata(CDATA_BRUSH_LEVEL, tc) + milkp + 5 + cdata(CDATA_SPRITE_SIZE_MILK, tc) + rnd(limit(sdata(SKILL_ATTR_DEX, CHARA_PLAYER) / 100, 0, 2) + 1)
				}
				else {
					inv(INV_ITEM_LEVEL, ci) = cdata(CDATA_BRUSH_LEVEL, tc) + 2 + milkp + rnd(limit(sdata(SKILL_ATTR_DEX, CHARA_PLAYER) / 50, 0, 5) + 1)
				}
			}
			milkp = 0
			txtef COLOR_GREEN
			txt lang(name(tc) + "Ç©ÇÁîZå˙Ç»ì˚ÇçÔÇËéÊÇ¡ÇΩÅB", "You squeezed milk from " + name(tc) + ".")
			txtef COLOR_PINK
			txt lang(name(tc) + "Ç©ÇÁå≥ãCÇ™Ç»Ç≠Ç»Ç¡ÇΩÅB", name(tc) + " got weakened.")
			skillmod SKILL_ATTR_LIFE, tc, sorg(SKILL_ATTR_LIFE, tc) * (-1) / 2 * 1000
			cbitmod CHARA_BIT_SQUEEZED, tc, 1
			goto *effect_end
		}
		if ( cdata(CDATA_ID, tc) == CREATURE_ID_JURE | cdata(CDATA_ID, tc) == CREATURE_ID_BLESSED_JURE ) {
			repeat MAX_CHARA_TOTAL
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( cdata(CDATA_ID, cnt) == CREATURE_ID_ROVID ) {
					snd SOUNDLIST_AMMO
					txt lang(cdatan(CDATAN_NAME, cnt) + "Åuï¯Ç´ñçÇ≈â‰ñùÇµÇƒÇ¢Ç»Ç≥Ç¢ÅIÅv", cdatan(CDATAN_NAME, cnt) + " says: \"Please make do with the hug pillow!\"")
					goto *effect_end
				}
			loop
		}
		soine = 0
		if ( gdata(GDATA_SLEEP) >= 15 ) {
			if ( cc == CHARA_PLAYER ) {
				if ( map(cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 4) != 0 ) {
					cell_itemlist cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER)
					f = 0
					repeat listmax
						p = list(0, cnt)
						if ( inv(INV_ITEM_ID, p) == ITEM_ID_HAPPY_BED | inv(INV_ITEM_ID, p) == ITEM_ID_DOUBLE_BED | inv(INV_ITEM_ID, p) == ITEM_ID_KINGS_BED ) {
							soine = 100
							break
						}
					loop
				}
				if ( soine == 100 ) {
					snd SOUNDLIST_DRINK1
					await 100
					snd SOUNDLIST_DRINK1
					await 100
					snd SOUNDLIST_DRINK1
					txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÉxÉbÉhÇ÷Ç∆ï¯Ç´äÒÇπÇΩÅB", name(cc) + " hugged " + name(tc) + " to bed.")
					teikou = limit(cdata(CDATA_HP, tc) * 20 / cdata(CDATA_MAX_HP, tc), 1, 20) * sdata(SKILL_ATTR_STR, tc) / 2
					if ( cdata(CDATA_IMPRESSION, tc) < 200 & rnd(sdata(SKILL_ATTR_STR, CHARA_PLAYER)) < teikou & cdata(CDATA_MASTER_SERVANT, tc) < 150 ) {
						hostileaction cc, tc
						txtef COLOR_RED
						txt lang(name(tc) + "ÇÕêMÇ∂ÇÁÇÍÇ»Ç¢" + teikou + "ÇŸÇ«ÇÃóÕÇ≈íÔçRÇµÅAÇ†Ç»ÇΩÇêUÇËÇŸÇ«Ç¢ÇΩÅB", name(cc) + " squeezed " + name(tc) + ".")
						goto *effect_end
					}
					if ( cdata(CDATA_IMPRESSION, tc) < 200 & cdata(CDATA_MASTER_SERVANT, tc) < 150 ) {
						txtef COLOR_BLUE
						txt lang(name(tc) + "ÇÕïKéÄÇ…íÔçRÇµÇΩÇ™ÅAÇ†Ç»ÇΩÇÃóÕÇÕã≠Ç©Ç¡ÇΩÅB", name(tc) + " tried desperately to resist, but you were stronger.")
						modkarma CHARA_PLAYER, -20
						if ( jp ) {
							customtalk tc, DBMODE_FLAVOR_INSULT
							gosub *convert_word
							if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
								txt name(tc) + "ÇÕÇ†Ç´ÇÁÇﬂÇ™à´Ç≠ÅAÇ‹ÇæÉWÉ^ÉoÉ^ÇµÇƒÇ¢ÇÈÅcÅB", "ÅuÇ±ÇÒÇ»ÇÃÇ¡ÇƒÇ»Ç¢" + _yo(3) + "ÅIÅv", "ÅuÇ«Ç§ÇµÇƒÇ±Ç§Ç»Ç¡ÇΩÅcÅv", "ÅuÇ±ÇÒÇ»Ç±Ç∆Ç∑ÇÈÇ»ÇÒÇƒÅAå©ëπÇ»Ç¡ÇΩ" + _yo(3) + "ÅIÅv", "ÅuÇ±ÇÃî∆çﬂé“ÅIÅv"
							}
						}
						soine = 1000
					}
					if ( cdata(CDATA_IMPRESSION, tc) >= 200 & cdata(CDATA_MASTER_SERVANT2, tc) < 5 ) {
						soine = 2000
						txtef COLOR_GREEN
						txt lang(name(tc) + "ÇÕå`ÇæÇØÇÃíÔçRÇµÇ©å©ÇπÇ»Ç©Ç¡ÇΩÅB", name(cc) + " squeezed " + name(tc) + ".")
						cdata(CDATA_EMO_ICON, tc) = 17 + 100 * 3
						if ( jp ) {
							customtalk tc, DBMODE_FLAVOR_HUG
							gosub *convert_word
							if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
								txt name(tc) + "ÇÕÇ”Ç¡Ç∆óÕÇî≤Ç≠Ç∆ÅAêgëÃÇÇ†Ç»ÇΩÇ…óaÇØÇΩÅB", "ÅuÇ†Å[ÇÍÅ[Åv", "ÅuÇ‹Ç¡ÇΩÇ≠ÅAä√Ç¶ÇÒñVÇ≥ÇÒ" + _dana(3) + "Åv"
							}
						}
					}
					if ( cdata(CDATA_IMPRESSION, tc) >= 200 & cdata(CDATA_MASTER_SERVANT2, tc) >= 5 ) {
						soine = 2000
						txtef COLOR_GREEN
						txt lang(name(tc) + "ÇÕï¯óiÇêUÇËÇŸÇ«Ç≠Ç∆ÅAÇ†Ç»ÇΩÇÉxÉbÉhÇ÷âüÇ≥Ç¶Ç¬ÇØÇΩÅB", name(tc) + " hugs you and pushes you onto the bed.")
						if ( jp ) {
							customtalk cc, DBMODE_FLAVOR_INSULT2
							gosub *convert_word
							if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
								txt name(tc) + "ÇÕÇ†Ç»ÇΩÇå©â∫ÇÎÇµÇƒó‚èŒÇïÇÇ©Ç◊ÇΩÅB", "ÅuÇ®Ç¡Ç∆ÅAÇ±ÇÒÇ»Ç∆Ç±ÇÎÇ…ï¯Ç´ñçÇ™Åv", "ÅuäoåÂÇÕÇ≈Ç´ÇƒÇ¢ÇÈ" + _kana(3) + "ÅHÅv"
							}
						}
					}
					if ( cdata(CDATA_IMPRESSION, tc) < 200 & cdata(CDATA_MASTER_SERVANT, tc) >= 150 ) {
						soine = 1000
						if ( jp ) {
							txtef COLOR_BLUE
							txt name(tc) + "ÇÕëSÇƒÇé@ÇµÇƒíÔçRÇµÇ»Ç©Ç¡ÇΩÅB", name(tc) + "ÇÕí˙ÇﬂÇÃï\èÓÇïÇÇ©Ç◊ÇƒÇ¢ÇÈÅcÅB", name(tc) + "ÇÕñ≥åæÇ≈ó¨ÇÍÇ…êgÇîCÇπÇƒÇ¢ÇÈÅB"
						}
					}
					cbitmod CHARA_BIT_MAKE_GENE, tc, 1
					cdata(CDATA_ITEM_USING, CHARA_PLAYER) = -1
					goto *sleep
				}
			}
		}
		if ( ( cc == CHARA_PLAYER & cdata(CDATA_IMPRESSION, tc) < 100 ) | ( tc == CHARA_PLAYER & cdata(CDATA_IMPRESSION, cc) < 100 ) ) {
			txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÇ´Ç¬Ç≠í˜Çﬂè„Ç∞ÇΩÅB", name(cc) + " squeezed " + name(tc) + ".")
		}
		if ( ( cc == CHARA_PLAYER & cdata(CDATA_IMPRESSION, tc) >= 100 ) | ( tc == CHARA_PLAYER & cdata(CDATA_IMPRESSION, cc) >= 100 ) ) {
			txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÇ´Ç¬Ç≠ï¯Ç´ÇµÇﬂÇΩÅB", name(cc) + " hugged " + name(tc) + " tightly.")
		}
		if ( cc == CHARA_PLAYER & tc == CHARA_PLAYER ) {
			txt lang("í…Ç¢ÅI", "What?")
			goto *effect_end
		}
		if ( cdata(CDATA_CONDITION_BIND, tc) == 0 ) {
			cdata(CDATA_CONDITION_BIND, tc) = 1
		}
		if ( ( cc == CHARA_PLAYER & cdata(CDATA_IMPRESSION, tc) < 100 ) | ( tc == CHARA_PLAYER & cdata(CDATA_IMPRESSION, cc) < 100 ) ) {
			if ( cdata(CDATA_CONDITION_JIU_JITSU, cc) == 100 ) {
				txtef COLOR_RED
				txt lang("Ç≥ÇÁÇ…ÅA" + name(tc) + "Ç…ã…ÇﬂãZÇédä|ÇØÇΩÅB", "Further, " + name(cc) + " attacked " + name(tc) + " by kiwame-waza.")
			}
			if ( jp ) {
				txt name(tc) + "ÇÃêgëÃÇ™ÁaÇﬁÅcÅB", "ÅuÇ≠ÇÈÇµÅcÇ¢ÅcÅv", "ÅuÇÆÇ•Ç•Åv", "ÅuéÄÇ Ç£ÅIÅv"
			}
			snd SOUNDLIST_DRINK1
			await 100
			snd SOUNDLIST_DRINK1
			await 100
			snd SOUNDLIST_DRINK1
			dmghp tc, limit(sdata(SKILL_ATTR_STR, cc) / 20 * (sdata(SKILL_ATTR_STR, cc) / 20 + rnd(sdata(SKILL_ATTR_STR, cc) / 20 + 2)) - sdata(SKILL_ATTR_STR, tc) * 2, sdata(SKILL_ATTR_STR, cc), 100000), cc
			if ( cdata(CDATA_CONDITION_JIU_JITSU, cc) == 100 ) {
				dmghp tc, limit(sdata(SKILL_ATTR_DEX, cc) / 10 * (sdata(SKILL_WEAPON_MARTIAL_ARTS, cc) + 1) / 10 + rnd(sdata(SKILL_ATTR_DEX, cc) * 2) - sdata(SKILL_ATTR_CON, tc) * 2, sdata(SKILL_ATTR_DEX, cc), 100000), cc
				if ( cdata(CDATA_CONDITION_BIND, cc) < 2 ) {
					cdata(CDATA_CONDITION_BIND, cc) = 2
				}
			}
			hostileaction cc, tc
			goto *effect_end
		}
		if ( ( cc == CHARA_PLAYER & cdata(CDATA_IMPRESSION, tc) >= 200 ) | ( tc == CHARA_PLAYER & cdata(CDATA_IMPRESSION, cc) >= 200 ) ) {
			cdata(CDATA_EMO_ICON, tc) = 17 + 100 * 3
			if ( cdata(CDATA_CONDITION_BRAINWASH, tc) > 1 ) {
				cdata(CDATA_CONDITION_BRAINWASH, tc) = 1
			}
			if (tc != CHARA_PLAYER) {
				customtalk tc, DBMODE_FLAVOR_HUG
			}
			else {
				customtalk cc, DBMODE_FLAVOR_HUG
			}
			gosub *convert_word
			if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
				if ( jp ) {
					txt name(tc) + "ÇÕñ≥åæÇ≈ï¯Ç´ÇµÇﬂï‘ÇµÇƒÇ´ÇΩÅB", "ÅuÇ†ÇΩÇΩÇ©Ç¢ÅcÅv", "ÅuçKÇπÇ»ãCï™" + _dana(3) + "Åv"
				}
			}
		}
		if ( cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) / 10 + 1 ) {
			if ( cdata(CDATA_HP, tc) != cdata(CDATA_MAX_HP, tc) ) {
				animeid = ANIMATION_HEAL_FAST
				gosub *anime
				dmghp cc, limit(cdata(CDATA_MAX_HP, cc) / 10, 1, cdata(CDATA_MAX_HP, tc) - cdata(CDATA_HP, tc)), 
				healhp tc, cdata(CDATA_MAX_HP, cc) / 10
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_MAGIC_KISS | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_ID, tc) == CREATURE_ID_JURE | cdata(CDATA_ID, tc) == CREATURE_ID_BLESSED_JURE ) {
			repeat MAX_CHARA_TOTAL
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				if ( cdata(CDATA_ID, cnt) == CREATURE_ID_ROVID ) {
					snd SOUNDLIST_AMMO
					txt lang(cdatan(CDATAN_NAME, cnt) + "ÅuÉWÉÖÉAólÇÃêOÇÕéÑÇ™ê‚ëŒñhâqÇµÇ‹Ç∑ÅIÅv", cdatan(CDATAN_NAME, cnt) + " says: \"I will protect Lady Jure's lips at all costs!\"")
					goto *effect_end
				}
			loop
		}
		if ( cc == CHARA_PLAYER & tc == CHARA_PLAYER ) {
			txt lang("Ç¶Ç¡ÅB", "What?")
			goto *effect_end
		}
		txt lang(name(cc) + "ÇÕ" + name(tc) + "Ç…å˚Ç√ÇØÇµÇΩÅB", name(cc) + " kissed " + name(tc) + ".")
		if ( ( cc == CHARA_PLAYER & cdata(CDATA_IMPRESSION, tc) >= 200 ) | ( tc == CHARA_PLAYER & cdata(CDATA_IMPRESSION, cc) >= 200 ) ) {
			cdata(CDATA_EMO_ICON, tc) = 17 + 100 * 3
			if ( cdata(CDATA_CONDITION_BRAINWASH, tc) > 1 ) {
				cdata(CDATA_CONDITION_BRAINWASH, tc) = 1
			}
			if ( cc == CHARA_PLAYER) {
				customtalk tc, DBMODE_FLAVOR_KISS
			}
			else {
				customtalk cc, DBMODE_FLAVOR_KISS
			}
			gosub *convert_word
			if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
				if ( jp ) {
					txt "ÅuëÂçDÇ´ÅÙ1Åv", "ÅuÇÒÇ¡ÅcÅÙÅv", "ÅuÇ‡Ç¡Ç∆ÅcÇµÇƒÅv", "ÅuÉLÉXÇæÇØÇ∂Ç·Ç¢Ç‚ÅcÅv"
				}
			}
			dmgmp cc, sdata(SKILL_ATTR_CHA, cc) / 20 + 1
			healmp tc, sdata(SKILL_ATTR_CHA, cc) / 10 + 1
			goto *effect_end
		}
		if ( cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_IMPRESSION, tc) < 100 ) {
				if ( jp ) {
					txt "ÅuÉwÉìÉ^ÉCÅIÅv", "ÅuéEÇµÇƒÇ‚ÇÈÅv", "ÅuÇ§Ç∞Ç•ÅcÇÿÇ¡ÇÿÇ¡Åv", "ÅuÇ–Ç«Ç¢ÅcÅv"
				}
				if ( tc >= MAX_CHARA_FOLLOWER ) {
					cdata(CDATA_RELATION, tc) = -3
					cdata(CDATA_TARGET, tc) = cc
				}
				if ( cdata(CDATA_CONDITION_BRAINWASH, tc) > 1 ) {
					if ( rnd(3) == 0 ) {
						cdata(CDATA_CONDITION_BRAINWASH, tc) = 1
					}
				}
				modkarma CHARA_PLAYER, -4
				modimp tc, -10
				dmgmp tc, sdata(SKILL_ATTR_CHA, cc) / 10 + 1
				healmp cc, sdata(SKILL_ATTR_CHA, cc) / 20 + 1
				goto *effect_end
			}
			if ( jp ) {
				txt "ÅuÇ¢Ç´Ç»ÇËâΩÇÅIÅHÅv", "ÅuèÁíkÇÕÇ‚ÇﬂÇƒÇÊÅv", "ÅuÇªÇ§Ç¢Ç§ä÷åWÇ…Ç»ÇËÇΩÇ¢ÇÃÅHÅv", "Åuê”îCÇ∆Ç¡ÇƒÇÊÅIÅv"
			}
			if ( tc >= MAX_CHARA_FOLLOWER ) {
				cdata(CDATA_RELATION, tc) = -3
			}
			if ( cdata(CDATA_CONDITION_BRAINWASH, tc) > 1 ) {
				if ( rnd(2) == 0 ) {
					cdata(CDATA_CONDITION_BRAINWASH, tc) = 1
				}
			}
			dmgmp tc, sdata(SKILL_ATTR_CHA, cc) / 10 + 1
			healmp cc, sdata(SKILL_ATTR_CHA, cc) / 10 + 1
			modkarma CHARA_PLAYER, -2
			goto *effect_end
		}
		dmgmp tc, rnd(sdata(SKILL_ATTR_CHA, cc) / 10 + 30) + 10
		healmp cc, rnd(sdata(SKILL_ATTR_CHA, cc) / 10 + 30) + 10
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_HYPER_DASH | _switch_sw ) {
		_switch_sw = 0
		if ( cc == CHARA_PLAYER ) {
			if ( gdata(GDATA_RIDER) == 0 ) {
				txt_nothinghappens
				goto *effect_end
			}
			tc = CHARA_PLAYER
		}
		if ( cc == gdata(GDATA_RIDER) ) {
			tc = CHARA_PLAYER
		}
		addbuff tc, BUFF_HYPER_DASH, 30, 30
		snd SOUNDLIST_SONIC
		animeload ANIMATION_HEAL_FAST, tc
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_CLEAR_MIND | _switch_sw ) {
		_switch_sw = 0
		addbuff tc, BUFF_CLEAR_MIND, 100, 20 + sdata(SKILL_WEAPON_MARTIAL_ARTS, tc) / 5
		snd SOUNDLIST_ATK_MIND
		animeload ANIMATION_MP_BREATH, cc
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_KILLING_DANCE | _switch_sw ) {
		_switch_sw = 0
		addbuff tc, BUFF_KILLING_DANCE, 44, 44
		snd SOUNDLIST_ATK_MIND
		animeload 43, cc
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_SPACE_RETENTION | _switch_sw ) {
		_switch_sw = 0
		addbuff tc, BUFF_RETENTION, 30, 30
		snd SOUNDLIST_PRAY1
		animeload ANIMATION_BLOOD, cc
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_UNCONTROL | _switch_sw ) {
		_switch_sw = 0
		if ( findbuff(tc, BUFF_RUN_WILDLY) == (-1) ) {
			addbuff tc, BUFF_RUN_WILDLY, sorg(SKILL_ATTR_LER, tc) + sorg(SKILL_ATTR_DEX, tc) + sorg(SKILL_ATTR_WIL, tc), 30
			snd SOUNDLIST_ATK_FIRE
			animeload ANIMATION_GENE, tc
			if ( cdata(CDATA_CONDITION_ANGRY, tc) == 0 ) {
				cdata(CDATA_CONDITION_ANGRY, tc) = 30
				txt lang(name(tc) + "ÇÕã∂ñ\âªÇµÇΩÅB", name(cc) + " went berserk.")
			}
			if ( tc == CHARA_PLAYER ) {
				if ( cdata(CDATA_CONDITION_CONFUSE, tc) == 0 ) {
					cdata(CDATA_CONDITION_CONFUSE, tc) = 5
					txtef COLOR_PURPLE
					txt lang(name(tc) + "ÇÕç¨óêÇµÇΩÅB", name(tc) + " " + is(tc) + " confused.")
				}
			}
			if ( cdata(CDATA_PIC, tc) == xy2pic(13, 22) ) {
				cdata(CDATA_PIC, tc) = xy2pic(25, 24)
			}
			if ( cdata(CDATA_PIC, tc) == xy2pic(18, 17) ) {
				cdata(CDATA_PIC, tc) = xy2pic(20, 19)
			}
			if ( cdata(CDATA_PIC, tc) == xy2pic(6, 26) ) {
				cdata(CDATA_PIC, tc) = xy2pic(7, 26)
				if ( cdata(CDATA_PORTRAIT, tc) == 86 ) {
					cdata(CDATA_PORTRAIT, tc) = 87
				}
			}
			goto *effect_end
		}
		if ( cdata(CDATA_EXIST, cdata(CDATA_TARGET, tc)) == CHAR_STATE_ALIVE ) {
			if ( cbit(CHARA_BIT_AWAKE_MAGIC_ATTACK, cc) ) {
				tc = cdata(CDATA_TARGET, cc)
				gosub *act_melee
				goto *effect_end
			}
		}
		if ( cdata(CDATA_EXIST, cdata(CDATA_TARGET, tc)) == CHAR_STATE_ALIVE & dist(cdata(CDATA_X, cdata(CDATA_TARGET, tc)), cdata(CDATA_Y, cdata(CDATA_TARGET, tc)), cdata(CDATA_X, tc), cdata(CDATA_Y, tc)) > 1 ) {
			tc = cdata(CDATA_TARGET, tc)
			efid = SKILL_SPACT_SHADOW_STEP
			gosub *effect
		}
		else {
			efid = SKILL_SPACT_SWARM
			gosub *effect
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_INTENSIVE_POWER | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(cc, -1) ) {
			snd SOUNDLIST_ATK_MIND
		}
		txt lang(name(cc) + "ÇÕóÕÇèWÇﬂÇƒÇ¢ÇÈÅI", name(cc) + " accumulates power.")
		if ( cdata(CDATA_POWER_GAUGE, cc) > 100 & cdata(CDATA_POWER_GAUGE, cc) < 185 ) {
			cdata(CDATA_POWER_GAUGE, cc) += 16
		}
		if ( cdata(CDATA_POWER_GAUGE, cc) < 85 ) {
			cdata(CDATA_POWER_GAUGE, cc) += 16
		}
		healhp cc, cdata(CDATA_MAX_HP, cc) / 20 + 2
		healmp cc, cdata(CDATA_MAX_MP, cc) / 20 + 2
		healsp cc, cdata(CDATA_MAX_SP, cc) / 20 + 1
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_PRESSURE | _switch_sw ) {
		_switch_sw = 0
		snd SOUNDLIST_ATK_MIND
		animeload ANIMATION_GARDEN, tc
		dmgmp cc, cdata(CDATA_MAX_MP, cc) / 2
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) == (-3) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( synccheck(tc, -1) ) {
				txtef COLOR_PURPLE
				txt lang(name(tc) + "ÇÕãØÇ¶ÇΩÅB", name(tc) + " was overwhelmed.")
			}
			cdata(CDATA_POWER_GAUGE, tc) -= 50
			if ( cdata(CDATA_POWER_GAUGE, tc) < 0 ) {
				cdata(CDATA_POWER_GAUGE, tc) = 0
			}
			if ( rnd(8) == 0 ) {
				if ( cdata(CDATA_CONDITION_FEAR, tc) == 0 ) {
					cdata(CDATA_CONDITION_FEAR, tc) = 1
				}
			}
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_COWERING_SMILE | _switch_sw ) {
		_switch_sw = 0
		snd SOUNDLIST_ATK_MIND
		animeload ANIMATION_GARDEN, cc
		txtef COLOR_RED
		txt lang(name(cc) + "ÇÕèŒäÁÇçÏÇ¡ÇΩÇ™ÅAñ⁄Ç™ëSëRèŒÇ¡ÇƒÇ¢Ç»Ç¢ÅI", name(cc) + " smiles, but " + his(cc) + " eyes are not laughing at all!")
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( synccheck(tc, -1) ) {
				txtef COLOR_PURPLE
				txt lang(name(tc) + "ÇÕêÌú…ÇµÇΩÅB", name(tc) + " was overwhelmed.")
			}
			if ( cdata(CDATA_CONDITION_ATROPHY, tc) == 0 ) {
				cdata(CDATA_CONDITION_ATROPHY, tc) += 3
			}
			if ( cdata(CDATA_CONDITION_CHILLS, tc) == 0 ) {
				cdata(CDATA_CONDITION_CHILLS, tc) = 3
			}
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_ABYSS_IN_THE_EYE | _switch_sw ) {
		_switch_sw = 0
		snd SOUNDLIST_OFFER2
		animeload ANIMATION_AROMAGEDDON, cc
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
				if ( cnt >= MAX_CHARA_FOLLOWER ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cc) != cdata(CDATA_RELATION, cnt) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			addbuff tc, BUFF_ABYSS_IN_THE_EYE, 50, 50
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_SMILE_FIELD | _switch_sw ) {
		_switch_sw = 0
		animeid = ANIMATION_STARS
		gosub *anime
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕèŒäÁÇêUÇËÇ‹Ç¢ÇΩÅB", name(cc) + " smiled.")
		addbuff cc, BUFF_RETENTION, 20, 20
		smile = 0
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			smile++
		loop
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			addbuff tc, BUFF_CONCENTRATION, sdata(SKILL_ATTR_WIL, cc) / 2 * sqrt(smile + 1) + 10, 50
			if ( synccheck(tc, -1) ) {
				txtef COLOR_PINK
				txt lang(name(tc) + "ÇÃãªñ°Çé‰Ç¢ÇΩÅB", name(cc) + " caught interest of " + name(tc) + ".")
			}
		loop
		smile = 0
		snd SOUNDLIST_CHEER
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_MISTELTEIN | _switch_sw ) {
		_switch_sw = 0
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 & tc != CHARA_PLAYER ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				f = 1
			}
		}
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕÉÑÉhÉäÉMÇìäÇ∞Ç¬ÇØÇΩÅB", name(cc) + " threw the mistletoe.")
		animeid = ANIMATION_SPORE
		gosub *anime
		animeload ANIMATION_FIZZLE, tc
		hostileaction cc, tc
		dmgmp tc, sdata(SKILL_WEAPON_THROWING, cc) / 5 + rnd(5 + sdata(SKILL_WEAPON_THROWING, cc) / 5)
		s = refchara(cdata(CDATA_ID, tc), DBSPEC_CHARA_FILTER, 1)
		if ( instr(s, 0, "/god/") != (-1) ) {
			dmg = (sdata(SKILL_WEAPON_THROWING, cc) / 3 + 1) * ((sdata(SKILL_NORMAL_GARDENING, cc) + 1) / 3 + 1) + rnd(sdata(SKILL_WEAPON_THROWING, cc) + 5)
			dmg = dmg * 50 / (sdata(SKILL_NORMAL_GARDENING, tc) + 50)
			dmghp tc, dmg, cc
		}
		if ( f == 1 ) {
			f = 0
			skillexp SKILL_NORMAL_GARDENING, cc, 20
			skillexp SKILL_WEAPON_THROWING, cc, 20
		}
		if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
			p = STARTING_SKILL_ATTR - STARTING_SKILL_ATTR
			if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE | encfind(tc, ENCHANT_SUSTAIN * EXT_ENCHANTMENT + STARTING_SKILL_ATTR + p) != (-1) ) {
				p = -1
			}
			if ( sdata(SKILL_ATTR_STR, tc) < sorg(SKILL_ATTR_STR, tc) / 2 ) {
				p = -1
			}
			if ( p != (-1) ) {
				i = sorg(STARTING_SKILL_ATTR + p, tc) - cdata(STARTING_CDATA_ATTR + p, tc)
				if ( i > 0 ) {
					efp = (sdata(SKILL_NORMAL_GARDENING, cc) + 1) / 4 + 20
					i = i * efp / 2000 + 5
					cdata(STARTING_CDATA_ATTR + p, tc) -= i
				}
				if ( synccheck(tc, -1) ) {
					txtmore
					txtef COLOR_PURPLE
					txt lang(name(tc) + "ÇÕé„Ç≠Ç»Ç¡ÇΩÅB", name(tc) + " " + is(tc) + " weakened.")
				}
				r1 = tc
				gosub *charaRefresh
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_VIOLENT_GARDEN | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(cc, -1) ) {
			animeid = ANIMATION_GARDEN
			gosub *anime
		}
		txtef COLOR_YELLOW
		txt lang("ínñ Ç©ÇÁì≈Çë—Ç—ÇΩñ†Ç™îÚÇ—èoÇµÇΩÅI", "Poisonous vines popped out from the ground!")
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) == cdata(CDATA_RELATION, cc) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 & tc != CHARA_PLAYER ) {
				if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
					f = 1
				}
			}
			dmg = (sdata(SKILL_ATTR_LER, cc) / 5 + 2) * ((sdata(SKILL_NORMAL_GARDENING, cc) + 1) / 2 + 2) + rnd(sdata(SKILL_ATTR_LER, cc) + 5)
			dmghp tc, dmg, cc, SKILL_RES_POISON, 1000
			if ( cdata(CDATA_CONDITION_BIND, tc) == 0 ) {
				cdata(CDATA_CONDITION_BIND, tc) += 3
				if ( synccheck(tc, -1) ) {
					txt lang(name(tc) + "ÇÕñ†Ç…ë©îõÇ≥ÇÍÇΩÅB", name(tc) + " was bound.")
				}
			}
		loop
		if ( f == 1 ) {
			f = 0
			skillexp SKILL_NORMAL_GARDENING, cc, 50
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_ANAPHYLAXIS | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(cc, -1) ) {
			animeid = ANIMATION_AROMAGEDDON
			gosub *anime
		}
		txtef COLOR_PURPLE
		txt lang(name(cc) + "ÇÕÉAÉåÉãÉMÅ[ì≈ÇÇ‹Ç´éUÇÁÇµÇΩÅB", name(cc) + " spreads allergenic poison.")
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) == cdata(CDATA_RELATION, cc) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 & tc != CHARA_PLAYER ) {
				if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
					f = 1
				}
			}
			dmg = limit((sdata(SKILL_ATTR_CON, cc) / 8 + 2) * ((sdata(SKILL_NORMAL_GENE_ENGINEER, cc) + 1) / 8 + 2) + rnd(cdata(CDATA_CONDITION_POISON, tc) + 5), 2, 40000)
			if ( cdata(CDATA_CONDITION_POISON, tc) >= 25 & cdata(CDATA_CONDITION_POISON, tc) < 50 ) {
				dmg = dmg * 2
			}
			if ( cdata(CDATA_CONDITION_POISON, tc) >= 50 & cdata(CDATA_CONDITION_POISON, tc) < 75 ) {
				dmg = dmg * 3
			}
			if ( cdata(CDATA_CONDITION_POISON, tc) >= 75 & cdata(CDATA_CONDITION_POISON, tc) < 100 ) {
				dmg = dmg * 4
			}
			if ( cdata(CDATA_CONDITION_POISON, tc) >= 100 & cdata(CDATA_CONDITION_POISON, tc) < 125 ) {
				dmg = dmg * 5
			}
			if ( cdata(CDATA_CONDITION_POISON, tc) >= 125 & cdata(CDATA_CONDITION_POISON, tc) < 150 ) {
				dmg = dmg * 6
			}
			if ( cdata(CDATA_CONDITION_POISON, tc) >= 150 ) {
				dmg = dmg * 7
			}
			dmghp tc, dmg, cc, SKILL_RES_POISON, 10
			if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cdata(CDATA_CONDITION_POISON, tc) == 0 ) {
				continue
			}
			if ( cdata(CDATA_CONDITION_SUFFOCATION, tc) == 0 ) {
				cdata(CDATA_CONDITION_SUFFOCATION, tc) = 5
				txtef COLOR_PURPLE
				txt lang(name(tc) + "ÇÕåƒãzç¢ìÔÇ…Ç»Ç¡ÇΩÅB", name(tc) + " suffers dyspnea.")
			}
			dmgcon tc, CONDITION_DIM, 200
			chara_vomit tc
		loop
		if ( f == 1 ) {
			f = 0
			skillexp SKILL_NORMAL_GENE_ENGINEER, cc, 50
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_VENOTRATE | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 25 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 25
		txtef COLOR_PURPLE
		txt lang(name(cc) + "ÇÕã√å≈Ç≥ÇπÇΩì≈Çï˙Ç¡ÇΩÅI", name(cc) + " shot solidified venom.")
		animeid = 43
		gosub *anime
		ele = SKILL_NONE
		get_route cdata(CDATA_X, cc), cdata(CDATA_Y, cc), cdata(CDATA_X, tc), cdata(CDATA_Y, tc)
		if ( stat == 0 ) {
			goto *effect_end
		}
		dx = cdata(CDATA_X, cc)
		dy = cdata(CDATA_Y, cc)
		repeat 20
			route_info dx, dy, cnt
			if ( stat == 0 ) {
				break
			}
			else {
				if ( stat == (-1) ) {
					continue
				}
			}
			if ( dist(dx, dy, cdata(CDATA_X, cc), cdata(CDATA_Y, cc)) > sdataref(SKILL_DATAREF_TG, efid) \ 1000 + 1 ) {
				break
			}
			if ( dx == cdata(CDATA_X, cc) & dy == cdata(CDATA_Y, cc) ) {
				continue
			}
			if ( map(dx, dy, 1) != 0 ) {
				tc = map(dx, dy, 1) - 1
				if ( cc != tc ) {
					if ( cc < MAX_CHARA_FOLLOWER ) {
						if ( cdata(CDATA_RELATION, tc) != (-3) ) {
							continue
						}
					}
					if ( cc >= MAX_CHARA_FOLLOWER ) {
						if ( cdata(CDATA_RELATION_ORG, tc) == cdata(CDATA_RELATION_ORG, cc) | cdata(CDATA_RELATION, tc) == cdata(CDATA_RELATION, cc) | (cdata(CDATA_RELATION, cc) >= (-1) & cdata(CDATA_RELATION, tc) >= (-1)) ) {
							continue
						}
					}
					if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
						if ( tc != CHARA_PLAYER ) {
							if ( rnd(cdata(CDATA_HP, tc) + 1) < rnd(cdata(CDATA_HP, cdata(CDATA_TAGTEAM_PARTNER, tc)) + 1) ) {
								tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
							}
							txt_guard
						}
					}
					if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 & cbit(CHARA_BIT_SANDBAG, tc) != 1 & tc != CHARA_PLAYER ) {
						f = 1
					}
					dmg = (sdata(SKILL_NORMAL_TACTICS, cc) / 5 + 2) * ((sdata(SKILL_NORMAL_GENE_ENGINEER, cc) + 1) / 5 + 2) + rnd(sdata(SKILL_NORMAL_TACTICS, cc) + sdata(SKILL_NORMAL_GENE_ENGINEER, cc) + 5)
					dmghp tc, dmg, cc, SKILL_RESDMG_CRUSH, 1000
					if ( cdata(CDATA_QUALITY, tc) > FIX_QUALITY_GREAT | cdata(CDATA_ID, tc) == CREATURE_ID_AILE_THE_ATTENDANT ) {
						if ( cdata(CDATA_CONDITION_POISON, tc) < 2 ) {
							cdata(CDATA_CONDITION_POISON, tc) = 2
						}
					}
					else {
						cdata(CDATA_CONDITION_POISON, tc) += 10
					}
				}
			}
		loop
		if ( f == 1 ) {
			f = 0
			skillexp SKILL_NORMAL_GENE_ENGINEER, cc, 50
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_WIN | _switch_sw ) {
		_switch_sw = 0
		if ( gdata(GDATA_FLAG_GAME_MODE) != GAMEMODE_PURGE ) {
			goto *effect_end
		}
		cdata(CDATA_HP, tc) = 0
		dmghp tc, 1, cc
		snd SOUNDLIST_GONG
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_BLAME_PAIN | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_CONDITION_BIND, tc) == 0 ) {
			snd SOUNDLIST_BASH1
			await 100
			snd SOUNDLIST_BASH1
			await 100
			snd SOUNDLIST_BASH1
			cdata(CDATA_CONDITION_BIND, tc) += 1
			if ( synccheck(tc, -1) ) {
				txt lang(name(tc) + "ÇÕë©îõÇ≥ÇÍÇΩÅB", name(tc) + " was bound.")
			}
			await 100
		}
		txtef COLOR_YELLOW
		txt lang(name(cc) + "ÇÕ" + name(tc) + "Ççâñ‚ÇµÇΩÅI", name(cc) + " tortured " + name(tc) + "!")
		waitbk = cfg_animewait
		if ( cfg_animewait > 0 ) {
			cfg_animewait = 1
		}
		repeat 4
			if ( cnt == 0 ) {
				snd SOUNDLIST_PUNISH1
				if ( synccheck(cc, -1) ) {
					animeload ANIMATION_STARS, tc
				}
			}
			if ( cnt == 1 ) {
				snd SOUNDLIST_PUNISH1
				if ( synccheck(cc, -1) ) {
					animeload ANIMATION_STARS, tc
				}
			}
			if ( cnt == 2 ) {
				snd SOUNDLIST_ATK_ELEC
				if ( synccheck(cc, -1) ) {
					animeload ANIMATION_SPORE, tc
				}
			}
			if ( cnt == 3 ) {
				snd SOUNDLIST_ATTACK00
				if ( synccheck(cc, -1) ) {
					animeload ANIMATION_OFFER, tc
				}
			}
			await 100
			dmg = (sdata(SKILL_ATTR_CON, cc) / 10 + 1) * (sdata(SKILL_ATTR_WIL, cc) / 10 + 1) + rnd((sdata(SKILL_ATTR_CON, cc) + sdata(SKILL_ATTR_WIL, cc)) / 8 + 1)
			dmghp tc, dmg, cc, SKILL_RES_NETHER, 1000
			if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
				break
			}
		loop
		cfg_animewait = waitbk
		if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
			if ( rnd(sdata(SKILL_ATTR_CON, cc) + sdata(SKILL_ATTR_WIL, cc)) >= rnd(sdata(SKILL_ATTR_CON, tc) + sdata(SKILL_ATTR_WIL, tc)) ) {
				txtef COLOR_PURPLE
				txt lang(name(tc) + "ÇÕçâñ‚Ç…ã¸ÇµÇΩÅB", name(cc) + " succumbed to torture.")
				if ( tc != CHARA_PLAYER ) {
					txt lang("ÅuÇ∑Ç›Ç‹ÇπÇÒÅcÇ≈ÇµÇΩÅcÅv", cnvtalk("I'm sorry... really...!")), lang("ÅuãñÇµÇƒÅcÇ≠ÇæÇ≥Ç¢Åv", cnvtalk("Forgive me, please.")), lang("ÅuÇ§Ç§ÅcÇ±ÇÒÇ»ÇÃÅAëœÇ¶ÇÁÇÍÇÈÇÌÇØÅcÅv", cnvtalk("I can not stand... such a thing.")), lang("ÅuÇﬁÅcÇËÅcÅIÅv", cnvtalk("I-I... can't!")), lang("ÅuÇ–Ç∆évÇ¢Ç…éEÇµÇƒÅcÅv", cnvtalk("Kill me! Please kill me!")), lang("ÅuÇ–Ç¡ÅAÇ–ÉBÉBÉBÅcÅv", cnvtalk("A...aaaugh..."))
				}
				cdata(CDATA_POWER_GAUGE, tc) -= 15
				if ( cdata(CDATA_POWER_GAUGE, tc) < 0 ) {
					cdata(CDATA_POWER_GAUGE, tc) = 0
				}
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_FLAME_OF_RAGE | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_CONDITION_ANGRY, cc) == 0 ) {
			goto *effect_end
		}
		if ( synccheck(cc, -1) ) {
			animeid = ANIMATION_RAGNA
			gosub *anime
		}
		txtef COLOR_YELLOW
		txt lang(name(cc) + "ÇÕì{ÇËÇîöî≠Ç≥ÇπÇΩÅI", name(cc) + " exploded with anger!")
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cc == cnt ) {
				continue
			}
			if ( cc < MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) != (-3) ) {
					continue
				}
			}
			if ( cc >= MAX_CHARA_FOLLOWER ) {
				if ( cdata(CDATA_RELATION, cnt) == cdata(CDATA_RELATION, cc) ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			map(cdata(CDATA_X, tc), cdata(CDATA_Y, tc), 0) = 12 + rnd(2)
			dmg = sdata(SKILL_ATTR_WIL, cc) / 8 * sdata(SKILL_ATTR_MAG, cc) / 8 + rnd(sdata(SKILL_ATTR_WIL, cc) * 2)
			dmghp tc, dmg, cc, SKILL_RES_FIRE, 1000
		loop
		cdata(CDATA_CONDITION_ANGRY, cc) = 0
		txtef COLOR_YELLOW
		txt lang(name(cc) + "ÇÕÇ∑Ç¡Ç´ÇËÇµÇΩÅB", name(cc) + " calm" + _s(cc) + " down.")
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_GRAND_FINALE | _switch_sw ) {
		_switch_sw = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_TUIN_DER_LUSTEN | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(cc, -1) ) {
			animeid = ANIMATION_AROMAGEDDON
			gosub *anime
		}
		txtef COLOR_YELLOW
		txt lang("ã≠óÛÇ»ÉtÉFÉçÉÇÉìÇÇ‹Ç´éUÇÁÇµÇΩÅB", "A strong pheromone was scattered around.")
		ccbk = cc
		repeat MAX_CHARA_TOTAL
			if ( cdata(0, cnt) != 1 ) {
				continue
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(3, 656) \ 1000 + 1 ) {
				continue
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				continue
			}
			cc = tc
			tc = ccbk
			gosub *skill_tuin_der_lusten
			cc = ccbk
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_AROMAGEDDON | _switch_sw ) {
		_switch_sw = 0
		inv_find ITEM_ID_ESSENTIAL_OIL, cc
		if ( stat != (-1) ) {
			inv(INV_ITEM_NUM, stat)--
			if ( cc == CHARA_PLAYER ) {
				gosub *calcBurdenPc
			}
			if ( synccheck(cc, -1) ) {
				animeid = ANIMATION_AROMAGEDDON
				gosub *anime
			}
			txtef COLOR_YELLOW
			txt lang("ñÇóÕÇë—Ç—ÇΩñFçÅÇ™é¸àÕÇ…ÇΩÇøÇ±ÇﬂÇΩÅB", "A magical aroma envelops your surroundings.")
			repeat MAX_CHARA_TOTAL
				if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
					continue
				}
				tc = cnt
				dx = cdata(CDATA_X, tc)
				dy = cdata(CDATA_Y, tc)
				if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
					continue
				}
				if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
					continue
				}
				if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER ) {
					if ( cdata(CDATA_RELATION, tc) != (-3) ) {
						cdata(CDATA_POWER_GAUGE, tc) += 15
						if ( cdata(CDATA_POWER_GAUGE, tc) > 100 ) {
							if ( cdata(CDATA_SHIFT_FORM, tc) <= SHIFT_FORM_NONE & (cdata(CDATA_EVOLUTION_STAGE, tc) <= 0 | tc == CHARA_PLAYER) & (cdata(CDATA_QUALITY, tc) < FIX_QUALITY_MIRACLE | tc < MAX_CHARA_FOLLOWER) ) {
								cdata(CDATA_POWER_GAUGE, tc) = 100
							}
						}
						if ( cdata(CDATA_POWER_GAUGE, tc) > 200 ) {
							cdata(CDATA_POWER_GAUGE, tc) = 200
						}
						healmp tc, cdata(CDATA_MAX_MP, tc) / 50 + rnd(5 + sdata(SKILL_NORMAL_GARDENING, cc)) + sdata(SKILL_NORMAL_GARDENING, cc) / 2 * sqrt(sdata(SKILL_NORMAL_GARDENING, cc) + 1)
					}
				}
				if ( cc >= MAX_CHARA_FOLLOWER ) {
					if ( cdata(CDATA_RELATION, tc) == cdata(CDATA_RELATION, cc) ) {
						cdata(CDATA_POWER_GAUGE, tc) += 15
						if ( cdata(CDATA_POWER_GAUGE, tc) > 100 ) {
							if ( cdata(CDATA_SHIFT_FORM, tc) <= SHIFT_FORM_NONE & (cdata(CDATA_EVOLUTION_STAGE, tc) <= 0 | tc == CHARA_PLAYER) & (cdata(CDATA_QUALITY, tc) < FIX_QUALITY_MIRACLE | tc < MAX_CHARA_FOLLOWER) ) {
								cdata(CDATA_POWER_GAUGE, tc) = 100
							}
						}
						if ( cdata(CDATA_POWER_GAUGE, tc) > 200 ) {
							cdata(CDATA_POWER_GAUGE, tc) = 200
						}
						healmp tc, cdata(CDATA_MAX_MP, tc) / 50 + rnd(5 + sdata(SKILL_NORMAL_GARDENING, cc)) + sdata(SKILL_NORMAL_GARDENING, cc) / 2 * sqrt(sdata(SKILL_NORMAL_GARDENING, cc) + 1)
					}
				}
				if ( cc < MAX_CHARA_FOLLOWER | cc == CHARA_PLAYER & cdata(CDATA_RELATION, tc) == (-3) | (cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_RELATION, tc) != cdata(CDATA_RELATION, cc)) ) {
					p = (STARTING_SKILL_ATTR + MAX_SKILL_ATTR_BASIC) - STARTING_SKILL_ATTR
					if ( cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE | encfind(tc, ENCHANT_SUSTAIN * EXT_ENCHANTMENT + STARTING_SKILL_ATTR + p) != (-1) ) {
						p = -1
					}
					if ( findbuff(tc, BUFF_DISINFECTION) != (-1) ) {
						p = -1
					}
					if ( sdata(SKILL_ATTR_SPD, tc) < sorg(SKILL_ATTR_SPD, tc) / 2 ) {
						p = -1
					}
					if ( p != (-1) ) {
						i = sorg(STARTING_SKILL_ATTR + p, tc) - cdata(STARTING_CDATA_ATTR + p, tc)
						if ( i > 0 ) {
							efp = (sdata(SKILL_NORMAL_GARDENING, cc) + 1) / 4 + 10
							i = i * efp / 2000 + 5
							cdata(STARTING_CDATA_ATTR + p, tc) -= i
						}
						if ( synccheck(tc, -1) ) {
							txtmore
							txtef COLOR_PURPLE
							txt lang(name(tc) + "ÇÕé„Ç≠Ç»Ç¡ÇΩÅB", name(tc) + " " + is(tc) + " weakened.")
						}
						r1 = tc
						gosub *charaRefresh
					}
				}
			loop
		}
		else {
			txt_nothinghappens
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_ATTRIBUTE | _switch_sw ) {
		_switch_sw = 0
		snd SOUNDLIST_OFFER2
		bvar = sdata(SKILL_RES_MAGIC, tc)
		cdata(CDATA_ATTRIBUTE_ELE, tc) = 10
		if ( sdata(SKILL_RES_FIRE, tc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, tc) = 0
			bvar = sdata(SKILL_RES_FIRE, tc)
		}
		if ( sdata(SKILL_RES_COLD, tc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, tc) = 1
			bvar = sdata(SKILL_RES_COLD, tc)
		}
		if ( sdata(SKILL_RES_LIGHTNING, tc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, tc) = 2
			bvar = sdata(SKILL_RES_LIGHTNING, tc)
		}
		if ( sdata(SKILL_RES_DARKNESS, tc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, tc) = 3
			bvar = sdata(SKILL_RES_DARKNESS, tc)
		}
		if ( sdata(SKILL_RES_MIND, tc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, tc) = 4
			bvar = sdata(SKILL_RES_MIND, tc)
		}
		if ( sdata(SKILL_RES_POISON, tc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, tc) = 5
			bvar = sdata(SKILL_RES_POISON, tc)
		}
		if ( sdata(SKILL_RES_NETHER, tc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, tc) = 6
			bvar = sdata(SKILL_RES_NETHER, tc)
		}
		if ( sdata(SKILL_RES_SOUND, tc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, tc) = 7
			bvar = sdata(SKILL_RES_SOUND, tc)
		}
		if ( sdata(SKILL_RES_NERVE, tc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, tc) = 8
			bvar = sdata(SKILL_RES_NERVE, tc)
		}
		if ( sdata(SKILL_RES_CHAOS, tc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, tc) = 9
			bvar = sdata(SKILL_RES_CHAOS, tc)
		}
		if ( sdata(SKILL_RES_MAGIC, tc) >= bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, tc) = 10
		}
		bvar = 0
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, tc) != 0 ) {
			cdata(CDATA_ATTRIBUTE_ELE, tc) = cdata(CDATA_ELEMENTS_EYES_ELE, tc) - 1
		}
		if ( cdata(CDATA_ATTRIBUTE_ELE, tc) == 10 ) {
			animeload ANIMATION_HEAL_FAST, tc
		}
		if ( cdata(CDATA_ATTRIBUTE_ELE, tc) == 0 ) {
			animeload ANIMATION_GENE, tc
		}
		if ( cdata(CDATA_ATTRIBUTE_ELE, tc) == 1 ) {
			animeload ANIMATION_HOLY, tc
		}
		if ( cdata(CDATA_ATTRIBUTE_ELE, tc) == 2 ) {
			animeload ANIMATION_SPORE, tc
		}
		if ( cdata(CDATA_ATTRIBUTE_ELE, tc) == 3 ) {
			animeload ANIMATION_RAGNA, tc
		}
		if ( cdata(CDATA_ATTRIBUTE_ELE, tc) == 4 ) {
			animeload ANIMATION_THUNDERCLAP, tc
		}
		if ( cdata(CDATA_ATTRIBUTE_ELE, tc) == 5 ) {
			animeload 27, tc
		}
		if ( cdata(CDATA_ATTRIBUTE_ELE, tc) == 6 ) {
			animeload ANIMATION_METEOR, tc
		}
		if ( cdata(CDATA_ATTRIBUTE_ELE, tc) == 7 ) {
			animeload ANIMATION_MP_BREATH, tc
		}
		if ( cdata(CDATA_ATTRIBUTE_ELE, tc) == 8 ) {
			animeload ANIMATION_GIGA, tc
		}
		if ( cdata(CDATA_ATTRIBUTE_ELE, tc) == 9 ) {
			animeload ANIMATION_NUCLEAR, tc
		}
		addbuff tc, BUFF_ATTRIBUTE, cdata(CDATA_ATTRIBUTE_ELE, tc), 101
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_ABSOLUTE_PROTECT | _switch_sw ) {
		_switch_sw = 0
		animeload ANIMATION_HEAL_FAST, tc
		snd SOUNDLIST_AMMO
		addbuff tc, BUFF_AUTO_GUARD, 50, 50
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_QUICK_USE | _switch_sw ) {
		_switch_sw = 0
		snd SOUNDLIST_OFFER2
		animeload ANIMATION_UNISON_IMPACT2, cc
		addbuff cc, BUFF_QUICK_USE, 31, 31
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_DO_NOTHING | _switch_sw ) {
		_switch_sw = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_CONVERGE_BREATH | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 200 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( cc == CHARA_PLAYER ) {
			cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) = 0
		}
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕé˚ë©Ç≥ÇπÇΩÉGÉlÉãÉMÅ[Ç" + name(tc) + "Ç…å¸ÇØÇƒï˙Ç¡ÇΩÅI", name(cc) + " release" + _s(cc) + " the converged energy towards " + name(tc) + "!")
		ele = SKILL_RES_FIRE
		repeat MAX_SKILL_RESIST - STARTING_SKILL_RESIST, STARTING_SKILL_RESIST
			if ( sdata(cnt, cc) >= sdata(ele, cc) ) {
				ele = cnt
			}
		loop
		get_route cdata(CDATA_X, cc), cdata(CDATA_Y, cc), tlocx, tlocy
		if ( stat == 0 ) {
			goto *effect_end
		}
		dx = cdata(CDATA_X, cc)
		dy = cdata(CDATA_Y, cc)
		zannku = 100
		snd SOUNDLIST_BREATH1
		repeat 8
			animeid = ANIMATION_BOLT
			gosub *anime
			snd SOUNDLIST_BOLT1
		loop
		zannku = 0
		ele = SKILL_NONE
		repeat 20
			route_info dx, dy, cnt
			if ( stat == 0 ) {
				break
			}
			else {
				if ( stat == (-1) ) {
					continue
				}
			}
			if ( dist(dx, dy, cdata(CDATA_X, cc), cdata(CDATA_Y, cc)) > sdataref(SKILL_DATAREF_TG_RANGE, efid) \ EXT_SDATAREF + 1 ) {
				break
			}
			if ( dx == cdata(CDATA_X, cc) & dy == cdata(CDATA_Y, cc) ) {
				continue
			}
			if ( map(dx, dy, 1) != 0 ) {
				tc = map(dx, dy, 1) - 1
				if ( cc != tc ) {
					if ( gdata(GDATA_RIDER) != 0 ) {
						if ( gdata(GDATA_RIDER) == cc ) {
							if ( tc == CHARA_PLAYER ) {
								continue
							}
						}
					}
					if ( cdata(CDATA_EXIST, tc) != CHAR_STATE_ALIVE ) {
						continue
					}
					if ( tc < MAX_CHARA_FOLLOWER | tc == CHARA_PLAYER ) {
						if ( cc < MAX_CHARA_FOLLOWER | cbit(CHARA_BIT_NECRO, cc) == 1 ) {
							continue
						}
					}
					if ( tc >= MAX_CHARA_FOLLOWER ) {
						if ( cdata(CDATA_RELATION, cc) == cdata(CDATA_RELATION, tc) ) {
							continue
						}
					}
					if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
						if ( tc != CHARA_PLAYER ) {
							if ( rnd(cdata(CDATA_HP, tc) + 1) < rnd(cdata(CDATA_HP, cdata(CDATA_TAGTEAM_PARTNER, tc)) + 1) ) {
								tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
							}
							txt_guard
						}
					}
					if ( synccheck(tc, -1) ) {
						txtmore
						if ( tc >= MAX_CHARA_FOLLOWER ) {
							gdata(GDATA_DMG_TYPE) = 2
							txt3rd = 1
							txt lang(name(tc) + "Ç…ñΩíÜÇµ", "The breath hits " + name(tc) + " and")
						}
						else {
							txt lang(name(tc) + "Ç…ñΩíÜÇµÇΩÅB", "The breath hits " + name(tc) + ".")
						}
					}
					dmghp tc, limit(cdata(CDATA_DAMAGE_FIX, cc) + (sdata(SKILL_ATTR_MAG, cc) + 5) / 2, 2, 2500) * sqrt(sdata(SKILL_ATTR_CON, cc) / 2 + 1) + rnd(sdata(SKILL_ATTR_CON, cc) + 1), cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
				}
			}
		loop
		if ( cdata(CDATA_HP, cc) <= cdata(CDATA_MAX_HP, cc) ) {
			cdata(CDATA_HP, cc) += cdata(CDATA_MAX_HP, cc) / 3
			snd SOUNDLIST_HEAL1
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_EXTERMINATION_BREATH | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 25 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 25
		kouiki = 100
		snd SOUNDLIST_OFFER2
		animeload ANIMATION_AROMAGEDDON, cc
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 1 ) {
			efid = SKILL_SPACT_FIRE_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 2 ) {
			efid = SKILL_SPACT_COLD_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 3 ) {
			efid = SKILL_SPACT_LIGHTNING_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 4 ) {
			efid = SKILL_SPACT_DARKNESS_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 5 ) {
			efid = SKILL_SPACT_MIND_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 6 ) {
			efid = SKILL_SPACT_POISON_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 7 ) {
			efid = SKILL_SPACT_NETHER_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 8 ) {
			efid = SKILL_SPACT_SOUND_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 9 ) {
			efid = SKILL_SPACT_NERVE_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 10 ) {
			efid = SKILL_SPACT_CHAOS_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 11 ) {
			efid = SKILL_SPACT_POWER_BREATH
			gosub *effect
			goto *effect_end
		}
		bvar = sdata(SKILL_RES_MAGIC, cc)
		cdata(CDATA_ATTRIBUTE_ELE, cc) = 10
		if ( sdata(SKILL_RES_FIRE, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 0
			bvar = sdata(SKILL_RES_FIRE, cc)
		}
		if ( sdata(SKILL_RES_COLD, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 1
			bvar = sdata(SKILL_RES_COLD, cc)
		}
		if ( sdata(SKILL_RES_LIGHTNING, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 2
			bvar = sdata(SKILL_RES_LIGHTNING, cc)
		}
		if ( sdata(SKILL_RES_DARKNESS, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 3
			bvar = sdata(SKILL_RES_DARKNESS, cc)
		}
		if ( sdata(SKILL_RES_MIND, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 9
			bvar = sdata(SKILL_RES_MIND, cc)
		}
		if ( sdata(SKILL_RES_POISON, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 8
			bvar = sdata(SKILL_RES_POISON, cc)
		}
		if ( sdata(SKILL_RES_NETHER, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 6
			bvar = sdata(SKILL_RES_NETHER, cc)
		}
		if ( sdata(SKILL_RES_SOUND, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 5
			bvar = sdata(SKILL_RES_SOUND, cc)
		}
		if ( sdata(SKILL_RES_NERVE, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 7
			bvar = sdata(SKILL_RES_NERVE, cc)
		}
		if ( sdata(SKILL_RES_CHAOS, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 4
			bvar = sdata(SKILL_RES_CHAOS, cc)
		}
		if ( sdata(SKILL_RES_MAGIC, cc) >= bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 10
		}
		bvar = 0
		efid = SKILL_SPACT_FIRE_BREATH + cdata(CDATA_ATTRIBUTE_ELE, cc)
		gosub *effect
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_VARIABLE_BREATH | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 1 ) {
			efid = SKILL_SPACT_FIRE_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 2 ) {
			efid = SKILL_SPACT_COLD_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 3 ) {
			efid = SKILL_SPACT_LIGHTNING_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 4 ) {
			efid = SKILL_SPACT_DARKNESS_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 5 ) {
			efid = SKILL_SPACT_MIND_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 6 ) {
			efid = SKILL_SPACT_POISON_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 7 ) {
			efid = SKILL_SPACT_NETHER_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 8 ) {
			efid = SKILL_SPACT_SOUND_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 9 ) {
			efid = SKILL_SPACT_NERVE_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 10 ) {
			efid = SKILL_SPACT_CHAOS_BREATH
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 11 ) {
			efid = SKILL_SPACT_POWER_BREATH
			gosub *effect
			goto *effect_end
		}
		bvar = sdata(SKILL_RES_MAGIC, tc)
		cdata(CDATA_ATTRIBUTE_ELE, cc) = 10
		if ( sdata(SKILL_RES_FIRE, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 0
			bvar = sdata(SKILL_RES_FIRE, cc)
		}
		if ( sdata(SKILL_RES_COLD, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 1
			bvar = sdata(SKILL_RES_COLD, cc)
		}
		if ( sdata(SKILL_RES_LIGHTNING, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 2
			bvar = sdata(SKILL_RES_LIGHTNING, cc)
		}
		if ( sdata(SKILL_RES_DARKNESS, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 3
			bvar = sdata(SKILL_RES_DARKNESS, cc)
		}
		if ( sdata(SKILL_RES_MIND, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 9
			bvar = sdata(SKILL_RES_MIND, cc)
		}
		if ( sdata(SKILL_RES_POISON, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 8
			bvar = sdata(SKILL_RES_POISON, cc)
		}
		if ( sdata(SKILL_RES_NETHER, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 6
			bvar = sdata(SKILL_RES_NETHER, cc)
		}
		if ( sdata(SKILL_RES_SOUND, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 5
			bvar = sdata(SKILL_RES_SOUND, cc)
		}
		if ( sdata(SKILL_RES_NERVE, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 7
			bvar = sdata(SKILL_RES_NERVE, cc)
		}
		if ( sdata(SKILL_RES_CHAOS, cc) > bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 4
			bvar = sdata(SKILL_RES_CHAOS, cc)
		}
		if ( sdata(SKILL_RES_MAGIC, cc) >= bvar ) {
			cdata(CDATA_ATTRIBUTE_ELE, cc) = 10
		}
		bvar = 0
		efid = SKILL_SPACT_FIRE_BREATH + cdata(CDATA_ATTRIBUTE_ELE, cc)
		gosub *effect
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_MARKING | _switch_sw ) {
		_switch_sw = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_BLADE_STRINGS | _switch_sw ) {
		_switch_sw = 0
		if ( tc == cc | (cc != CHARA_PLAYER & dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), cdata(CDATA_X, tc), cdata(CDATA_Y, tc)) > 1) ) {
			if ( mdata(MDATA_TYPE) == MAP_TYPE_WORLD ) {
				goto *effect_end
			}
			if ( map(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 6) != 0 ) {
				goto *effect_end
			}
			txt lang(name(cc) + "ÇÕâΩÇ©Çédä|ÇØÇΩÅB", name(cc) + " set something on the ground.")
			if ( cc < MAX_CHARA_FOLLOWER ) {
				cell_featset cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 0, CELL_FEATURE_TRAP, CELL_SUB_FEATURE_TRAP_HOSTILE_BLADE_STRINGS, cc
			}
			else {
				cell_featset cdata(CDATA_X, cc), cdata(CDATA_Y, cc), 0, CELL_FEATURE_TRAP, CELL_SUB_FEATURE_TRAP_BLADE_STRINGS, cc
			}
			if ( cc == CHARA_PLAYER ) {
				cell_featset cdata(CDATA_X, cc), cdata(CDATA_Y, cc), tile_trap, -1, -1
			}
			goto *effect_end
		}
		txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇéÖÇ≈êÿÇËÇ¬ÇØÇΩÅB", name(tc) + " " + was(tc) + " slashed with threads.")
		snd SOUNDLIST_ENC
		animeload 53, tc
		snd SOUNDLIST_STAB
		dmghp tc, (sdata(SKILL_ATTR_DEX, cc) / 5 + 4) * ((sdata(SKILL_NORMAL_TACTICS, cc) + 1) / 5 + 3) * 2 + rnd(sdata(SKILL_NORMAL_TACTICS, cc) * 2 + 5) + 1, cc, SKILL_RESDMG_CRUSH, 1000
		if ( cdata(CDATA_CONDITION_BIND, tc) > 0 ) {
			dmgcon tc, CONDITION_BLEED, (sdata(SKILL_NORMAL_TACTICS, cc) + 1) / 2 + 1
		}
		if ( cdata(CDATA_HP, tc) >= 0 ) {
			if ( cdata(CDATA_HP, tc) < cdata(CDATA_MAX_HP, tc) / 9 ) {
				attackskill = SKILL_WEAPON_LONGSWORD
				efid = SKILL_SPACT_DECAPITATION2
				gosub *effect
			}
		}
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 & tc != CHARA_PLAYER ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				skillexp SKILL_NORMAL_TACTICS, cc, 40
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_THREAD_OF_INNERVATION | _switch_sw ) {
		_switch_sw = 0
		txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÃêgëÃÇ…éÖÇë≈ÇøçûÇÒÇæÅB", name(cc) + " put thread in " + name(tc) + ".")
		animeid = ANIMATION_INNERVATION
		gosub *anime
		gdata(STARTING_GDATA_FLAG + 372) = 0
		if ( cdata(CDATA_HP, tc) > cdata(CDATA_MAX_HP, tc) / 9 ) {
			dmghp tc, (sdata(SKILL_ATTR_PER, cc) / 5 + 4) * ((sdata(SKILL_NORMAL_GENE_ENGINEER, cc) + 1) / 5 + 3) * 2 + rnd(sdata(SKILL_NORMAL_GENE_ENGINEER, cc) * 2 + 5) + 1, cc, SKILL_RES_NERVE, sdata(SKILL_ATTR_PER, cc) + 200
			goto *effect_end
		}
		if ( tc < MAX_CHARA_FOLLOWER | cdata(CDATA_RELATION, tc) == 10 | cdata(CDATA_ALLIED, tc) != 0 ) {
			goto *effect_end
		}
		if ( cbit(CHARA_BIT_SANDBAG, tc) ) {
			goto *effect_end
		}
		if ( gdata(GDATA_AREA) == AREA_NOYEL ) {
			if ( cdata(CDATA_ID, tc) == CREATURE_ID_TOURIST ) {
				goto *effect_end
			}
			if ( cdata(CDATA_ID, tc) == CREATURE_ID_PALMIAN_ELITE_SOLDIER ) {
				goto *effect_end
			}
		}
		if ( cbit(CHARA_BIT_HIRED, tc) ) {
			goto *effect_end
		}
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) | cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) & cbit(CHARA_BIT_SUMMONED, tc) ) {
			goto *effect_end
		}
		if ( cbit(CHARA_BIT_SUMMONED, tc) ) {
			goto *effect_end
		}
		if ( cbit(CHARA_BIT_CRADLE_15TH, tc) ) {
			goto *effect_end
		}
		if ( gdata(GDATA_AREA) == AREA_SHOW_HOUSE ) {
			goto *effect_end
		}
		skillexp SKILL_NORMAL_GENE_ENGINEER, cc, 50
		if ( rnd(175) == 0 | gdata(GDATA_FLAG_DUEL_TARGET) == (-2) | cdata(CDATA_QUALITY, tc) == FIX_QUALITY_UNIQUE | cdata(CDATA_ID, tc) == CREATURE_ID_UNITDEAD_KING | cdata(CDATA_ID, tc) == CREATURE_ID_UNITDEAD_QUEEN | cdata(CDATA_ID, tc) == CREATURE_ID_UNITDEAD_JACK | cdata(CDATA_ID, tc) == CREATURE_ID_UNITDEAD_JOKER | cdata(CDATA_ID, tc) == CREATURE_ID_AILE_THE_ATTENDANT | (cdata(CDATA_QUALITY, tc) == FIX_QUALITY_MIRACLE & rnd(2) == 0) | (cdata(CDATA_QUALITY, tc) == FIX_QUALITY_GODLY & rnd(3) == 0) | (cdata(CDATA_GOD, CHARA_PLAYER) == GOD_YACATECT & rnd(35) == 0) ) {
			gdata(STARTING_GDATA_FLAG + 372) = 100
		}
		if ( rollanatomy == 1 | cdata(CDATA_QUALITY, tc) >= FIX_QUALITY_MIRACLE | (adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_RANCH & cbit(CHARA_BIT_LIVESTOCK, tc) == 1 & cdata(CDATA_CONDITION_SICK, tc) == 0) ) {
			gdata(STARTING_GDATA_FLAG + 372) = 100
		}
		if ( gdata(STARTING_GDATA_FLAG + 372) == 100 ) {
			if ( synccheck(tc, -1) ) {
				snd SOUNDLIST_STAB
				txtef COLOR_RED
				if ( tc >= MAX_CHARA_FOLLOWER ) {
					gdata(GDATA_DMG_TYPE) = 2
					txt3rd = 1
					txt lang(name(cc) + "ÇÕ" + name(tc) + "Çêlå`Ç…ïœÇ¶Çƒéñé¿è„", name(cc) + " change" + _s(cc) + " " + name(tc) + " into a doll and")
				}
				else {
					txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÃé©óRÇíDÇ¢ÅAêlå`Ç…ïœÇ¶ÇΩÅB", name(cc) + " change" + _s(cc) + " " + name(tc) + " into a doll.")
				}
			}
			situ = 0
			if ( cdata(CDATA_LIVESTOCK_QUALITY, tc) >= 1 & cdata(CDATA_LIVESTOCK_QUALITY, tc) <= 3 ) {
				situ = cdata(CDATA_LIVESTOCK_QUALITY, tc)
			}
			flt
			itemcreate -1, ITEM_ID_CORPSE, cdata(CDATA_X, tc), cdata(CDATA_Y, tc), 0
			inv(INV_ITEM_PIC, ci) = xy2pic(30, 33)
			inv(INV_ITEM_PARAM2, ci) = 10
			inv(INV_ITEM_PARAM3, ci) = gdata(GDATA_HOUR) + gdata(GDATA_DAY) * 24 + gdata(GDATA_MONTH) * 24 * 30 + gdata(GDATA_YEAR) * 24 * 30 * 12 + 240
			if ( adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_RANCH & cbit(CHARA_BIT_LIVESTOCK, tc) == 1 ) {
				inv(INV_ITEM_LEVEL, ci) += limit(rnd((sdata(SKILL_NORMAL_ANATOMY, cc) + 1) / 20 + 2) + situ, 1, 10) + cdata(CDATA_BRUSH_LEVEL, tc)
			}
			else {
				inv(INV_ITEM_LEVEL, ci) += cdata(CDATA_BRUSH_LEVEL, tc)
				if ( adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_AMUR_CAGE ) {
					inv(INV_ITEM_AMUR_CAGE, ci) = 1
				}
			}
			remain_make ci, tc
			inv(INV_ITEM_COL, ci) = cdata(CDATA_PIC, tc) \ COLOR_TINT_MULT + cdata(CDATA_CHARA_PIC, tc) * COLOR_TINT_MULT
			inv(INV_ITEM_SUB_NAME, ci) = cdata(CDATA_ID, tc)
			cell_refresh inv(INV_ITEM_X, ci), inv(INV_ITEM_Y, ci)
		}
		else {
			if ( synccheck(tc, -1) ) {
				snd SOUNDLIST_STAB
				txtef COLOR_RED
				if ( tc >= MAX_CHARA_FOLLOWER ) {
					gdata(GDATA_DMG_TYPE) = 2
					txt3rd = 1
					txt lang(name(cc) + "ÇÕ" + name(tc) + "Çì‡ïîÇ©ÇÁïˆâÛÇ≥ÇπÇƒ", name(cc) + " burst" + _s(cc) + " " + name(tc) + your(tc) + " head by thread and")
				}
				else {
					txt lang(name(tc) + "ÇÃêgëÃÇ™ëœÇ¶êÿÇÍÇ∏Ç…ïˆâÛÇµÇΩÅB", name(cc) + " burst" + _s(cc) + " " + name(tc) + your(tc) + " head by thread.")
				}
			}
		}
		dmghp tc, cdata(CDATA_MAX_HP, tc), cc, SKILL_SPACT_DECAPITATION
		gdata(STARTING_GDATA_FLAG + 372) = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_DANCING_WIRE | _switch_sw ) {
		_switch_sw = 0
		snd SOUNDLIST_FIZZLE
		animeload 53, tc
		if ( synccheck(tc, -1) ) {
			txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇóçÇﬂÇ∆Ç¡ÇΩÅB", name(cc) + " entangles " + name(tc) + " by wire.")
		}
		if ( cdata(CDATA_CONDITION_BIND, tc) < 3 ) {
			cdata(CDATA_CONDITION_BIND, tc) = 3
		}
		efid = SKILL_SPACT_DRAW_SHADOW
		gosub *effect
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_MULTIPLE_GATHER | _switch_sw ) {
		_switch_sw = 0
		dread = 0
		tc = CHARA_PLAYER
		efid = SKILL_SPACT_DRAW_SHADOW
		gosub *effect
		repeat MAX_CHARA_TOTAL
			if ( dread > 5 ) {
				dread = 0
				break
			}
			if ( cnt == cc ) {
				continue
			}
			if ( cnt == CHARA_PLAYER ) {
				continue
			}
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cnt < MAX_CHARA_FOLLOWER ) {
				if ( cnt != 0 ) {
					continue
				}
			}
			tc = cnt
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) < sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				continue
			}
			efid = SKILL_SPACT_DRAW_SHADOW
			gosub *effect
			dread++
		loop
		dread = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_FORCED_DRAFT | _switch_sw ) {
		_switch_sw = 0
		if ( gdata(GDATA_AREA) == AREA_SHOW_HOUSE ) {
			goto *effect_end
		}
		if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 ) {
			efid = SKILL_SPACT_SQUEEZE
			gosub *effect
			goto *effect_end
		}
		if ( tc != CHARA_PLAYER ) {
			efid = SKILL_SPACT_SQUEEZE
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_HP, CHARA_PLAYER) > cdata(CDATA_MAX_HP, CHARA_PLAYER) / 5 ) {
			efid = SKILL_SPACT_SQUEEZE
			gosub *effect
			goto *effect_end
		}
		if ( cdata(CDATA_KARMA, CHARA_PLAYER) >= (-30) ) {
			efid = SKILL_SPACT_SQUEEZE
			gosub *effect
			goto *effect_end
		}
		if ( cbit(CHARA_BIT_INCOGNITO, CHARA_PLAYER) != 0 ) {
			efid = SKILL_SPACT_SQUEEZE
			gosub *effect
			goto *effect_end
		}
		if ( jp ) {
			txt "ÅuÉuÉ^î†çsÇ´ÇæÅv", "ÅuäœîOÇµÇÎÅIÅv", "Åuämï€Å[ÅIÅv", "ÅuÇ±ÇÍÇ‹Ç≈ÇæÇ»Åv"
		}
		txtef COLOR_RED
		txt lang("Ç†Ç»ÇΩÇÕéÊÇËâüÇ≥Ç¶ÇÁÇÍÇƒÇµÇ‹Ç¡ÇΩÅcÅB", "You have been overpowered.")
		msg_halt
		snd SOUNDLIST_AMMO
		gdata(GDATA_TELEPORT_AREA) = AREA_JAIL, 1
		levelexitby = 2
		goto *map_exit
	}
	if ( _switch_val == SKILL_SPACT_GRAVITY_SPHERE | _switch_sw ) {
		_switch_sw = 0
		snd SOUNDLIST_ATK_ELEC
		snd SOUNDLIST_BOLT1
		animeload ANIMATION_PARTICLE_CANNON, tc
		if ( synccheck(tc, -1) ) {
			txt lang(name(tc) + "ÇÕèdóÕÇÃãÖÇ…âüÇµÇ¬Ç‘Ç≥ÇÍÇΩÅB", name(tc) + " was pressed by super Gravity.")
		}
		dmg = sdata(SKILL_ATTR_CON, cc) * sdata(SKILL_ATTR_CON, cc) / 50 + limit(gdata(GDATA_LEVEL) * (gdata(GDATA_LEVEL) + 100) / 50, 1, 29999) + rnd(gdata(GDATA_LEVEL) + 5)
		if ( findbuff(tc, BUFF_FEATHER) != (-1) ) {
			dmg = dmg / 10
		}
		addbuff tc, BUFF_SLOW, sdata(SKILL_ATTR_CON, cc) / 2 + 150, 5
		cdata(CDATA_CONDITION_GRAVITY, tc) += limit(gdata(GDATA_LEVEL) / 10, 1, 50) + 10 + rnd(10)
		dmghp tc, dmg, cc, SKILL_RES_MAGIC, 1000
		if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
			powsel = 0
			if ( gdata(GDATA_FLAG_MAIN) < 350 ) {
				if ( cdata(CDATA_LEVEL, cc) >= 130 ) {
					powsel = 100
				}
			}
			if ( gdata(GDATA_FLAG_MAIN) >= 350 ) {
				if ( cdata(CDATA_LEVEL, cc) >= 50 ) {
					powsel = 100
				}
			}
			if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 | cc == CHARA_PLAYER ) {
				powsel = 100
			}
			if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
				powsel = 100
			}
			if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_QUALITY, cc) > FIX_QUALITY_GREAT & cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) / 2 & cdata(CDATA_POWER_GAUGE, cc) < 200 ) {
				if ( exgauge != 100 ) {
					powsel = 0
				}
			}
			if ( gdata(GDATA_TEMPORARY_FLAGS2) == 888 ) {
				powsel = 0
			}
			if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_TEMPORARY ) {
				if ( cdata(CDATA_DIRECTIVE_MODE_ORG, cc) != DIRECTIVE_MODE_OFFENSIVE ) {
					powsel = 0
				}
			}
			if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_DEFENSIVE | cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_INTERCEPT ) {
				powsel = 0
			}
			if ( cc == CHARA_PLAYER ) {
				if ( cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) == 0 ) {
					powsel = 0
				}
			}
			if ( gdata(GDATA_ACTIVATE_PROC) == 100 ) {
				powsel = 0
			}
			if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
				if ( powsel == 100 ) {
					if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
						efid = SKILL_SPACT_GRAVITON_BUSTER
						gosub *effect
					}
				}
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_GRAVITON_BUSTER | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( cc == CHARA_PLAYER ) {
			cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) = 0
		}
		if ( weap == 0 ) {
			weap = limit((sdata(SKILL_ATTR_CON, cc) + gdata(GDATA_LEVEL)) / 2, 1, 2000)
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		get_route cdata(CDATA_X, cc), cdata(CDATA_Y, cc), tlocx, tlocy
		if ( stat == 0 ) {
			goto *effect_end
		}
		dx = cdata(CDATA_X, cc)
		dy = cdata(CDATA_Y, cc)
		breath_list
		ele = SKILL_NONE
		waitbk = cfg_animewait
		if ( cfg_animewait > 0 ) {
			cfg_animewait = 1
		}
		repeat 8
			snd SOUNDLIST_CRUSH1
			animeid = ANIMATION_MP_BREATH
			gosub *anime
			snd SOUNDLIST_ATK_ELEC
		loop
		cfg_animewait = waitbk
		repeat maxbreath
			dx = breathlist(0, cnt)
			dy = breathlist(1, cnt)
			if ( map(dx, dy, 0) != 701 & map(dx, dy, 0) != 671 ) {
				map(dx, dy, 0) = 38
			}
			if ( dx == cdata(CDATA_X, cc) & dy == cdata(CDATA_Y, cc) ) {
				continue
			}
			if ( gdata(GDATA_RIDER) != 0 ) {
				if ( gdata(GDATA_RIDER) == cc ) {
					if ( tc == CHARA_PLAYER ) {
						continue
					}
				}
			}
			if ( map(dx, dy, 1) != 0 ) {
				tc = map(dx, dy, 1) - 1
				if ( cc != tc ) {
					if ( cdata(CDATA_IN_TAGTEAM, tc) != 0 ) {
						if ( tc != CHARA_PLAYER ) {
							if ( rnd(cdata(CDATA_HP, tc) + 1) < rnd(cdata(CDATA_HP, cdata(CDATA_TAGTEAM_PARTNER, tc)) + 1) ) {
								tc = cdata(CDATA_TAGTEAM_PARTNER, tc)
							}
							txt_guard
						}
					}
					dmg = limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap + 1)
					calcmagiccontrol cc, tc
					if ( stat == 1 ) {
						continue
					}
					if ( synccheck(tc, -1) ) {
						txtmore
						if ( tc >= MAX_CHARA_FOLLOWER ) {
							gdata(GDATA_DMG_TYPE) = 2
							txt3rd = 1
							txt lang(name(tc) + "Ç…ñΩíÜÇµ", "The breath hits " + name(tc) + " and")
						}
						else {
							txt lang(name(tc) + "Ç…ñΩíÜÇµÇΩÅB", "The breath hits " + name(tc) + ".")
						}
					}
					cdata(CDATA_CONDITION_GRAVITY, tc) += 50
					addbuff tc, BUFF_SLOW, sdata(SKILL_ATTR_CON, cc) + 150, 5
					dmghp tc, dmg, cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
				}
			}
		loop
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				skillexp SKILL_NORMAL_TACTICS, cc, 400
				skillexp SKILL_NORMAL_MAGIC_CAPACITY, cc, 400
			}
		}
		eqlv = 0
		eqbui = 0
		cdata(CDATA_GAUGE_COOLDOWN, cc) = 1
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_METAL_GUARD | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			goto *effect_end
		}
		if ( synccheck(tc, -1) ) {
			txtef COLOR_BLUE
			txt lang(name(cc) + "ÇÕÉ_ÉÅÅ[ÉWÇ…îıÇ¶ÇΩÅB", name(cc) + " was watching out for the damage.")
		}
		cdata(CDATA_CONDITION_METAL, cc) = 6
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_DIRECTIVE | _switch_sw ) {
		_switch_sw = 0
		goto *effect_directive
	}
	if ( _switch_val == SKILL_EFFECT_POTION_CURE_CORRUPTION | _switch_sw ) {
		_switch_sw = 0
		if ( tc != CHARA_PLAYER ) {
			txt_nothinghappens
			goto *effect_end
		}
		snd SOUNDLIST_PRAY1
		if ( efstatus >= 0 ) {
			txtef COLOR_GREEN
			txt lang("ÉGÅ[ÉeÉãÇÃçRëÃÇ™Ç†Ç»ÇΩÇÃëÃì‡Ç…çsÇ´ìnÇ¡ÇΩÅB", "Your Ether Disease is cured greatly.")
			if ( efstatus == 1 ) {
				modcorrupt 300 * (-10)
			}
			if ( efstatus == 0 ) {
				modcorrupt 200 * (-10)
			}
		}
		else {
			txtef COLOR_PURPLE
			txt lang("Ç†Ç»ÇΩÇÕÉGÅ[ÉeÉãÇ…êNêHÇ≥ÇÍÇΩÅB", "The Ether erodes your body.")
			modcorrupt 200
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_EYE_OF_ETHER | _switch_sw ) {
		_switch_sw = 0
		if ( tc != CHARA_PLAYER ) {
			goto *effect_end
		}
		txtef COLOR_PURPLE
		txt lang(name(cc) + "Ç…·…Ç‹ÇÍÅAÇ†Ç»ÇΩÇÕÉGÅ[ÉeÉãÇ…êNêHÇ≥ÇÍÇΩÅB", name(cc) + " gazes at you. The Ether erodes your body.")
		modcorrupt 100
		if ( findbuff(cc, BUFF_ABYSS_IN_THE_EYE) != (-1) ) {
			snd SOUNDLIST_OFFER1
			txt lang(name(cc) + "ÇÃìµçEÇ™äJÇ¢ÇΩÅB", name(cc) + "'s pupils dilate.")
			dmghp tc, sdata(SKILL_ATTR_MAG, cc) / 6 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 6)
			healhp cc, sdata(SKILL_ATTR_MAG, cc) / 2 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 2)
			dmgmp tc, sdata(SKILL_ATTR_MAG, cc) / 6 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 6)
			healmp cc, sdata(SKILL_ATTR_MAG, cc) / 2 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 2)
			cdata(CDATA_POWER_GAUGE, tc) -= 2
			if ( cdata(CDATA_POWER_GAUGE, tc) < 0 ) {
				cdata(CDATA_POWER_GAUGE, tc) = 0
			}
			cdata(CDATA_POWER_GAUGE, cc) += 2
			if ( cdata(CDATA_POWER_GAUGE, cc) > 100 ) {
				if ( cdata(CDATA_SHIFT_FORM, cc) <= SHIFT_FORM_NONE & (cdata(CDATA_EVOLUTION_STAGE, cc) <= 0 | dmgsource == 0) & (cdata(CDATA_QUALITY, cc) < FIX_QUALITY_MIRACLE | cc < MAX_CHARA_FOLLOWER) ) {
					cdata(CDATA_POWER_GAUGE, cc) = 100
				}
			}
			if ( cdata(CDATA_POWER_GAUGE, cc) > 200 ) {
				cdata(CDATA_POWER_GAUGE, cc) = 200
			}
		}
		powsel = 0
		if ( gdata(GDATA_FLAG_MAIN) < 350 ) {
			if ( cdata(CDATA_LEVEL, cc) >= 130 ) {
				powsel = 100
			}
		}
		if ( gdata(GDATA_FLAG_MAIN) >= 350 ) {
			if ( cdata(CDATA_LEVEL, cc) >= 50 ) {
				powsel = 100
			}
		}
		if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 | cc == CHARA_PLAYER ) {
			powsel = 100
		}
		if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
			powsel = 100
		}
		if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_QUALITY, cc) > FIX_QUALITY_GREAT & cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) / 2 & cdata(CDATA_POWER_GAUGE, cc) < 200 ) {
			if ( exgauge != 100 ) {
				powsel = 0
			}
		}
		if ( gdata(GDATA_TEMPORARY_FLAGS2) == 888 ) {
			powsel = 0
		}
		if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_TEMPORARY ) {
			if ( cdata(CDATA_DIRECTIVE_MODE_ORG, cc) != DIRECTIVE_MODE_OFFENSIVE ) {
				powsel = 0
			}
		}
		if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_DEFENSIVE | cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_INTERCEPT ) {
			powsel = 0
		}
		if ( cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) == 0 ) {
				powsel = 0
			}
		}
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			if ( powsel == 100 ) {
				if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
					efid = SKILL_SPACT_MIND_BREAK
					gosub *effect
				}
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_EYE_OF_BRAINWASHING | _switch_sw ) {
		_switch_sw = 0
		if ( cc != CHARA_PLAYER ) {
			if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 ) {
				efid = SKILL_SPACT_EYE_OF_MANA
				gosub *effect
				goto *effect_end
			}
		}
		txtef COLOR_PURPLE
		txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇêÙî]ÇµÇΩÅB", name(cc) + " brainwash" + _s(cc, 1) + " " + name(tc) + ".")
		if ( cbit(CHARA_BIT_NECRO, tc) == 1 ) {
			txtef COLOR_GREEN
			txt lang(name(tc) + "Ç…ÇÕå¯â Ç™Ç»Ç¢ÇÊÇ§ÇæÅcÅB", name(tc) + " resisted the brainwashing.")
			goto *effect_end
		}
		if ( tc == CHARA_PLAYER ) {
			dmgcon CHARA_PLAYER, CONDITION_CONFUSE, 200
			if ( rnd(sdata(SKILL_ATTR_CHA, cc)) >= rnd(sdata(SKILL_ATTR_WIL, CHARA_PLAYER)) * 2 & findbuff(CHARA_PLAYER, BUFF_TAG_FORCE) == (-1) ) {
				animeload ANIMATION_FIZZLE, tc
				body = rnd(MAX_EQUIP_SLOT) + 1
				repeat MAX_EQUIP_SLOT_TOTAL, CDATA_STARTING_EQUIP_SLOTS
					if ( cdata(cnt, CHARA_PLAYER) / EXT_EQUIP_SLOTS == body ) {
						p = cdata(cnt, CHARA_PLAYER) \ EXT_EQUIP_SLOTS
						if ( p == 0 ) {
							continue
						}
						p--
						inv(INV_ITEM_EQUIP, p) = 0
						cdata(cnt, CHARA_PLAYER) = cdata(cnt, CHARA_PLAYER) / EXT_EQUIP_SLOTS * EXT_EQUIP_SLOTS
						txtef COLOR_PURPLE
						txt lang(name(CHARA_PLAYER) + "ÇÕ" + name(cc) + "Ç…åæÇÌÇÍÇÈÇ™Ç‹Ç‹ÅAëïîıÇäOÇµÇƒÇµÇ‹Ç¡ÇΩÅB", name(tc) + " was brainwashed into removing " + his(tc) + " equipment.")
					}
				loop
				cdata(CDATA_CONDITION_BRAINWASH, CHARA_PLAYER) = limit(sdata(SKILL_ATTR_CHA, cc) / 5 - sdata(SKILL_ATTR_WIL, CHARA_PLAYER) / 5, 10, 50)
				r1 = CHARA_PLAYER
				gosub *charaRefresh
			}
			else {
				txtef COLOR_GREEN
				txt lang("Ç†Ç»ÇΩÇÕ" + name(cc) + "ÇÃêÙî]ÇíµÇÀèúÇØÇΩÅB", "You resist " + name(cc) + "'s brainwashing.")
			}
			goto *effect_end
		}
		sennnou = limit(cdata(CDATA_IMPRESSION, tc), 1, 300)
		if ( rnd(sennnou + sdata(SKILL_ATTR_CHA, CHARA_PLAYER)) > 50 + rnd(sdata(SKILL_ATTR_CHA, cc)) | findbuff(tc, BUFF_TAG_FORCE) != (-1) ) {
			txtef COLOR_GREEN
			txt lang(name(tc) + "ÇÕ" + name(cc) + "ÇÃêÙî]ÇíµÇÀèúÇØÇΩÅB", name(tc) + " resists " + name(cc) + "'s brainwashing.")
			goto *effect_end
		}
		animeload ANIMATION_FIZZLE, tc
		cdata(CDATA_CONDITION_BRAINWASH, tc) = limit((300 - cdata(CDATA_IMPRESSION, tc)) * 1 / 10, 5, 30)
		cdata(CDATA_AI_AGGRO, tc) = 10
		cdata(CDATA_TARGET, tc) = 0
		if ( findbuff(cc, BUFF_ABYSS_IN_THE_EYE) != (-1) ) {
			snd SOUNDLIST_OFFER1
			txt lang(name(cc) + "ÇÃìµçEÇ™äJÇ¢ÇΩÅB", name(cc) + "'s pupils dilate.")
			dmghp tc, sdata(SKILL_ATTR_MAG, cc) / 6 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 6)
			healhp cc, sdata(SKILL_ATTR_MAG, cc) / 2 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 2)
			dmgmp tc, sdata(SKILL_ATTR_MAG, cc) / 6 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 6)
			healmp cc, sdata(SKILL_ATTR_MAG, cc) / 2 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 2)
			cdata(CDATA_POWER_GAUGE, tc) -= 2
			if ( cdata(CDATA_POWER_GAUGE, tc) < 0 ) {
				cdata(CDATA_POWER_GAUGE, tc) = 0
			}
			cdata(CDATA_POWER_GAUGE, cc) += 2
			if ( cdata(CDATA_POWER_GAUGE, cc) > 100 ) {
				if ( cdata(CDATA_SHIFT_FORM, cc) <= SHIFT_FORM_NONE & (cdata(CDATA_EVOLUTION_STAGE, cc) <= 0 | dmgsource == 0) & (cdata(CDATA_QUALITY, cc) < FIX_QUALITY_MIRACLE | cc < MAX_CHARA_FOLLOWER) ) {
					cdata(CDATA_POWER_GAUGE, cc) = 100
				}
			}
			if ( cdata(CDATA_POWER_GAUGE, cc) > 200 ) {
				cdata(CDATA_POWER_GAUGE, cc) = 200
			}
		}
		powsel = 0
		if ( gdata(GDATA_FLAG_MAIN) < 350 ) {
			if ( cdata(CDATA_LEVEL, cc) >= 130 ) {
				powsel = 100
			}
		}
		if ( gdata(GDATA_FLAG_MAIN) >= 350 ) {
			if ( cdata(CDATA_LEVEL, cc) >= 50 ) {
				powsel = 100
			}
		}
		if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 | cc == CHARA_PLAYER ) {
			powsel = 100
		}
		if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
			powsel = 100
		}
		if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_QUALITY, cc) > FIX_QUALITY_GREAT & cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) / 2 & cdata(CDATA_POWER_GAUGE, cc) < 200 ) {
			if ( exgauge != 100 ) {
				powsel = 0
			}
		}
		if ( gdata(GDATA_TEMPORARY_FLAGS2) == 888 ) {
			powsel = 0
		}
		if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_TEMPORARY ) {
			if ( cdata(CDATA_DIRECTIVE_MODE_ORG, cc) != DIRECTIVE_MODE_OFFENSIVE ) {
				powsel = 0
			}
		}
		if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_DEFENSIVE | cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_INTERCEPT ) {
			powsel = 0
		}
		if ( cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) == 0 ) {
				powsel = 0
			}
		}
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			if ( powsel == 100 ) {
				if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
					efid = SKILL_SPACT_MIND_BREAK
					gosub *effect
				}
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_EYE_OF_DIMNESS | _switch_sw ) {
		_switch_sw = 0
		_switch_sw++
	}
	if ( _switch_val == SKILL_SPACT_INSULT | _switch_sw ) {
		_switch_sw = 0
		if ( efid == SKILL_SPACT_INSULT ) {
			if ( synccheck(tc, -1) ) {
				txt lang(name(cc) + "ÇÕ" + name(tc) + "Çîlì|ÇµÇΩÅB", name(cc) + " insult" + _s(cc) + " " + name(tc) + ".")
				txtmore
				txtef COLOR_SKY_BLUE
				customtalk cc, DBMODE_FLAVOR_INSULT
				gosub *convert_word
				if ( gdata(GDATA_CUSTOM_TALK) == 100 ) {
					if ( jp ) {
						if ( cdata(CDATA_SEX, cc) == 0 ) {
							txt "ÅuÇ∑Ç¡Ç±ÇÒÇ≈ÇÎéGãõÇﬂÅv", "ÅuÉIÉ}ÉGíˆìxÇ™êÌÇ§ÇæÇ∆ÅHÅv", "ÅuÇ∑ÇÆÇ…éEÇµÇƒÇ‚ÇÈÇÊÅv", "Åuè¡Ç¶ÇÎÉUÉRÇﬂÅv", "ÅuÇ±ÇÃÇ©ÇΩÇ¬ÇﬁÇËñÏòYÅv", "ÅuÇ±ÇÒÇ»ÉÑÉcÇ…ñ{ãCÇèoÇµÇƒÇ‚ÇÈâøílÇÕÇ†ÇÈÇÃÇ©ÅcÅHÅv", "ÅuÉ}ÉbÉnÇ≈É~ÉìÉ`Ç…ÇµÇƒÇ‚ÇÈÇÊÅv", "ÅuÇ‹Ç¡ÇΩÇ≠ÅcìxÇµìÔÇ¢Ç»Åv", "ÅuÉuÉ^ÇÕÉuÉ^è¨âÆÇ…ãAÇÍÅv"
						}
						else {
							if ( rnd(2) ) {
								txt "ÅuÉOÉVÉÉÉOÉVÉÉÇ…ÇµÇƒÇ‚ÇÈÇÌÅv", "ÅuínÇ◊ÇΩÇîáÇ¢Ç∏ÇËÇ»Ç≥Ç¢Åv", "ÅuÉEÅ[ÉWÉbÉÄÉVÅÙÉEÅ[ÉWÉbÉÄÉVÅÙÅv", "Åuñ⁄è·ÇËÇÊÅv", "ÅuÇ‡Ç™ÇØÅBãÍÇµÇﬂÅIÅv", "ÅuèÌéØímÇÁÇ∏ÇÃêÌì¨îné≠ÅIÅv", "ÅuÇ«Ç§ÇµÇÊÇ§Ç‡Ç»Ç¢éqÇÀÅAÇ®édíuÇ´ÇÊÅv", "ÅuÇªÇÃâ∫ïiÇ»ä·ÇÇ≠ÇËÇ Ç≠ÇÃÅv"
							}
							else {
								txt "ÅuÇ±ÇÃÉJÉ^ÉcÉÄÉäÇ™Åv", "ÅuÇ«Ç§ÇµÇΩÇÃÅHÇ‡Ç§èIÇÌÇËÇ»ÇÃÅHÅv", "ÅuåâÇ≠ÅAÇ≠ÇΩÇŒÇËÇ»Ç≥Ç¢Åv", "Åuê∂Ç‹ÇÍÇƒÇ´ÇΩÇ±Ç∆Çå„â˜Ç∑ÇÈÇÃÇÀÅv", "ÅuÇ±ÇÃÉuÉ^ÇﬂÅv", "ÅuÇ∑ÇÆÇ…É~ÉìÉ`Ç…ÇµÇƒÇ†Ç∞ÇÈÅv", "ÅuãMï˚Ç¡Çƒñ{ìñÇ…ç≈í·ÇÃÉNÉYÇæÇÌÅv", "ÅuÇ±ÇÃÉGÉçÉIÉjÉMÉäÅIÅv", "ÅuÇ†ÇÁÅHâxÇÒÇ≈ÇÈÇÃÅHãCéùÇøà´Ç¢ÇÌÅv"
							}
						}
					}
					else {
						if ( rnd(2) ) {
							txt cnvtalk("You suck!"), cnvtalk("You will die alone."), cnvtalk("Bow down before me."), cnvtalk("Go jump off a bridge."), cnvtalk("Bang your head against the wall!"), cnvtalk("Why do you sniff under your dog's tail?")
						}
						else {
							txt cnvtalk("The world is against you because you are a unsavory decomposing virus."), cnvtalk("You are no better than a immoral guzzling bureaucrat."), cnvtalk("You are so lowly."), cnvtalk("Get off me.")
						}
					}
				}
			}
		}
		dmgcon tc, CONDITION_DIM, 200
		if ( efid == SKILL_SPACT_EYE_OF_DIMNESS ) {
			if ( findbuff(cc, BUFF_ABYSS_IN_THE_EYE) != (-1) ) {
				snd SOUNDLIST_OFFER1
				txt lang(name(cc) + "ÇÃìµçEÇ™äJÇ¢ÇΩÅB", name(cc) + "'s pupils dilate.")
				dmghp tc, sdata(SKILL_ATTR_MAG, cc) / 6 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 6)
				healhp cc, sdata(SKILL_ATTR_MAG, cc) / 2 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 2)
				dmgmp tc, sdata(SKILL_ATTR_MAG, cc) / 6 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 6)
				healmp cc, sdata(SKILL_ATTR_MAG, cc) / 2 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 2)
				cdata(CDATA_POWER_GAUGE, tc) -= 2
				if ( cdata(CDATA_POWER_GAUGE, tc) < 0 ) {
					cdata(CDATA_POWER_GAUGE, tc) = 0
				}
				cdata(CDATA_POWER_GAUGE, cc) += 2
				if ( cdata(CDATA_POWER_GAUGE, cc) > 100 ) {
					if ( cdata(CDATA_SHIFT_FORM, cc) <= SHIFT_FORM_NONE & (cdata(CDATA_EVOLUTION_STAGE, cc) <= 0 | dmgsource == 0) & (cdata(CDATA_QUALITY, cc) < FIX_QUALITY_MIRACLE | cc < MAX_CHARA_FOLLOWER) ) {
						cdata(CDATA_POWER_GAUGE, cc) = 100
					}
				}
				if ( cdata(CDATA_POWER_GAUGE, cc) > 200 ) {
					cdata(CDATA_POWER_GAUGE, cc) = 200
				}
			}
			powsel = 0
			if ( gdata(GDATA_FLAG_MAIN) < 350 ) {
				if ( cdata(CDATA_LEVEL, cc) >= 130 ) {
					powsel = 100
				}
			}
			if ( gdata(GDATA_FLAG_MAIN) >= 350 ) {
				if ( cdata(CDATA_LEVEL, cc) >= 50 ) {
					powsel = 100
				}
			}
			if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 | cc == CHARA_PLAYER ) {
				powsel = 100
			}
			if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
				powsel = 100
			}
			if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_QUALITY, cc) > FIX_QUALITY_GREAT & cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) / 2 & cdata(CDATA_POWER_GAUGE, cc) < 200 ) {
				if ( exgauge != 100 ) {
					powsel = 0
				}
			}
			if ( gdata(GDATA_TEMPORARY_FLAGS2) == 888 ) {
				powsel = 0
			}
			if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_TEMPORARY ) {
				if ( cdata(CDATA_DIRECTIVE_MODE_ORG, cc) != DIRECTIVE_MODE_OFFENSIVE ) {
					powsel = 0
				}
			}
			if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_DEFENSIVE | cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_INTERCEPT ) {
				powsel = 0
			}
			if ( cc == CHARA_PLAYER ) {
				if ( cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) == 0 ) {
					powsel = 0
				}
			}
			if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
				if ( powsel == 100 ) {
					if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
						efid = SKILL_SPACT_MIND_BREAK
						gosub *effect
					}
				}
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_EYE_OF_MANA | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang(name(cc) + "ÇÕñÇóÕÇçûÇﬂÇƒ" + name(tc) + "Ç·…Ç›ïtÇØÇΩÅB", name(cc) + " gaze" + _s(cc) + " " + name(tc) + ".")
		}
		hostileaction cc, tc
		dmgcon tc, CONDITION_MPOISON, 100 + limit(sdata(SKILL_ATTR_MAG, cc), 1, 400)
		dmgmp tc, sdata(SKILL_ATTR_MAG, cc) / 4 + rnd(10 + sdata(SKILL_ATTR_MAG, cc) / 4)
		if ( findbuff(cc, BUFF_ABYSS_IN_THE_EYE) != (-1) ) {
			snd SOUNDLIST_OFFER1
			txt lang(name(cc) + "ÇÃìµçEÇ™äJÇ¢ÇΩÅB", name(cc) + "'s pupils dilate.")
			dmghp tc, sdata(SKILL_ATTR_MAG, cc) / 6 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 6)
			healhp cc, sdata(SKILL_ATTR_MAG, cc) / 2 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 2)
			dmgmp tc, sdata(SKILL_ATTR_MAG, cc) / 6 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 6)
			healmp cc, sdata(SKILL_ATTR_MAG, cc) / 2 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 2)
			cdata(CDATA_POWER_GAUGE, tc) -= 2
			if ( cdata(CDATA_POWER_GAUGE, tc) < 0 ) {
				cdata(CDATA_POWER_GAUGE, tc) = 0
			}
			cdata(CDATA_POWER_GAUGE, cc) += 2
			if ( cdata(CDATA_POWER_GAUGE, cc) > 100 ) {
				if ( cdata(CDATA_SHIFT_FORM, cc) <= SHIFT_FORM_NONE & (cdata(CDATA_EVOLUTION_STAGE, cc) <= 0 | dmgsource == 0) & (cdata(CDATA_QUALITY, cc) < FIX_QUALITY_MIRACLE | cc < MAX_CHARA_FOLLOWER) ) {
					cdata(CDATA_POWER_GAUGE, cc) = 100
				}
			}
			if ( cdata(CDATA_POWER_GAUGE, cc) > 200 ) {
				cdata(CDATA_POWER_GAUGE, cc) = 200
			}
		}
		powsel = 0
		if ( gdata(GDATA_FLAG_MAIN) < 350 ) {
			if ( cdata(CDATA_LEVEL, cc) >= 130 ) {
				powsel = 100
			}
		}
		if ( gdata(GDATA_FLAG_MAIN) >= 350 ) {
			if ( cdata(CDATA_LEVEL, cc) >= 50 ) {
				powsel = 100
			}
		}
		if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 | cc == CHARA_PLAYER ) {
			powsel = 100
		}
		if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
			powsel = 100
		}
		if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_QUALITY, cc) > FIX_QUALITY_GREAT & cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) / 2 & cdata(CDATA_POWER_GAUGE, cc) < 200 ) {
			if ( exgauge != 100 ) {
				powsel = 0
			}
		}
		if ( gdata(GDATA_TEMPORARY_FLAGS2) == 888 ) {
			powsel = 0
		}
		if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_TEMPORARY ) {
			if ( cdata(CDATA_DIRECTIVE_MODE_ORG, cc) != DIRECTIVE_MODE_OFFENSIVE ) {
				powsel = 0
			}
		}
		if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_DEFENSIVE | cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_INTERCEPT ) {
			powsel = 0
		}
		if ( cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) == 0 ) {
				powsel = 0
			}
		}
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			if ( powsel == 100 ) {
				if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
					efid = SKILL_SPACT_MIND_BREAK
					gosub *effect
				}
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_EYE_OF_ILLUSION | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang(name(cc) + "ÇÕ" + name(tc) + "Ç…å∂âeÇå©ÇπÇΩÅB", name(cc) + " gaze" + _s(cc) + " " + name(tc) + ".")
		}
		dmghp tc, sdata(SKILL_ATTR_MAG, cc) / 3 * sqrt(sdata(SKILL_ATTR_WIL, cc)) + rnd(sdata(SKILL_ATTR_WIL, cc) * 2), cc, SKILL_RES_MIND, sdata(SKILL_ATTR_MAG, cc) / 2 + 100
		if ( findbuff(cc, BUFF_ABYSS_IN_THE_EYE) != (-1) ) {
			snd SOUNDLIST_OFFER1
			txt lang(name(cc) + "ÇÃìµçEÇ™äJÇ¢ÇΩÅB", name(cc) + "'s pupils dilate.")
			dmghp tc, sdata(SKILL_ATTR_MAG, cc) / 6 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 6)
			healhp cc, sdata(SKILL_ATTR_MAG, cc) / 2 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 2)
			dmgmp tc, sdata(SKILL_ATTR_MAG, cc) / 6 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 6)
			healmp cc, sdata(SKILL_ATTR_MAG, cc) / 2 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 2)
			cdata(CDATA_POWER_GAUGE, tc) -= 2
			if ( cdata(CDATA_POWER_GAUGE, tc) < 0 ) {
				cdata(CDATA_POWER_GAUGE, tc) = 0
			}
			cdata(CDATA_POWER_GAUGE, cc) += 2
			if ( cdata(CDATA_POWER_GAUGE, cc) > 100 ) {
				if ( cdata(CDATA_SHIFT_FORM, cc) <= SHIFT_FORM_NONE & (cdata(CDATA_EVOLUTION_STAGE, cc) <= 0 | dmgsource == 0) & (cdata(CDATA_QUALITY, cc) < FIX_QUALITY_MIRACLE | cc < MAX_CHARA_FOLLOWER) ) {
					cdata(CDATA_POWER_GAUGE, cc) = 100
				}
			}
			if ( cdata(CDATA_POWER_GAUGE, cc) > 200 ) {
				cdata(CDATA_POWER_GAUGE, cc) = 200
			}
		}
		powsel = 0
		if ( gdata(GDATA_FLAG_MAIN) < 350 ) {
			if ( cdata(CDATA_LEVEL, cc) >= 130 ) {
				powsel = 100
			}
		}
		if ( gdata(GDATA_FLAG_MAIN) >= 350 ) {
			if ( cdata(CDATA_LEVEL, cc) >= 50 ) {
				powsel = 100
			}
		}
		if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 | cc == CHARA_PLAYER ) {
			powsel = 100
		}
		if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
			powsel = 100
		}
		if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_QUALITY, cc) > FIX_QUALITY_GREAT & cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) / 2 & cdata(CDATA_POWER_GAUGE, cc) < 200 ) {
			if ( exgauge != 100 ) {
				powsel = 0
			}
		}
		if ( gdata(GDATA_TEMPORARY_FLAGS2) == 888 ) {
			powsel = 0
		}
		if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_TEMPORARY ) {
			if ( cdata(CDATA_DIRECTIVE_MODE_ORG, cc) != DIRECTIVE_MODE_OFFENSIVE ) {
				powsel = 0
			}
		}
		if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_DEFENSIVE | cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_INTERCEPT ) {
			powsel = 0
		}
		if ( cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) == 0 ) {
				powsel = 0
			}
		}
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			if ( powsel == 100 ) {
				if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
					efid = SKILL_SPACT_MIND_BREAK
					gosub *effect
				}
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_EYE_OF_STIFFEN | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang(name(cc) + "ÇÕ" + name(tc) + "Ç…ódÇµÇ¢ä·åıÇï˙Ç¡ÇΩÅB", name(cc) + " gaze" + _s(cc) + " " + name(tc) + ".")
		}
		dmghp tc, sdata(SKILL_ATTR_MAG, cc) / 2 * sqrt(sdata(SKILL_ATTR_WIL, cc)) + rnd(sdata(SKILL_ATTR_WIL, cc) * 2), cc, SKILL_RES_NERVE, sdata(SKILL_ATTR_MAG, cc) + 200
		cdata(CDATA_PROT_PENALTY, tc) = -3
		if ( synccheck(tc, -1) ) {
			txt lang(name(tc) + "ÇÃêgëÃÇ™êŒÇÃÇÊÇ§Ç…çdíºÇµÇΩÅB", "Body of " + name(tc) + " was stiff like a stone.")
		}
		if ( findbuff(cc, BUFF_ABYSS_IN_THE_EYE) != (-1) ) {
			snd SOUNDLIST_OFFER1
			txt lang(name(cc) + "ÇÃìµçEÇ™äJÇ¢ÇΩÅB", name(cc) + "'s pupils dilate.")
			dmghp tc, sdata(SKILL_ATTR_MAG, cc) / 6 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 6)
			healhp cc, sdata(SKILL_ATTR_MAG, cc) / 2 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 2)
			dmgmp tc, sdata(SKILL_ATTR_MAG, cc) / 6 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 6)
			healmp cc, sdata(SKILL_ATTR_MAG, cc) / 2 + rnd(5 + sdata(SKILL_ATTR_MAG, cc) / 2)
			cdata(CDATA_POWER_GAUGE, tc) -= 2
			if ( cdata(CDATA_POWER_GAUGE, tc) < 0 ) {
				cdata(CDATA_POWER_GAUGE, tc) = 0
			}
			cdata(CDATA_POWER_GAUGE, cc) += 2
			if ( cdata(CDATA_POWER_GAUGE, cc) > 100 ) {
				if ( cdata(CDATA_SHIFT_FORM, cc) <= SHIFT_FORM_NONE & (cdata(CDATA_EVOLUTION_STAGE, cc) <= 0 | dmgsource == 0) & (cdata(CDATA_QUALITY, cc) < FIX_QUALITY_MIRACLE | cc < MAX_CHARA_FOLLOWER) ) {
					cdata(CDATA_POWER_GAUGE, cc) = 100
				}
			}
			if ( cdata(CDATA_POWER_GAUGE, cc) > 200 ) {
				cdata(CDATA_POWER_GAUGE, cc) = 200
			}
		}
		powsel = 0
		if ( gdata(GDATA_FLAG_MAIN) < 350 ) {
			if ( cdata(CDATA_LEVEL, cc) >= 130 ) {
				powsel = 100
			}
		}
		if ( gdata(GDATA_FLAG_MAIN) >= 350 ) {
			if ( cdata(CDATA_LEVEL, cc) >= 50 ) {
				powsel = 100
			}
		}
		if ( cc < MAX_CHARA_FOLLOWER | cdata(CDATA_ALLIED, cc) == 100 | cc == CHARA_PLAYER ) {
			powsel = 100
		}
		if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
			powsel = 100
		}
		if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_QUALITY, cc) > FIX_QUALITY_GREAT & cdata(CDATA_HP, cc) > cdata(CDATA_MAX_HP, cc) / 2 & cdata(CDATA_POWER_GAUGE, cc) < 200 ) {
			if ( exgauge != 100 ) {
				powsel = 0
			}
		}
		if ( gdata(GDATA_TEMPORARY_FLAGS2) == 888 ) {
			powsel = 0
		}
		if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_TEMPORARY ) {
			if ( cdata(CDATA_DIRECTIVE_MODE_ORG, cc) != DIRECTIVE_MODE_OFFENSIVE ) {
				powsel = 0
			}
		}
		if ( cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_DEFENSIVE | cdata(CDATA_DIRECTIVE_MODE, cc) == DIRECTIVE_MODE_INTERCEPT ) {
			powsel = 0
		}
		if ( cc == CHARA_PLAYER ) {
			if ( cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) == 0 ) {
				powsel = 0
			}
		}
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			if ( powsel == 100 ) {
				if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
					efid = SKILL_SPACT_MIND_BREAK
					gosub *effect
				}
			}
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_MIND_BREAK | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( cc == CHARA_PLAYER ) {
			cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) = 0
		}
		if ( weap == 0 ) {
			weap = sdata(SKILL_ATTR_MAG, cc) / 2
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÃä·Ç©ÇÁ·øÇ¢åıÇ™ï˙ÇΩÇÍÇΩÅI", name(cc) + "'s eye shot a dazzling light.")
		snd SOUNDLIST_CRUSH2
		snd SOUNDLIST_ATK_ICE
		snd SOUNDLIST_ATK_ICE
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		dmgcon tc, CONDITION_DIM, 200
		dmgsan tc, rnd(rnd(1 + sdata(SKILL_ATTR_MAG, cc) / 20) * 10 + 2) + 1
		chara_vomit tc
		if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
			dmgmp tc, (sdata(SKILL_ATTR_MAG, cc) / 10 + 1) * eqlv + rnd(10 + sdata(SKILL_ATTR_MAG, cc) / 4)
		}
		if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
			dmghp tc, (sdata(SKILL_ATTR_MAG, cc) / 10 + 1) * sqrt(sdata(SKILL_ATTR_WIL, cc)) * eqlv, cc, SKILL_RES_NERVE, sdata(SKILL_ATTR_MAG, cc) + 100
		}
		if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
			dmghp tc, (sdata(SKILL_ATTR_MAG, cc) / 10 + 1) * sqrt(sdata(SKILL_ATTR_WIL, cc)) * eqlv, cc, SKILL_RES_MIND, sdata(SKILL_ATTR_MAG, cc) + 100
		}
		eqlv = 0
		eqbui = 0
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				skillexp SKILL_ATTR_MAG, cc, 200
			}
		}
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_DATA_DELETE | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( cc == CHARA_PLAYER ) {
			cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) = 0
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		if ( cdata(CDATA_ID, cc) == CREATURE_ID_MAILE_THE_MARIONETTE_SHAMAN ) {
			txtef COLOR_YELLOW
			txt lang("ÅuÇ≠Ç¡ÅcÇ‚ÇÕÇËçáà”Ç™Ç»Ç¢Ç∆è[ï™Ç»óÕÇ™èoÇ‹ÇπÇÒÇÀÅv", "Maile seems to not have enough power.")
		}
		else {
			if ( gdata(GDATA_FLAG_MAIN) >= 780 ) {
				txtef COLOR_RED
				txt lang("[ÉVÉXÉeÉÄ]å¥àˆïsñæÇÃÉGÉâÅ[Ç…ÇÊÇËglobaltcdaÅc", "[System]By unknown error, globalda...")
				txtef COLOR_GREEN
				txt lang("[ãLâØÇÃìî]Ç©ÇÁï˙èoÇ≥ÇÍÇΩåıÇ™ÅAãLâØè¡ãéÇä…òaÇµÇΩÅI", "The light emitted from Light of memory relieved memory delete!")
			}
		}
		snd SOUNDLIST_CURSE2
		animeload ANIMATION_FIZZLE, tc
		repeat MAX_SKILL_ATTR - STARTING_SKILL_ATTR, STARTING_SKILL_ATTR
			skillmod cnt, tc, -1000
		loop
		if ( cdata(CDATA_POWER_GAUGE, tc) >= 0 ) {
			cdata(CDATA_POWER_GAUGE, tc) = 0
		}
		if ( cc < MAX_CHARA_FOLLOWER ) {
			hostileaction cc, tc
		}
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPACT_HAND_OF_SPLENDOR | _switch_sw ) {
		_switch_sw = 0
		if ( cdata(CDATA_POWER_GAUGE, cc) < 100 ) {
			txt_nothinghappens
			goto *effect_end
		}
		cdata(CDATA_POWER_GAUGE, cc) -= 100
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 100 ) {
			snd SOUNDLIST_POWER
			exgauge = 100
			if ( gdata(GDATA_TIME_STOP_TIME) == 0 ) {
				gdata(GDATA_TIME_STOP_TIME) = 2
			}
		}
		txtef COLOR_YELLOW
		txt_skillname
		if ( cc == CHARA_PLAYER ) {
			cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) = 0
		}
		if ( weap == 0 ) {
			weap = (sdata(SKILL_ATTR_WIL, cc) + sdata(SKILL_ATTR_MAG, cc)) / 3
		}
		if ( cbit(CHARA_BIT_BLUE_SPIRIT, cc) ) {
			weap += (sdata(SKILL_ATTR_WIL, cc) + sdata(SKILL_ATTR_MAG, cc)) / 3
			animeload 46, cc
			snd SOUNDLIST_ATK_MIND
		}
		snd SOUNDLIST_ENC
		animeload ANIMATION_UNISON_IMPACT2, cc
		customtalk cc, DBMODE_FLAVOR_SPECIAL
		gosub *convert_word
		snd SOUNDLIST_BOLT1
		animeload 59, tc
		txtef COLOR_GREEN
		txt lang(name(cc) + "ÇÕ" + name(tc) + "Ç…åÉÇµÇ¢ëMåıÇí@Ç´Ç¬ÇØÇΩÅI", name(cc) + " slammed the dazzling light to " + name(tc) + "!")
		inv_getheader cc
		eqlv = 1
		eqbui = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) == 0 ) {
				continue
			}
			eqlv += limit(inv(INV_ITEM_LEVEL, cnt), 0, 20)
			eqbui++
		loop
		if ( eqlv <= 0 ) {
			eqlv = 1
		}
		if ( eqbui <= 0 ) {
			eqbui = 1
		}
		eqlv = limit(eqlv / eqbui * 3, 3, 30)
		if ( cdata(CDATA_EXIST, tc) == CHAR_STATE_ALIVE ) {
			dmghp tc, limit(cdata(CDATA_DAMAGE_FIX, cc) + (weap + 1) / 2, 2, 2500) * sqrt(weap) * sqrt(eqlv - 2) + rnd(weap + 1), cc, SKILL_SPACT_FLASH_OF_SWIFTNESS
		}
		eqlv = 0
		eqbui = 0
		if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, tc) != 1 & cbit(CHARA_BIT_SPLIT_NO_EFFECT, tc) != 1 & cbit(CHARA_BIT_SUMMONED, tc) != 1 & cbit(CHARA_BIT_LIVESTOCK, tc) != 1 & cbit(CHARA_BIT_NECRO, tc) != 1 ) {
			if ( cbit(CHARA_BIT_SANDBAG, tc) != 1 | TweakData(52, 2) == 1 ) {
				skillexp SKILL_ATTR_WIL, cc, 100
				skillexp SKILL_ATTR_MAG, cc, 100
			}
		}
		weap = 0
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_COFFEE | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang(name(tc) + "ÇÃñ∞ãCÇ™òaÇÁÇ¢ÇæÅB", "" + name(tc) + your(tc) + " drowsiness fades away.")
		}
		if ( tc == CHARA_PLAYER ) {
			gdata(GDATA_SLEEP) -= 20
		}
		cdata(CDATA_CONDITION_SLEEP, tc) = 0
		if ( ibit(ITEM_BIT_ACIDPROOF, ci) == 1 ) {
			if ( synccheck(tc, -1) ) {
				snd SOUNDLIST_ATK_ELEC
			}
			if ( efstatus >= 1 ) {
				modheight tc, rnd(2) + 1
			}
			if ( efstatus <= (-1) ) {
				modheight tc, (rnd(2) + 1) * (-1)
			}
			animeload ANIMATION_THROW, tc
		}
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_JUICE | _switch_sw ) {
		_switch_sw = 0
		if ( inv(INV_ITEM_PARAM1, ci) == 0 ) {
			goto *effect_end
		}
		juice = 1
		if ( tc != CHARA_PLAYER ) {
			juice = 15
		}
		if ( inv(INV_ITEM_PARAM1, ci) / 1000 == 2 ) {
			if ( ibit(ITEM_BIT_HERBED_IN, ci) != 1 ) {
				skillexp SKILL_ATTR_WIL, tc, 50 * juice
				skillexp SKILL_ATTR_LER, tc, 50 * juice
			}
			else {
				skillexp SKILL_ATTR_WIL, tc, 75 * juice
				skillexp SKILL_ATTR_LER, tc, 75 * juice
			}
		}
		if ( inv(INV_ITEM_PARAM1, ci) / 1000 == 3 ) {
			if ( ibit(ITEM_BIT_HERBED_IN, ci) != 1 ) {
				skillexp SKILL_ATTR_MAG, tc, 50 * juice
				skillexp SKILL_ATTR_CHA, tc, 20 * juice
				skillexp SKILL_ATTR_PER, tc, 30 * juice
			}
			else {
				skillexp SKILL_ATTR_MAG, tc, 75 * juice
				skillexp SKILL_ATTR_CHA, tc, 30 * juice
				skillexp SKILL_ATTR_PER, tc, 45 * juice
			}
		}
		if ( inv(INV_ITEM_PARAM1, ci) / 1000 == 4 ) {
			if ( ibit(ITEM_BIT_HERBED_IN, ci) != 1 ) {
				skillexp SKILL_ATTR_MAG, tc, 40 * juice
				skillexp SKILL_ATTR_DEX, tc, 30 * juice
				skillexp SKILL_ATTR_LER, tc, 30 * juice
			}
			else {
				skillexp SKILL_ATTR_MAG, tc, 60 * juice
				skillexp SKILL_ATTR_DEX, tc, 45 * juice
				skillexp SKILL_ATTR_LER, tc, 45 * juice
			}
		}
		juice = 0
		if ( ibit(ITEM_BIT_ACIDPROOF, ci) == 1 ) {
			if ( synccheck(tc, -1) ) {
				snd SOUNDLIST_ATK_ELEC
			}
			if ( efstatus >= 1 ) {
				modheight tc, rnd(2) + 1
			}
			if ( efstatus <= (-1) ) {
				modheight tc, (rnd(2) + 1) * (-1)
			}
		}
		cdata(CDATA_HUNGER, tc) += 500
		if ( tc == CHARA_PLAYER ) {
			gosub *eat_finish
		}
		eatstatus efstatus, tc
		goto *effect_end
	}
	if ( _switch_val == SKILL_EFFECT_POTION_MOLOTOV | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang(name(tc) + "ÇÕâäÇ…ïÔÇ‹ÇÍÇΩÅB", name(tc) + " " + is(tc) + " surrounded by flames.")
		}
		dmghp tc, (rnd(efp / 3 + 5) + efp / 3) * efstatusfix(50, 100, 200, 300) / 100 + 1, DAMAGE_FROM_FIRE, SKILL_RES_FIRE, efp
		addmef cdata(CDATA_X, tc), cdata(CDATA_Y, tc), 5, 24, rnd(15) + 25, efp, cc
		mapitem_fire cdata(CDATA_X, tc), cdata(CDATA_Y, tc)
		return
	}
	if ( _switch_val == SKILL_EFFECT_VERNIS_ORIGINAL | _switch_sw ) {
		_switch_sw = 0
		txt lang("ÉoÉäÉoÉäÅcÉSÉNÉäÅBÇ»ÇÒÇ∆ÅIèÛë‘àŸèÌÇ™âÒïúÇµÇΩÅI", "*Munch munch*... *Gulp*! Wow! All status conditions were cured!")
		cdata(CDATA_CONDITION_MPOISON, tc) = 0
		cdata(CDATA_CONDITION_POISON, tc) = 0
		cdata(CDATA_CONDITION_SLEEP, tc) = 0
		cdata(CDATA_CONDITION_CONFUSE, tc) = 0
		cdata(CDATA_CONDITION_BLIND, tc) = 0
		cdata(CDATA_CONDITION_PARALYZE, tc) = 0
		cdata(CDATA_CONDITION_SUFFOCATION, tc) = 0
		cdata(CDATA_CONDITION_DIM, tc) = 0
		cdata(CDATA_CONDITION_DRUNK, tc) = 0
		cdata(CDATA_CONDITION_BLEED, tc) = 0
		cdata(CDATA_CONDITION_GRAVITY, tc) = 0
		cdata(CDATA_CONDITION_WET, tc) = 0
		cdata(CDATA_CONDITION_ANGRY, tc) = 0
		cdata(CDATA_CONDITION_ATROPHY, tc) = 0
		cdata(CDATA_CONDITION_BIND, tc) = 0
		cdata(CDATA_CONDITION_OIL, tc) = 0
		if ( cdata(CDATA_CONDITION_BRAINWASH, tc) > 1 ) {
			cdata(CDATA_CONDITION_BRAINWASH, tc) = 1
		}
		return
	}
	if ( _switch_val == SKILL_SPACT_SCAVENGE | _switch_sw ) {
		_switch_sw = 0
		if ( synccheck(tc, -1) ) {
			txt lang(name(cc) + "ÇÕ" + name(tc) + "ÇÃÉoÉbÉNÉpÉbÉNÇãôÇ¡ÇΩÅB", name(cc) + " loot" + _s(cc) + " " + name(tc) + your(tc) + " backpack.")
		}
		p = -1
		inv_getheader tc
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 ) {
				continue
			}
			if ( inv(INV_ITEM_ID, cnt) == ITEM_ID_FISH ) {
				p = cnt
				break
			}
		loop
		if ( p == (-1) ) {
			inv_getheader tc
			repeat invrange, invhead
				if ( inv(INV_ITEM_NUM, cnt) == 0 ) {
					continue
				}
				if ( ibit(ITEM_BIT_PRECIOUS, cnt) ) {
					continue
				}
				if ( refitem(inv(INV_ITEM_ID, cnt), DBSPEC_TYPE) != FILTER_ITEM_FOOD ) {
					continue
				}
				p = cnt
				break
			loop
		}
		if ( p == (-1) ) {
			goto *effect_end
		}
		if ( rnd(sdata(SKILL_ATTR_PER, tc)) > rnd(sdata(SKILL_ATTR_STR, cc) * 4) | cbit(CHARA_BIT_RES_STEAL, tc) == 1 ) {
			txt lang(name(tc) + "ÇÕé©ï™ÇÃêHóøÇéÁÇ¡ÇΩÅB", name(tc) + " protect" + _s(tc) + " " + his(tc) + " food.")
			goto *effect_end
		}
		ci = p
		if ( ibit(ITEM_BIT_LOVE_BLEND, ci) ) {
			if ( synccheck(tc, -1) ) {
				txt lang(name(cc) + "ÇÕ" + itemname(ci, 1) + "ÇÃàŸèLÇ…ãCïtÇ´éËÇÇ–Ç¡Ç±ÇﬂÇΩÅB", name(cc) + " notice" + _s(cc) + " unusual odor from " + itemname(ci, 1) + " and step" + _s(cc) + " back.")
			}
			goto *effect_end
		}
		rowact_item ci
		if ( synccheck(tc, -1) ) {
			snd SOUNDLIST_EAT1
			txt lang(name(cc) + "ÇÕ" + itemname(ci, 1) + "ÇêHÇ◊ÇΩÅI", name(cc) + " eat" + _s(cc) + " " + itemname(ci, 1) + "!")
		}
		healhp cc, cdata(CDATA_MAX_HP, cc) / 3
		if ( cdata(CDATA_ALLIED, cc) != 0 | cc == CHARA_PLAYER & (gdata(GDATA_AREA) == AREA_SHOW_HOUSE | gdata(GDATA_AREA) == AREA_PET_ARENA) ) {
			inv(INV_ITEM_NUM, ci)--
			chara_unequip ci
			if ( stat == 1 ) {
				r1 = cc
				gosub *charaRefresh
			}
		}
		else {
			gosub *insta_eat
		}
		gosub *calcBurdenPc
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_WIZARDS_HARVEST | _switch_sw ) {
		_switch_sw = 0
		animeload ANIMATION_BLOOD, tc
		repeat limit(4 + rnd(efp / 50 + 1), 1, 10)
			snd SOUNDLIST_PRAY1
			flt calcobjlv(efp / 10), calcfixlv(FIX_QUALITY_GREAT)
			dbid = 0
			dbid = ITEM_ID_GOLD_PIECE
			p = limit(400 + rnd(efp), 400, 800)
			if ( rnd(90) == 0 ) {
				dbid = ITEM_ID_PLATINUM_COIN
				p = 1
			}
			if ( rnd(50) == 0 ) {
				dbid = ITEM_ID_ANCIENT_BOOK
				p = 1
			}
			if ( rnd(200) == 0 ) {
				dbid = ITEM_ID_SMALL_MEDAL
				p = 1
			}
			if ( rnd(1500) == 0 ) {
				dbid = ITEM_ID_TREASURE_MAP
				p = 1
			}
			itemcreate -1, dbid, cdata(CDATA_X, cc), cdata(CDATA_Y, cc), p
			await 100
			redraw 1
		loop
		goto *effect_end
	}
	if ( _switch_val == SKILL_SPELL_4DIM_POCKET | _switch_sw ) {
		_switch_sw = 0
		snd SOUNDLIST_TELEPORT1
		if ( gdata(GDATA_TEMPORARY_FLAGS3) != 104 ) {
			txt lang("Ç†Ç»ÇΩÇÕéléüå≥ÇÃÉ|ÉPÉbÉgÇè¢ä´ÇµÇΩÅB", "You summon a 4-dimensional pocket.")
		}
		else {
			txt lang("ãæÇ™éléüå≥Ç…Ç¬Ç»Ç™Ç¡ÇΩÅB", "The mirror led to the 4th dimension.")
			gdata(GDATA_TEMPORARY_FLAGS3) = 0
		}
		invfile = 8
		file = "shoptmp.s2"
		fmode = 4
		gosub *game_ctrlFile
		file = "shop" + invfile + ".s2"
		existwrapper exedir + "tmp\\" + file
		if ( strsize != (-1) ) {
			fmode = 3
			gosub *game_ctrlFile
		}
		else {
			inv_getheader -1
			repeat invrange, invhead
				inv(INV_ITEM_NUM, cnt) = 0
			loop
		}
		shoptrade = 0
		menucycle = 1
		invsubroutine = 1
		invctrl = 22, 5
		invcontainer = limit(efp / 10 + 10, 10, 300)
		if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
			invcontainer = 4
		}
		mode = MODELIST_SHOP
		snd SOUNDLIST_INV
		gosub *com_inventory
		invcontainer = 0
		file = "shop" + invfile + ".s2"
		fmode = 4
		gosub *game_ctrlFile
		file = "shoptmp.s2"
		fmode = 3
		gosub *game_ctrlFile
		mode = MODELIST_MAIN
		goto *effect_end
	}
*effect_end
	ci = efcibk
	efstatus = 0
	efsource = 0
	return 1

*effect_heal
	subloop = 1
	if ( gdata(GDATA_RIDER) != 0 ) {
		if ( tc == gdata(GDATA_RIDER) | tc == CHARA_PLAYER ) {
			subloop = 2
			if ( tc == gdata(GDATA_RIDER) ) {
				tc(1) = 0
			}
			else {
				tc(1) = gdata(GDATA_RIDER)
			}
		}
	}
	if ( cdatan(CDATAN_CLASS, cc) == "priest" ) {
		hh = 25
	}
	else {
		hh = 0
	}
	if ( cdata(CDATA_SHIFT_FORM, cc) == SHIFT_FORM_DELTA ) {
		hh += 25
	}
	iyasi = role(dice1, dice2, bonus) * (100 + hh) / 100 + cdata(CDATA_MAX_HP, tc) / 50
	repeat subloop
		healhp tc(cnt), iyasi
		healcon tc(cnt), CONDITION_FEAR
		healcon tc(cnt), CONDITION_POISON, 50
		healcon tc(cnt), CONDITION_CONFUSE, 50
		healcon tc(cnt), CONDITION_DIM, 30
		healcon tc(cnt), CONDITION_BLEED, 20
		healsan tc(cnt), 1
	loop
	return

*effect_directive
	signal = 0
	item_find ITEM_ID_VERY_PISTOL_OF_MANI, 3, 1
	if ( stat != (-1) ) {
		ci = stat
		if ( inv(INV_ITEM_NUM, ci) >= 1 ) {
			signal = 100
		}
	}
	allyctrl = 6
	gosub *com_ally
	if ( stat != (-1) ) {
		tc = stat
		if ( signal == 0 ) {
			dx = cdata(CDATA_X, tc)
			dy = cdata(CDATA_Y, tc)
			if ( dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
				snd SOUNDLIST_FAIL1
				txt lang("îÕàÕäOÇæÅB", "Out of range.")
				goto *effect_directive
			}
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
				snd SOUNDLIST_FAIL1
				txt lang("îÕàÕäOÇæÅB", "Out of range.")
				goto *effect_directive
			}
		}
		txt lang("íáä‘Ç…Ç«ÇÒÇ»éwé¶ÇèoÇªÇ§Ç©ÅB", "Which instruction should I give my allies?")
		txtsettactical 12
		repeat 12
			promptAdd s(cnt), key_select(cnt)
		loop
		val = promptx, prompty, 220, 0
		gosub *prompt_key
		if ( rtval == 11 ) {
			if ( signal == 100 ) {
				signal = 0
				return 0
			}
			else {
				return
			}
		}
		if ( rtval == 0 ) {
			goto *effect_directive
		}
		if ( rtval == 1 ) {
			cdata(CDATA_DIRECTIVE_MODE, tc) = DIRECTIVE_MODE_OFFENSIVE
		}
		if ( rtval == 2 ) {
			cdata(CDATA_DIRECTIVE_MODE, tc) = DIRECTIVE_MODE_DEFENSIVE
		}
		if ( rtval == 3 ) {
			cdata(CDATA_DIRECTIVE_MODE, tc) = DIRECTIVE_MODE_INTERCEPT
		}
		if ( rtval == 4 ) {
			cdata(CDATA_DIRECTIVE_MODE, tc) = DIRECTIVE_MODE_TALKING
		}
		if ( rtval <= 3 ) {
			if ( cdata(CDATA_DIRECTIVE_MODE, tc) == DIRECTIVE_MODE_OFFENSIVE ) {
				txtef COLOR_RED
				txt lang(cdatan(CDATAN_NAME, tc) + "ÇÕìÀåÇÇÃë‘ê®Ç…ì¸Ç¡ÇΩÅI", name(tc) + " switched to offensive mode!")
			}
			if ( cdata(CDATA_DIRECTIVE_MODE, tc) == DIRECTIVE_MODE_DEFENSIVE ) {
				txtef COLOR_BLUE
				txt lang(cdatan(CDATAN_NAME, tc) + "ÇÕñhå‰ÇÃë‘ê®Ç…ì¸Ç¡ÇΩÅI", name(tc) + " switched to defensive mode!")
			}
			if ( cdata(CDATA_DIRECTIVE_MODE, tc) == DIRECTIVE_MODE_INTERCEPT ) {
				txtef COLOR_YELLOW
				txt lang(cdatan(CDATAN_NAME, tc) + "ÇÕå}åÇÇÃë‘ê®Ç…ì¸Ç¡ÇΩÅI", name(tc) + " switched to intercept mode!")
			}
			if ( cdata(CDATA_DIRECTIVE_MODE, tc) == DIRECTIVE_MODE_TALKING ) {
				txtef COLOR_GREEN
				txt lang(cdatan(CDATAN_NAME, tc) + "ÇÕåè¬ÇÃë‘ê®Ç…ì¸Ç¡ÇΩÅI", name(tc) + " switched to talking mode!")
			}
		}
		if ( rtval >= 5 & rtval <= 10 ) {
			f = 0
			repeat MAX_EQUIP_SLOT_TOTAL
				body = CDATA_STARTING_EQUIP_SLOTS + cnt
				if ( cdata(body, tc) \ EXT_EQUIP_SLOTS == 0 ) {
					continue
				}
				if ( cdata(body, tc) / EXT_EQUIP_SLOTS == EQUIP_SLOT_AMMO ) {
					ci = cdata(body, tc) \ EXT_EQUIP_SLOTS - 1
					f = 1
					break
				}
			loop
			if ( f == 0 ) {
				snd SOUNDLIST_FAIL1
				txt lang(cdatan(CDATAN_NAME, tc) + "ÇÕñÓíeÇëïîıÇµÇƒÇ¢Ç»Ç¢ÅB", "You need to equip ammo.")
				goto *effect_directive
			}
			if ( rtval == 5 ) {
				inv(INV_ITEM_AMMO, ci) = -1
				s = lang("í èÌíe", "Normal"), lang("ñ≥å¿", "Unlimited")
				snd SOUNDLIST_AMMO
				txtef COLOR_GREEN
				txt lang(cdatan(CDATAN_NAME, tc) + "ÇÕ" + s + "Ç…êÿÇËë÷Ç¶ÇΩÅB", "Current Ammo Type")
			}
			else {
				if ( rtval == 6 ) {
					amp = ENCHANT_AMMO_BURST
				}
				if ( rtval == 7 ) {
					amp = ENCHANT_AMMO_MAGIC
				}
				if ( rtval == 8 ) {
					amp = ENCHANT_AMMO_PIERCING
				}
				if ( rtval == 9 ) {
					amp = ENCHANT_AMMO_EXPLOSIVE
				}
				if ( rtval == 10 ) {
					amp = ENCHANT_AMMO_RAPID
				}
				change = 0
				repeat RANGE_INV_ITEM_ENCHANT
					if ( inv(STARTING_INV_ITEM_ENCHANT + cnt * 2, ci) == 0 ) {
						break
					}
					enc = inv(STARTING_INV_ITEM_ENCHANT + cnt * 2, ci)
					i = enc / EXT_ENCHANTMENT
					if ( i != 0 ) {
						enc = enc \ EXT_ENCHANTMENT
						if ( i == ENCHANT_AMMO ) {
							if ( inv(STARTING_INV_ITEM_ENCHANT + cnt * 2, ci) \ EXT_ENCHANTMENT == amp ) {
								inv(INV_ITEM_AMMO, ci) = cnt
								change = 1
								break
							}
						}
					}
				loop
				if ( change == 0 ) {
					snd SOUNDLIST_FAIL1
					txt lang(cdatan(CDATAN_NAME, tc) + "ÇÃñÓíeÇÕÇªÇÃêÿë÷Ç…ëŒâûÇµÇƒÇ¢Ç»Ç¢ÅB", itemname(ci) + " isn't capable of using that ammo.")
					goto *effect_directive
				}
				snd SOUNDLIST_AMMO
				change = 0
				i = inv(STARTING_INV_ITEM_ENCHANT + inv(INV_ITEM_AMMO, ci) * 2 + 1, ci) \ EXT_ENCHANTMENT_AMMO, inv(STARTING_INV_ITEM_ENCHANT + inv(INV_ITEM_AMMO, ci) * 2 + 1, ci) / EXT_ENCHANTMENT_AMMO
				s = ammoname(amp), "" + i + "/" + i(1)
				s = s + ":" + s(1)
				txtef COLOR_GREEN
				txt lang(cdatan(CDATAN_NAME, tc) + "ÇÕ" + s + "Ç…êÿÇËë÷Ç¶ÇΩÅB", "Current Ammo Type")
			}
		}
		goto *effect_directive
	}
	if ( signal == 100 ) {
		signal = 0
		return 0
	}
	return

*effect_elixer
	cdata(CDATA_CONDITION_MPOISON, tc) = 0
	cdata(CDATA_CONDITION_POISON, tc) = 0
	cdata(CDATA_CONDITION_SLEEP, tc) = 0
	cdata(CDATA_CONDITION_CONFUSE, tc) = 0
	cdata(CDATA_CONDITION_BLIND, tc) = 0
	cdata(CDATA_CONDITION_PARALYZE, tc) = 0
	cdata(CDATA_CONDITION_SUFFOCATION, tc) = 0
	cdata(CDATA_CONDITION_DIM, tc) = 0
	cdata(CDATA_CONDITION_FEAR, tc) = 0
	cdata(CDATA_CONDITION_DRUNK, tc) = 0
	cdata(CDATA_CONDITION_BLEED, tc) = 0
	cdata(CDATA_CONDITION_ATROPHY, tc) = 0
	cdata(CDATA_CONDITION_BIND, tc) = 0
	cdata(CDATA_CONDITION_OIL, tc) = 0
	if ( cdata(CDATA_CONDITION_BRAINWASH, tc) > 1 ) {
		cdata(CDATA_CONDITION_BRAINWASH, tc) = 1
	}
	gdata(GDATA_SLEEP) = 0
	cdata(CDATA_HP, tc) = cdata(CDATA_MAX_HP, tc)
	cdata(CDATA_MP, tc) = cdata(CDATA_MAX_MP, tc)
	cdata(CDATA_SP, tc) = cdata(CDATA_MAX_SP, tc)
	return

