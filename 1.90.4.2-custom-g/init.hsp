#include "defines\\mod.hsp"

// Macros
#define global nullstr 

#define cfgRead(%1,%2,%3=nullstr) \
if instr(s,0,%1)!-1{	%c\
	i=0:p=0	%c\
	repeat	%c\
	p(2)=instr(s,p,"\"") : if p(2)=-1:break	%c\
	p+=p(2)	%c\
	p(1)=instr(s,p+1,"\"") : if p(1)=-1:break	%c\
	rtvaln(i)=strmid(s,p+1,p(1)):p+=strlen(rtvaln(i))+2	%c\
	i++		%c\
	loop	%c\
	%2:%3:continue}

#define global promptYesNo(%1=160,%2=1,%3=prompty) promptl(0,0)=stryes,"y","0"\
	:promptl(0,1)=strno,"n","1"\
	:promptmax=2:val=promptx,%3,%1,%2:gosub *prompt_key

#define global promptOk(%1=200,%2=1,%3=prompty) promptl(0,0)=lang("オッケー","Ok"),"y","0"\
	:promptmax=1:val=promptx,%3,%1,%2:gosub *prompt_key

#define global promptAdd(%1,%2="null",%3=promptmax) promptl(0,promptmax)=%1,%2,""+%3:promptmax++

#define global page_check cs_bk=-1:pagemax=(listmax-1)/pagesize:if page<0:page=pagemax:else:if page>pagemax:page=0

#define global page_change(%1,%2=SOUNDLIST_POP1)	\
	if key=key_pageup	:if pagemax!0:snd %2:page++:goto %1%c\
	if key=key_pagedown	:if pagemax!0:snd %2:page--:goto %1%c

#define setCom(%1,%2="") list(0,listmax)=listmax:listn(0,listmax)=%1,%2:listmax++

#define global txt(%1,%2="",%3="",%4="",%5="",%6="",%7="",%8="",%9="") \
	:txtvalid=0:txtc=1+(%2!"")+(%3!"")+(%4!"")+(%5!"")+(%6!"")+(%7!"")+(%8!"")+(%9!"") \
	:txtc=rnd(txtc):txt_select %1,%2,%3,%4,%5,%6,%7,%8,%9:tcol@txtfunc=255,255,255

#define chatList(%1,%2) list(0,listmax)=%1 : listn(0,listmax)=%2 : listmax++
#define chatMore(%1,%2=strmore,%3=0) listmax=0:buff=%1:tc=tc*(%3=0)+(%3!0)*%3:chatList 0,%2:chatesc=1:gosub *chat_select :if scenemode:if scene_cut=1 : goto *chat_end

#deffunc netload str netload_filename
	netrequest netload_filename
	repeat
		netexec locvar_netload_res
		if ( locvar_netload_res ) {
			break
		}
		await 50
	loop
	if ( locvar_netload_res > 0 ) {
		return
	}
	neterror locvar_netload_estr
	dialog lang("エラー:", "Error:") + locvar_netload_estr
	return

/********** ANNA CUSTOM - BEGINNING **********/

#defcfunc xy2pic int xy2pic_x, int xy2pic_y
	return (xy2pic_x \ 33) + (xy2pic_y * 33)

*PetMenu
	redraw 0
	s = "Pet Configuration", strhint3b
	display_window (windoww - 680) / 2 + inf_screenx, winposy(500, 1) + 20, 680, 500
	s = "Choose an option"
	gosub *screen_drawMsg2

	listn(0, 0) = "Customize AI"
	listn(0, 1) = "Other Settings"
	listn(0, 2) = "Exit"
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0

	repeat 3
		key_list(cnt) = key_select(cnt)
		keyrange = cnt + 1
		pos wx + 38, wy + 385 + cnt * 19 - 2
		gcopy 3, cnt * 24 + 72, 30, 24, 18
		cs_list listn(0, cnt), wx + 64, wy + 385 + cnt * 19 - 1, 19
	loop

	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	if ( listn(0, cs) == listn(0, 0) ) {
		s = "Change your pet's AI."
		pos wx + 38, wy + 359
		mes s
	}
	if ( listn(0, cs) == listn(0, 1) ) {
		s = "Choose other options."
		pos wx + 38, wy + 359
		mes s
	}
	if ( listn(0, cs) == listn(0, 2) ) {
		s = "Exit the menu."
		pos wx + 38, wy + 359
		mes s
	}
	cs_bk = cs
	redraw 1
	await cfg_wait1
	key_check
	cursor_check
	if ( key == key_select(0) ) {
		cs = 0
		goto *AIMainMenu
	}
	if ( key == key_select(1) ) {
		cs = 0
		goto *PetOptionMenu
	}
	if ( key == key_select(2) ) {
		goto *chat_end
	}
	if ( key == key_cancel ) {
		goto *chat_end
	}
	goto *PetMenu
	return

*PetOptionMenu
	redraw 0
	s = "Pet Configuration", strhint3b
	display_window (windoww - 680) / 2 + inf_screenx, winposy(500, 1) + 20, 680, 500
	s = "Choose an option"
	gosub *screen_drawMsg2

	if ( CustomVal(0, tc) == 0 ) {
		listn(0, 0) = "Eat items from your bag."
	}
	if ( CustomVal(0, tc) == 1 ) {
		listn(0, 0) = "Don't eat items from your bag."
	}
	listn(0, 1) = "Exit"
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0

	repeat 2
		key_list(cnt) = key_select(cnt)
		keyrange = cnt + 1
		pos wx + 38, wy + 385 + cnt * 19 - 2
		gcopy 3, cnt * 24 + 72, 30, 24, 18
		cs_list listn(0, cnt), wx + 64, wy + 385 + cnt * 19 - 1, 19
	loop

	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	cs_bk = cs
	redraw 1
	await cfg_wait1
	key_check
	cursor_check
	if ( key == key_select(0) ) {
		tn = 0
		gosub *ToggleSetting
	}
	if ( key == key_select(1) ) {
		goto *chat_end
	}
	if ( key == key_cancel ) {
		goto *chat_end
	}
	goto *PetOptionMenu
	return

*ToggleSetting
	if ( CustomVal(tn, tc) == 0 ) {
		CustomVal(tn, tc) = 1
	}
	else {
		CustomVal(tn, tc) = 0
	}
	return

/********** ANNA CUSTOM - ENDING **********/

#defcfunc hantozen str hantozen_arg1, var hantozen_arg2, int hantozen_arg3
	return LCMapStringA(GetUserDefaultLCID(), 8388608, hantozen_arg1, -1, hantozen_arg2, hantozen_arg3)

#defcfunc zentohan str zentohan_arg1, var zentohan_arg2, int zentohan_arg3
	return LCMapStringA(GetUserDefaultLCID(), 4194304, zentohan_arg1, -1, zentohan_arg2, zentohan_arg3)

#deffunc tmset
	timeBeginPeriod 1
	return

#deffunc tmend
	timeEndPeriod 1
	return

#defcfunc lang str lang_jp, str lang_en
	if ( jp ) {
		return lang_jp
	}
	else {
		return lang_en
	}

#defcfunc cnvrank int cnvrank_rank
	if ( jp ) {
		return "" + cnvrank_rank
	}
	if ( cnvrank_rank \ 10 == 1 ) {
		if ( cnvrank_rank != 11 ) {
			return "" + cnvrank_rank + "st"
		}
	}
	if ( cnvrank_rank \ 10 == 2 ) {
		if ( cnvrank_rank != 12 ) {
			return "" + cnvrank_rank + "nd"
		}
	}
	if ( cnvrank_rank \ 10 == 3 ) {
		if ( cnvrank_rank != 13 ) {
			return "" + cnvrank_rank + "rd"
		}
	}
	return "" + cnvrank_rank + "th"

#defcfunc cnvtalk str cnvtalk_str
	return "\"" + cnvtalk_str + "\" "

#defcfunc cnvarticle str cnvarticle_str
	if ( jp ) {
		return cnvarticle_str
	}
	return "[" + cnvarticle_str + "]"

#defcfunc cnvitemname int cnvitemname_itemid
	if ( cnvitemname_itemid == ITEM_ID_WILD_FLOWER ) {
		return iknownnameref(cnvitemname_itemid)
	}
	if ( jp ) {
		return ioriginalnameref(cnvitemname_itemid)
	}
	if ( ioriginalnameref2(cnvitemname_itemid) == "" ) {
		return ioriginalnameref(cnvitemname_itemid)
	}
	return ioriginalnameref2(cnvitemname_itemid) + " of " + ioriginalnameref(cnvitemname_itemid)

#defcfunc cnven str cnven_str
	if ( jp ) {
		return cnven_str
	}
	locvar_cnven_s = cnven_str
	locvar_cnven_p = peek(locvar_cnven_s, 0)
	if ( locvar_cnven_p == 42 ) {
		locvar_cnven_p = peek(locvar_cnven_s, 1)
		if ( locvar_cnven_p >= 97 ) {
			if ( locvar_cnven_p <= 122 ) {
				poke locvar_cnven_s, 1, locvar_cnven_p - 32
			}
		}
	}
	else {
		if ( locvar_cnven_p >= 97 ) {
			if ( locvar_cnven_p <= 122 ) {
				poke locvar_cnven_s, 0, locvar_cnven_p - 32
			}
		}
	}
	return locvar_cnven_s

#defcfunc cbit int cbit_bit, int cbit_charid
	HMMBITCHECK cdata(STARTING_CDATA_CHARA_BIT + cbit_bit / 32, cbit_charid), cbit_bit \ 32
	return abs(stat)

#deffunc cbitmod int cbitmod_bit, int cbitmod_charid, int cbitmod_seton
	if ( cbitmod_seton == 0 ) {
		HMMBITOFF cdata(STARTING_CDATA_CHARA_BIT + cbitmod_bit / 32, cbitmod_charid), cbitmod_bit \ 32
		return
	}
	HMMBITON cdata(STARTING_CDATA_CHARA_BIT + cbitmod_bit / 32, cbitmod_charid), cbitmod_bit \ 32
	return

#defcfunc refchara int refchara_dbid, int refchara_dbspec, int refchara_charid
	dbmode = DBMODE_REF_SPEC
	dbid = refchara_dbid
	dbspec = refchara_dbspec
	gosub *db_creature
	if ( refchara_charid == CHARA_PLAYER ) {
		return stat
	}
	else {
		return refstr
	}

#defcfunc refclass int refclass_dbid, int refclass_dbspec
	dbmode = DBMODE_REF_SPEC
	dbidn = cdatan(CDATAN_CLASS, refclass_dbid)
	dbspec = refclass_dbspec
	gosub *db_class
	return stat

#defcfunc refrace str refrace_dbidn, int refrace_dbspec
	dbmode = DBMODE_REF_SPEC
	dbidn = refrace_dbidn
	dbspec = refrace_dbspec
	gosub *db_race
	return stat

#defcfunc ranktitle int ranktitle_rank
	locvar_ranktitle_p = gdata(ranktitle_rank + 120) / 100
	if ( locvar_ranktitle_p == 1 ) {
		return rankn(0, ranktitle_rank)
	}
	if ( locvar_ranktitle_p <= 5 ) {
		return rankn(1, ranktitle_rank)
	}
	if ( locvar_ranktitle_p <= 10 ) {
		return rankn(2, ranktitle_rank)
	}
	if ( locvar_ranktitle_p <= 80 ) {
		return rankn(locvar_ranktitle_p / 15 + 3, ranktitle_rank)
	}
	return rankn(9, ranktitle_rank)

*rank_init
	sdim rankn, 30, 11, 9
	rankn(0, 0) = lang("アリーナのチャンピオン", "Arena champion"), lang("アリーナの超エリート闘士", "Super elite gladiator"), lang("アリーナのスター闘士", "Star gladiator"), lang("アリーナのエリート闘士", "Elite gladiator"), lang("アリーナの熟練闘士", "Veteran gladiator"), lang("アリーナの中堅闘士", "Popular gladiator"), lang("アリーナの期待の星", "New hope"), lang("アリーナのダークホース", "Darkhorse"), lang("アリーナの下級闘士", "Low class fighter"), lang("アリーナの無名の闘士", "Unknown fighter"), lang("アリーナ", "Arena")
	rankn(0, 1) = lang("全てのペットの王", "King of tamer"), lang("超エリートペット使い", "Super elite tamer"), lang("ペットの王子", "Prince of animals"), lang("ペットの憧れの的", "Chief of animals"), lang("ペット使いのエリート", "Elite tamer"), lang("名の知れたペット使い", "Notorious tamer"), lang("ペットの母", "New hope"), lang("なかなかのペット使い", "Average tamer"), lang("駆け出しのペット使い", "Petty tamer"), lang("無名のペット使い", "Unknown tamer"), lang("ペットアリーナ", "Pet Arena")
	rankn(0, 2) = lang("ネフィアを統べる者", "King of Nefia"), lang("迷宮の覇者", "Champion of labyrinth"), lang("ダンジョンの主", "Dungeon master"), lang("高名な探検者", "Famous adventurer"), lang("子供達の憧れの的", "Children's star"), lang("ダンジョン案内人", "Guide of Nefia"), lang("名の知れた遺跡荒らし", "Notorious tomb robber"), lang("探検者", "Tomb robber"), lang("ちんけな遺跡荒らし", "Famous tourist"), lang("観光客", "Tourist"), lang("クローラー", "Crawler")
	rankn(0, 3) = lang("ティリス最大の博物館", "Tyris' greatest museum"), lang("超有名な博物館", "Royal museum"), lang("大人気の博物館", "Great museum"), lang("有名な博物館", "Top museum"), lang("来客の絶えない博物館", "Great museum"), lang("ちょっと人気のある博物館", "Good museum"), lang("名の知れた博物館", "Average museum"), lang("まあまあの博物館", "Small museum"), lang("来客の少ない博物館", "Unknown museum"), lang("無名の博物館", "Unknown Ruin"), lang("博物館", "Museum")
	rankn(0, 4) = lang("イルヴァの楽園", "Heaven of Tyris"), lang("超セレブな家", "Royal mansion"), lang("世界有数の家", "Celebrity mansion"), lang("とても住みたくなる家", "Dream mansion"), lang("主婦の憧れの家", "Cozy mansion"), lang("ちょっと人目をひく家", "Attractive house"), lang("まあまあの家", "Average house"), lang("少しみすぼらしい家", "Poor house"), lang("貧困にあえぐ家", "Peasant's shack"), lang("乞食の家", "Beggar's shack"), lang("ホーム", "Home")
	rankn(0, 5) = lang("イルヴァ最大の店", "Tyris' greatest mall"), lang("王様が来る店", "Royal mall"), lang("大繁盛している店", "Prosperous mall"), lang("セレブが来る店", "Celebrity shop"), lang("来客の絶えない店", "Prosperous shop"), lang("マダムの来る店", "Popular shop"), lang("リピーターのいる店", "Average shop"), lang("人が増えてきた売店", "Small shop"), lang("ほとんど売れない売店", "Souvenir shop"), lang("無名の売店", "Unknown shop"), lang("店", "Shop")
	rankn(0, 6) = lang("ボス", "Boss"), lang("王様のアドバイザー", "King's advisor"), lang("エリートコンサルター", "Elite consultant"), lang("ご意見番", "Famous consultant"), lang("有権者の鑑", "Model voter"), lang("マダム好みの有権者", "Nice voter"), lang("名の知れた有権者", "Infamous voter"), lang("普通の有権者", "Average voter"), lang("無関心な有権者", "Indifferent voter"), lang("ぎりぎり有権者", "Almost voter"), lang("コミュニティ", "Community")
	rankn(0, 8) = lang("次代ギルドマスター", "Next master"), lang("ギルドマスターの右腕", "Master"), lang("ギルドの重役", "Adept"), lang("ギルドの重役候補", "Expert"), lang("アダプト", "Journeyman"), lang("エキスパート", "Senior"), lang("ジャーニーマン", "Apprentice"), lang("ギルドの正式メンバー", "Official member"), lang("ギルドのメンバー候補", "Candidate"), lang("見習い", "Thug"), lang("ギルド", "Guild")
	dim ranknorma, 9
	ranknorma(0) = 20
	ranknorma(1) = 60
	ranknorma(2) = 45
	ranknorma(6) = 30
	return

#defcfunc guildname
	locvar_guildname_s = lang("なし", "None")
	if ( gdata(GDATA_FLAG_GUILD_MAGE) != 0 ) {
		locvar_guildname_s = lang("魔術士ギルド", "Mages Guild")
	}
	if ( gdata(GDATA_FLAG_GUILD_FIGHTER) != 0 ) {
		locvar_guildname_s = lang("戦士ギルド", "Fighters Guild")
	}
	if ( gdata(GDATA_FLAG_GUILD_THIEF) != 0 ) {
		locvar_guildname_s = lang("盗賊ギルド", "Thieves Guild")
	}
	return locvar_guildname_s

*politics_init
	sdim popostname, 20, 7
	popostname(1) = lang("市長", "mayor")
	popostname(2) = lang("村長", "chief")
	popostname(3) = lang("司祭", "priest")
	popostname(4) = lang("守衛長", "guard master")
	popostname(5) = lang("徴税官", "tax master")
	popostname(6) = lang("建設主任", "head architect")
	dim pochart, 10, 10, 10
	pochart(0, 0, 0) = 2
	pochart(0, 1, 0) = 3, 4
	pochart(0, 2, 0) = 5, 6
	dim podata, 300, 20
	return

*building_init
	dim bddata, 40, 20, 10
	dim bdref, 10, 7
	sdim bdrefn, 20, 7
	bdref(0, 1) = 0, 1500
	bdref(0, 2) = 1, 2500
	bdref(0, 3) = 2, 2500
	bdref(0, 4) = 3, 2500
	bdref(0, 5) = 4, 2500
	bdref(0, 6) = 5, 2500
	bdrefn(1) = lang("炭鉱", "Mine")
	bdrefn(2) = lang("畑", "Field")
	bdrefn(3) = lang("アトリエ", "Art Atelier")
	bdrefn(4) = lang("寺院", "Temple")
	bdrefn(5) = lang("盗賊の隠れ家", "Smuggler's Hideout")
	bdrefn(6) = lang("灯台", "Light House")
	return

*bRefDefine
	dim bdataref, 7, MAX_BUFF
	sdim buffname, 20, MAX_BUFF
	sdim bufftxt, 30, 2, MAX_BUFF
	sdim buffdesc, 200
	bdataref(0, BUFF_HOLY_SHIELD) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_HOLY_SHIELD) = lang("聖なる盾", "Holy Shield")
	bufftxt(0, BUFF_HOLY_SHIELD) = lang("は光り輝いた。", " begin"), " to shine."

	bdataref(0, BUFF_MIST_OF_SILENCE) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_MIST_OF_SILENCE) = lang("沈黙の霧", "Mist of Silence")
	bufftxt(0, BUFF_MIST_OF_SILENCE) = lang("はぼやけた霧に覆われた。", " get"), " surrounded by a hazy mist."

	bdataref(0, BUFF_REGENERATION) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_REGENERATION) = lang("リジェネレーション", "Regeneration")
	bufftxt(0, BUFF_REGENERATION) = lang("の代謝が活性化した。", " start"), " to regenerate."

	bdataref(0, BUFF_ATTRIBUTE_SHIELD) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_ATTRIBUTE_SHIELD) = lang("属性保護", "Attribute Shield")
	bufftxt(0, BUFF_ATTRIBUTE_SHIELD) = lang("は属性への耐性を得た。", " gain"), " resistance to attributes."

	bdataref(0, BUFF_SPEED) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_SPEED) = lang("加速", "Speed")
	bufftxt(0, BUFF_SPEED) = lang("は機敏になった。", " speed"), " up."

	bdataref(0, BUFF_SLOW) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_SLOW) = lang("鈍足", "Slow")
	bufftxt(0, BUFF_SLOW) = lang("は鈍重になった。", " slow"), " down."

	bdataref(0, BUFF_HERO) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_HERO) = lang("英雄", "Hero")
	bufftxt(0, BUFF_HERO) = lang("の士気が向上した。", " feel"), " heroic."

	bdataref(0, BUFF_MIST_OF_FRAILNESS) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_MIST_OF_FRAILNESS) = lang("脆弱の霧", "Mist of Frailness")
	bufftxt(0, BUFF_MIST_OF_FRAILNESS) = lang("は脆くなった。", " feel"), " weak."

	bdataref(0, BUFF_ELEMENT_SCAR) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_ELEMENT_SCAR) = lang("元素の傷跡", "Element Scar")
	bufftxt(0, BUFF_ELEMENT_SCAR) = lang("は元素への耐性を失った。", " lose"), " resistance to elements."

	bdataref(0, BUFF_HOLY_VEIL) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_HOLY_VEIL) = lang("ホーリーヴェイル", "Holy Veil")
	bufftxt(0, BUFF_HOLY_VEIL) = lang("は聖なる衣に保護された。", " receive"), " holy protection."

	bdataref(0, BUFF_NIGHTMARE) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_NIGHTMARE) = lang("ナイトメア", "Nightmare")
	bufftxt(0, BUFF_NIGHTMARE) = lang("は悪夢に襲われた。", " start"), " to suffer."

	bdataref(0, BUFF_DIVINE_WISDOM) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_DIVINE_WISDOM) = lang("知者の加護", "Divine Wisdom")
	bufftxt(0, BUFF_DIVINE_WISDOM) = lang("の思考は冴え渡った。", " start"), " to think clearly."

	bdataref(0, BUFF_PUNISHMENT) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_PUNISHMENT) = lang("天罰", "Punishment")
	bufftxt(0, BUFF_PUNISHMENT) = lang("は雷に打たれた！", " incur"), " the wrath of the gods."

	bdataref(0, BUFF_LULWYS_TRICK) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_LULWYS_TRICK) = lang("ルルウィの憑依", "Lulwy's Trick")
	bufftxt(0, BUFF_LULWYS_TRICK) = lang("にルルウィが乗り移った。", " repeat"), " the name of Lulwy."

	bdataref(0, BUFF_INCOGNITO) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_INCOGNITO) = lang("インコグニート", "Incognito")
	bufftxt(0, BUFF_INCOGNITO) = lang("は別人になりすました。", " start"), " to disguise."

	bdataref(0, BUFF_DEATH_WORD) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_DEATH_WORD) = lang("死の宣告", "Death Word")
	bufftxt(0, BUFF_DEATH_WORD) = lang("は死の宣告を受けた！", " receive"), " a death sentence."

	bdataref(0, BUFF_BOOST) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_BOOST) = lang("ブースト", "Boost")
	bufftxt(0, BUFF_BOOST) = lang("はブーストした！", " gain"), " massive power."

	bdataref(0, BUFF_CONTINGENCY) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_CONTINGENCY) = lang("契約", "Contingency")
	bufftxt(0, BUFF_CONTINGENCY) = lang("は死神と契約した。", " sign"), " a contract with the Reaper."

	bdataref(0, BUFF_LUCK) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_LUCK) = lang("幸運", "Luck")
	bufftxt(0, BUFF_LUCK) = lang("に幸運な日が訪れた！", " feel"), " very lucky today!"

	bdataref(0, BUFF_GROW_STRENGTH) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_STRENGTH) = lang("筋力の成長", "Grow Strength")
	bufftxt(0, BUFF_GROW_STRENGTH) = lang("は筋力の成長期に突入した。", " enter"), " a period of rapid STR growth."

	bdataref(0, BUFF_GROW_CONSTITUTION) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_CONSTITUTION) = lang("耐久の成長", "Grow Constitution")
	bufftxt(0, BUFF_GROW_CONSTITUTION) = lang("は耐久の成長期に突入した。", " enter"), " a period of rapid CON growth."

	bdataref(0, BUFF_GROW_DEXTERITY) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_DEXTERITY) = lang("器用の成長", "Grow Dexterity")
	bufftxt(0, BUFF_GROW_DEXTERITY) = lang("は器用の成長期に突入した。", " enter"), " a period of rapid DEX growth."

	bdataref(0, BUFF_GROW_PERCEPTION) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_PERCEPTION) = lang("感覚の成長", "Grow Perception")
	bufftxt(0, BUFF_GROW_PERCEPTION) = lang("は感覚の成長期に突入した。", " enter"), " a period of rapid PER growth."

	bdataref(0, BUFF_GROW_LEARNING) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_LEARNING) = lang("習得の成長", "Grow Learning")
	bufftxt(0, BUFF_GROW_LEARNING) = lang("は習得の成長期に突入した。", " enter"), " a period of rapid LER growth."

	bdataref(0, BUFF_GROW_WILL) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_WILL) = lang("意志の成長", "Grow Will")
	bufftxt(0, BUFF_GROW_WILL) = lang("は意志の成長期に突入した。", " enter"), " a period of rapid WIL growth."

	bdataref(0, BUFF_GROW_MAGIC) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_MAGIC) = lang("魔力の成長", "Grow Magic")
	bufftxt(0, BUFF_GROW_MAGIC) = lang("は魔力の成長期に突入した。", " enter"), " a period of rapid MAG growth."

	bdataref(0, BUFF_GROW_CHARISMA) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_CHARISMA) = lang("魅力の成長", "Grow Charisma")
	bufftxt(0, BUFF_GROW_CHARISMA) = lang("は魅力の成長期に突入した。", " enter"), " a period of rapid CHR growth."

	bdataref(0, BUFF_GROW_SPEED) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_SPEED) = lang("速度の成長", "Grow Speed")
	bufftxt(0, BUFF_GROW_SPEED) = lang("は速度の成長期に突入した。", " enter"), " a period of rapid SPD growth."

	bdataref(0, BUFF_CLEAR_MIND) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_CLEAR_MIND) = lang("明鏡止水", "Clear Mind")
	bufftxt(0, BUFF_CLEAR_MIND) = lang("は己の心を研ぎ澄ました…。", " sharpen"), " the mind..."

	bdataref(0, BUFF_SUPER_REGEN) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_SUPER_REGEN) = lang("超再生", "Super Regen")
	bufftxt(0, BUFF_SUPER_REGEN) = lang("の体は超再生を始めた。", "'s body regenerate"), " quickly."

	bdataref(0, BUFF_FEATHER) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FEATHER) = lang("フェザー", "Feather")
	bufftxt(0, BUFF_FEATHER) = lang("の体が羽のように軽くなった。", "'s body become"), " as light as a feather."

	bdataref(0, BUFF_CHARGE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_CHARGE) = lang("チャージ", "Charge")
	bufftxt(0, BUFF_CHARGE) = lang("の力が最大限に達した。", " attain"), " full power."

	bdataref(0, BUFF_EMERGENCY_EVASION) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_EMERGENCY_EVASION) = lang("緊急回避", "Emergency Evasion")
	bufftxt(0, BUFF_EMERGENCY_EVASION) = lang("は装備の力を引き出した。", " bring"), " out the power of the armor."

	bdataref(0, BUFF_MAGIC_EQUIP) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_MAGIC_EQUIP) = lang("魔装", "Magic Equip")
	bufftxt(0, BUFF_MAGIC_EQUIP) = lang("は装備の力を引き出した。", " bring"), " out the power of the armor."

	bdataref(0, BUFF_SUPER_ARMOR) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_SUPER_ARMOR) = lang("超重装", "Super Armor")
	bufftxt(0, BUFF_SUPER_ARMOR) = lang("は装備の力を引き出した。", " bring"), " out the power of the armor."

	bdataref(0, BUFF_ATTRIBUTE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_ATTRIBUTE) = lang("アトリビウト", "Attribute")
	bufftxt(0, BUFF_ATTRIBUTE) = lang("は己の属性を纏った。", " wield"), " their own attributes."

	bdataref(0, BUFF_AUTO_GUARD) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_AUTO_GUARD) = lang("絶対防衛", "Auto Guard")
	bufftxt(0, BUFF_AUTO_GUARD) = lang("は仲間を庇う体勢に入った。", " take"), " a posture to better protect allies."

	bdataref(0, BUFF_QUICK_USE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_QUICK_USE) = lang("モーメント", "Quick Use")
	bufftxt(0, BUFF_QUICK_USE) = lang("は魔道具を瞬間的に使用する体勢に入った。", " take"), " a posture to quickly use devices."

	bdataref(0, BUFF_UNLUCKY) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_UNLUCKY) = lang("不幸", "Unlucky")
	bufftxt(0, BUFF_UNLUCKY) = lang("に不幸な日が訪れた！", " feel"), " very unlucky today..."

	bdataref(0, BUFF_RUN_WILDLY) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_RUN_WILDLY) = lang("暴走", "Run Wildly")
	bufftxt(0, BUFF_RUN_WILDLY) = lang("は暴走を始めた。", " begin"), " to run wildly."

	bdataref(0, BUFF_RETENTION) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_RETENTION) = lang("空間掌握", "Retention")
	bufftxt(0, BUFF_RETENTION) = lang("は周囲の空間を掌握した。", " stabilize"), " the space around."

	bdataref(0, BUFF_TAG_FORCE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_TAG_FORCE) = lang("タッグフォース", "Tag Force")
	bufftxt(0, BUFF_TAG_FORCE) = lang("は結束した。", " shine"), " with the tag partner."

	bdataref(0, BUFF_CONCENTRATION) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_CONCENTRATION) = lang("集中", "Concentration")
	bufftxt(0, BUFF_CONCENTRATION) = lang("の集中力が向上した。", " feel"), " concentrated."

	bdataref(0, BUFF_FORM_SHIFT_ALPHA) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FORM_SHIFT_ALPHA) = lang("フォルムシフト", "Form Shift (A)")
	bufftxt(0, BUFF_FORM_SHIFT_ALPHA) = lang("に変化した。", " change"), " form."

	bdataref(0, BUFF_FORM_SHIFT_BETA) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FORM_SHIFT_BETA) = lang("フォルムシフト", "Form Shift (B)")
	bufftxt(0, BUFF_FORM_SHIFT_BETA) = lang("に変化した。", " change"), " form."

	bdataref(0, BUFF_FORM_SHIFT_GAMMA) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FORM_SHIFT_GAMMA) = lang("フォルムシフト", "Form Shift (G)")
	bufftxt(0, BUFF_FORM_SHIFT_GAMMA) = lang("に変化した。", " change"), " form."

	bdataref(0, BUFF_FORM_SHIFT_DELTA) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FORM_SHIFT_DELTA) = lang("フォルムシフト", "Form Shift (D)")
	bufftxt(0, BUFF_FORM_SHIFT_DELTA) = lang("に変化した。", " change"), " form."

	bdataref(0, BUFF_FORM_SHIFT_OMEGA) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FORM_SHIFT_OMEGA) = lang("ファイナルシフト", "Final Shift")
	bufftxt(0, BUFF_FORM_SHIFT_OMEGA) = lang("に変化した。", " change"), " form."

	bdataref(0, BUFF_RESOLUTION_HAND) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_RESOLUTION_HAND) = lang("錬成掌", "Resolution Hand")
	bufftxt(0, BUFF_RESOLUTION_HAND) = lang("の手が光りだした。", "'s hand"), " shine."

	bdataref(0, BUFF_ABYSS_IN_THE_EYE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_ABYSS_IN_THE_EYE) = lang("瞳の奥の深淵", "Abyss in the eye")
	bufftxt(0, BUFF_ABYSS_IN_THE_EYE) = lang("の眼に深みが増した。", " represent"), " the abyss in own eye."

	bdataref(0, BUFF_SHIELD_PARRY) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_SHIELD_PARRY) = lang("シールドパリィ", "Shield Parry")
	bufftxt(0, BUFF_SHIELD_PARRY) = lang("は盾の力を引き出した。", " bring"), " out the power of the shield."

	bdataref(0, BUFF_GRAVITY_ACCEL) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_GRAVITY_ACCEL) = lang("重力偏向", "Gravity Accel")
	bufftxt(0, BUFF_GRAVITY_ACCEL) = lang("の重力の向きが変わった。", " accelerate"), " through gravity."

	bdataref(0, BUFF_HYPER_DASH) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_HYPER_DASH) = lang("烈走破", "Hyper Dash")
	bufftxt(0, BUFF_HYPER_DASH) = lang("は脚に力を込めた。", " put"), " power on the legs."

	bdataref(0, BUFF_BLACK_MIRROR) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_BLACK_MIRROR) = lang("黒曜鏡", "Black Mirror")
	bufftxt(0, BUFF_BLACK_MIRROR) = lang("はあなたの力を写し取った。", " copy"), " your power."

	bdataref(0, BUFF_GEM_POWER) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_GEM_POWER) = lang("守護石", "Gem Power")
	bufftxt(0, BUFF_GEM_POWER) = lang("は宝石の輝きを纏った。", " wear"), " the glow of gem."

	bdataref(0, BUFF_DISTRACTED) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_DISTRACTED) = lang("散漫", "Distracted")
	bufftxt(0, BUFF_DISTRACTED) = lang("は気が散り始めた。", " feel"), " distracted."

	bdataref(0, BUFF_MELANCHOLY) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_MELANCHOLY) = lang("鬱", "Melancholy")
	bufftxt(0, BUFF_MELANCHOLY) = lang("は鬱になった。", " became"), " melancholic."

	bdataref(0, BUFF_KILLING_DANCE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_KILLING_DANCE) = lang("死神の舞踏", "Killing Dance")
	bufftxt(0, BUFF_KILLING_DANCE) = lang("は戦闘動作を最適化した。", " optimize"), " the killing pattern."

	bdataref(0, BUFF_SHOOTING_MODE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_SHOOTING_MODE) = lang("シューティングモード", "Shooting Mode")
	bufftxt(0, BUFF_SHOOTING_MODE) = lang("は姿勢を固定した。", " shift"), " to shooting mode."

	bdataref(0, BUFF_DISINFECTION) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_DISINFECTION) = lang("ディスインフェクション", "Disinfection")
	bufftxt(0, BUFF_DISINFECTION) = lang("は汚染から守られた。", " receive"), " pollution protection."
	
	bdataref(0, BUFF_CURSE_OF_HUNGER) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_CURSE_OF_HUNGER) = lang("脆弱の霧", "Curse of Hunger")
	bufftxt(0, BUFF_CURSE_OF_HUNGER) = lang("は脆くなった。", " feel"), " hungry."

	return

#deffunc calcbuff int calcbuff_charid, int calcbuff_buffid, int calcbuff_power
	if ( calcbuff_buffid >= BUFF_GROW_STRENGTH & calcbuff_buffid <= BUFF_GROW_SPEED ) {
		dur = 10 + calcbuff_power / 10
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang(skillname(calcbuff_buffid - BUFF_GROW_STRENGTH + SKILL_ATTR_STR) + "の成長率を" + locvar_calcbuff_p + "%上昇", "Increases " + skillname(calcbuff_buffid - BUFF_GROW_STRENGTH + SKILL_ATTR_STR) + " growth rate by " + locvar_calcbuff_p + "%")
				return
			}
		}
		cdata(STARTING_CDATA_FOOD_EXP + (calcbuff_buffid - BUFF_GROW_STRENGTH + SKILL_ATTR_STR) - RANGE_CDATA_FOOD_EXP, calcbuff_charid) = locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_HOLY_SHIELD ) {
		dur = 20 + calcbuff_power / 15
		locvar_calcbuff_p = limit(25 + calcbuff_power / 8, 1, 1000)
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("PVを10%と" + locvar_calcbuff_p + "上昇/盾20%上昇/耐恐怖", "PV +10% and +" + locvar_calcbuff_p + "/Shield +20%/RES+ fear")
				return
			}
		}
		if ( cdata(CDATA_PV, calcbuff_charid) >= 10 ) {
			cdata(CDATA_PV, calcbuff_charid) += cdata(CDATA_PV, calcbuff_charid) / 10
		}
		cdata(CDATA_PV, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_FEAR, calcbuff_charid) = 0
		sdata(SKILL_NORMAL_SHIELD, calcbuff_charid) = sdata(SKILL_NORMAL_SHIELD, calcbuff_charid) * 12 / 10
		return
	}
	if ( calcbuff_buffid == BUFF_MIST_OF_SILENCE ) {
		dur = 5 + calcbuff_power / 40
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("魔法の使用を禁止", "Inhibits casting")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_REGENERATION ) {
		dur = limit(10 + calcbuff_power / 10, 11, 200)
		locvar_calcbuff_p = 30 + calcbuff_power / 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("体力、スタミナの回復強化", "Enhances regeneration")
				return
			}
		}
		sdata(SKILL_NORMAL_HEALING, calcbuff_charid) += locvar_calcbuff_p / 2
		return
	}
	if ( calcbuff_buffid == BUFF_SUPER_REGEN ) {
		dur = 5
		locvar_calcbuff_p = 2000
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("体力の超回復", "Enhances regeneration hard")
				return
			}
		}
		sdata(SKILL_NORMAL_HEALING, calcbuff_charid) += locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_ATTRIBUTE_SHIELD ) {
		dur = 10 + calcbuff_power / 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("火冷雷闇幻毒獄音神混耐性の獲得", "RES+ fire,cold,lightning,mind,nerve,nether,poison,sound,chaos,darkness")
				return
			}
		}
		sdata(SKILL_RES_FIRE, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_COLD, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_LIGHTNING, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_NERVE, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_MIND, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_NETHER, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_POISON, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_SOUND, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_CHAOS, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_DARKNESS, calcbuff_charid) += 80 + calcbuff_power / 20
		return
	}
	if ( calcbuff_buffid == BUFF_FORM_SHIFT_ALPHA ) {
		dur = 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("筋力・感覚の上昇/魔法反射", "Increases STR & PER/Magic Reflection")
				return
			}
		}
		sdata(SKILL_ATTR_STR, calcbuff_charid) = sdata(SKILL_ATTR_STR, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_PER, calcbuff_charid) = sdata(SKILL_ATTR_PER, calcbuff_charid) * 12 / 10 + 5
		cdata(CDATA_REFLECT_MAGIC, calcbuff_charid) += 40
		cdata(CDATA_SHIFT_FORM, calcbuff_charid) = SHIFT_FORM_ALPHA
	}
	if ( calcbuff_buffid == BUFF_FORM_SHIFT_BETA ) {
		dur = 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("器用・魔力・魔法耐性の上昇", "Increases DEX & MAG/RES+ magic")
				return
			}
		}
		sdata(SKILL_ATTR_DEX, calcbuff_charid) = sdata(SKILL_ATTR_DEX, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_MAG, calcbuff_charid) = sdata(SKILL_ATTR_MAG, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_RES_MAGIC, calcbuff_charid) += 120
		cdata(CDATA_SHIFT_FORM, calcbuff_charid) = SHIFT_FORM_BETA
	}
	if ( calcbuff_buffid == BUFF_FORM_SHIFT_GAMMA ) {
		dur = 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("速度・DVの上昇/部位減速無視", "Increases Speed & DV/Immunity to Speed reduction")
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) = sdata(SKILL_ATTR_SPD, calcbuff_charid) * 12 / 10 + 50
		if ( cdata(CDATA_DV, calcbuff_charid) > 0 ) {
			cdata(CDATA_DV, calcbuff_charid) = cdata(CDATA_DV, calcbuff_charid) * 12 / 10
		}
		cdata(CDATA_DV, calcbuff_charid) += 50
		cdata(CDATA_SHIFT_FORM, calcbuff_charid) = SHIFT_FORM_GAMMA
	}
	if ( calcbuff_buffid == BUFF_FORM_SHIFT_DELTA ) {
		dur = 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("耐久・PV・回復効果の上昇/ダメージ無効率上昇", "Increases CON & PV/Amplified Healing/Chance to nullify damage")
				return
			}
		}
		sdata(SKILL_ATTR_CON, calcbuff_charid) = sdata(SKILL_ATTR_CON, calcbuff_charid) * 12 / 10 + 5
		if ( cdata(CDATA_PV, calcbuff_charid) > 0 ) {
			cdata(CDATA_PV, calcbuff_charid) = cdata(CDATA_PV, calcbuff_charid) * 12 / 10
		}
		cdata(CDATA_PV, calcbuff_charid) += 50
		cdata(CDATA_IMMUNE_DAMAGE, calcbuff_charid) += 20
		cdata(CDATA_SHIFT_FORM, calcbuff_charid) = SHIFT_FORM_DELTA
	}
	if ( calcbuff_buffid == BUFF_FORM_SHIFT_OMEGA ) {
		dur = 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("能力と魔法耐性の上昇/HPMP消耗/ゲージ逓減オフ", "Attribute bonus & RES+ magic/Consumes HP & MP/Negates gauge depletion")
				return
			}
		}
		sdata(SKILL_ATTR_STR, calcbuff_charid) = sdata(SKILL_ATTR_STR, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_CON, calcbuff_charid) = sdata(SKILL_ATTR_CON, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_DEX, calcbuff_charid) = sdata(SKILL_ATTR_DEX, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_PER, calcbuff_charid) = sdata(SKILL_ATTR_PER, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_MAG, calcbuff_charid) = sdata(SKILL_ATTR_MAG, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_SPD, calcbuff_charid) = sdata(SKILL_ATTR_SPD, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_RES_MAGIC, calcbuff_charid) += 120
		cdata(CDATA_SHIFT_FORM, calcbuff_charid) = SHIFT_FORM_OMEGA
	}
	if ( calcbuff_buffid == BUFF_HYPER_DASH ) {
		dur = 30
		locvar_calcbuff_p = 5 + calcbuff_power / 30
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("押しのけ移動しつつ乗馬依存ダメージ", "Run through and riding attack")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_GRAVITY_ACCEL ) {
		locvar_calcbuff_p = calcbuff_power
		if ( locvar_calcbuff_p > 200 ) {
			locvar_calcbuff_p = 200
		}
		dur = 8 + calcbuff_power / 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("物理攻撃＋10％と物理防御＋5％と" + locvar_calcbuff_p + "の加速", "Attack +10%/Defense +5%/Speed +" + locvar_calcbuff_p)
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_SPEED ) {
		locvar_calcbuff_p = 50 + calcbuff_power / 10
		if ( locvar_calcbuff_p > 800 ) {
			locvar_calcbuff_p = 800
		}
		dur = 8 + calcbuff_power / 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("" + locvar_calcbuff_p + "の加速", "Speed +" + locvar_calcbuff_p)
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_SLOW ) {
		locvar_calcbuff_p = 20 + calcbuff_power / 5
		dur = 8 + calcbuff_power / 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("" + locvar_calcbuff_p + "の鈍足", "Speed -" + locvar_calcbuff_p)
				return
			}
		}
		if ( locvar_calcbuff_p > sdata(SKILL_ATTR_SPD, calcbuff_charid) / 2 ) {
			locvar_calcbuff_p = sdata(SKILL_ATTR_SPD, calcbuff_charid) / 2
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) -= locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_HERO ) {
		dur = 20 + calcbuff_power / 10
		locvar_calcbuff_p = 5 + calcbuff_power / 30
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("筋力・器用を10%と" + locvar_calcbuff_p + "上昇/耐恐怖/耐混乱", "STR & DEX +10% and +" + locvar_calcbuff_p + "/RES+ fear,confusion")
				return
			}
		}
		if ( sdata(SKILL_ATTR_STR, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_STR, calcbuff_charid) += sdata(SKILL_ATTR_STR, calcbuff_charid) / 10
		}
		if ( sdata(SKILL_ATTR_DEX, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_DEX, calcbuff_charid) += sdata(SKILL_ATTR_DEX, calcbuff_charid) / 10
		}
		sdata(SKILL_ATTR_STR, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_DEX, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_FEAR, calcbuff_charid) = 0
		cdata(CDATA_CONDITION_CONFUSE, calcbuff_charid) = 0
		return
	}
	if ( calcbuff_buffid == BUFF_SHOOTING_MODE ) {
		dur = 25
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("装備スキルで射撃力上昇/命中率上昇/不動", "Enhance shooting by equipped skill/Immobility")
				return
			}
		}
		cdata(CDATA_CONDITION_BIND, calcbuff_charid) = 25
		return
	}
	if ( calcbuff_buffid == BUFF_DISINFECTION ) {
		dur = 25
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("能力低下効果を一部無効化/耐毒", "Partially invalidates reduction effects/RES+ poison")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_GEM_POWER ) {
		dur = 20 + calcbuff_power / 10
		locvar_calcbuff_p = 5 + calcbuff_power / 30
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("耐久・魅力を10%と" + locvar_calcbuff_p + "上昇/耐麻痺/耐盲目", "CON & CHR +10% and +" + locvar_calcbuff_p + "/RES+ paralyze,blind")
				return
			}
		}
		if ( sdata(SKILL_ATTR_CON, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_CON, calcbuff_charid) += sdata(SKILL_ATTR_CON, calcbuff_charid) / 10
		}
		if ( sdata(SKILL_ATTR_CHA, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_CHA, calcbuff_charid) += sdata(SKILL_ATTR_CHA, calcbuff_charid) / 10
		}
		sdata(SKILL_ATTR_CON, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_CHA, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_PARALYZE, calcbuff_charid) = 0
		cdata(CDATA_CONDITION_BLIND, calcbuff_charid) = 0
		return
	}
	if ( calcbuff_buffid == BUFF_BLACK_MIRROR ) {
		dur = 200 + calcbuff_power / 10
		locvar_calcbuff_p = 5 + calcbuff_power / 30
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("能力の平均化", "Averaging")
				return
			}
		}
		sdata(SKILL_ATTR_STR, calcbuff_charid) = (sdata(SKILL_ATTR_STR, CHARA_PLAYER) + sdata(SKILL_ATTR_STR, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_CON, calcbuff_charid) = (sdata(SKILL_ATTR_CON, CHARA_PLAYER) + sdata(SKILL_ATTR_CON, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_DEX, calcbuff_charid) = (sdata(SKILL_ATTR_DEX, CHARA_PLAYER) + sdata(SKILL_ATTR_DEX, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_PER, calcbuff_charid) = (sdata(SKILL_ATTR_PER, CHARA_PLAYER) + sdata(SKILL_ATTR_PER, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_LER, calcbuff_charid) = (sdata(SKILL_ATTR_LER, CHARA_PLAYER) + sdata(SKILL_ATTR_LER, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_WIL, calcbuff_charid) = (sdata(SKILL_ATTR_WIL, CHARA_PLAYER) + sdata(SKILL_ATTR_WIL, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_MAG, calcbuff_charid) = (sdata(SKILL_ATTR_MAG, CHARA_PLAYER) + sdata(SKILL_ATTR_MAG, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_CHA, calcbuff_charid) = (sdata(SKILL_ATTR_CHA, CHARA_PLAYER) + sdata(SKILL_ATTR_CHA, calcbuff_charid)) / 2
		return
	}
	if ( calcbuff_buffid == BUFF_CONCENTRATION ) {
		dur = 20 + calcbuff_power / 10
		locvar_calcbuff_p = 5 + calcbuff_power / 30
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("感覚・意志を10%と" + locvar_calcbuff_p + "上昇/耐睡眠/耐混乱", "PER & WIL +10% and +" + locvar_calcbuff_p + "/RES+ sleep,confusion")
				return
			}
		}
		if ( sdata(SKILL_ATTR_PER, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_PER, calcbuff_charid) += sdata(SKILL_ATTR_PER, calcbuff_charid) / 10
		}
		if ( sdata(SKILL_ATTR_WIL, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_WIL, calcbuff_charid) += sdata(SKILL_ATTR_WIL, calcbuff_charid) / 10
		}
		sdata(SKILL_ATTR_PER, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_WIL, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_SLEEP, calcbuff_charid) = 0
		cdata(CDATA_CONDITION_CONFUSE, calcbuff_charid) = 0
		return
	}
	if ( calcbuff_buffid == BUFF_DISTRACTED ) {
		dur = 200
		locvar_calcbuff_p = 200
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("感覚・意志・習得が25％減少/詠唱成功率5％減少", "PER, WIL and LER -25%, Casting chance -5%")
				return
			}
		}
		if ( sdata(SKILL_ATTR_PER, calcbuff_charid) >= 1 ) {
			sdata(SKILL_ATTR_PER, calcbuff_charid) = sdata(SKILL_ATTR_PER, calcbuff_charid) * 3 / 4
		}
		if ( sdata(SKILL_ATTR_WIL, calcbuff_charid) >= 1 ) {
			sdata(SKILL_ATTR_WIL, calcbuff_charid) = sdata(SKILL_ATTR_WIL, calcbuff_charid) * 3 / 4
		}
		if ( sdata(SKILL_ATTR_LER, calcbuff_charid) >= 1 ) {
			sdata(SKILL_ATTR_LER, calcbuff_charid) = sdata(SKILL_ATTR_LER, calcbuff_charid) * 3 / 4
		}
		return
	}
	if ( calcbuff_buffid == BUFF_MELANCHOLY ) {
		dur = 200
		locvar_calcbuff_p = 200
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("20％の確率で行動ターン放棄/パワーゲージ逓減", "Skip turn with 20% chance/Diminishes power gauge")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_CURSE_OF_HUNGER ) {
		dur = 100
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("ターンごとの飢えと渇きが激しくなる", "Increase hunger")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_MIST_OF_FRAILNESS ) {
		locvar_calcbuff_p = 30 + calcbuff_power / 10, 5 + calcbuff_power / 15
		locvar_calcbuff_p2 = limit(20 + calcbuff_power / 70, 20, 300)
		dur = 6 + calcbuff_power / 10
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("PVを半減しさらに" + locvar_calcbuff_p2 + "減少", "PV halved and -" + locvar_calcbuff_p)
				return
			}
		}
		if ( cdata(CDATA_PV, calcbuff_charid) > 0 ) {
			cdata(CDATA_PV, calcbuff_charid) = cdata(CDATA_PV, calcbuff_charid) / 2
		}
		cdata(CDATA_PV, calcbuff_charid) -= locvar_calcbuff_p2
		return
	}
	if ( calcbuff_buffid == BUFF_ELEMENT_SCAR ) {
		dur = 20 + calcbuff_power / 5
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("火炎冷気電撃耐性減少/自然回復阻害", "RES- fire,cold,lightning/Inhibits regeneration")
				return
			}
		}
		sdata(SKILL_RES_FIRE, calcbuff_charid) = limit(sdata(SKILL_RES_FIRE, calcbuff_charid) + limit((-50) - calcbuff_power / 15, -150, -80), sdata(SKILL_RES_FIRE, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_COLD, calcbuff_charid) = limit(sdata(SKILL_RES_COLD, calcbuff_charid) + limit((-50) - calcbuff_power / 15, -150, -80), sdata(SKILL_RES_COLD, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_LIGHTNING, calcbuff_charid) = limit(sdata(SKILL_RES_LIGHTNING, calcbuff_charid) + limit((-50) - calcbuff_power / 15, -150, -80), sdata(SKILL_RES_LIGHTNING, calcbuff_charid) > 0, 9999)
		return
	}
	if ( calcbuff_buffid == BUFF_HOLY_VEIL ) {
		locvar_calcbuff_p = 50 + calcbuff_power / 3 * 2
		dur = 15 + calcbuff_power / 5
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("ﾊﾟﾜｰ" + locvar_calcbuff_p + "の呪い(hex)への抵抗", "Hex protection (power: " + locvar_calcbuff_p + ")")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_NIGHTMARE ) {
		dur = 4 + calcbuff_power / 15
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("闇幻毒獄音神混耐性の減少", "RES- mind,nerve,nether,poison,sound,chaos,darkness")
				return
			}
		}
		sdata(SKILL_RES_NERVE, calcbuff_charid) = limit(sdata(SKILL_RES_NERVE, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_NERVE, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_MIND, calcbuff_charid) = limit(sdata(SKILL_RES_MIND, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_MIND, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_NETHER, calcbuff_charid) = limit(sdata(SKILL_RES_NETHER, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_NETHER, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_POISON, calcbuff_charid) = limit(sdata(SKILL_RES_POISON, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_POISON, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_SOUND, calcbuff_charid) = limit(sdata(SKILL_RES_SOUND, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_SOUND, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_CHAOS, calcbuff_charid) = limit(sdata(SKILL_RES_CHAOS, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_CHAOS, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_DARKNESS, calcbuff_charid) = limit(sdata(SKILL_RES_DARKNESS, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_DARKNESS, calcbuff_charid) > 0, 9999)
		return
	}
	if ( calcbuff_buffid == BUFF_DIVINE_WISDOM ) {
		dur = 20 + calcbuff_power / 10
		locvar_calcbuff_p = 10 + calcbuff_power / 40, 3 + calcbuff_power / 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("習得・魔力を10%と" + locvar_calcbuff_p + "上昇/読書を10%と" + locvar_calcbuff_p(1) + "上昇", "LER & MAG +10% and +" + locvar_calcbuff_p + "/Literacy +10% and +" + locvar_calcbuff_p(1))
				return
			}
		}
		if ( sdata(SKILL_ATTR_LER, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_LER, calcbuff_charid) += sdata(SKILL_ATTR_LER, calcbuff_charid) / 10
		}
		if ( sdata(SKILL_ATTR_MAG, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_MAG, calcbuff_charid) += sdata(SKILL_ATTR_MAG, calcbuff_charid) / 10
		}
		if ( sdata(SKILL_NORMAL_LITERACY, calcbuff_charid) >= 10 ) {
			sdata(SKILL_NORMAL_LITERACY, calcbuff_charid) += sdata(SKILL_NORMAL_LITERACY, calcbuff_charid) / 10
		}
		sdata(SKILL_ATTR_LER, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_MAG, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_NORMAL_LITERACY, calcbuff_charid) += locvar_calcbuff_p(1)
		return
	}
	if ( calcbuff_buffid == BUFF_PUNISHMENT ) {
		locvar_calcbuff_p = 20
		dur = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("DV・PV・速度を20%減少", "Speed, PV and DV -20%")
				return
			}
		}
		if ( cdata(CDATA_PV, calcbuff_charid) > 1 ) {
			cdata(CDATA_PV, calcbuff_charid) -= cdata(CDATA_PV, calcbuff_charid) / 5
		}
		if ( cdata(CDATA_DV, calcbuff_charid) > 1 ) {
			cdata(CDATA_DV, calcbuff_charid) -= cdata(CDATA_DV, calcbuff_charid) / 5
		}
		if ( sdata(SKILL_ATTR_SPD, calcbuff_charid) > 1 ) {
			sdata(SKILL_ATTR_SPD, calcbuff_charid) -= sdata(SKILL_ATTR_SPD, calcbuff_charid) / 5
		}
		return
	}
	if ( calcbuff_buffid == BUFF_LULWYS_TRICK ) {
		locvar_calcbuff_p = 150
		dur = 15
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("現在の速度の20%＋" + locvar_calcbuff_p + "の加速", "Speed +20% and +" + locvar_calcbuff_p)
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p + sdata(SKILL_ATTR_SPD, calcbuff_charid) / 5
		return
	}
	if ( calcbuff_buffid == BUFF_INCOGNITO ) {
		dur = 4 + calcbuff_power / 40
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("変装", "Disguise")
				return
			}
		}
		cbitmod CHARA_BIT_INCOGNITO, calcbuff_charid, 1
		return
	}
	if ( calcbuff_buffid == BUFF_DEATH_WORD ) {
		dur = 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("呪いが完了したときに9999のダメージを受ける", "Receives 9999 damage when the curse ends")
				return
			}
		}
		cbitmod CHARA_BIT_DEATH_COUNT, calcbuff_charid, 1
		return
	}
	if ( calcbuff_buffid == BUFF_BOOST ) {
		locvar_calcbuff_p = limit(120 + calcbuff_power / 20, 120, 150)
		dur = limit(10 + calcbuff_power / 20, 10, 30)
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("" + locvar_calcbuff_p + "の加速と能力のアップ", "Speed & Attributes +" + locvar_calcbuff_p)
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_STR, calcbuff_charid) = sdata(SKILL_ATTR_STR, calcbuff_charid) * locvar_calcbuff_p / 100 + 10
		sdata(SKILL_ATTR_PER, calcbuff_charid) = sdata(SKILL_ATTR_PER, calcbuff_charid) * locvar_calcbuff_p / 100 + 10
		sdata(SKILL_ATTR_MAG, calcbuff_charid) = sdata(SKILL_ATTR_MAG, calcbuff_charid) * locvar_calcbuff_p / 100 + 10
		return
	}
	if ( calcbuff_buffid == BUFF_CONTINGENCY ) {
		dur = 66
		locvar_calcbuff_p = limit(25 + calcbuff_power / 17, 25, 80)
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("致命傷を負ったとき" + locvar_calcbuff_p + "%の確率で一度だけダメージを0にする", "" + locvar_calcbuff_p + "% chance of nullifying lethal damage")
				return
			}
		}
		cbitmod CHARA_BIT_CONTINGENCY, calcbuff_charid, 1
		return
	}
	if ( calcbuff_buffid == BUFF_CLEAR_MIND ) {
		dur = 10
		locvar_calcbuff_p = 5
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("能力のアップ", "Increases Attributes")
				return
			}
		}
		sdata(SKILL_ATTR_WIL, calcbuff_charid) = sdata(SKILL_ATTR_WIL, calcbuff_charid) * 130 / 100 + 10
		sdata(SKILL_ATTR_PER, calcbuff_charid) = sdata(SKILL_ATTR_PER, calcbuff_charid) * 130 / 100 + 10
		sdata(SKILL_NORMAL_EVASION, calcbuff_charid) = sdata(SKILL_NORMAL_EVASION, calcbuff_charid) * 120 / 100 + 25
		sdata(SKILL_NORMAL_GREATER_EVASION, calcbuff_charid) = sdata(SKILL_NORMAL_GREATER_EVASION, calcbuff_charid) * 120 / 100 + 25
		sdata(SKILL_WEAPON_MARTIAL_ARTS, calcbuff_charid) = sdata(SKILL_WEAPON_MARTIAL_ARTS, calcbuff_charid) * 110 / 100 + 5
		return
	}
	if ( calcbuff_buffid == BUFF_RESOLUTION_HAND ) {
		dur = 40
		locvar_calcbuff_p = 5
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("魔力上昇/手系攻撃に錬金術ダメージ追加", "Increases MAG/Alchemy damage added to Hand-skills")
				return
			}
		}
		sdata(SKILL_ATTR_MAG, calcbuff_charid) = sdata(SKILL_ATTR_MAG, calcbuff_charid) * 120 / 100 + 5
		return
	}
	if ( calcbuff_buffid == BUFF_ABYSS_IN_THE_EYE ) {
		dur = 40
		locvar_calcbuff_p = 5
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("心眼上昇/眼差し系にゲージ、HP、MPの吸収追加", "Enhances Eye of Mind/HP, MP and Gauge absorption added to Eye-skills")
				return
			}
		}
		sdata(SKILL_NORMAL_EYE_OF_MIND, calcbuff_charid) = sdata(SKILL_NORMAL_EYE_OF_MIND, calcbuff_charid) * 120 / 100 + 10
		return
	}
	if ( calcbuff_buffid == BUFF_RUN_WILDLY ) {
		dur = 30
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("能力の変動/耐恐怖", "Fluctuating Attributes/RES+ fear")
				return
			}
		}
		sdata(SKILL_ATTR_LER, calcbuff_charid) = limit(sdata(SKILL_ATTR_LER, calcbuff_charid) - locvar_calcbuff_p / 6, 5, 5000)
		sdata(SKILL_ATTR_STR, calcbuff_charid) += locvar_calcbuff_p / 6 + 1
		sdata(SKILL_ATTR_DEX, calcbuff_charid) = limit(sdata(SKILL_ATTR_DEX, calcbuff_charid) - locvar_calcbuff_p / 6, 5, 5000)
		sdata(SKILL_ATTR_PER, calcbuff_charid) += locvar_calcbuff_p / 6 + 1
		sdata(SKILL_ATTR_WIL, calcbuff_charid) = limit(sdata(SKILL_ATTR_WIL, calcbuff_charid) - locvar_calcbuff_p / 6, 5, 5000)
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p / 6 + 1
		return
	}
	if ( calcbuff_buffid == BUFF_LUCK ) {
		locvar_calcbuff_p = calcbuff_power
		dur = 777
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("" + locvar_calcbuff_p + "の幸運の上昇", "Luck +" + locvar_calcbuff_p)
				return
			}
		}
		sdata(SKILL_ATTR_LUC, calcbuff_charid) += locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_UNLUCKY ) {
		locvar_calcbuff_p = 666
		dur = 6666
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("666の幸運の低下", "Luck -666")
				return
			}
		}
		sdata(SKILL_ATTR_LUC, calcbuff_charid) -= 666
		return
	}
	if ( calcbuff_buffid == BUFF_FEATHER ) {
		dur = 20 + calcbuff_power / 15
		locvar_calcbuff_p = limit(25 + calcbuff_power / 8, 1, 1000)
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("DVを10%と" + locvar_calcbuff_p + "上昇/軽装備20%上昇/耐重力/浮遊", "DV +10% and +" + locvar_calcbuff_p + "/Float/RES+ Gravity")
				return
			}
		}
		if ( cdata(CDATA_DV, calcbuff_charid) >= 10 ) {
			cdata(CDATA_DV, calcbuff_charid) += cdata(CDATA_DV, calcbuff_charid) / 10
		}
		cdata(CDATA_DV, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_GRAVITY, calcbuff_charid) = 0
		cbitmod CHARA_BIT_FLOAT, calcbuff_charid, 1
		sdata(SKILL_NORMAL_LIGHT_ARMOR, calcbuff_charid) = sdata(SKILL_NORMAL_LIGHT_ARMOR, calcbuff_charid) * 12 / 10
		return
	}
	if ( calcbuff_buffid == BUFF_CHARGE ) {
		dur = 5
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("一度だけ物理/魔法/放射技能での攻撃力上昇", "Strengthens Physical/Magical/Breath damage for one attack")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_EMERGENCY_EVASION ) {
		dur = 10
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("軽装備時、通常発生のクリティカルを回避/物理ダメージ小軽減", "Light equipment increases critical evasion/Small physical damage reduction")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_MAGIC_EQUIP ) {
		dur = 15
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("中装備時、魔法威力上昇/魔法属性ダメージ小軽減", "Medium equipment increases magical power/Magic damage reduction")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_SUPER_ARMOR ) {
		dur = 20
		locvar_calcbuff_p = 30
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("重装備時、物理大ダメージ軽減/重量命中ペナルティ無効/耐朦朧", "Heavy equipment reduces physical damage taken/No weight hit penalty/RES+ dim")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_SHIELD_PARRY ) {
		dur = 40
		locvar_calcbuff_p = 40
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("手に装備した盾で攻撃を弾き転倒させる", "Parry and overturn the attacker when equipped with a shield")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_KILLING_DANCE ) {
		dur = 44
		locvar_calcbuff_p = 44
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("回避判定を追加し回避成功時反撃", "Add chance to avoid attacks, counterattacks when successful")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_ATTRIBUTE ) {
		dur = 30
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("最も耐性が高い属性を格闘に付加", "Add most resistant element damage to martial arts")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_QUICK_USE ) {
		dur = 30
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("1ターンに1度、魔道具をターン消費無しで使用できる", "Once per turn you can use magical devices without using a turn")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_AUTO_GUARD ) {
		dur = 50
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("仲間が受けるダメージを肩代わりする", "Takes damage in place of an ally")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_RETENTION ) {
		locvar_calcbuff_p = calcbuff_power
		dur = 50
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("テレポート妨害/速度上昇/耐狂気", "Prevent teleport/Increases speed/RES+ insane")
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += sdata(SKILL_ATTR_SPD, calcbuff_charid) / 8
		return
	}
	if ( calcbuff_buffid == BUFF_TAG_FORCE ) {
		locvar_calcbuff_p = calcbuff_power
		dur = 50
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("スキル値上昇/耐洗脳", "Increases skill level/RES+ brainwash")
				return
			}
		}
		sdata(SKILL_NORMAL_TACTICS, calcbuff_charid) = (sdata(SKILL_NORMAL_TACTICS, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_NORMAL_MARKSMAN, calcbuff_charid) = (sdata(SKILL_NORMAL_MARKSMAN, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_NORMAL_EYE_OF_MIND, calcbuff_charid) = (sdata(SKILL_NORMAL_EYE_OF_MIND, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_NORMAL_MAGIC_DEVICE, calcbuff_charid) = (sdata(SKILL_NORMAL_MAGIC_DEVICE, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_NORMAL_CASTING, calcbuff_charid) = (sdata(SKILL_NORMAL_CASTING, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_NORMAL_CONTROL_MAGIC, calcbuff_charid) = (sdata(SKILL_NORMAL_CONTROL_MAGIC, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_ACTIVE_RIDING, calcbuff_charid) = (sdata(SKILL_ACTIVE_RIDING, calcbuff_charid) + 1) * 130 / 100 + 5
		return
	}
	return

*sRefDefine
	dim sdataref, 7, MAX_SKILL
	sdim skillname, 16, MAX_SKILL
	sdim skilldesc, 40, MAX_SKILL
	sdim skillencdesc, 40, STARTING_SKILL_SPACT

	// Attributes
	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_LIFE) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_LIFE) = lang("生命力", "Life")
	skilldesc(SKILL_ATTR_LIFE) = ""
	skillencdesc(SKILL_ATTR_LIFE) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_MANA) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_MANA) = lang("マナ", "Mana")
	skilldesc(SKILL_ATTR_MANA) = ""
	skillencdesc(SKILL_ATTR_MANA) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_STR) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_STR) = lang("筋力", "Strength")
	skilldesc(SKILL_ATTR_STR) = ""
	skillencdesc(SKILL_ATTR_STR) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_CON) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_CON) = lang("耐久", "Constitution")
	skilldesc(SKILL_ATTR_CON) = ""
	skillencdesc(SKILL_ATTR_CON) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_DEX) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_DEX) = lang("器用", "Dexterity")
	skilldesc(SKILL_ATTR_DEX) = ""
	skillencdesc(SKILL_ATTR_DEX) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_PER) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_PER) = lang("感覚", "Perception")
	skilldesc(SKILL_ATTR_PER) = ""
	skillencdesc(SKILL_ATTR_PER) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_LER) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_LER) = lang("習得", "Learning")
	skilldesc(SKILL_ATTR_LER) = ""
	skillencdesc(SKILL_ATTR_LER) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_WIL) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_WIL) = lang("意志", "Will")
	skilldesc(SKILL_ATTR_WIL) = ""
	skillencdesc(SKILL_ATTR_WIL) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_MAG) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_MAG) = lang("魔力", "Magic")
	skilldesc(SKILL_ATTR_MAG) = ""
	skillencdesc(SKILL_ATTR_MAG) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_CHA) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_CHA) = lang("魅力", "Charisma")
	skilldesc(SKILL_ATTR_CHA) = ""
	skillencdesc(SKILL_ATTR_CHA) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_SPD) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_SPD) = lang("速度", "Speed")
	skilldesc(SKILL_ATTR_SPD) = ""
	skillencdesc(SKILL_ATTR_SPD) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_ATTR_LUC) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_ATTR_LUC) = lang("運勢", "Luck")
	skilldesc(SKILL_ATTR_LUC) = ""
	skillencdesc(SKILL_ATTR_LUC) = ""

	// Resistances
	sdataref(SKILL_DATAREF_USE, SKILL_RES_FIRE) = SKILL_NONE, SKILL_TYPE_SP, 0, 1, 0
	skillname(SKILL_RES_FIRE) = lang("火炎", "fire")
	skilldesc(SKILL_RES_FIRE) = lang("熱や炎への耐性", "Resistance to fire.")
	skillencdesc(SKILL_RES_FIRE) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_RES_COLD) = SKILL_NONE, SKILL_TYPE_SP, 0, 1, 0
	skillname(SKILL_RES_COLD) = lang("冷気", "cold")
	skilldesc(SKILL_RES_COLD) = lang("冷気や氷への耐性", "Resistance to cold.")
	skillencdesc(SKILL_RES_COLD) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_RES_LIGHTNING) = SKILL_NONE, SKILL_TYPE_SP, 0, 1, 0
	skillname(SKILL_RES_LIGHTNING) = lang("電撃", "lightning")
	skilldesc(SKILL_RES_LIGHTNING) = lang("雷や電気への耐性", "Resistance to lightning.")
	skillencdesc(SKILL_RES_LIGHTNING) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_RES_DARKNESS) = SKILL_NONE, SKILL_TYPE_SP, 0, 2, 0
	skillname(SKILL_RES_DARKNESS) = lang("暗黒", "darkness")
	skilldesc(SKILL_RES_DARKNESS) = lang("暗黒や盲目への耐性", "Resistance to darkness.")
	skillencdesc(SKILL_RES_DARKNESS) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_RES_MIND) = SKILL_NONE, SKILL_TYPE_SP, 0, 2, 0
	skillname(SKILL_RES_MIND) = lang("幻惑", "mind")
	skilldesc(SKILL_RES_MIND) = lang("精神攻撃への抵抗力", "Resistance to mind.")
	skillencdesc(SKILL_RES_MIND) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_RES_POISON) = SKILL_NONE, SKILL_TYPE_SP, 0, 3, 0
	skillname(SKILL_RES_POISON) = lang("毒", "poison")
	skilldesc(SKILL_RES_POISON) = lang("毒への耐性", "Resistance to poison.")
	skillencdesc(SKILL_RES_POISON) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_RES_NETHER) = SKILL_NONE, SKILL_TYPE_SP, 0, 4, 0
	skillname(SKILL_RES_NETHER) = lang("地獄", "nether")
	skilldesc(SKILL_RES_NETHER) = lang("生命吸収への抵抗力", "Resistance to nether.")
	skillencdesc(SKILL_RES_NETHER) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_RES_SOUND) = SKILL_NONE, SKILL_TYPE_SP, 0, 3, 0
	skillname(SKILL_RES_SOUND) = lang("音", "sound")
	skilldesc(SKILL_RES_SOUND) = lang("音波や轟音への耐性", "Resistance to sound.")
	skillencdesc(SKILL_RES_SOUND) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_RES_NERVE) = SKILL_NONE, SKILL_TYPE_SP, 0, 3, 0
	skillname(SKILL_RES_NERVE) = lang("神経", "nerve")
	skilldesc(SKILL_RES_NERVE) = lang("睡眠や麻痺への耐性", "Resistance to nerve.")
	skillencdesc(SKILL_RES_NERVE) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_RES_CHAOS) = SKILL_NONE, SKILL_TYPE_SP, 0, 4, 0
	skillname(SKILL_RES_CHAOS) = lang("混沌", "chaos")
	skilldesc(SKILL_RES_CHAOS) = lang("混沌の効果への耐性", "Resistance to chaos.")
	skillencdesc(SKILL_RES_CHAOS) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_RES_MAGIC) = SKILL_NONE, SKILL_TYPE_SP, 0, 5, 0
	skillname(SKILL_RES_MAGIC) = lang("魔法", "magic")
	skilldesc(SKILL_RES_MAGIC) = lang("魔法攻撃への耐性", "Resistance to magic.")
	skillencdesc(SKILL_RES_MAGIC) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_RESDMG_CUT) = SKILL_NONE, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_RESDMG_CUT) = lang("出血", "cut")
	skilldesc(SKILL_RESDMG_CUT) = lang("切り傷への耐性", "Resistance to cut.")
	skillencdesc(SKILL_RESDMG_CUT) = ""

	// Weapon skills
	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_LONGSWORD) = SKILL_ATTR_STR, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_LONGSWORD) = lang("長剣", "Long Sword")
	skilldesc(SKILL_WEAPON_LONGSWORD) = lang("刃渡りの長い剣を扱う技術", "Indicates your skill with long swords.")
	skillencdesc(SKILL_WEAPON_LONGSWORD) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_SHORTSWORD) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_SHORTSWORD) = lang("短剣", "Short Sword")
	skilldesc(SKILL_WEAPON_SHORTSWORD) = lang("刃渡りの短い剣を扱う技術", "Indicates your skill with short swords.")
	skillencdesc(SKILL_WEAPON_SHORTSWORD) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_AXE) = SKILL_ATTR_STR, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_AXE) = lang("斧", "Axe")
	skilldesc(SKILL_WEAPON_AXE) = lang("斧を扱う技術", "Indicates your skill with axes.")
	skillencdesc(SKILL_WEAPON_AXE) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_BLUNT) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_BLUNT) = lang("鈍器", "Blunt")
	skilldesc(SKILL_WEAPON_BLUNT) = lang("鈍器を扱う技術", "Indicates your skill with blunt weapons.")
	skillencdesc(SKILL_WEAPON_BLUNT) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_POLEARM) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_POLEARM) = lang("槍", "Polearm")
	skilldesc(SKILL_WEAPON_POLEARM) = lang("槍を扱う技術", "Indicates your skill with polearms.")
	skillencdesc(SKILL_WEAPON_POLEARM) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_STAVE) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_STAVE) = lang("杖", "Stave")
	skilldesc(SKILL_WEAPON_STAVE) = lang("杖を扱う技術", "Indicates your skill with staves.")
	skillencdesc(SKILL_WEAPON_STAVE) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_MARTIAL_ARTS) = SKILL_ATTR_STR, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_MARTIAL_ARTS) = lang("格闘", "Martial Arts")
	skilldesc(SKILL_WEAPON_MARTIAL_ARTS) = lang("格闘の技術", "Indicates your skill fighting unarmed.")
	skillencdesc(SKILL_WEAPON_MARTIAL_ARTS) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_SCYTHE) = SKILL_ATTR_STR, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_SCYTHE) = lang("鎌", "Scythe")
	skilldesc(SKILL_WEAPON_SCYTHE) = lang("鎌を扱う技術", "Indicates your skill with scythes.")
	skillencdesc(SKILL_WEAPON_SCYTHE) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_BOW) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_BOW) = lang("弓", "Bow")
	skilldesc(SKILL_WEAPON_BOW) = lang("弓を扱う技術", "Indicates your skill with bows.")
	skillencdesc(SKILL_WEAPON_BOW) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_CROSSBOW) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_CROSSBOW) = lang("クロスボウ", "Crossbow")
	skilldesc(SKILL_WEAPON_CROSSBOW) = lang("クロスボウを扱う技術", "Indicates your skill with crossbows.")
	skillencdesc(SKILL_WEAPON_CROSSBOW) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_FIREARM) = SKILL_ATTR_PER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_FIREARM) = lang("銃器", "Firearm")
	skilldesc(SKILL_WEAPON_FIREARM) = lang("遠隔機装を扱う技術", "Indicates your skill with firearms.")
	skillencdesc(SKILL_WEAPON_FIREARM) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_WEAPON_THROWING) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_WEAPON_THROWING) = lang("投擲", "Throwing")
	skilldesc(SKILL_WEAPON_THROWING) = lang("投擲道具を扱う技術", "Indicates your skill with throwing objects.")
	skillencdesc(SKILL_WEAPON_THROWING) = ""

	// Normal skills
	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_LITERACY) = SKILL_ATTR_LER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_LITERACY) = lang("読書", "Literacy")
	skilldesc(SKILL_NORMAL_LITERACY) = lang("難解な本の解読を可能にする", "Allows you to read difficult books.")
	skillencdesc(SKILL_NORMAL_LITERACY) = lang("本の理解を深める", "makes you literate.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_GENE_ENGINEER) = SKILL_ATTR_LER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_GENE_ENGINEER) = lang("生化学", "Gene Engineer")
	skilldesc(SKILL_NORMAL_GENE_ENGINEER) = lang("仲間合成の知識を高める", "Allows you to control genes.")
	skillencdesc(SKILL_NORMAL_GENE_ENGINEER) = lang("生化学の知識を深める", "makes you a better gene engineer.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_TACTICS) = SKILL_ATTR_STR, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_TACTICS) = lang("戦術", "Tactics")
	skilldesc(SKILL_NORMAL_TACTICS) = lang("近接攻撃の威力をあげる", "Increases melee damage.")
	skillencdesc(SKILL_NORMAL_TACTICS) = lang("戦術の理解を深める", "makes you a better tactician.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_WEIGHT_LIFTING) = SKILL_ATTR_STR, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_WEIGHT_LIFTING) = lang("重量挙げ", "Weight Lifting")
	skilldesc(SKILL_NORMAL_WEIGHT_LIFTING) = lang("重い荷物を持ち運ぶことを可能にする", "Allows you to carry more stuff.")
	skillencdesc(SKILL_NORMAL_WEIGHT_LIFTING) = lang("より重い物の運搬を可能にする", "makes you better at weight lifting.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_HEALING) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_HEALING) = lang("治癒", "Healing")
	skilldesc(SKILL_NORMAL_HEALING) = lang("怪我を自然に治癒する", "Gradually heals your wounds.")
	skillencdesc(SKILL_NORMAL_HEALING) = lang("体力回復を強化する", "enhances your body metabolism.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_MEDITATION) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_MEDITATION) = lang("瞑想", "Meditation")
	skilldesc(SKILL_NORMAL_MEDITATION) = lang("消耗したマナを回復させる", "Gradually restores your magic points.")
	skillencdesc(SKILL_NORMAL_MEDITATION) = lang("マナ回復を強化する", "enhances your meditation.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_NEGOTIATION) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_NEGOTIATION) = lang("交渉", "Negotiation")
	skilldesc(SKILL_NORMAL_NEGOTIATION) = lang("交渉や商談を有利に進める", "Convinces someone to give you better deals.")
	skillencdesc(SKILL_NORMAL_NEGOTIATION) = lang("交渉を有利に進めさせる", "grants you knowledge of negotiation.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_STEALTH) = SKILL_ATTR_PER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_STEALTH) = lang("隠密", "Stealth")
	skilldesc(SKILL_NORMAL_STEALTH) = lang("周囲に気づかれず行動する", "Allows you to move quietly.")
	skillencdesc(SKILL_NORMAL_STEALTH) = lang("隠密能力を強化する", "enhances your ability to hide.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_LOCK_PICKING) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_LOCK_PICKING) = lang("鍵開け", "Lock Picking")
	skilldesc(SKILL_NORMAL_LOCK_PICKING) = lang("鍵を開ける", "Allows you to pick more difficult locks.")
	skillencdesc(SKILL_NORMAL_LOCK_PICKING) = lang("鍵開けの能力を強化する", "grants you the trick of lock picking.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_DETECTION) = SKILL_ATTR_PER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_DETECTION) = lang("探知", "Detection")
	skilldesc(SKILL_NORMAL_DETECTION) = lang("隠された場所や罠を見つける", "It is used to search hidden locations and traps.")
	skillencdesc(SKILL_NORMAL_DETECTION) = lang("探知能力を強化する", "enhances your ability to detect objects.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_INVESTING) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_INVESTING) = lang("投資", "Investing")
	skilldesc(SKILL_NORMAL_INVESTING) = lang("効果的に投資を行う", "Lowers the money needed to invest in shops.")
	skillencdesc(SKILL_NORMAL_INVESTING) = lang("より安い価格での投資を可能にする", "grants you knowledge of investing.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_ANATOMY) = SKILL_ATTR_LER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_ANATOMY) = lang("解剖学", "Anatomy")
	skilldesc(SKILL_NORMAL_ANATOMY) = lang("死体を残しやすくする", "Gives you a better chance of finding body parts.")
	skillencdesc(SKILL_NORMAL_ANATOMY) = lang("死体を残しやすくする", "grants you knowledge of anatomy.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_SENSE_QUALITY) = SKILL_ATTR_PER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_SENSE_QUALITY) = lang("自然鑑定", "Sense Quality")
	skilldesc(SKILL_NORMAL_SENSE_QUALITY) = lang("アイテムの質や種類を感じ取る", "Allows you to sense the quality of stuff.")
	skillencdesc(SKILL_NORMAL_SENSE_QUALITY) = lang("アイテムの質の判断を容易にする", "makes it easier to sense the quality of stuff.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_MINING) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_MINING) = lang("採掘", "Mining")
	skilldesc(SKILL_NORMAL_MINING) = lang("壁を掘る効率をあげる", "Shows how good of a miner you are.")
	skillencdesc(SKILL_NORMAL_MINING) = lang("採掘能力を強化する", "enhances your mining skill.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_MAGIC_CAPACITY) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_MAGIC_CAPACITY) = lang("魔力の限界", "Magic Capacity")
	skilldesc(SKILL_NORMAL_MAGIC_CAPACITY) = lang("マナの反動から身を守る", "Reduces kickback damage from over casting.")
	skillencdesc(SKILL_NORMAL_MAGIC_CAPACITY) = lang("マナの限界を上昇させる", "enhances your magic capacity.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_MEMORIZATION) = SKILL_ATTR_LER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_MEMORIZATION) = lang("暗記", "Memorization")
	skilldesc(SKILL_NORMAL_MEMORIZATION) = lang("書物から得た知識を記憶する", "Helps you acquire additional spell stocks.")
	skillencdesc(SKILL_NORMAL_MEMORIZATION) = lang("魔法の知識の忘却を防ぐ", "enhances your memory.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_DUAL_WIELD) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_DUAL_WIELD) = lang("二刀流", "Dual Wield")
	skilldesc(SKILL_NORMAL_DUAL_WIELD) = lang("複数の武器を扱う技術", "Used when wielding two weapons at the same time.")
	skillencdesc(SKILL_NORMAL_DUAL_WIELD) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_TWO_HAND) = SKILL_ATTR_STR, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_TWO_HAND) = lang("両手持ち", "Two Hand")
	skilldesc(SKILL_NORMAL_TWO_HAND) = lang("両手で武器を扱う技術", "Used when wielding a weapon with both hands.")
	skillencdesc(SKILL_NORMAL_TWO_HAND) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_SHIELD) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_SHIELD) = lang("盾", "Shield")
	skilldesc(SKILL_NORMAL_SHIELD) = lang("盾を扱う技術", "Increases the effectiveness of using shields.")
	skillencdesc(SKILL_NORMAL_SHIELD) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_HEAVY_ARMOR) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_HEAVY_ARMOR) = lang("重装備", "Heavy Armor")
	skilldesc(SKILL_NORMAL_HEAVY_ARMOR) = lang("重い装備を扱う技術", "Skill to effectively act while wearing heavy armor.")
	skillencdesc(SKILL_NORMAL_HEAVY_ARMOR) = lang("重装備の技術を上昇させる", "")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_MEDIUM_ARMOR) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_MEDIUM_ARMOR) = lang("中装備", "Medium Armor")
	skilldesc(SKILL_NORMAL_MEDIUM_ARMOR) = lang("普通の装備を扱う技術", "Skill to effectively act while wearing medium armor.")
	skillencdesc(SKILL_NORMAL_MEDIUM_ARMOR) = lang("中装備の技術を上昇させる", "")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_LIGHT_ARMOR) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_LIGHT_ARMOR) = lang("軽装備", "Light Armor")
	skilldesc(SKILL_NORMAL_LIGHT_ARMOR) = lang("軽い装備を扱う技術", "Skill to effectively act while wearing light armor.")
	skillencdesc(SKILL_NORMAL_LIGHT_ARMOR) = lang("軽装備の技術を上昇させる", "")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_CASTING) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_CASTING) = lang("詠唱", "Casting")
	skilldesc(SKILL_NORMAL_CASTING) = lang("魔法詠唱の成功率をあげる", "Reduces the chance of casting failure.")
	skillencdesc(SKILL_NORMAL_CASTING) = lang("より高度な詠唱を可能にさせる", "enhances your casting ability.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_EVASION) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_EVASION) = lang("回避", "Evasion")
	skilldesc(SKILL_NORMAL_EVASION) = lang("攻撃を回避する", "Increases your chance of evading enemy attacks.")
	skillencdesc(SKILL_NORMAL_EVASION) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_MAGIC_DEVICE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_MAGIC_DEVICE) = lang("魔道具", "Magic Device")
	skilldesc(SKILL_NORMAL_MAGIC_DEVICE) = lang("道具から魔力を効果的に引き出す", "Improves effectiveness of magic devices.")
	skillencdesc(SKILL_NORMAL_MAGIC_DEVICE) = lang("魔道具の効果をあげる", "enhances the power of magical devices.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_DISARM_TRAP) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_DISARM_TRAP) = lang("罠の知識", "Disarm Trap")
	skilldesc(SKILL_NORMAL_DISARM_TRAP) = lang("罠の設置・解体能力を強化する", "Allows you to disarm harder traps.")
	skillencdesc(SKILL_NORMAL_DISARM_TRAP) = lang("罠の知識を深める", "grants you the trick of disarming traps.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_CARPENTRY) = SKILL_ATTR_CON, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_CARPENTRY) = lang("工作", "Carpentry")
	skilldesc(SKILL_NORMAL_CARPENTRY) = lang("物を加工し、アイテムを作り出す", "Skill to cut trees and manufacture products.")
	skillencdesc(SKILL_NORMAL_CARPENTRY) = lang("工作の腕をあげる", "makes you a better carpenter.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_TAILORING) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_TAILORING) = lang("裁縫", "Tailoring")
	skilldesc(SKILL_NORMAL_TAILORING) = lang("革や蔓を用い、アイテムを作り出す", "Skill to sew materials and manufacture products.")
	skillencdesc(SKILL_NORMAL_TAILORING) = lang("裁縫の腕をあげる", "makes you a better tailor.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_ALCHEMY) = SKILL_ATTR_LER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_ALCHEMY) = lang("錬金術", "Alchemy")
	skilldesc(SKILL_NORMAL_ALCHEMY) = lang("様々な材料を調合し、ポーションを作り出す", "Enables you to perform alchemy.")
	skillencdesc(SKILL_NORMAL_ALCHEMY) = lang("錬金の腕をあげる", "grants you knowledge of alchemy.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_JEWELER) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_JEWELER) = lang("宝石細工", "Jeweler")
	skilldesc(SKILL_NORMAL_JEWELER) = lang("宝石を加工し、アイテムを作り出す", "Skill to process jewels and manufacture products.")
	skillencdesc(SKILL_NORMAL_JEWELER) = lang("宝石細工の腕をあげる", "makes you a better jeweler.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_GARDENING) = SKILL_ATTR_LER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_GARDENING) = lang("栽培", "Gardening")
	skilldesc(SKILL_NORMAL_GARDENING) = lang("植物を育て、採取する", "Skill to plant seeds and harvest crops.")
	skillencdesc(SKILL_NORMAL_GARDENING) = lang("栽培の腕をあげる", "grants you knowledge of gardening.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_FAITH) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_FAITH) = lang("信仰", "Faith")
	skilldesc(SKILL_NORMAL_FAITH) = lang("神との距離を近める", "Gets you closer to god.")
	skillencdesc(SKILL_NORMAL_FAITH) = lang("信仰を深める", "makes you pious.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_TRAVELING) = SKILL_ATTR_SPD, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_TRAVELING) = lang("旅歩き", "Traveling")
	skilldesc(SKILL_NORMAL_TRAVELING) = lang("旅の進行を早め経験を深める", "Allows you to receive more EXP from traveling.")
	skillencdesc(SKILL_NORMAL_TRAVELING) = lang("旅の熟練をあげる", "makes you a better traveler.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_PERFORMER) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 25, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_NORMAL_PERFORMER) = lang("演奏", "Performer")
	skilldesc(SKILL_NORMAL_PERFORMER) = lang("質の高い演奏を可能にする", "Shows how good of a performer you are.")
	skillencdesc(SKILL_NORMAL_PERFORMER) = lang("演奏の質をあげる", "makes your performance better.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_COOKING) = SKILL_ATTR_LER, SKILL_TYPE_SP, 3, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_NORMAL_COOKING) = lang("料理", "Cooking")
	skilldesc(SKILL_NORMAL_COOKING) = lang("料理の腕を上げる", "Improves your cooking skill.")
	skillencdesc(SKILL_NORMAL_COOKING) = lang("料理の腕を上げる", "enhances your cooking skill.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_FISHING) = SKILL_ATTR_PER, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_NORMAL_FISHING) = lang("釣り", "Fishing")
	skilldesc(SKILL_NORMAL_FISHING) = lang("釣りを可能にする", "Displays your fishing skill.")
	skillencdesc(SKILL_NORMAL_FISHING) = lang("釣りの腕をあげる", "makes you a better fisherman.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_EYE_OF_MIND) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_EYE_OF_MIND) = lang("心眼", "Eye of Mind")
	skilldesc(SKILL_NORMAL_EYE_OF_MIND) = lang("クリティカル率を高める", "Increases your chance to deliver critical hits.")
	skillencdesc(SKILL_NORMAL_EYE_OF_MIND) = lang("心眼の技術を上昇させる", "")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_GREATER_EVASION) = SKILL_ATTR_PER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_GREATER_EVASION) = lang("見切り", "Greater Evasion")
	skilldesc(SKILL_NORMAL_GREATER_EVASION) = lang("不正確な攻撃を確実に避ける", "Makes you able to evade inaccurate attacks.")
	skillencdesc(SKILL_NORMAL_GREATER_EVASION) = lang("見切りの腕をあげる", "")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_CONTROL_MAGIC) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_CONTROL_MAGIC) = lang("魔力制御", "Control Magic")
	skilldesc(SKILL_NORMAL_CONTROL_MAGIC) = lang("魔法による仲間のまきこみを軽減する", "Prevents your allies from getting hit by your spells.")
	skillencdesc(SKILL_NORMAL_CONTROL_MAGIC) = lang("より高度な魔力制御を可能にさせる", "enhances your ability to control magic.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_MARKSMAN) = SKILL_ATTR_PER, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_MARKSMAN) = lang("射撃", "Marksman")
	skilldesc(SKILL_NORMAL_MARKSMAN) = lang("射撃の威力をあげる", "Increases shooting damage.")
	skillencdesc(SKILL_NORMAL_MARKSMAN) = lang("射撃の理解を深める", "makes you a better marksman.")

	sdataref(SKILL_DATAREF_USE, SKILL_NORMAL_SWIMMING) = SKILL_ATTR_SPD, SKILL_TYPE_SP, 0, TARGET_TYPE_NONE, 0
	skillname(SKILL_NORMAL_SWIMMING) = lang("着衣水泳", "Swimming")
	skilldesc(SKILL_NORMAL_SWIMMING) = lang("濡れた状態で素早く行動できる", "Allows you to move fast when wet.")
	skillencdesc(SKILL_NORMAL_SWIMMING) = lang("泳ぎの技術をあげる", "makes you a better swimmer.")

	// Active skills
	sdataref(SKILL_DATAREF_USE, SKILL_ACTIVE_PICKPOCKET) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 20, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_ACTIVE_PICKPOCKET) = lang("窃盗", "Pickpocket")
	skilldesc(SKILL_ACTIVE_PICKPOCKET) = lang("貴重な物品を盗む", "Shows how good of a thief you are.")
	skillencdesc(SKILL_ACTIVE_PICKPOCKET) = lang("窃盗の腕をあげる", "grants you the trick of pickpocketing.")

	sdataref(SKILL_DATAREF_USE, SKILL_ACTIVE_RIDING) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 20, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_ACTIVE_RIDING) = lang("乗馬", "Riding")
	skilldesc(SKILL_ACTIVE_RIDING) = lang("上手に乗りこなす", "Allows you to ride creatures.")
	skillencdesc(SKILL_ACTIVE_RIDING) = lang("乗馬の腕をあげる", "enhances your ability to ride.")

	// Spells
	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_HEAL_LIGHT) = SKILL_ATTR_WIL, SKILL_TYPE_HEAL, 6, TARGET_TYPE_SELF, 80
	skillname(SKILL_SPELL_HEAL_LIGHT) = lang("軽傷治癒", "Heal Light")
	skilldesc(SKILL_SPELL_HEAL_LIGHT) = lang("体力回復", "Heal self")
	skillencdesc(SKILL_SPELL_HEAL_LIGHT) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_HEAL_CRITICAL) = SKILL_ATTR_WIL, SKILL_TYPE_HEAL, 15, TARGET_TYPE_SELF, 350
	skillname(SKILL_SPELL_HEAL_CRITICAL) = lang("致命傷治癒", "Heal Critical")
	skilldesc(SKILL_SPELL_HEAL_CRITICAL) = lang("体力回復", "Heal self")
	skillencdesc(SKILL_SPELL_HEAL_CRITICAL) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_CURE_OF_ERIS) = SKILL_ATTR_WIL, SKILL_TYPE_HEAL, 35, TARGET_TYPE_SELF, 800
	skillname(SKILL_SPELL_CURE_OF_ERIS) = lang("エリスの癒し", "Cure of Eris")
	skilldesc(SKILL_SPELL_CURE_OF_ERIS) = lang("体力回復", "Heal self")
	skillencdesc(SKILL_SPELL_CURE_OF_ERIS) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_CURE_OF_JURE) = SKILL_ATTR_WIL, SKILL_TYPE_HEAL, 80, TARGET_TYPE_SELF, 1300
	skillname(SKILL_SPELL_CURE_OF_JURE) = lang("ジュアの癒し", "Cure of Jure")
	skilldesc(SKILL_SPELL_CURE_OF_JURE) = lang("体力回復", "Heal self")
	skillencdesc(SKILL_SPELL_CURE_OF_JURE) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_HEALING_RAIN) = SKILL_ATTR_WIL, SKILL_TYPE_BALL, 38, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BALL, 500
	skillname(SKILL_SPELL_HEALING_RAIN) = lang("治癒の雨", "Healing Rain")
	skilldesc(SKILL_SPELL_HEALING_RAIN) = lang("体力回復の球", "Heal area")
	skillencdesc(SKILL_SPELL_HEALING_RAIN) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_HEALING_TOUCH) = SKILL_ATTR_WIL, SKILL_TYPE_HEAL, 20, TARGET_TYPE_DIRECTION, 400
	skillname(SKILL_SPELL_HEALING_TOUCH) = lang("癒しの手", "Healing Touch")
	skilldesc(SKILL_SPELL_HEALING_TOUCH) = lang("体力回復", "Heal target")
	skillencdesc(SKILL_SPELL_HEALING_TOUCH) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_HOLY_LIGHT) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 15, TARGET_TYPE_SELF, 400
	skillname(SKILL_SPELL_HOLY_LIGHT) = lang("清浄なる光", "Holy Light")
	skilldesc(SKILL_SPELL_HOLY_LIGHT) = lang("1つの呪い(hex)除去", "Remove one hex")
	skillencdesc(SKILL_SPELL_HOLY_LIGHT) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_VANQUISH_HEX) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 35, TARGET_TYPE_DIRECTION, 850
	skillname(SKILL_SPELL_VANQUISH_HEX) = lang("全浄化", "Vanquish Hex")
	skilldesc(SKILL_SPELL_VANQUISH_HEX) = lang("全ての呪い(hex)除去", "Remove all hexes")
	skillencdesc(SKILL_SPELL_VANQUISH_HEX) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_TELEPORT) = SKILL_ATTR_MAG, SKILL_TYPE_TELEPORT, 10, TARGET_TYPE_SELF_ONLY, 400
	skillname(SKILL_SPELL_TELEPORT) = lang("テレポート", "Teleport")
	skilldesc(SKILL_SPELL_TELEPORT) = lang("瞬間移動", "Teleport self")
	skillencdesc(SKILL_SPELL_TELEPORT) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_TELEPORT_OTHER) = SKILL_ATTR_MAG, SKILL_TYPE_TELEPORT, 10, TARGET_TYPE_DIRECTION, 200
	skillname(SKILL_SPELL_TELEPORT_OTHER) = lang("テレポートアザー", "Teleport Other")
	skilldesc(SKILL_SPELL_TELEPORT_OTHER) = lang("対象を瞬間移動させる", "Teleport target")
	skillencdesc(SKILL_SPELL_TELEPORT_OTHER) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_SHORT_TELEPORT) = SKILL_ATTR_MAG, SKILL_TYPE_TELEPORT, 8, TARGET_TYPE_SELF_ONLY, 120
	skillname(SKILL_SPELL_SHORT_TELEPORT) = lang("ショートテレポート", "Short Teleport")
	skilldesc(SKILL_SPELL_SHORT_TELEPORT) = lang("近くへの瞬間移動", "Teleport self")
	skillencdesc(SKILL_SPELL_SHORT_TELEPORT) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_IDENTIFY) = SKILL_ATTR_PER, SKILL_TYPE_SP, 28, TARGET_TYPE_SELF_ONLY, 800
	skillname(SKILL_SPELL_IDENTIFY) = lang("鑑定", "Identify")
	skilldesc(SKILL_SPELL_IDENTIFY) = lang("アイテム鑑定", "Identify one item")
	skillencdesc(SKILL_SPELL_IDENTIFY) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_UNCURSE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 35, TARGET_TYPE_SELF, 700
	skillname(SKILL_SPELL_UNCURSE) = lang("解呪", "Uncurse")
	skilldesc(SKILL_SPELL_UNCURSE) = lang("アイテム解呪", "Uncurse items")
	skillencdesc(SKILL_SPELL_UNCURSE) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_ORACLE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 150, TARGET_TYPE_SELF, 1500
	skillname(SKILL_SPELL_ORACLE) = lang("神託", "Oracle")
	skilldesc(SKILL_SPELL_ORACLE) = lang("アーティファクト感知", "Reveal artifacts")
	skillencdesc(SKILL_SPELL_ORACLE) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MAGIC_DART) = SKILL_ATTR_MAG, SKILL_TYPE_ARROW, 5, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 110
	skillname(SKILL_SPELL_MAGIC_DART) = lang("魔法の矢", "Magic Dart")
	skilldesc(SKILL_SPELL_MAGIC_DART) = lang("魔法属性の矢", "Target(Magic)")
	skillencdesc(SKILL_SPELL_MAGIC_DART) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_NETHER_ARROW) = SKILL_ATTR_MAG, SKILL_TYPE_ARROW, 8, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 400
	skillname(SKILL_SPELL_NETHER_ARROW) = lang("地獄の吐息", "Nether Arrow")
	skilldesc(SKILL_SPELL_NETHER_ARROW) = lang("地獄の矢", "Target(Nether)")
	skillencdesc(SKILL_SPELL_NETHER_ARROW) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_NERVE_ARROW) = SKILL_ATTR_MAG, SKILL_TYPE_ARROW, 10, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 400
	skillname(SKILL_SPELL_NERVE_ARROW) = lang("麻痺の矢", "Nerve Arrow")
	skilldesc(SKILL_SPELL_NERVE_ARROW) = lang("神経の矢", "Target(Nerve)")
	skillencdesc(SKILL_SPELL_NERVE_ARROW) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_CHAOS_EYE) = SKILL_ATTR_MAG, SKILL_TYPE_ARROW, 10, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 650
	skillname(SKILL_SPELL_CHAOS_EYE) = lang("混沌の瞳", "Chaos eye")
	skilldesc(SKILL_SPELL_CHAOS_EYE) = lang("混沌の矢", "Target(Chaos)")
	skillencdesc(SKILL_SPELL_CHAOS_EYE) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_DARK_EYE) = SKILL_ATTR_MAG, SKILL_TYPE_ARROW, 10, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 200
	skillname(SKILL_SPELL_DARK_EYE) = lang("暗黒の矢", "Dark eye")
	skilldesc(SKILL_SPELL_DARK_EYE) = lang("暗黒の矢", "Target(Darkness)")
	skillencdesc(SKILL_SPELL_DARK_EYE) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_ICE_BOLT) = SKILL_ATTR_MAG, SKILL_TYPE_BOLT, 10, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 220
	skillname(SKILL_SPELL_ICE_BOLT) = lang("アイスボルト", "Ice Bolt")
	skilldesc(SKILL_SPELL_ICE_BOLT) = lang("氷のボルト", "Line(Cold)")
	skillencdesc(SKILL_SPELL_ICE_BOLT) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_FIRE_BOLT) = SKILL_ATTR_MAG, SKILL_TYPE_BOLT, 10, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 220
	skillname(SKILL_SPELL_FIRE_BOLT) = lang("ファイアボルト", "Fire Bolt")
	skilldesc(SKILL_SPELL_FIRE_BOLT) = lang("火炎のボルト", "Line(Fire)")
	skillencdesc(SKILL_SPELL_FIRE_BOLT) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_LIGHTNING_BOLT) = SKILL_ATTR_MAG, SKILL_TYPE_BOLT, 10, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 220
	skillname(SKILL_SPELL_LIGHTNING_BOLT) = lang("ライトニングボルト", "Lightning Bolt")
	skilldesc(SKILL_SPELL_LIGHTNING_BOLT) = lang("雷のボルト", "Line(Lightning)")
	skillencdesc(SKILL_SPELL_LIGHTNING_BOLT) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_DARKNESS_BOLT) = SKILL_ATTR_MAG, SKILL_TYPE_BOLT, 12, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 350
	skillname(SKILL_SPELL_DARKNESS_BOLT) = lang("ダークネスボルト", "Darkness Bolt")
	skilldesc(SKILL_SPELL_DARKNESS_BOLT) = lang("暗黒のボルト", "Line(Darkness)")
	skillencdesc(SKILL_SPELL_DARKNESS_BOLT) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MIND_BOLT) = SKILL_ATTR_MAG, SKILL_TYPE_BOLT, 12, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 350
	skillname(SKILL_SPELL_MIND_BOLT) = lang("マインドボルト", "Mind Bolt")
	skilldesc(SKILL_SPELL_MIND_BOLT) = lang("幻惑のボルト", "Line(Mind)")
	skillencdesc(SKILL_SPELL_MIND_BOLT) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_SUMMON_MONSTERS) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 15, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 200
	skillname(SKILL_SPELL_SUMMON_MONSTERS) = lang("モンスター召喚", "Summon Monsters")
	skilldesc(SKILL_SPELL_SUMMON_MONSTERS) = lang("モンスターを召喚する", "Summon hostile creatures")
	skillencdesc(SKILL_SPELL_SUMMON_MONSTERS) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_SUMMON_WILD) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 15, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 200
	skillname(SKILL_SPELL_SUMMON_WILD) = lang("野生召喚", "Summon Wild")
	skilldesc(SKILL_SPELL_SUMMON_WILD) = lang("野生の生き物を召喚する", "Summon wild creatures")
	skillencdesc(SKILL_SPELL_SUMMON_WILD) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_RETURN) = SKILL_ATTR_PER, SKILL_TYPE_SP, 28, TARGET_TYPE_SELF_ONLY, 550
	skillname(SKILL_SPELL_RETURN) = lang("帰還", "Return")
	skilldesc(SKILL_SPELL_RETURN) = lang("特定の場所への帰還", "Return")
	skillencdesc(SKILL_SPELL_RETURN) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MAGIC_MAP) = SKILL_ATTR_PER, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF_ONLY, 450
	skillname(SKILL_SPELL_MAGIC_MAP) = lang("魔法の地図", "Magic Map")
	skilldesc(SKILL_SPELL_MAGIC_MAP) = lang("周囲の地形感知", "Reveal surround map")
	skillencdesc(SKILL_SPELL_MAGIC_MAP) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_SENSE_OBJECT) = SKILL_ATTR_PER, SKILL_TYPE_SP, 22, TARGET_TYPE_SELF_ONLY, 250
	skillname(SKILL_SPELL_SENSE_OBJECT) = lang("物質感知", "Sense Object")
	skilldesc(SKILL_SPELL_SENSE_OBJECT) = lang("周囲の物質感知", "Reveal nearby objects")
	skillencdesc(SKILL_SPELL_SENSE_OBJECT) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_ICE_BALL) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 16, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BALL, 450
	skillname(SKILL_SPELL_ICE_BALL) = lang("氷結の波動", "Ice Ball")
	skilldesc(SKILL_SPELL_ICE_BALL) = lang("範囲攻撃・氷", "Surround(Cold)")
	skillencdesc(SKILL_SPELL_ICE_BALL) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_FIRE_BALL) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 16, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BALL, 450
	skillname(SKILL_SPELL_FIRE_BALL) = lang("灼熱の嵐", "Fire Ball")
	skilldesc(SKILL_SPELL_FIRE_BALL) = lang("範囲攻撃・炎", "Surround(Fire)")
	skillencdesc(SKILL_SPELL_FIRE_BALL) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_CHAOS_BALL) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 20, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BALL, 1000
	skillname(SKILL_SPELL_CHAOS_BALL) = lang("混沌の渦", "Chaos Ball")
	skilldesc(SKILL_SPELL_CHAOS_BALL) = lang("範囲攻撃・混沌", "Surround(Chaos)")
	skillencdesc(SKILL_SPELL_CHAOS_BALL) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_RAGING_ROAR) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 18, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BALL, 700
	skillname(SKILL_SPELL_RAGING_ROAR) = lang("轟音の波動", "Raging Roar")
	skilldesc(SKILL_SPELL_RAGING_ROAR) = lang("範囲攻撃・轟音", "Surround(Sound)")
	skillencdesc(SKILL_SPELL_RAGING_ROAR) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_DOMINATE) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 125, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 2000
	skillname(SKILL_SPELL_DOMINATE) = lang("支配", "Dominate")
	skilldesc(SKILL_SPELL_DOMINATE) = lang("対象を支配する", "Dominate target")
	skillencdesc(SKILL_SPELL_DOMINATE) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_WEB) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 10, TARGET_TYPE_LOCATION, 150
	skillname(SKILL_SPELL_WEB) = lang("蜘蛛の巣", "Web")
	skilldesc(SKILL_SPELL_WEB) = lang("蜘蛛の巣発生", "Create webs")
	skillencdesc(SKILL_SPELL_WEB) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MIST_OF_DARKNESS) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 12, TARGET_TYPE_SELF, 320
	skillname(SKILL_SPELL_MIST_OF_DARKNESS) = lang("闇の霧", "Mist of Darkness")
	skilldesc(SKILL_SPELL_MIST_OF_DARKNESS) = lang("濃い霧の発生", "Create mist")
	skillencdesc(SKILL_SPELL_MIST_OF_DARKNESS) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_WALL_CREATION) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 20, TARGET_TYPE_LOCATION, 250
	skillname(SKILL_SPELL_WALL_CREATION) = lang("壁生成", "Wall Creation")
	skilldesc(SKILL_SPELL_WALL_CREATION) = lang("壁の生成", "Create walls")
	skillencdesc(SKILL_SPELL_WALL_CREATION) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_RESTORE_BODY) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 18, TARGET_TYPE_SELF, 250
	skillname(SKILL_SPELL_RESTORE_BODY) = lang("肉体復活", "Restore Body")
	skilldesc(SKILL_SPELL_RESTORE_BODY) = lang("肉体の弱体化を治療/スタミナ微回復", "Restore physical attributes, Stamina recovery")
	skillencdesc(SKILL_SPELL_RESTORE_BODY) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_RESTORE_SPIRIT) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 18, TARGET_TYPE_SELF, 250
	skillname(SKILL_SPELL_RESTORE_SPIRIT) = lang("精神復活", "Restore Spirit")
	skilldesc(SKILL_SPELL_RESTORE_SPIRIT) = lang("精神の弱体化を治療/パワーゲージ微増", "Restore mental attributes, Increases gauge")
	skillencdesc(SKILL_SPELL_RESTORE_SPIRIT) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_WISH) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 580, TARGET_TYPE_SELF_ONLY, 5250
	skillname(SKILL_SPELL_WISH) = lang("願い", "Wish")
	skilldesc(SKILL_SPELL_WISH) = lang("願いの効果", "Wish")
	skillencdesc(SKILL_SPELL_WISH) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_HOLY_SHIELD) = SKILL_ATTR_WIL, STARTING_SKILL_TYPE_BUFF + BUFF_HOLY_SHIELD, 8, TARGET_TYPE_SELF, 150
	skillname(SKILL_SPELL_HOLY_SHIELD) = lang("聖なる盾", "Holy Shield")
	skilldesc(SKILL_SPELL_HOLY_SHIELD) = lang("防御力強化", "Improves defense")
	skillencdesc(SKILL_SPELL_HOLY_SHIELD) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MIST_OF_SILENCE) = SKILL_ATTR_PER, STARTING_SKILL_TYPE_BUFF + BUFF_MIST_OF_SILENCE, 24, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 620
	skillname(SKILL_SPELL_MIST_OF_SILENCE) = lang("沈黙の霧", "Mist of Silence")
	skilldesc(SKILL_SPELL_MIST_OF_SILENCE) = lang("魔法使用不可", "Target can not use magic")
	skillencdesc(SKILL_SPELL_MIST_OF_SILENCE) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_REGENERATION) = SKILL_ATTR_WIL, STARTING_SKILL_TYPE_BUFF + BUFF_REGENERATION, 16, TARGET_TYPE_SELF, 400
	skillname(SKILL_SPELL_REGENERATION) = lang("リジェネレーション", "Regeneration")
	skilldesc(SKILL_SPELL_REGENERATION) = ""
	skillencdesc(SKILL_SPELL_REGENERATION) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_ATTRIBUTE_SHIELD) = SKILL_ATTR_WIL, STARTING_SKILL_TYPE_BUFF + BUFF_ATTRIBUTE_SHIELD, 14, TARGET_TYPE_SELF, 350
	skillname(SKILL_SPELL_ATTRIBUTE_SHIELD) = lang("属性保護", "Attribute Shield")
	skilldesc(SKILL_SPELL_ATTRIBUTE_SHIELD) = ""
	skillencdesc(SKILL_SPELL_ATTRIBUTE_SHIELD) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_SPEED) = SKILL_ATTR_WIL, STARTING_SKILL_TYPE_BUFF + BUFF_SPEED, 28, TARGET_TYPE_SELF, 1050
	skillname(SKILL_SPELL_SPEED) = lang("加速", "Speed")
	skilldesc(SKILL_SPELL_SPEED) = ""
	skillencdesc(SKILL_SPELL_SPEED) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_SLOW) = SKILL_ATTR_MAG, STARTING_SKILL_TYPE_BUFF + BUFF_SLOW, 10, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 450
	skillname(SKILL_SPELL_SLOW) = lang("鈍足", "Slow")
	skilldesc(SKILL_SPELL_SLOW) = ""
	skillencdesc(SKILL_SPELL_SLOW) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_HERO) = SKILL_ATTR_WIL, STARTING_SKILL_TYPE_BUFF + BUFF_HERO, 12, TARGET_TYPE_SELF, 80
	skillname(SKILL_SPELL_HERO) = lang("英雄", "Hero")
	skilldesc(SKILL_SPELL_HERO) = ""
	skillencdesc(SKILL_SPELL_HERO) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MIST_OF_FRAILNESS) = SKILL_ATTR_MAG, STARTING_SKILL_TYPE_BUFF + BUFF_MIST_OF_FRAILNESS, 8, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 300
	skillname(SKILL_SPELL_MIST_OF_FRAILNESS) = lang("脆弱の霧", "Mist of Frailness")
	skilldesc(SKILL_SPELL_MIST_OF_FRAILNESS) = ""
	skillencdesc(SKILL_SPELL_MIST_OF_FRAILNESS) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_ELEMENT_SCAR) = SKILL_ATTR_MAG, STARTING_SKILL_TYPE_BUFF + BUFF_ELEMENT_SCAR, 15, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 600
	skillname(SKILL_SPELL_ELEMENT_SCAR) = lang("元素の傷跡", "Element Scar")
	skilldesc(SKILL_SPELL_ELEMENT_SCAR) = ""
	skillencdesc(SKILL_SPELL_ELEMENT_SCAR) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_HOLY_VEIL) = SKILL_ATTR_WIL, STARTING_SKILL_TYPE_BUFF + BUFF_HOLY_VEIL, 20, TARGET_TYPE_SELF_ONLY, 900
	skillname(SKILL_SPELL_HOLY_VEIL) = lang("ホーリーヴェイル", "Holy Veil")
	skilldesc(SKILL_SPELL_HOLY_VEIL) = ""
	skillencdesc(SKILL_SPELL_HOLY_VEIL) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_NIGHTMARE) = SKILL_ATTR_PER, STARTING_SKILL_TYPE_BUFF + BUFF_NIGHTMARE, 15, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPELL_NIGHTMARE) = lang("ナイトメア", "Nightmare")
	skilldesc(SKILL_SPELL_NIGHTMARE) = ""
	skillencdesc(SKILL_SPELL_NIGHTMARE) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_DIVINE_WISDOM) = SKILL_ATTR_LER, STARTING_SKILL_TYPE_BUFF + BUFF_DIVINE_WISDOM, 22, TARGET_TYPE_SELF_ONLY, 350
	skillname(SKILL_SPELL_DIVINE_WISDOM) = lang("知者の加護", "Divine Wisdom")
	skilldesc(SKILL_SPELL_DIVINE_WISDOM) = ""
	skillencdesc(SKILL_SPELL_DIVINE_WISDOM) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MUTATION) = SKILL_ATTR_PER, SKILL_TYPE_SP, 21, TARGET_TYPE_SELF, 2250
	skillname(SKILL_SPELL_MUTATION) = lang("自己の変容", "Mutation")
	skilldesc(SKILL_SPELL_MUTATION) = lang("違う自分になる", "Mutate self")
	skillencdesc(SKILL_SPELL_MUTATION) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_ACID_GROUND) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 18, TARGET_TYPE_LOCATION, 480
	skillname(SKILL_SPELL_ACID_GROUND) = lang("酸の海", "Acid Ground")
	skilldesc(SKILL_SPELL_ACID_GROUND) = lang("酸の発生", "Create acid grounds")
	skillencdesc(SKILL_SPELL_ACID_GROUND) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_FIRE_WALL) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 24, TARGET_TYPE_LOCATION, 640
	skillname(SKILL_SPELL_FIRE_WALL) = lang("炎の壁", "Fire Wall")
	skilldesc(SKILL_SPELL_FIRE_WALL) = lang("火柱の発生", "Create fire grounds")
	skillencdesc(SKILL_SPELL_FIRE_WALL) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_DOOR_CREATION) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 15, TARGET_TYPE_LOCATION, 200
	skillname(SKILL_SPELL_DOOR_CREATION) = lang("ドア生成", "Door Creation")
	skilldesc(SKILL_SPELL_DOOR_CREATION) = lang("ドアの生成", "Create doors")
	skillencdesc(SKILL_SPELL_DOOR_CREATION) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_INCOGNITO) = SKILL_ATTR_PER, STARTING_SKILL_TYPE_BUFF + BUFF_INCOGNITO, 38, TARGET_TYPE_SELF_ONLY, 250
	skillname(SKILL_SPELL_INCOGNITO) = lang("インコグニート", "Incognito")
	skilldesc(SKILL_SPELL_INCOGNITO) = ""
	skillencdesc(SKILL_SPELL_INCOGNITO) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_CRYSTAL_SPEAR) = SKILL_ATTR_MAG, SKILL_TYPE_BOLT, 20, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 950
	skillname(SKILL_SPELL_CRYSTAL_SPEAR) = lang("魔力の集積", "Crystal Spear")
	skilldesc(SKILL_SPELL_CRYSTAL_SPEAR) = lang("魔法属性のボルト", "Line(Magic)")
	skillencdesc(SKILL_SPELL_CRYSTAL_SPEAR) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MAGIC_STORM) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 40, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BALL, 1400
	skillname(SKILL_SPELL_MAGIC_STORM) = lang("魔力の嵐", "Magic Storm")
	skilldesc(SKILL_SPELL_MAGIC_STORM) = lang("範囲攻撃・魔法", "Surround(Magic)")
	skillencdesc(SKILL_SPELL_MAGIC_STORM) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_RESURRECTION) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 60, TARGET_TYPE_SELF_ONLY, 1650
	skillname(SKILL_SPELL_RESURRECTION) = lang("復活", "Resurrection")
	skilldesc(SKILL_SPELL_RESURRECTION) = lang("死者の蘇生", "Resurrect dead")
	skillencdesc(SKILL_SPELL_RESURRECTION) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_CONTINGENCY) = SKILL_ATTR_WIL, STARTING_SKILL_TYPE_BUFF + BUFF_CONTINGENCY, 25, TARGET_TYPE_SELF, 1250
	skillname(SKILL_SPELL_CONTINGENCY) = lang("契約", "Contingency")
	skilldesc(SKILL_SPELL_CONTINGENCY) = ""
	skillencdesc(SKILL_SPELL_CONTINGENCY) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_4DIM_POCKET) = SKILL_ATTR_PER, SKILL_TYPE_SP, 60, TARGET_TYPE_SELF_ONLY, 750
	skillname(SKILL_SPELL_4DIM_POCKET) = lang("四次元ポケット", "4-Dimensional Pocket")
	skilldesc(SKILL_SPELL_4DIM_POCKET) = lang("四次元のポケットを召喚", "Summon 4-Dimensional Pocket")
	skillencdesc(SKILL_SPELL_4DIM_POCKET) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_WIZARDS_HARVEST) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 45, TARGET_TYPE_SELF_ONLY, 350
	skillname(SKILL_SPELL_WIZARDS_HARVEST) = lang("魔術師の収穫", "Wizard's Harvest")
	skilldesc(SKILL_SPELL_WIZARDS_HARVEST) = lang("ランダムな収穫", "Random harvest")
	skillencdesc(SKILL_SPELL_WIZARDS_HARVEST) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_METEOR) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 220, TARGET_TYPE_SELF_ONLY, 1450
	skillname(SKILL_SPELL_METEOR) = lang("メテオ", "Meteor")
	skilldesc(SKILL_SPELL_METEOR) = lang("全域攻撃", "Massive Attack")
	skillencdesc(SKILL_SPELL_METEOR) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_GRAVITY) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 24, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BALL, 750
	skillname(SKILL_SPELL_GRAVITY) = lang("グラビティ", "Gravity")
	skilldesc(SKILL_SPELL_GRAVITY) = lang("重力の発生", "Create gravity")
	skillencdesc(SKILL_SPELL_GRAVITY) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_SUMMON_SPIRIT) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 30, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 200
	skillname(SKILL_SPELL_SUMMON_SPIRIT) = lang("精霊召喚", "Summon Spirit")
	skilldesc(SKILL_SPELL_SUMMON_SPIRIT) = lang("精霊を召喚する", "Summon spirit")
	skillencdesc(SKILL_SPELL_SUMMON_SPIRIT) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_FEATHER) = SKILL_ATTR_DEX, STARTING_SKILL_TYPE_BUFF + BUFF_FEATHER, 8, TARGET_TYPE_SELF, 150
	skillname(SKILL_SPELL_FEATHER) = lang("フェザー", "Feather")
	skilldesc(SKILL_SPELL_FEATHER) = lang("回避力強化・浮遊", "Enhanced Evasion/Floating")
	skillencdesc(SKILL_SPELL_FEATHER) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_ECLIPSE) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 40, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BALL, 1200
	skillname(SKILL_SPELL_ECLIPSE) = lang("月蝕の檻", "Eclipse")
	skilldesc(SKILL_SPELL_ECLIPSE) = lang("範囲攻撃・暗黒", "Surround(Darkness)")
	skillencdesc(SKILL_SPELL_ECLIPSE) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_THUNDER_VORTEX) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 20, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BALL, 1000
	skillname(SKILL_SPELL_THUNDER_VORTEX) = lang("雷霆の渦", "Thunder Vortex")
	skilldesc(SKILL_SPELL_THUNDER_VORTEX) = lang("範囲攻撃・電撃", "Surround(Lightning)")
	skillencdesc(SKILL_SPELL_THUNDER_VORTEX) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_NETHER_WAVE) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 30, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BALL, 1000
	skillname(SKILL_SPELL_NETHER_WAVE) = lang("冥王の咆哮", "Nether Wave")
	skilldesc(SKILL_SPELL_NETHER_WAVE) = lang("範囲攻撃・地獄", "Surround(Nether)")
	skillencdesc(SKILL_SPELL_NETHER_WAVE) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_MIST_OF_DAZZLING) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 12, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 320
	skillname(SKILL_SPELL_MIST_OF_DAZZLING) = lang("光の霧", "Mist of Dazzling")
	skilldesc(SKILL_SPELL_MIST_OF_DAZZLING) = lang("眩い霧の発生", "Create mist")
	skillencdesc(SKILL_SPELL_MIST_OF_DAZZLING) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_POISON_STORM) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 25, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BALL, 450
	skillname(SKILL_SPELL_POISON_STORM) = lang("猛毒の嵐", "Poison Storm")
	skilldesc(SKILL_SPELL_POISON_STORM) = lang("範囲攻撃・毒", "Surround(Poison)")
	skillencdesc(SKILL_SPELL_POISON_STORM) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_CONCENTRATION) = SKILL_ATTR_PER, STARTING_SKILL_TYPE_BUFF + BUFF_CONCENTRATION, 12, TARGET_TYPE_SELF, 100
	skillname(SKILL_SPELL_CONCENTRATION) = lang("集中", "Concentration")
	skilldesc(SKILL_SPELL_CONCENTRATION) = ""
	skillencdesc(SKILL_SPELL_CONCENTRATION) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_WATER_BOLT) = SKILL_ATTR_MAG, SKILL_TYPE_BOLT, 12, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 350
	skillname(SKILL_SPELL_WATER_BOLT) = lang("ハイドロボルト", "Water Bolt")
	skilldesc(SKILL_SPELL_WATER_BOLT) = lang("水のボルト", "Line(water)")
	skillencdesc(SKILL_SPELL_WATER_BOLT) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_BUBBLE_STORM) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 35, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BALL, 800
	skillname(SKILL_SPELL_BUBBLE_STORM) = lang("泡沫の嵐", "Bubble Storm")
	skilldesc(SKILL_SPELL_BUBBLE_STORM) = lang("範囲攻撃・無属性/濡れ", "Surround(water)")
	skillencdesc(SKILL_SPELL_BUBBLE_STORM) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPELL_GEM_POWER) = SKILL_ATTR_CON, STARTING_SKILL_TYPE_BUFF + BUFF_GEM_POWER, 12, TARGET_TYPE_SELF, 120
	skillname(SKILL_SPELL_GEM_POWER) = lang("守護石", "Gem Power")
	skilldesc(SKILL_SPELL_GEM_POWER) = ""
	skillencdesc(SKILL_SPELL_GEM_POWER) = ""

	// Special actions
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DRAIN_BLOOD) = SKILL_ATTR_DEX, SKILL_TYPE_HAND, 7, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_DRAIN_BLOOD) = lang("吸血の牙", "Drain Blood")
	skilldesc(SKILL_SPACT_DRAIN_BLOOD) = lang("体力・sp吸収", "Drain HP")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_FIRE_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_FIRE_BREATH) = lang("火炎放射", "Fire Breath")
	skilldesc(SKILL_SPACT_FIRE_BREATH) = lang("炎属性の放射攻撃", "Breath(Fire)")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_COLD_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_COLD_BREATH) = lang("冷気放射", "Cold Breath")
	skilldesc(SKILL_SPACT_COLD_BREATH) = lang("冷気属性の放射攻撃", "Breath(Cold)")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_LIGHTNING_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_LIGHTNING_BREATH) = lang("電撃放射", "Lightning Breath")
	skilldesc(SKILL_SPACT_LIGHTNING_BREATH) = lang("電撃属性の放射攻撃", "Breath(Lightning)")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DARKNESS_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_DARKNESS_BREATH) = lang("暗黒放射", "Darkness Breath")
	skilldesc(SKILL_SPACT_DARKNESS_BREATH) = lang("暗黒属性の放射攻撃", "Breath(Darkness)")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CHAOS_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_CHAOS_BREATH) = lang("混沌放射", "Chaos Breath")
	skilldesc(SKILL_SPACT_CHAOS_BREATH) = lang("混沌属性の放射攻撃", "Breath(Chaos)")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SOUND_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_SOUND_BREATH) = lang("轟音放射", "Sound Breath")
	skilldesc(SKILL_SPACT_SOUND_BREATH) = lang("音属性の放射攻撃", "Breath(Sound)")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_NETHER_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_NETHER_BREATH) = lang("冥気放射", "Nether Breath")
	skilldesc(SKILL_SPACT_NETHER_BREATH) = lang("地獄属性の放射攻撃", "Breath(Nether)")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_NERVE_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_NERVE_BREATH) = lang("神経波放射", "Nerve Breath")
	skilldesc(SKILL_SPACT_NERVE_BREATH) = lang("神経属性の放射攻撃", "Breath(Nerve)")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_POISON_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_POISON_BREATH) = lang("猛毒放射", "Poison Breath")
	skilldesc(SKILL_SPACT_POISON_BREATH) = lang("毒属性の放射攻撃", "Breath(Poison)")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MIND_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_MIND_BREATH) = lang("幻影放射", "Mind Breath")
	skilldesc(SKILL_SPACT_MIND_BREATH) = lang("幻惑属性の放射攻撃", "Breath(Mind)")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_POWER_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_BREATH, 5, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_POWER_BREATH) = lang("エネルギー放射", "Power Breath")
	skilldesc(SKILL_SPACT_POWER_BREATH) = lang("魔法属性の放射攻撃", "Breath")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TOUCH_OF_WEAKNESS) = SKILL_ATTR_MAG, SKILL_TYPE_HAND, 5, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_TOUCH_OF_WEAKNESS) = lang("弱体化の手", "Touch of Weakness")
	skilldesc(SKILL_SPACT_TOUCH_OF_WEAKNESS) = lang("弱体化", "Weaken target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TOUCH_OF_HUNGER) = SKILL_ATTR_MAG, SKILL_TYPE_HAND, 5, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_TOUCH_OF_HUNGER) = lang("飢餓の手", "Touch of Hunger")
	skilldesc(SKILL_SPACT_TOUCH_OF_HUNGER) = lang("飢餓攻撃", "Starve target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TOUCH_OF_POISON) = SKILL_ATTR_DEX, SKILL_TYPE_HAND, 5, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_TOUCH_OF_POISON) = lang("毒の手", "Touch of Poison")
	skilldesc(SKILL_SPACT_TOUCH_OF_POISON) = lang("毒攻撃", "Poison target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TOUCH_OF_NERVE) = SKILL_ATTR_DEX, SKILL_TYPE_HAND, 5, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_TOUCH_OF_NERVE) = lang("麻痺の手", "Touch of Nerve")
	skilldesc(SKILL_SPACT_TOUCH_OF_NERVE) = lang("神経攻撃", "Paralyze target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TOUCH_OF_FEAR) = SKILL_ATTR_WIL, SKILL_TYPE_HAND, 5, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_TOUCH_OF_FEAR) = lang("恐怖の手", "Touch of Fear")
	skilldesc(SKILL_SPACT_TOUCH_OF_FEAR) = lang("無属性攻撃", "Fear target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TOUCH_OF_SLEEP) = SKILL_ATTR_WIL, SKILL_TYPE_HAND, 5, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_TOUCH_OF_SLEEP) = lang("眠りの手", "Touch of Sleep")
	skilldesc(SKILL_SPACT_TOUCH_OF_SLEEP) = lang("精神攻撃", "Sleep target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SHADOW_STEP) = SKILL_ATTR_WIL, SKILL_TYPE_TELEPORT, 5, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_SHADOW_STEP) = lang("シャドウステップ", "Shadow Step")
	skilldesc(SKILL_SPACT_SHADOW_STEP) = lang("対象へ突撃", "Teleport to target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DRAW_SHADOW) = SKILL_ATTR_WIL, SKILL_TYPE_TELEPORT, 10, TARGET_TYPE_OTHER + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_DRAW_SHADOW) = lang("異次元の手", "Draw Shadow")
	skilldesc(SKILL_SPACT_DRAW_SHADOW) = lang("対象を引き寄せ", "Draw target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_HARVEST_MANA) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 15, TARGET_TYPE_SELF_ONLY, 700
	skillname(SKILL_SPACT_HARVEST_MANA) = lang("マナ回復", "Harvest Mana")
	skilldesc(SKILL_SPACT_HARVEST_MANA) = lang("マナ回復", "Restore MP")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PUNISHMENT) = SKILL_ATTR_WIL, STARTING_SKILL_TYPE_BUFF + BUFF_PUNISHMENT, 15, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_PUNISHMENT) = lang("神罰", "Punishment")
	skilldesc(SKILL_SPACT_PUNISHMENT) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PRAYER_OF_JURE) = SKILL_ATTR_WIL, SKILL_TYPE_HEAL, 30, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_PRAYER_OF_JURE) = lang("ジュアの祈り", "Prayer of Jure")
	skilldesc(SKILL_SPACT_PRAYER_OF_JURE) = lang("体力回復", "Heal HP self")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ABSORB_MAGIC) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 25, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_ABSORB_MAGIC) = lang("魔力の吸収", "Absorb Magic")
	skilldesc(SKILL_SPACT_ABSORB_MAGIC) = lang("マナ回復", "Heal MP")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_LULWYS_TRICK) = SKILL_ATTR_DEX, STARTING_SKILL_TYPE_BUFF + BUFF_LULWYS_TRICK, 20, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_LULWYS_TRICK) = lang("ルルウィの憑依", "Lulwy's Trick")
	skilldesc(SKILL_SPACT_LULWYS_TRICK) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PSYCHOANALYSIS) = SKILL_ATTR_PER, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_PSYCHOANALYSIS) = lang("精神分析", "Psychoanalysis")
	skilldesc(SKILL_SPACT_PSYCHOANALYSIS) = lang("対象の精神状態の感知", "Know mind")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DIMENSIONAL_MOVE) = SKILL_ATTR_WIL, SKILL_TYPE_TELEPORT, 15, TARGET_TYPE_SELF, 0
	skillname(SKILL_SPACT_DIMENSIONAL_MOVE) = lang("空間歪曲", "Dimensional Move")
	skilldesc(SKILL_SPACT_DIMENSIONAL_MOVE) = lang("近くへの瞬間移動", "Teleport self")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CHANGE) = SKILL_ATTR_PER, SKILL_TYPE_SP, 10, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_CHANGE) = lang("他者変容", "Change")
	skilldesc(SKILL_SPACT_CHANGE) = lang("対象変容", "Change target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DRAW_CHARGE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_DRAW_CHARGE) = lang("魔力の抽出", "Draw Charge")
	skilldesc(SKILL_SPACT_DRAW_CHARGE) = lang("杖から魔力抽出", "Draw charges")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_FILL_CHARGE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 10, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_FILL_CHARGE) = lang("魔力の充填", "Fill Charge")
	skilldesc(SKILL_SPACT_FILL_CHARGE) = lang("充填", "Restore charges")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SWARM) = SKILL_ATTR_STR, SKILL_TYPE_SP, 27, TARGET_TYPE_SELF_ONLY, 220
	skillname(SKILL_SPACT_SWARM) = lang("スウォーム", "Swarm")
	skilldesc(SKILL_SPACT_SWARM) = lang("隣接対象攻撃", "Attack circle")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EYE_OF_MUTATION) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 5, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BALL, 0
	skillname(SKILL_SPACT_EYE_OF_MUTATION) = lang("変容の眼差し", "Eye of Mutation")
	skilldesc(SKILL_SPACT_EYE_OF_MUTATION) = lang("対象変容", "Mutate target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EYE_OF_ETHER) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 5, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BALL, 0
	skillname(SKILL_SPACT_EYE_OF_ETHER) = lang("エーテルの眼差し", "Eye of Ether")
	skilldesc(SKILL_SPACT_EYE_OF_ETHER) = lang("対象エーテル侵食", "Corrupt target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ETHER_GROUND) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 18, TARGET_TYPE_LOCATION, 480
	skillname(SKILL_SPACT_ETHER_GROUND) = lang("エーテルの海", "Ether Ground")
	skilldesc(SKILL_SPACT_ETHER_GROUND) = lang("エーテルの発生", "Create ether grounds")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUSPICIOUS_HAND) = SKILL_ATTR_DEX, SKILL_TYPE_TELEPORT, 10, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_SUSPICIOUS_HAND) = lang("スリの指", "Suspicious Hand")
	skilldesc(SKILL_SPACT_SUSPICIOUS_HAND) = lang("盗み", "Steal from target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EYE_OF_INSANITY) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 5, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BALL, 0
	skillname(SKILL_SPACT_EYE_OF_INSANITY) = lang("狂気の眼差し", "Eye of Insanity")
	skilldesc(SKILL_SPACT_EYE_OF_INSANITY) = lang("対象狂気", "Craze target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_RAIN_OF_SANITY) = SKILL_ATTR_WIL, SKILL_TYPE_BALL, 50, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BALL, 500
	skillname(SKILL_SPACT_RAIN_OF_SANITY) = lang("狂気治癒の雨", "Rain of Sanity")
	skilldesc(SKILL_SPACT_RAIN_OF_SANITY) = lang("狂気回復の球", "Cure insane area")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EYE_OF_DIMNESS) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 5, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BALL, 0
	skillname(SKILL_SPACT_EYE_OF_DIMNESS) = lang("朦朧の眼差し", "Eye of Dimness")
	skilldesc(SKILL_SPACT_EYE_OF_DIMNESS) = lang("対象朦朧", "Dim target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUMMON_CATS) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 15, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 200
	skillname(SKILL_SPACT_SUMMON_CATS) = lang("猫召喚", "Summon Cats")
	skilldesc(SKILL_SPACT_SUMMON_CATS) = lang("猫を召喚する", "Summon cats")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUMMON_YEEK) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 15, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 200
	skillname(SKILL_SPACT_SUMMON_YEEK) = lang("イーク召喚", "Summon Yeek")
	skilldesc(SKILL_SPACT_SUMMON_YEEK) = lang("イークを召喚する", "Summon Yeeks")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUMMON_PAWN) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 15, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 200
	skillname(SKILL_SPACT_SUMMON_PAWN) = lang("駒召喚", "Summon Pawn")
	skilldesc(SKILL_SPACT_SUMMON_PAWN) = lang("駒を召喚する", "Summon pieces")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUMMON_FIRE) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 15, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 200
	skillname(SKILL_SPACT_SUMMON_FIRE) = lang("炎召喚", "Summon Fire")
	skilldesc(SKILL_SPACT_SUMMON_FIRE) = lang("炎の生き物を召喚する", "Summon fire creatures")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUMMON_SISTER) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 15, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 200
	skillname(SKILL_SPACT_SUMMON_SISTER) = lang("妹召喚", "Summon Sister")
	skilldesc(SKILL_SPACT_SUMMON_SISTER) = lang("妹を召喚する", "Summon Sister")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUICIDE_ATTACK) = SKILL_ATTR_CON, SKILL_TYPE_BALL, 16, TARGET_TYPE_DIRECTION, 450
	skillname(SKILL_SPACT_SUICIDE_ATTACK) = lang("自爆", "Suicide Attack")
	skilldesc(SKILL_SPACT_SUICIDE_ATTACK) = lang("自爆の球", "Suicide")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CURSE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 10, TARGET_TYPE_ENEMY + 4, 100
	skillname(SKILL_SPACT_CURSE) = lang("呪いの言葉", "Curse")
	skilldesc(SKILL_SPACT_CURSE) = lang("呪いをかける", "Curse target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DEATH_WORD) = SKILL_ATTR_WIL, STARTING_SKILL_TYPE_BUFF + BUFF_DEATH_WORD, 15, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_DEATH_WORD) = lang("死の宣告", "Death Word")
	skilldesc(SKILL_SPACT_DEATH_WORD) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BOOST) = SKILL_ATTR_WIL, STARTING_SKILL_TYPE_BUFF + BUFF_BOOST, 50, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_BOOST) = lang("ブースト", "Boost")
	skilldesc(SKILL_SPACT_BOOST) = ""

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_INSULT) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 10, TARGET_TYPE_ENEMY + 4, 0
	skillname(SKILL_SPACT_INSULT) = lang("罵倒", "Insult")
	skilldesc(SKILL_SPACT_INSULT) = lang("対象朦朧", "Insult target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SHINING_WAVE) = SKILL_ATTR_STR, SKILL_TYPE_SP, 27, TARGET_TYPE_ENEMY + 4, 0
	skillname(SKILL_SPACT_SHINING_WAVE) = lang("衝撃波動", "Shining Wave")
	skilldesc(SKILL_SPACT_SHINING_WAVE) = lang("一直線攻撃", "Line attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DISTANT_ATTACK7) = SKILL_ATTR_STR, SKILL_TYPE_ATTACK, 2, TARGET_TYPE_ENEMY + 7, 0
	skillname(SKILL_SPACT_DISTANT_ATTACK7) = lang("遠距離打撃７", "Distant Attack7")
	skilldesc(SKILL_SPACT_DISTANT_ATTACK7) = lang("遠距離打撃", "Distant Attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SCAVENGE) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 10, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_SCAVENGE) = lang("食い漁り", "Scavenge")
	skilldesc(SKILL_SPACT_SCAVENGE) = lang("盗んで食べる", "Steal food")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EYE_OF_MANA) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 5, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BALL, 0
	skillname(SKILL_SPACT_EYE_OF_MANA) = lang("マナの眼差し", "Eye of Mana")
	skilldesc(SKILL_SPACT_EYE_OF_MANA) = lang("マナダメージ", "Damage MP target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_VANISH) = SKILL_ATTR_PER, SKILL_TYPE_SP, 10, TARGET_TYPE_SELF, 0
	skillname(SKILL_SPACT_VANISH) = lang("退却", "Vanish")
	skilldesc(SKILL_SPACT_VANISH) = lang("退却する", "Retreat")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PREGNANT) = SKILL_ATTR_PER, SKILL_TYPE_SP, 15, TARGET_TYPE_ENEMY + 1, 0
	skillname(SKILL_SPACT_PREGNANT) = lang("妊娠", "Pregnant")
	skilldesc(SKILL_SPACT_PREGNANT) = lang("対象妊娠", "Pregnant target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GRENADE) = SKILL_ATTR_MAG, SKILL_TYPE_BALL, 18, TARGET_TYPE_SELF_ONLY, 700
	skillname(SKILL_SPACT_GRENADE) = lang("グレネード", "Grenade")
	skilldesc(SKILL_SPACT_GRENADE) = lang("轟音の球", "Surround(Sound)")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CHEER) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 32, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_CHEER) = lang("鼓舞", "Cheer")
	skilldesc(SKILL_SPACT_CHEER) = lang("視界内仲間強化", "Strengthen allies")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MEWMEWMEW) = SKILL_ATTR_LUC, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF, 500
	skillname(SKILL_SPACT_MEWMEWMEW) = lang("うみみゃぁ！", "Mewmewmew!")
	skilldesc(SKILL_SPACT_MEWMEWMEW) = lang("全体高ダメージ", "Map-wide high damage")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DECAPITATION) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 10, TARGET_TYPE_ENEMY + 1, 0
	skillname(SKILL_SPACT_DECAPITATION) = lang("首狩り", "Decapitation")
	skilldesc(SKILL_SPACT_DECAPITATION) = lang("器用依存攻撃/対象が瀕死なら即死", "Attack and kill low-health target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DROP_MINE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 15, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_DROP_MINE) = lang("地雷投下", "Drop Mine")
	skilldesc(SKILL_SPACT_DROP_MINE) = lang("足元に地雷設置", "Set Mine")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MANIS_DISASSEMBLY) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 10, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_MANIS_DISASSEMBLY) = lang("マニの分解術", "Mani's Disassembly")
	skilldesc(SKILL_SPACT_MANIS_DISASSEMBLY) = lang("敵瀕死", "Almost kill target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_INSANE_WAVE) = SKILL_ATTR_LER, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF, 500
	skillname(SKILL_SPACT_INSANE_WAVE) = lang("病愛波動", "Insane Wave")
	skilldesc(SKILL_SPACT_INSANE_WAVE) = lang("全体発狂", "Map-wide insanity")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUPER_VIBRATING_FIST) = SKILL_ATTR_STR, SKILL_TYPE_SP, 1, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BALL, 500
	skillname(SKILL_SPACT_SUPER_VIBRATING_FIST) = lang("超振動拳", "Super Vibrating Fist")
	skilldesc(SKILL_SPACT_SUPER_VIBRATING_FIST) = lang("超威力単体攻撃", "Hyper strong individual attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TEMPEST_ARROW) = SKILL_ATTR_DEX, SKILL_TYPE_SUMMON, 1, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 200
	skillname(SKILL_SPACT_TEMPEST_ARROW) = lang("嵐の流法", "Tempest Arrow")
	skilldesc(SKILL_SPACT_TEMPEST_ARROW) = lang("竜巻召喚", "Summon tornado")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EXCESSIVE_HEAL) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 1, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BALL, 500
	skillname(SKILL_SPACT_EXCESSIVE_HEAL) = lang("閃華裂光", "Excessive Heal")
	skilldesc(SKILL_SPACT_EXCESSIVE_HEAL) = lang("大量出血させる", "Mass bleeding")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SHINE_SNAIL) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 100, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BALL, 500
	skillname(SKILL_SPACT_SHINE_SNAIL) = lang("シャインスネイル", "Shine Snail")
	skilldesc(SKILL_SPACT_SHINE_SNAIL) = lang("単体攻撃", "Individual attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_HOUZANHA) = SKILL_ATTR_CON, SKILL_TYPE_SP, 32, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BALL, 0
	skillname(SKILL_SPACT_HOUZANHA) = lang("土竜乱舞", "Houzanha")
	skilldesc(SKILL_SPACT_HOUZANHA) = lang("広域地形破壊", "Wide terrain destruction")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MANA_BURST) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 50, TARGET_TYPE_ENEMY + 7, 0
	skillname(SKILL_SPACT_MANA_BURST) = lang("マナの解放", "Mana Burst")
	skilldesc(SKILL_SPACT_MANA_BURST) = lang("MP消費範囲攻撃", "Burn MP")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ELEMENTIA) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 1, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BALL, 500
	skillname(SKILL_SPACT_ELEMENTIA) = lang("エレメンティア", "Elementia")
	skilldesc(SKILL_SPACT_ELEMENTIA) = lang("単体超マナダメージ", "Mana drain attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_RAMPAGE) = SKILL_ATTR_PER, SKILL_TYPE_SP, 28, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_RAMPAGE) = lang("ランページ", "Rampage")
	skilldesc(SKILL_SPACT_RAMPAGE) = lang("視界内の仲間狂暴化", "Increase damage")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GOLD_RUSH) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_GOLD_RUSH) = lang("ゴールドラッシュ", "Gold Rush")
	skilldesc(SKILL_SPACT_GOLD_RUSH) = lang("超強化", "Super strength")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SYNCHRO_HEARTS) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 100, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_SYNCHRO_HEARTS) = lang("魂のシンクロ", "Synchro Hearts")
	skilldesc(SKILL_SPACT_SYNCHRO_HEARTS) = lang("好感度依存仲間強化", "Strengthen allies")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MAGIC_KISS) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 2, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_MAGIC_KISS) = lang("魔法の口づけ", "Magic Kiss")
	skilldesc(SKILL_SPACT_MAGIC_KISS) = lang("マナ吸収あるいはマナ分譲", "Heal mana")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CLEAR_MIND) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 22, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_CLEAR_MIND) = lang("明鏡止水", "Clear Mind")
	skilldesc(SKILL_SPACT_CLEAR_MIND) = lang("主能力と回避力が上昇", "Strengthens WIL and PER")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PRESSURE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 20, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_PRESSURE) = lang("プレッシャー", "Pressure")
	skilldesc(SKILL_SPACT_PRESSURE) = lang("MP消費し周囲の敵のゲージ-50％", "Reduce power gauge of surrounding enemies.")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUMMON_CHAOS) = SKILL_ATTR_MAG, SKILL_TYPE_SUMMON, 30, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 200
	skillname(SKILL_SPACT_SUMMON_CHAOS) = lang("眷属召喚", "Summon Chaos")
	skilldesc(SKILL_SPACT_SUMMON_CHAOS) = lang("眷属を召喚する", "Summon chaos")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ENSEMBLE) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 45, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_ENSEMBLE) = lang("アンサンブル", "Ensemble")
	skilldesc(SKILL_SPACT_ENSEMBLE) = lang("仲間と合奏・合唱する/時間かかる", "Ensemble")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUPER_REGEN) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 50, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_SUPER_REGEN) = lang("超再生", "Super Regen")
	skilldesc(SKILL_SPACT_SUPER_REGEN) = lang("治癒力超上昇", "?")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DIRECTIVE) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_DIRECTIVE) = lang("戦術指示", "Directive")
	skilldesc(SKILL_SPACT_DIRECTIVE) = lang("仲間に態勢と特殊弾指示", "Switch battle mode")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PLATINUM_SONG) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 34, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_PLATINUM_SONG) = lang("プラチナソング", "Platinum Song")
	skilldesc(SKILL_SPACT_PLATINUM_SONG) = lang("視界内仲間強化", "Strengthen allies")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PROVOKE) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 20, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_PROVOKE) = lang("挑発", "Provoke")
	skilldesc(SKILL_SPACT_PROVOKE) = lang("自分をターゲットにさせる", "attract attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BIND) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 20, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BALL, 0
	skillname(SKILL_SPACT_BIND) = lang("束縛", "Bind")
	skilldesc(SKILL_SPACT_BIND) = lang("対象移動不能", "Targets becomes immobile")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BROWBEAT) = SKILL_ATTR_PER, SKILL_TYPE_SP, 20, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BALL, 0
	skillname(SKILL_SPACT_BROWBEAT) = lang("威嚇", "Browbeat")
	skilldesc(SKILL_SPACT_BROWBEAT) = lang("対象の攻撃力を下げる", "Decreases target attack power")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EYE_OF_BRAINWASHING) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 10, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BALL, 0
	skillname(SKILL_SPACT_EYE_OF_BRAINWASHING) = lang("洗脳の眼差し", "Eye of Brainwashing")
	skilldesc(SKILL_SPACT_EYE_OF_BRAINWASHING) = lang("PCを襲わせる", "control ally")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CALL_FAMILIAR) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 2, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_CALL_FAMILIAR) = lang("コールファミリア", "Call Familiar")
	skilldesc(SKILL_SPACT_CALL_FAMILIAR) = lang("指定した仲間を呼ぶ/待機させる", "Call Ally")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EXPLOSIVE_FIST) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 15, TARGET_TYPE_DIRECTION, 500
	skillname(SKILL_SPACT_EXPLOSIVE_FIST) = lang("爆裂拳", "Explosive Fist")
	skilldesc(SKILL_SPACT_EXPLOSIVE_FIST) = lang("格闘＋グレネード発動", "Grenade martial")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CHARGE) = SKILL_ATTR_CON, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_CHARGE) = lang("チャージ", "Charge")
	skilldesc(SKILL_SPACT_CHARGE) = lang("溜めて物理/魔法/放射を一度強化", "Strengthens Physical/Magical/Breath damage for one attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EMERGENCY_EVASION) = SKILL_ATTR_CON, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_EMERGENCY_EVASION) = lang("緊急回避", "Emergency Evasion")
	skilldesc(SKILL_SPACT_EMERGENCY_EVASION) = lang("クリティカル回避", "Enhance evasion")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MAGIC_EQUIP) = SKILL_ATTR_CON, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_MAGIC_EQUIP) = lang("魔装", "Magic Equip")
	skilldesc(SKILL_SPACT_MAGIC_EQUIP) = lang("魔法威力上昇", "Enhance magical power")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SUPER_ARMOR) = SKILL_ATTR_CON, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_SUPER_ARMOR) = lang("超重装", "Super Armor")
	skilldesc(SKILL_SPACT_SUPER_ARMOR) = lang("大ダメージを軽減", "Enhance protection")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DO_NOTHING) = SKILL_ATTR_CON, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_DO_NOTHING) = lang("何もしない", "Do Nothing")
	skilldesc(SKILL_SPACT_DO_NOTHING) = lang("ターン終了", "Turn End")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GRAVITY_SPHERE) = SKILL_ATTR_CON, SKILL_TYPE_SP, 8, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_GRAVITY_SPHERE) = lang("重力球", "Gravity Sphere")
	skilldesc(SKILL_SPACT_GRAVITY_SPHERE) = lang("階層依存ダメージ", "Gravity Damage")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ATTRIBUTE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 24, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_ATTRIBUTE) = lang("アトリビウト", "Attribute")
	skilldesc(SKILL_SPACT_ATTRIBUTE) = lang("耐性が最も高い属性を格闘に付加する", "Add attribute to martial")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_FIRE_A_VOLLEY) = SKILL_ATTR_PER, SKILL_TYPE_SP, 10, TARGET_TYPE_ENEMY + 10, 0
	skillname(SKILL_SPACT_FIRE_A_VOLLEY) = lang("一斉射撃", "Fire a Volley")
	skilldesc(SKILL_SPACT_FIRE_A_VOLLEY) = lang("仲間と一斉射撃/ゲージ50％消費", "Party Shooting/Consumes 50% gauge")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ABSOLUTE_PROTECT) = SKILL_ATTR_CON, SKILL_TYPE_SP, 80, TARGET_TYPE_SELF, 500
	skillname(SKILL_SPACT_ABSOLUTE_PROTECT) = lang("絶対防衛", "Absolute protect")
	skilldesc(SKILL_SPACT_ABSOLUTE_PROTECT) = lang("仲間のダメージを肩代わり", "Take over the damage of ally")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MEGID_FLAME) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 100, TARGET_TYPE_SELF, 700
	skillname(SKILL_SPACT_MEGID_FLAME) = lang("焼けつく波動", "Megid Flame")
	skilldesc(SKILL_SPACT_MEGID_FLAME) = lang("祝福を焼き尽くす", "Buff Bunish")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_FORCED_DRAFT) = SKILL_ATTR_STR, SKILL_TYPE_SP, 20, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_FORCED_DRAFT) = lang("強制連行", "Forced Draft")
	skilldesc(SKILL_SPACT_FORCED_DRAFT) = lang("牢獄に入れる", "Put in prison.")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CONTINUOUS_ATTACKS) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 5, TARGET_TYPE_ENEMY + 3, 0
	skillname(SKILL_SPACT_CONTINUOUS_ATTACKS) = lang("高速ラッシュ", "Continuous Attacks")
	skilldesc(SKILL_SPACT_CONTINUOUS_ATTACKS) = lang("弱威力連続攻撃", "Continuous attacks.")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_VARIABLE_BREATH) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 10, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_VARIABLE_BREATH) = lang("可変放射", "Variable Breath")
	skilldesc(SKILL_SPACT_VARIABLE_BREATH) = lang("耐性に応じた属性を放射", "Breath(variable)")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DIVINE_STREAM) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 100, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_DIVINE_STREAM) = lang("神気発勝", "Divine Stream")
	skilldesc(SKILL_SPACT_DIVINE_STREAM) = lang("神力の解放", "Release God Power")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ZERO_SHOOT) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 15, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_ZERO_SHOOT) = lang("零の間撃", "Zero Shoot")
	skilldesc(SKILL_SPACT_ZERO_SHOOT) = lang("距離補正命中率上昇の超近接射撃", "Close proximity shot with increased hit rate")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_RUBBING) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 2, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_RUBBING) = lang("愛撫の手", "Rubbing")
	skilldesc(SKILL_SPACT_RUBBING) = lang("撫でまわす", "Rub npc")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_FLASH_OF_SWIFTNESS) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_FLASH_OF_SWIFTNESS) = lang("神速の一閃", "Flash of Swiftness")
	skilldesc(SKILL_SPACT_FLASH_OF_SWIFTNESS) = lang("敵ゲージ半減/ゲージ100％消費", "Rapid Slash")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_UNDERHAND_DROP) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_UNDERHAND_DROP) = lang("逆手落とし", "Underhand Drop")
	skilldesc(SKILL_SPACT_UNDERHAND_DROP) = lang("恐怖させる刺突/ゲージ100％消費", "Piercing fear")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BISECTION) = SKILL_ATTR_STR, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_BISECTION) = lang("大烈断", "Bisection")
	skilldesc(SKILL_SPACT_BISECTION) = lang("出血させる切断/ゲージ100％消費", "Brute force")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PULVERIZATION) = SKILL_ATTR_STR, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_PULVERIZATION) = lang("砦崩し", "Pulverization")
	skilldesc(SKILL_SPACT_PULVERIZATION) = lang("防御一時的に下げる/ゲージ100％消費", "Defense break")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PENETRATION) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_PENETRATION) = lang("朧突き", "Penetration")
	skilldesc(SKILL_SPACT_PENETRATION) = lang("朦朧とさせる刺突/ゲージ100％消費", "Thrust dim")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DANCE_OF_BLOW) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_DANCE_OF_BLOW) = lang("怒涛の連撃", "Dance of Blow")
	skilldesc(SKILL_SPACT_DANCE_OF_BLOW) = lang("回避一時的に下げる/ゲージ100％消費", "Continuous attacks")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EXPLOSION) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_EXPLOSION) = lang("魂の一撃", "Explosion")
	skilldesc(SKILL_SPACT_EXPLOSION) = lang("消費後15％回復/ゲージ100％消費", "Blaze Fighting spirit")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_QUICK_USE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 40, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_QUICK_USE) = lang("モーメント", "Quick Use")
	skilldesc(SKILL_SPACT_QUICK_USE) = lang("1ターンに1度、魔道具を瞬間使用", "Quick use magic device")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SQUEEZE) = SKILL_ATTR_STR, SKILL_TYPE_SP, 10, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_SQUEEZE) = lang("スクイーズ", "Squeeze")
	skilldesc(SKILL_SPACT_SQUEEZE) = lang("不仲締め上げ/友好抱擁/家畜搾乳", "Hold enemy/Hug friend/milking livestock")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DISTURBANCE) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 10, TARGET_TYPE_ENEMY + 7, 0
	skillname(SKILL_SPACT_DISTURBANCE) = lang("撹乱", "Disturbance")
	skilldesc(SKILL_SPACT_DISTURBANCE) = lang("互いのゲージを減らす", "Decrease gauge")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CUT_TREE) = SKILL_ATTR_STR, SKILL_TYPE_SP, 12, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_CUT_TREE) = lang("樹木の伐採", "Cut Tree")
	skilldesc(SKILL_SPACT_CUT_TREE) = lang("伐採して材木にする", "make tree material")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PREACHING) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 20, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_PREACHING) = lang("説法", "Preaching")
	skilldesc(SKILL_SPACT_PREACHING) = lang("信仰のあり方について考えを広める", "encourage conversion")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_UNCONTROL) = SKILL_ATTR_STR, SKILL_TYPE_SP, 26, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_UNCONTROL) = lang("暴走", "Uncontrol")
	skilldesc(SKILL_SPACT_UNCONTROL) = lang("能力の変動・暴れ回る", "?")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CONVERGE_BREATH) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY + 10, 0
	skillname(SKILL_SPACT_CONVERGE_BREATH) = lang("収束放射", "Converge Breath")
	skilldesc(SKILL_SPACT_CONVERGE_BREATH) = lang("強力な一列放射/ゲージ100％消費", "Breath(converge)")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TIME_STOP) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 200, TARGET_TYPE_SELF, 500
	skillname(SKILL_SPACT_TIME_STOP) = lang("刻の涙", "Time Stop")
	skilldesc(SKILL_SPACT_TIME_STOP) = lang("時間を止める/ゲージ100％消費", "?")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PIERCING_ZERO_SHOOT) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY + 10, 0
	skillname(SKILL_SPACT_PIERCING_ZERO_SHOOT) = lang("零の間撃・突型", "Piercing Zero Shoot")
	skilldesc(SKILL_SPACT_PIERCING_ZERO_SHOOT) = lang("近いほど貫通率上昇/ゲージ100％消費", "Incresed Penetration rate at close range/100% gauge used")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DIFFUSION_WAVE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY + 15, 0
	skillname(SKILL_SPACT_DIFFUSION_WAVE) = lang("魔儀迦", "Diffusion Wave")
	skilldesc(SKILL_SPACT_DIFFUSION_WAVE) = lang("HPMP回復長射程攻撃/ゲージ100％消費", "Attack Multiple enemies")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ASSIMILATE) = SKILL_ATTR_STR, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_ASSIMILATE) = lang("同化吸収", "Assimilate")
	skilldesc(SKILL_SPACT_ASSIMILATE) = lang("睡眠＋吸収", "Assimilate")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_OVER_BOOST) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_OVER_BOOST) = lang("オーバーブースト", "Over Boost")
	skilldesc(SKILL_SPACT_OVER_BOOST) = lang("能力強化", "Over Boost")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_WILD_RELEASE) = SKILL_ATTR_STR, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_WILD_RELEASE) = lang("野性解放", "Wild Release")
	skilldesc(SKILL_SPACT_WILD_RELEASE) = lang("能力強化", "Wild Release")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GUTS_OF_SNAIL) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_GUTS_OF_SNAIL) = lang("かたつむりの根性", "Guts of Snail")
	skilldesc(SKILL_SPACT_GUTS_OF_SNAIL) = lang("塩耐性＋濡れ", "Guts of Snail")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DANCE_OF_THE_DEAD) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_DANCE_OF_THE_DEAD) = lang("ホラー", "Dance of the Dead")
	skilldesc(SKILL_SPACT_DANCE_OF_THE_DEAD) = lang("恐怖＋貫通攻撃", "Penetrating attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EXPLOSION_DUST) = SKILL_ATTR_CON, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY + 7, 0
	skillname(SKILL_SPACT_EXPLOSION_DUST) = lang("誘爆粉塵", "Explosion Dust")
	skilldesc(SKILL_SPACT_EXPLOSION_DUST) = lang("グレネード誘爆", "Explosion Dust")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_HALF_SOUL) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_HALF_SOUL) = lang("ハーフソウル", "Half Soul")
	skilldesc(SKILL_SPACT_HALF_SOUL) = lang("契約＋貫通攻撃", "Penetrating attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DEATH_BIND) = SKILL_ATTR_STR, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_DEATH_BIND) = lang("デスバインド", "Death Bind")
	skilldesc(SKILL_SPACT_DEATH_BIND) = lang("束縛＋貫通攻撃", "Penetrating attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TORRENTIAL_TRIBUTE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY + 7, 0
	skillname(SKILL_SPACT_TORRENTIAL_TRIBUTE) = lang("激流操", "Torrential Tribute")
	skilldesc(SKILL_SPACT_TORRENTIAL_TRIBUTE) = lang("濡れ＋無属性放射", "Attack Multiple enemies")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MIND_BREAK) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY + 3, 0
	skillname(SKILL_SPACT_MIND_BREAK) = lang("精神破壊光", "Mind Break")
	skilldesc(SKILL_SPACT_MIND_BREAK) = lang("精神攻撃/ゲージ100％消費", "Mental Pollution")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_HAND_OF_SPLENDOR) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY + 20, 0
	skillname(SKILL_SPACT_HAND_OF_SPLENDOR) = lang("光輝の手", "Hand of Splendor")
	skilldesc(SKILL_SPACT_HAND_OF_SPLENDOR) = lang("光を叩きつける/ゲージ100％消費", "magic attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GRAVITON_BUSTER) = SKILL_ATTR_CON, SKILL_TYPE_SP, 20, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_GRAVITON_BUSTER) = lang("グラビトンバスター", "Graviton Buster")
	skilldesc(SKILL_SPACT_GRAVITON_BUSTER) = lang("階層依存放射/ゲージ100％消費", "Gravity Blast/Consumes 100% gauge")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MANA_SLASH) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_MANA_SLASH) = lang("魔刃狩り", "Mana Slash")
	skilldesc(SKILL_SPACT_MANA_SLASH) = lang("敵のMPにもダメージ/ゲージ100％消費", "Damages enemy MP/100% gauge used")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_INTENSIVE_POWER) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF, 0
	skillname(SKILL_SPACT_INTENSIVE_POWER) = lang("力の集約", "Intensive Power")
	skilldesc(SKILL_SPACT_INTENSIVE_POWER) = lang("HPMP回復・ゲージ上昇", "HP/MP Recovery, Increase gauge")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SPACE_RETENTION) = SKILL_ATTR_CON, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF, 0
	skillname(SKILL_SPACT_SPACE_RETENTION) = lang("空間掌握", "Space Retention")
	skilldesc(SKILL_SPACT_SPACE_RETENTION) = lang("周囲のテレポート発動を防ぐ", "Prevent teleport")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DISTANT_ATTACK) = SKILL_ATTR_DEX, SKILL_TYPE_ATTACK, 2, TARGET_TYPE_ENEMY + 3, 0
	skillname(SKILL_SPACT_DISTANT_ATTACK) = lang("遠距離打撃", "Distant Attack")
	skilldesc(SKILL_SPACT_DISTANT_ATTACK) = lang("遠距離打撃", "Distant Attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SPINNING_THROW) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY + 10, 0
	skillname(SKILL_SPACT_SPINNING_THROW) = lang("超輪転", "Spinning Throw")
	skilldesc(SKILL_SPACT_SPINNING_THROW) = lang("貫通率上昇必中会心/ゲージ100％消費", "Revolve enough to penetrate")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_METAL_GUARD) = SKILL_ATTR_CON, SKILL_TYPE_SP, 70, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_METAL_GUARD) = lang("メタルコート", "Metal Guard")
	skilldesc(SKILL_SPACT_METAL_GUARD) = lang("一度だけ受けるダメージを1/10にする", "To 1/10 damage once.")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_THUNDERCLAP_KICK) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 35, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_THUNDERCLAP_KICK) = lang("迅雷脚", "Thunderclap Kick")
	skilldesc(SKILL_SPACT_THUNDERCLAP_KICK) = lang("接近格闘＋電撃/ゲージ25％消費", "Martial lightning attack/Consumes 25% gauge")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_STRUCK_OUT) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 15, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_STRUCK_OUT) = lang("ストラックアウト", "Struck Out")
	skilldesc(SKILL_SPACT_STRUCK_OUT) = lang("3×3マスへの投擲攻撃", "Throwing attack circle")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BEWITCH) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 10, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_BEWITCH) = lang("悩殺攻撃", "Bewitch")
	skilldesc(SKILL_SPACT_BEWITCH) = lang("成功すると金を巻き上げ動きを止める", "Stop movement of opponent")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SHADOW_RUSH) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 10, TARGET_TYPE_ENEMY + 10, 0
	skillname(SKILL_SPACT_SHADOW_RUSH) = lang("全軍突撃", "Shadow Rush")
	skilldesc(SKILL_SPACT_SHADOW_RUSH) = lang("仲間と一斉突撃/ゲージ75％消費", "Party Attack/Consumes 75% gauge")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TAG_FORCE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 24, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_TAG_FORCE) = lang("タッグフォース", "Tag Force")
	skilldesc(SKILL_SPACT_TAG_FORCE) = lang("タッグ強化回復/ゲージ50％消費", "Strengthen tag/gauge50")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BODY_BLOW) = SKILL_ATTR_STR, SKILL_TYPE_SP, 10, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_BODY_BLOW) = lang("ボディブロー", "Body Blow")
	skilldesc(SKILL_SPACT_BODY_BLOW) = lang("格闘攻撃にボディブロー追加", "Add body blow to martial")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_NECRO_FORCE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 10, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_NECRO_FORCE) = lang("ネクロフォース", "Necro Force")
	skilldesc(SKILL_SPACT_NECRO_FORCE) = lang("使役アンデッド制御", "Control coffin undead")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CLOSE_SUICIDE) = SKILL_ATTR_CON, SKILL_TYPE_SP, 18, TARGET_TYPE_ENEMY, 700
	skillname(SKILL_SPACT_CLOSE_SUICIDE) = lang("道連れ", "Close Suicide")
	skilldesc(SKILL_SPACT_CLOSE_SUICIDE) = lang("自爆", "Suicide")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_KNOCKOUT) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 5, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_KNOCKOUT) = lang("ノックアウト攻撃", "Knockout")
	skilldesc(SKILL_SPACT_KNOCKOUT) = lang("手加減攻撃し気絶を狙う", "Attack to stun")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_OVERRAY) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 10, TARGET_TYPE_ENEMY + 7, 0
	skillname(SKILL_SPACT_OVERRAY) = lang("多重詠唱魔法", "Over-Ray")
	skilldesc(SKILL_SPACT_OVERRAY) = lang("仲間の魔力を集積/ゲージ50％消費", "Attack by integrating the magic of ally.")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SMASH_GROUND) = SKILL_ATTR_STR, SKILL_TYPE_SP, 12, TARGET_TYPE_SELF_ONLY, 220
	skillname(SKILL_SPACT_SMASH_GROUND) = lang("地砕き", "Smash Ground")
	skilldesc(SKILL_SPACT_SMASH_GROUND) = lang("隣接対象攻撃・怯み短", "Attack circle")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_VORACITY_FANG) = SKILL_ATTR_STR, SKILL_TYPE_HAND, 12, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_VORACITY_FANG) = lang("貪食の牙", "Voracity Fang")
	skilldesc(SKILL_SPACT_VORACITY_FANG) = lang("体力吸収・満腹時嘔吐", "Drain HP")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SHIELD_STRIKE) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_SHIELD_STRIKE) = lang("盾殴り", "Shield Strike")
	skilldesc(SKILL_SPACT_SHIELD_STRIKE) = lang("衝撃で敵を朦朧麻痺/ゲージ100％消費", "Impact that dims and paralyzes enemies/100% gauge used")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GAUGE_RELEASE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 1, TARGET_TYPE_ENEMY + 10, 0
	skillname(SKILL_SPACT_GAUGE_RELEASE) = lang("【力の解放】", "<Gauge Release>")
	skilldesc(SKILL_SPACT_GAUGE_RELEASE) = lang("次の攻撃時にゲージ技で追加攻撃", "Add gauge skill to the next attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ALCHEMICAL_RAIN) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 35, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_ALCHEMICAL_RAIN) = lang("錬成雨", "Alchemical Rain")
	skilldesc(SKILL_SPACT_ALCHEMICAL_RAIN) = lang("ポーション効果を視界内無差別に", "Widens potion effect range.")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MULTIPLE_GATHER) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF, 0
	skillname(SKILL_SPACT_MULTIPLE_GATHER) = lang("強制集合", "Multiple Gather")
	skilldesc(SKILL_SPACT_MULTIPLE_GATHER) = lang("複数の対象を引き寄せ", "Draw targets")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PSYCHIC_WAVE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 20, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_PSYCHIC_WAVE) = lang("サイキックウェーブ", "Psychic Wave")
	skilldesc(SKILL_SPACT_PSYCHIC_WAVE) = lang("束縛＋LV依存の変動固定ダメージ", "Bind and level dependent fixed damage")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_READING_PARTY) = SKILL_ATTR_LER, SKILL_TYPE_SP, 5, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_READING_PARTY) = lang("読書会", "Reading Party")
	skilldesc(SKILL_SPACT_READING_PARTY) = lang("仲間と一緒に書物の解読を行う", "Reading Party")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_OVER_LONG_THROW) = SKILL_ATTR_STR, SKILL_TYPE_SP, 3, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_OVER_LONG_THROW) = lang("超遠投", "Over Long Throw")
	skilldesc(SKILL_SPACT_OVER_LONG_THROW) = lang("遠距離に適した投擲攻撃", "Suitable for long distance")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DUPLICANE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_DUPLICANE) = lang("デュプリケイン", "Dupli-Cane")
	skilldesc(SKILL_SPACT_DUPLICANE) = lang("攻撃杖の回数減無効/威力減/Sp3消費", "Use rods without consuming charges/Reduced Power/Consumes 3 SP")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_LOCK_BREAK) = SKILL_ATTR_STR, SKILL_TYPE_SP, 6, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_LOCK_BREAK) = lang("破錠攻撃", "Lock Break")
	skilldesc(SKILL_SPACT_LOCK_BREAK) = lang("力を結集し鍵破壊/中身微破損", "Join forces to break the lock")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MEMORY_POISON) = SKILL_ATTR_CON, SKILL_TYPE_HAND, 150, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_MEMORY_POISON) = lang("侵食の毒牙", "Memory Poison")
	skilldesc(SKILL_SPACT_MEMORY_POISON) = lang("毒属性/能力一時減少", "Decrease ability temporarily")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BLADE_TURBULENCE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 15, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_BLADE_TURBULENCE) = lang("乱れ切風", "Blade Turbulence")
	skilldesc(SKILL_SPACT_BLADE_TURBULENCE) = lang("周囲の敵に切り傷ダメージ", "Bleeding attack to surrounding enemies.")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CLASH_RUSH) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 25, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_CLASH_RUSH) = lang("捨て身", "Clash Rush")
	skilldesc(SKILL_SPACT_CLASH_RUSH) = lang("接近攻撃/反動あり/ゲージ25％消費", "Attack at the risk of life")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DEATH_SONG) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_DEATH_SONG) = lang("破滅の歌", "Death Song")
	skilldesc(SKILL_SPACT_DEATH_SONG) = lang("周囲全員に音属性対抗死の宣告", "Death for surrounding.")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_HOMING_LASER) = SKILL_ATTR_PER, SKILL_TYPE_SP, 12, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_HOMING_LASER) = lang("マルチロック射撃", "Homing Laser")
	skilldesc(SKILL_SPACT_HOMING_LASER) = lang("敵の数に応じて分散する射撃", "The entire distributed attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MP_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_SP, 25, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_MP_BREATH) = lang("破壊の奔流", "MP Breath")
	skilldesc(SKILL_SPACT_MP_BREATH) = lang("MP25％消費/放射攻撃", "MP Breath")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BOUND_IN_BLOOD) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 28, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_BOUND_IN_BLOOD) = lang("血の結束", "Bound in Blood")
	skilldesc(SKILL_SPACT_BOUND_IN_BLOOD) = lang("元々の種族が同じ仲間を強化", "Strengthen same race allies")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SILENT_OCEAN) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 28, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_SILENT_OCEAN) = lang("沈黙の海", "Silent Ocean")
	skilldesc(SKILL_SPACT_SILENT_OCEAN) = lang("視界内水化/範囲内沈黙", "Flooded and silence")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DIMENSION_FISHING) = SKILL_ATTR_PER, SKILL_TYPE_SP, 16, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_DIMENSION_FISHING) = lang("亜空釣り", "Dimension Fishing")
	skilldesc(SKILL_SPACT_DIMENSION_FISHING) = lang("敵1体を引き寄せ", "Draw enemy")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_FASCINATION_DANCE) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 21, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_FASCINATION_DANCE) = lang("魅了の舞", "Fascination Dance")
	skilldesc(SKILL_SPACT_FASCINATION_DANCE) = lang("確率で視界内の敵を麻痺・疲労", "Stop movement of enemies")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_VINDALIAN_JIUJITSU) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_VINDALIAN_JIUJITSU) = lang("ヴィンデリアン柔術", "Vindalian Jiu-jitsu")
	skilldesc(SKILL_SPACT_VINDALIAN_JIUJITSU) = lang("格闘スタイルの切替", "Change martial style.")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BLADE_STRINGS) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 10, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_BLADE_STRINGS) = lang("ブレードストリングス", "Blade Strings")
	skilldesc(SKILL_SPACT_BLADE_STRINGS) = lang("戦術器用依存攻撃/トラップ設置", "Cutting attack/Trap installation")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DANCING_WIRE) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 18, TARGET_TYPE_OTHER + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_DANCING_WIRE) = lang("踊る鋼線", "Dancing Wire")
	skilldesc(SKILL_SPACT_DANCING_WIRE) = lang("対象を束縛し引き寄せ", "Draw target/Binding target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EYE_OF_STIFFEN) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 8, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BALL, 0
	skillname(SKILL_SPACT_EYE_OF_STIFFEN) = lang("硬直の眼差し", "Eye of Stiffen")
	skilldesc(SKILL_SPACT_EYE_OF_STIFFEN) = lang("神経ダメージ/対象の防御力一時上昇", "Damage nerve/Increases protect target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EYE_OF_ILLUSION) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 8, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BALL, 0
	skillname(SKILL_SPACT_EYE_OF_ILLUSION) = lang("幻惑の眼差し", "Eye of Illusion")
	skilldesc(SKILL_SPACT_EYE_OF_ILLUSION) = lang("幻惑ダメージ", "Damage mind")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_EXTERMINATION_BREATH) = SKILL_ATTR_CON, SKILL_TYPE_SP, 10, TARGET_TYPE_BOTH + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_EXTERMINATION_BREATH) = lang("殲滅可変放射", "Extermination Breath")
	skilldesc(SKILL_SPACT_EXTERMINATION_BREATH) = lang("耐性属性視界内放射/ゲージ25％消費", "All Breath(variable)")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_RESOLUTION_HAND) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 15, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_RESOLUTION_HAND) = lang("錬成掌", "Resolution Hand")
	skilldesc(SKILL_SPACT_RESOLUTION_HAND) = lang("手系技能に追加ダメージ", "Touch and damage")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MATERIALIZE) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 40, TARGET_TYPE_ENEMY + 7, 0
	skillname(SKILL_SPACT_MATERIALIZE) = lang("マテリアライズ", "Materialize")
	skilldesc(SKILL_SPACT_MATERIALIZE) = lang("対象が瀕死ならマテリアル化", "Kill target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_COWERING_SMILE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 32, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_COWERING_SMILE) = lang("戦慄の笑顔", "Cowering Smile")
	skilldesc(SKILL_SPACT_COWERING_SMILE) = lang("視界内に萎縮と震えをまき散らす", "Spread atrophy and chills around.")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SMILE_FIELD) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 20, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_SMILE_FIELD) = lang("スマイルフィールド", "Smile Field")
	skilldesc(SKILL_SPACT_SMILE_FIELD) = lang("視界内全員強化", "Strengthen everyone around.")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ABYSS_IN_THE_EYE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 21, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_ABYSS_IN_THE_EYE) = lang("瞳の奥の深淵", "Abyss in the eye")
	skilldesc(SKILL_SPACT_ABYSS_IN_THE_EYE) = lang("心眼強化/眼差し系の技能に効果追加", "Enhance Eye of Mind/Adds absorption to Eye-skills")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SHIELD_PARRY) = SKILL_ATTR_CON, SKILL_TYPE_SP, 30, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_SHIELD_PARRY) = lang("シールドパリィ", "Shield Parry")
	skilldesc(SKILL_SPACT_SHIELD_PARRY) = lang("近接攻撃を盾で弾く", "Parry")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ROCKET_FIRE) = SKILL_ATTR_PER, SKILL_TYPE_SP, 20, TARGET_TYPE_ENEMY + 10, 0
	skillname(SKILL_SPACT_ROCKET_FIRE) = lang("砲弾発射", "Rocket Fire")
	skilldesc(SKILL_SPACT_ROCKET_FIRE) = lang("防御を下げる射撃/ゲージ25％消費", "Attack and reduce defense/Consumes 25% gauge")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_NUCLEAR_FIRE) = SKILL_ATTR_PER, SKILL_TYPE_SP, 50, TARGET_TYPE_ENEMY + 10, 0
	skillname(SKILL_SPACT_NUCLEAR_FIRE) = lang("核発射", "Nuclear Fire")
	skilldesc(SKILL_SPACT_NUCLEAR_FIRE) = lang("広範囲射撃/ゲージ25％消費", "Extensive Firing/Consumes 25% gauge")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GOLDEN_STORM) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 18, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_GOLDEN_STORM) = lang("デフレストーム", "Golden Storm")
	skilldesc(SKILL_SPACT_GOLDEN_STORM) = lang("所持金貨２千枚を投げ散らす", "Consume 2000gold attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GRAVITY_ACCEL) = SKILL_ATTR_CON, SKILL_TYPE_SP, 21, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_GRAVITY_ACCEL) = lang("重力偏向", "Gravity Accel")
	skilldesc(SKILL_SPACT_GRAVITY_ACCEL) = lang("重力の向きを変えて戦闘に応用", "Gravity buff")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GIGA_GRAVITATION) = SKILL_ATTR_CON, SKILL_TYPE_SP, 18, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 0
	skillname(SKILL_SPACT_GIGA_GRAVITATION) = lang("超重圧殺", "Giga Gravitation")
	skilldesc(SKILL_SPACT_GIGA_GRAVITATION) = lang("周辺の敵に重力依存ダメージ/MP10％消費", "Gravity Damage Surround/Consumes 10% MP")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_HYPER_DASH) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 21, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_HYPER_DASH) = lang("烈走破", "Hyper Dash")
	skilldesc(SKILL_SPACT_HYPER_DASH) = lang("押しのけ移動しつつ攻撃", "Run through and attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_VIOLENT_GARDEN) = SKILL_ATTR_LER, SKILL_TYPE_SP, 22, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_VIOLENT_GARDEN) = lang("暴虐の庭園", "Violent Garden")
	skilldesc(SKILL_SPACT_VIOLENT_GARDEN) = lang("視界内束縛毒ダメージ", "Bind and poison")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MISTELTEIN) = SKILL_ATTR_LER, SKILL_TYPE_SP, 8, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_MISTELTEIN) = lang("ミストルティン", "Misteltein")
	skilldesc(SKILL_SPACT_MISTELTEIN) = lang("対象弱体・マナダメージ・神特効", "Damage MP and weaken")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_AROMAGEDDON) = SKILL_ATTR_LER, SKILL_TYPE_SP, 24, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_AROMAGEDDON) = lang("アロマゲドン", "Aromageddon")
	skilldesc(SKILL_SPACT_AROMAGEDDON) = lang("味方MP回復敵弱体/精油消費", "Expend essential oil")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CURTAIN_OF_SMOKE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 31, TARGET_TYPE_SELF, 0
	skillname(SKILL_SPACT_CURTAIN_OF_SMOKE) = lang("黒煙のトバリ", "Curtain of Smoke")
	skilldesc(SKILL_SPACT_CURTAIN_OF_SMOKE) = lang("視界を狭める煙の発生", "Create smoke")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_SMOKE_MIRROR) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF, 500
	skillname(SKILL_SPACT_SMOKE_MIRROR) = lang("煙吐く鏡", "Smoke Mirror")
	skilldesc(SKILL_SPACT_SMOKE_MIRROR) = lang("煙幕＆能力転写", "?")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MIRROR) = SKILL_ATTR_PER, SKILL_TYPE_SP, 10, TARGET_TYPE_DIRECTION, 500
	skillname(SKILL_SPACT_MIRROR) = lang("超認識", "Mirror")
	skilldesc(SKILL_SPACT_MIRROR) = lang("対象の状態の感知", "Know bonus")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MELT_CLINCH) = SKILL_ATTR_STR, SKILL_TYPE_SP, 25, TARGET_TYPE_ENEMY, 0
	skillname(SKILL_SPACT_MELT_CLINCH) = lang("溶解クリンチ", "Melt Clinch")
	skilldesc(SKILL_SPACT_MELT_CLINCH) = lang("酸攻撃と萎縮/両者束縛", "Acid attack/daunted/bind")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_FORMLESS_FETTER) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 27, TARGET_TYPE_SELF, 0
	skillname(SKILL_SPACT_FORMLESS_FETTER) = lang("無形の枷", "Formless Fetter")
	skilldesc(SKILL_SPACT_FORMLESS_FETTER) = lang("マップエフェクト上の敵を攻撃束縛", "Bind on map effects")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BLOOD_STREAM) = SKILL_ATTR_CON, SKILL_TYPE_SP, 18, TARGET_TYPE_ENEMY + 7, 0
	skillname(SKILL_SPACT_BLOOD_STREAM) = lang("鮮血の撃刃", "Blood Stream")
	skilldesc(SKILL_SPACT_BLOOD_STREAM) = lang("出血量依存攻撃/出血悪化", "Line attack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_FLAME_OF_RAGE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 22, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_FLAME_OF_RAGE) = lang("怒りの爆炎", "Flame of Rage")
	skilldesc(SKILL_SPACT_FLAME_OF_RAGE) = lang("激怒時のみ視界内火炎ダメージ", "Fire damage only when fury")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_IMPACT_GUNFIRE) = SKILL_ATTR_PER, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY + 10, 0
	skillname(SKILL_SPACT_IMPACT_GUNFIRE) = lang("重衝撃断動弾", "Impact Gunfire")
	skilldesc(SKILL_SPACT_IMPACT_GUNFIRE) = lang("衝撃で敵転倒/ゲージ100％消費", "Knockdown target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ONE_POINT_SHOOT) = SKILL_ATTR_PER, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY + 10, 0
	skillname(SKILL_SPACT_ONE_POINT_SHOOT) = lang("壱点連弾銃", "One Point Shoot")
	skilldesc(SKILL_SPACT_ONE_POINT_SHOOT) = lang("防御一時的に下げる/ゲージ100％消費", "Defense break")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_CRITICAL_PARTICLE_CANNON) = SKILL_ATTR_PER, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY + 10, 0
	skillname(SKILL_SPACT_CRITICAL_PARTICLE_CANNON) = lang("臨界粒子砲", "Critical Particle Cannon")
	skilldesc(SKILL_SPACT_CRITICAL_PARTICLE_CANNON) = lang("閃光で敵盲目/ゲージ100％消費", "hitting the target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_HELM_SMASHER) = SKILL_ATTR_PER, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY + 10, 0
	skillname(SKILL_SPACT_HELM_SMASHER) = lang("兜裂き", "Helm Smasher")
	skilldesc(SKILL_SPACT_HELM_SMASHER) = lang("衝撃で敵麻痺/ゲージ100％消費", "Paralyze target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ARROW_RAIN) = SKILL_ATTR_PER, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY + 10, 0
	skillname(SKILL_SPACT_ARROW_RAIN) = lang("浴びせ滝矢射", "Arrow Rain")
	skilldesc(SKILL_SPACT_ARROW_RAIN) = lang("回避一時的に下げる/ゲージ100％消費", "Reduce avoidance")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BLAME_PAIN) = SKILL_ATTR_CON, SKILL_TYPE_SP, 19, TARGET_TYPE_ENEMY + 4, 500
	skillname(SKILL_SPACT_BLAME_PAIN) = lang("地獄の責め苦", "Blame Pain")
	skilldesc(SKILL_SPACT_BLAME_PAIN) = lang("地獄ダメージ/拷問成功時ゲージ減少", "Damage nether/Reduce power gauge")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_WIN) = SKILL_ATTR_SPD, SKILL_TYPE_SP, 1, TARGET_TYPE_ENEMY + 7, 500
	skillname(SKILL_SPACT_WIN) = lang("*勝利*", "<Win>")
	skilldesc(SKILL_SPACT_WIN) = lang("即死攻撃/Purgeモード専用", "Instant death attack / Purge mode only")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PURGE) = SKILL_ATTR_SPD, SKILL_TYPE_SP, 1, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_PURGE) = lang("*Purge*", "<Purge>")
	skilldesc(SKILL_SPACT_PURGE) = lang("視界内の敵瀕死化/Purgeモード専用", "Enemies dying / Purge mode only")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_UNISON_IMPACT) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 10, TARGET_TYPE_ENEMY + 7, 0
	skillname(SKILL_SPACT_UNISON_IMPACT) = lang("【合体攻撃発動】", "<Unison Impact>")
	skilldesc(SKILL_SPACT_UNISON_IMPACT) = lang("全員のゲージ全消費して合体攻撃", "Attack with all ally")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GROUP_HYPNOSIS) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 25, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_GROUP_HYPNOSIS) = lang("集団催眠", "Group Hypnosis")
	skilldesc(SKILL_SPACT_GROUP_HYPNOSIS) = lang("視界内の敵睡眠・洗脳", "Sleep or brainwashing enemies in sight")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_THREAD_OF_INNERVATION) = SKILL_ATTR_PER, SKILL_TYPE_SP, 14, TARGET_TYPE_ENEMY + 4, 0
	skillname(SKILL_SPACT_THREAD_OF_INNERVATION) = lang("神経支配の糸", "Thread of Innervation")
	skilldesc(SKILL_SPACT_THREAD_OF_INNERVATION) = lang("生化学感覚依存攻撃/瀕死なら人形化", "Nerve attack/Change doll")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MARKING) = SKILL_ATTR_CON, SKILL_TYPE_SP, 10, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_MARKING) = lang("マーキング", "Marking")
	skilldesc(SKILL_SPACT_MARKING) = lang("体内の水分を使いマーキングする", "Mark with body moisture")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_GRAND_FINALE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 101, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_GRAND_FINALE) = lang("グランドフィナーレ", "Grand Finale")
	skilldesc(SKILL_SPACT_GRAND_FINALE) = lang("プレイヤー駆逐", "Player extermination")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DATA_DELETE) = SKILL_ATTR_MAG, SKILL_TYPE_SP, 1, TARGET_TYPE_ENEMY + SKILL_TYPE_FOV_BALL, 0
	skillname(SKILL_SPACT_DATA_DELETE) = lang("メモリーデリート", "Data Delete")
	skilldesc(SKILL_SPACT_DATA_DELETE) = lang("能力を一部抹消/ゲージ100％消費", "Delete skill and power")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DISPATCH_FLYING_BEAST) = SKILL_ATTR_DEX, SKILL_TYPE_TELEPORT, 5, TARGET_TYPE_DIRECTION, 0
	skillname(SKILL_SPACT_DISPATCH_FLYING_BEAST) = lang("飛獣送り", "Dispatch Flying Beast")
	skilldesc(SKILL_SPACT_DISPATCH_FLYING_BEAST) = lang("対象の適正距離へ送る/Chain切り", "Send off chara and chain cut")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_KILLING_DANCE) = SKILL_ATTR_PER, SKILL_TYPE_SP, 44, TARGET_TYPE_SELF_ONLY, 500
	skillname(SKILL_SPACT_KILLING_DANCE) = lang("死神の舞踏", "Killing Dance")
	skilldesc(SKILL_SPACT_KILLING_DANCE) = lang("回避判定追加反撃", "Adds chance to avoid and counterattack")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_DECAPITATION2) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 30, TARGET_TYPE_ENEMY + 1, 0
	skillname(SKILL_SPACT_DECAPITATION2) = lang("首狩り", "Decapitation")
	skilldesc(SKILL_SPACT_DECAPITATION2) = lang("対象が瀕死なら即死", "Kill low-health target")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_ANAPHYLAXIS) = SKILL_ATTR_CON, SKILL_TYPE_SP, 22, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_ANAPHYLAXIS) = lang("アナフィラキシー", "Anaphylaxis")
	skilldesc(SKILL_SPACT_ANAPHYLAXIS) = lang("視界内毒状態の敵に大ダメージ", "Attack enemies of the poison state")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_HAZARD_RECIPE) = SKILL_ATTR_PER, SKILL_TYPE_SP, 15, TARGET_TYPE_SELF_ONLY, 0
	skillname(SKILL_SPACT_HAZARD_RECIPE) = lang("ハザードレシピ", "Hazard Recipe")
	skilldesc(SKILL_SPACT_HAZARD_RECIPE) = lang("食品を化学兵器に作り変える", "Reshape food to chemical weapon")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_VENOTRATE) = SKILL_ATTR_DEX, SKILL_TYPE_SP, 20, TARGET_TYPE_ENEMY + 10, 500
	skillname(SKILL_SPACT_VENOTRATE) = lang("ヴェノトレイト", "Venotrate")
	skilldesc(SKILL_SPACT_VENOTRATE) = lang("問答無用で毒状態/ゲージ25％消費", "Poison target/gauge25")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PERSUASION) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 10, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_PERSUASION) = lang("全力説得", "Persuasion")
	skilldesc(SKILL_SPACT_PERSUASION) = lang("意志対抗/SP減っている対象ほど疲労", "Against WIL,Fatigue decreasing SP enemies")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_PECULIAR_JOKE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 10, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_PECULIAR_JOKE) = lang("渾身のギャグ", "Peculiar Joke")
	skilldesc(SKILL_SPACT_PECULIAR_JOKE) = lang("感覚対抗/ゲージが低い対象ほど疲労", "Against PER,Fatigue low power gauge enemies")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_BLENDED_LIE) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 10, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_BLENDED_LIE) = lang("少しの大嘘", "Blended Lie")
	skilldesc(SKILL_SPACT_BLENDED_LIE) = lang("器用対抗/MP減っている対象ほど疲労", "Against DEX,Fatigue decreasing MP enemies")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_INTIMIDATION) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 10, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_INTIMIDATION) = lang("脅迫地獄", "Intimidation")
	skilldesc(SKILL_SPACT_INTIMIDATION) = lang("筋力対抗/HP減っている対象ほど疲労", "Against STR,Fatigue decreasing HP enemies")

	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_MYSTERIOUS_SONG) = SKILL_ATTR_WIL, SKILL_TYPE_SP, 10, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_MYSTERIOUS_SONG) = lang("魔唱", "Mysterious Song")
	skilldesc(SKILL_SPACT_MYSTERIOUS_SONG) = lang("魔力対抗/ゲージが高い対象ほど疲労", "Against MAG,Fatigue high power gauge enemies")
	
	sdataref(SKILL_DATAREF_USE, SKILL_SPACT_TUIN_DER_LUSTEN) = SKILL_ATTR_CHA, SKILL_TYPE_SP, 10, TARGET_TYPE_SELF + SKILL_TYPE_FOV_BOLT, 500
	skillname(SKILL_SPACT_TUIN_DER_LUSTEN) = lang("快楽の園", "Tuin der Lusten")
	skilldesc(SKILL_SPACT_TUIN_DER_LUSTEN) = lang("魅力対抗/広域気持ちいいこと/疲労大", "Against CHR,Give pleasure to drunken people")

	return

#deffunc calcskill int calcskill_skillid, int calcskill_charid, int calcskill_spellpower
	locvar_calcskill_rs = sdata(sdataref(SKILL_DATAREF_USE, calcskill_skillid), calcskill_charid)
	ele = SKILL_NONE
	elep = 0
	if ( calcskill_skillid == SKILL_SPELL_UNCURSE ) {
		dice1 = 0
		dice2 = 0 + 1
		bonus = locvar_calcskill_rs * calcskill_spellpower * 5 / 100
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_RESURRECTION ) {
		dice1 = 0
		dice2 = 0 + 1
		bonus = limit((locvar_calcskill_rs * 5 + calcskill_spellpower) / 20 + 40, 40, 100)
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_IDENTIFY ) {
		dice1 = 0
		dice2 = 0 + 1
		bonus = locvar_calcskill_rs * calcskill_spellpower * 10 / 100
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_HEAL_LIGHT ) {
		dice1 = 1 + locvar_calcskill_rs / 30
		dice2 = calcskill_spellpower / 40 + 5 + 1
		bonus = calcskill_spellpower / 30
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_HEAL_CRITICAL ) {
		dice1 = 2 + locvar_calcskill_rs / 26
		dice2 = calcskill_spellpower / 25 + 5 + 1
		bonus = calcskill_spellpower / 15
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_HEALING_TOUCH ) {
		dice1 = 2 + locvar_calcskill_rs / 22
		dice2 = calcskill_spellpower / 18 + 5 + 1
		bonus = calcskill_spellpower / 10
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_CURE_OF_ERIS ) {
		dice1 = 3 + locvar_calcskill_rs / 15
		dice2 = calcskill_spellpower / 12 + 5 + 1
		bonus = calcskill_spellpower / 6
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_CURE_OF_JURE ) {
		dice1 = 5 + locvar_calcskill_rs / 10
		dice2 = calcskill_spellpower / 7 + 5 + 1
		bonus = calcskill_spellpower / 2
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_HOLY_LIGHT ) {
		dice1 = 0
		dice2 = 0 + 1
		bonus = locvar_calcskill_rs * 5 + calcskill_spellpower * 2
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_VANQUISH_HEX ) {
		dice1 = 0
		dice2 = 0 + 1
		bonus = locvar_calcskill_rs * 5 + calcskill_spellpower * 3 / 2
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_PRAYER_OF_JURE ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = cdata(CDATA_PIETY, calcskill_charid) / 70 + 1 + 1
		bonus = 0
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_ABSORB_MAGIC ) {
		dice1 = 1 + locvar_calcskill_rs / 20
		dice2 = cdata(CDATA_PIETY, calcskill_charid) / 140 + 1 + 1
		bonus = 0
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_MAGIC_DART ) {
		dice1 = calcskill_spellpower / 80 + 2 + locvar_calcskill_rs / 30
		dice2 = calcskill_spellpower / 20 + 2 + 1
		bonus = 0
		ele = SKILL_RES_MAGIC
		elep = 100 + calcskill_spellpower / 4
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_CRYSTAL_SPEAR ) {
		dice1 = calcskill_spellpower / 70 + 1 + locvar_calcskill_rs / 25
		dice2 = calcskill_spellpower / 18 + 2 + 1
		bonus = 0
		ele = SKILL_RES_MAGIC
		elep = 100 + calcskill_spellpower / 4
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_DARK_EYE ) {
		dice1 = calcskill_spellpower / 80 + 1 + locvar_calcskill_rs / 18
		dice2 = calcskill_spellpower / 18 + 8 + 1
		bonus = 0
		ele = SKILL_RES_DARKNESS
		elep = 200 + calcskill_spellpower / 3
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_NETHER_ARROW ) {
		dice1 = calcskill_spellpower / 80 + 1 + locvar_calcskill_rs / 18
		dice2 = calcskill_spellpower / 18 + 8 + 1
		bonus = 0
		ele = SKILL_RES_NETHER
		elep = 200 + calcskill_spellpower / 3
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_CHAOS_EYE ) {
		dice1 = calcskill_spellpower / 80 + 1 + locvar_calcskill_rs / 18
		dice2 = calcskill_spellpower / 18 + 8 + 1
		bonus = 0
		ele = SKILL_RES_CHAOS
		elep = 200 + calcskill_spellpower / 3
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_NERVE_ARROW ) {
		dice1 = calcskill_spellpower / 80 + 1 + locvar_calcskill_rs / 18
		dice2 = calcskill_spellpower / 18 + 8 + 1
		bonus = 0
		ele = SKILL_RES_NERVE
		elep = 200 + calcskill_spellpower / 3
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_ICE_BOLT ) {
		dice1 = calcskill_spellpower / 60 + 1 + locvar_calcskill_rs / 15
		dice2 = calcskill_spellpower / 14 + 4 + 1
		bonus = 0
		ele = SKILL_RES_COLD
		elep = 180 + calcskill_spellpower / 4
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_FIRE_BOLT ) {
		dice1 = calcskill_spellpower / 60 + 1 + locvar_calcskill_rs / 15
		dice2 = calcskill_spellpower / 14 + 4 + 1
		bonus = 0
		ele = SKILL_RES_FIRE
		elep = 180 + calcskill_spellpower / 4
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_LIGHTNING_BOLT ) {
		dice1 = calcskill_spellpower / 70 + 1 + locvar_calcskill_rs / 15
		dice2 = calcskill_spellpower / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_LIGHTNING
		elep = 180 + calcskill_spellpower / 4
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_DARKNESS_BOLT ) {
		dice1 = calcskill_spellpower / 70 + 1 + locvar_calcskill_rs / 15
		dice2 = calcskill_spellpower / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_DARKNESS
		elep = 180 + calcskill_spellpower / 4
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_MIND_BOLT ) {
		dice1 = calcskill_spellpower / 70 + 1 + locvar_calcskill_rs / 15
		dice2 = calcskill_spellpower / 15 + 4 + 1
		bonus = 0
		ele = SKILL_RES_MIND
		elep = 180 + calcskill_spellpower / 4
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_WATER_BOLT ) {
		dice1 = calcskill_spellpower / 70 + 1 + locvar_calcskill_rs / 50
		dice2 = calcskill_spellpower / 52 + 2 + 1
		bonus = 0
		ele = SKILL_NONE
		elep = 100
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_ICE_BALL ) {
		dice1 = calcskill_spellpower / 60 + 1 + locvar_calcskill_rs / 20
		dice2 = calcskill_spellpower / 10 + 2 + 1
		bonus = 0
		ele = SKILL_RES_COLD
		elep = 150 + calcskill_spellpower / 5
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_FIRE_BALL ) {
		dice1 = calcskill_spellpower / 60 + 1 + locvar_calcskill_rs / 20
		dice2 = calcskill_spellpower / 10 + 2 + 1
		bonus = 0
		ele = SKILL_RES_FIRE
		elep = 150 + calcskill_spellpower / 5
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_CHAOS_BALL ) {
		dice1 = calcskill_spellpower / 70 + 1 + locvar_calcskill_rs / 20
		dice2 = calcskill_spellpower / 10 + 2 + 1
		bonus = 0
		ele = SKILL_RES_CHAOS
		elep = 150 + calcskill_spellpower / 5
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_RAGING_ROAR ) {
		dice1 = calcskill_spellpower / 70 + 1 + locvar_calcskill_rs / 20
		dice2 = calcskill_spellpower / 10 + 2 + 1
		bonus = 0
		ele = SKILL_RES_SOUND
		elep = 150 + calcskill_spellpower / 5
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_MAGIC_STORM ) {
		dice1 = calcskill_spellpower / 70 + 1 + locvar_calcskill_rs / 30
		dice2 = calcskill_spellpower / 12 + 2 + 1
		bonus = 0
		ele = SKILL_RES_MAGIC
		elep = 100
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_ECLIPSE ) {
		dice1 = calcskill_spellpower / 60 + 1 + locvar_calcskill_rs / 20
		dice2 = calcskill_spellpower / 9 + 2 + 1
		bonus = 0
		ele = SKILL_RES_DARKNESS
		elep = 180 + calcskill_spellpower / 5
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_THUNDER_VORTEX ) {
		dice1 = calcskill_spellpower / 70 + 1 + locvar_calcskill_rs / 20
		dice2 = calcskill_spellpower / 10 + 2 + 1
		bonus = 0
		ele = SKILL_RES_LIGHTNING
		elep = 150 + calcskill_spellpower / 5
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_NETHER_WAVE ) {
		dice1 = calcskill_spellpower / 70 + 1 + locvar_calcskill_rs / 20
		dice2 = calcskill_spellpower / 10 + 2 + 1
		bonus = 0
		ele = SKILL_RES_NETHER
		elep = 150 + calcskill_spellpower / 5
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_POISON_STORM ) {
		dice1 = calcskill_spellpower / 65 + 1 + locvar_calcskill_rs / 18
		dice2 = calcskill_spellpower / 10 + 2 + 1
		bonus = 0
		ele = SKILL_RES_POISON
		elep = 200 + calcskill_spellpower / 5
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_BUBBLE_STORM ) {
		dice1 = calcskill_spellpower / 70 + 1 + locvar_calcskill_rs / 30
		dice2 = calcskill_spellpower / 40 + 2 + 1
		bonus = 0
		ele = SKILL_NONE
		elep = 100
		return 1
	}
	if ( calcskill_skillid == SKILL_SPELL_HEALING_RAIN ) {
		dice1 = locvar_calcskill_rs / 20 + 3
		dice2 = calcskill_spellpower / 15 + 5 + 1
		bonus = calcskill_spellpower / 10
		ele = SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_SUICIDE_ATTACK ) {
		dice1 = 1 + locvar_calcskill_rs / 25
		dice2 = 15 + locvar_calcskill_rs / 5 + 1
		bonus = ele == SKILL_NONE
		elep = 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_DRAIN_BLOOD ) {
		dice1 = 1 + locvar_calcskill_rs / 15
		dice2 = 3 + locvar_calcskill_rs / 20 + 1
		bonus = locvar_calcskill_rs / 4
		ele = SKILL_RES_NETHER
		elep = 200
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_VORACITY_FANG ) {
		dice1 = 1 + locvar_calcskill_rs / 9
		dice2 = 7 + locvar_calcskill_rs / 10 + 1
		bonus = locvar_calcskill_rs / 2
		ele = SKILL_RES_NETHER
		elep = 200
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_MP_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 12
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_MAGIC, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20 + cdata(CDATA_MAX_MP, calcskill_charid) / 4
		ele = SKILL_RES_MAGIC
		elep = 200
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_POWER_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 12
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_MAGIC, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_MAGIC
		elep = 200
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_FIRE_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_FIRE, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_FIRE
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_FIRE, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_COLD_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_COLD, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_COLD
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_COLD, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_LIGHTNING_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_LIGHTNING, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_LIGHTNING
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_LIGHTNING, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_DARKNESS_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_DARKNESS, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_DARKNESS
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_DARKNESS, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_CHAOS_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_CHAOS, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_CHAOS
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_CHAOS, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_NETHER_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_NETHER, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_NETHER
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_NETHER, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_POISON_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_POISON, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_POISON
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_POISON, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_SOUND_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_SOUND, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_SOUND
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_SOUND, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_NERVE_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_NERVE, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_NERVE
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_NERVE, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_MIND_BREATH ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 2 + locvar_calcskill_rs / 10 + limit(sdata(SKILL_RES_MIND, calcskill_charid) - 400, 1, locvar_calcskill_rs * 2) / 20 + 1
		bonus = locvar_calcskill_rs / 20
		ele = SKILL_RES_MIND
		elep = limit(locvar_calcskill_rs + sdata(SKILL_RES_MIND, calcskill_charid), 200, 2000) / 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_TOUCH_OF_WEAKNESS ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 3 + 1
		bonus = ep == 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_TOUCH_OF_HUNGER ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 3 + 1
		bonus = ep == 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_TOUCH_OF_FEAR ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 3 + 1
		bonus = 0
		ele = SKILL_NONE
		elep = 100 + locvar_calcskill_rs * 2
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_TOUCH_OF_SLEEP ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 3 + 1
		bonus = 0
		ele = SKILL_NONE
		elep = 100 + locvar_calcskill_rs * 3
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_TOUCH_OF_POISON ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 4 + 1
		bonus = 0
		ele = SKILL_RES_POISON
		elep = locvar_calcskill_rs * 4 + 20
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_MEMORY_POISON ) {
		dice1 = 1 + locvar_calcskill_rs / 5
		dice2 = 2 + locvar_calcskill_rs / 10 + 1
		bonus = locvar_calcskill_rs / 5
		ele = SKILL_RES_POISON
		elep = 100
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_TOUCH_OF_NERVE ) {
		dice1 = 1 + locvar_calcskill_rs / 10
		dice2 = 4 + 1
		bonus = 0
		ele = SKILL_RES_NERVE
		elep = locvar_calcskill_rs * 4 + 20
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_EYE_OF_INSANITY ) {
		dice1 = 1 + locvar_calcskill_rs / 20
		dice2 = 10 + 1
		bonus = elep == 0
		return 1
	}
	if ( calcskill_skillid == SKILL_SPACT_GRENADE ) {
		dice1 = calcskill_spellpower / 110 + 1
		dice2 = calcskill_spellpower / 10 + 2 + 1
		bonus = 0
		ele = SKILL_RES_SOUND
		elep = 150 + calcskill_spellpower / 40
		return 1
	}
	return 0

#defcfunc sorg int sorg_skillid, int sorg_charid
	return sdata(sorg_skillid + STARTING_SKILL_SPACT, sorg_charid) / 1000000

#defcfunc randskill
	return rnd(MAX_SKILL_NORMAL - STARTING_SKILL_NORMAL) + STARTING_SKILL_NORMAL

#defcfunc randattb
	return rnd(MAX_SKILL_ATTR_BASIC) + STARTING_SKILL_ATTR

#include "trait.hsp"

#defcfunc ibit int ibit_bit, int ibit_itemid
	HMMBITCHECK inv(STARTING_INV_ITEM_BIT + ibit_bit / 32, ibit_itemid), ibit_bit \ 32
	return abs(stat)

#deffunc ibitmod int ibitmod_bit, int ibitmod_itemid, int ibitmod_seton
	if ( ibitmod_seton == 0 ) {
		HMMBITOFF inv(STARTING_INV_ITEM_BIT + ibitmod_bit / 32, ibitmod_itemid), ibitmod_bit \ 32
		return
	}
	HMMBITON inv(STARTING_INV_ITEM_BIT + ibitmod_bit / 32, ibitmod_itemid), ibitmod_bit \ 32
	return

#defcfunc refitem int refitem_dbid, int refitem_dbspec
	dbmode = DBMODE_REF_SPEC
	dbid = refitem_dbid
	dbspec = refitem_dbspec
	gosub *db_item
	return stat

#defcfunc iequiploc int iequiploc_itemid
	locvar_iequiploc_p = refitem(inv(INV_ITEM_ID, iequiploc_itemid), DBSPEC_TYPE)
	if ( locvar_iequiploc_p == FILTER_HELM ) {
		return EQUIP_SLOT_HEAD
	}
	if ( locvar_iequiploc_p == FILTER_ACCESSORY_AMULET ) {
		return EQUIP_SLOT_NECK
	}
	if ( locvar_iequiploc_p == FILTER_CLOAK ) {
		return EQUIP_SLOT_BACK
	}
	if ( locvar_iequiploc_p == FILTER_ARMOR ) {
		return EQUIP_SLOT_BODY
	}
	if ( locvar_iequiploc_p == FILTER_WEAPON ) {
		return EQUIP_SLOT_HAND
	}
	if ( locvar_iequiploc_p == FILTER_SHIELD ) {
		return EQUIP_SLOT_HAND
	}
	if ( locvar_iequiploc_p == FILTER_ACCESSORY_RING ) {
		return EQUIP_SLOT_RING
	}
	if ( locvar_iequiploc_p == FILTER_GLOVES ) {
		return EQUIP_SLOT_ARM
	}
	if ( locvar_iequiploc_p == FILTER_BOOTS ) {
		return EQUIP_SLOT_LEG
	}
	if ( locvar_iequiploc_p == FILTER_RANGE ) {
		return EQUIP_SLOT_SHOOT
	}
	if ( locvar_iequiploc_p == FILTER_AMMO ) {
		return EQUIP_SLOT_AMMO
	}
	if ( locvar_iequiploc_p == FILTER_GIRDLE ) {
		return EQUIP_SLOT_WAIST
	}
	return EQUIP_SLOT_NONE

#deffunc setunid int setunid_charid, int setunid_unid
	cdata(CDATA_USERNPC_ID, setunid_charid) = setunid_unid
	if ( cdata(CDATA_PIC, setunid_charid) < xy2pic(0, 21) | cdata(CDATA_PIC, setunid_charid) > xy2pic(31, 21) ) {
		cdata(CDATA_PIC, setunid_charid) = xy2pic(0, 34) + setunid_unid
		cdata(CDATA_PIC, setunid_charid) += COLOR_DEFAULT * COLOR_TINT_MULT
		cdata(CDATA_CHARA_PIC, setunid_charid) = xy2pic(1, 0)
	}
	return

#deffunc getunid int getunid_charid
	locvar_getunid_f = 0
	repeat usernpcmax
		if ( cdatan(CDATAN_USER_NPC_TAG, getunid_charid) == userdatan(0, cnt) ) {
			setunid getunid_charid, cnt
			locvar_getunid_f = 1
			break
		}
	loop
	if ( locvar_getunid_f == 0 ) {
		cdata(CDATA_PIC, getunid_charid) = COLOR_DEFAULT * COLOR_TINT_MULT + 1
		cdata(CDATA_USERNPC_ID, getunid_charid) = usernpcmax
		cdatan(CDATAN_NAME, getunid_charid) = lang("残りカス", "a garbage")
	}
	return locvar_getunid_f

#defcfunc findunid str findunid_arg1
	locvar_getunid_f = 0
	repeat usernpcmax
		if ( findunid_arg1 == userdatan(0, cnt) ) {
			locvar_getunid_f = 1 + cnt
			break
		}
	loop
	return locvar_getunid_f

#defcfunc synccheck int synccheck_arg1, int synccheck_arg2
	if ( synccheck_arg2 == (-1) ) {
		if ( cdata(CDATA_IN_TAGTEAM, synccheck_arg1) == 1 ) {
			return 1
		}
	}
	if ( synccheck_arg2 == (-1) ) {
		return cdata(CDATA_SYNC, synccheck_arg1) == msync | synccheck_arg1 == gdata(GDATA_RIDER)
	}
	if ( mapsync(synccheck_arg1, synccheck_arg2) == msync ) {
		return 1
	}
	return 0

#defcfunc evid
	if ( evnum <= 0 ) {
		return -1
	}
	return evlist(evnum - 1)

#defcfunc evfind int evfind_eventid
	locvar_evfind_f = 0
	repeat evnum
		if ( evlist(cnt) == evfind_eventid ) {
			locvar_evfind_f = 1
		}
	loop
	return locvar_evfind_f

#deffunc evadd int evadd_arg1, int evadd_arg2, int evadd_arg3
	if ( evproc ) {
		evlist(evnum) = evlist(evnum - 1)
		evdata1(evnum) = evdata1(evnum - 1)
		evdata2(evnum) = evdata2(evnum - 1)
		evlist(evnum - 1) = evadd_arg1
		evdata1(evnum - 1) = evadd_arg2
		evdata2(evnum - 1) = evadd_arg3
	}
	else {
		evlist(evnum) = evadd_arg1
		evdata1(evnum) = evadd_arg2
		evdata2(evnum) = evadd_arg3
	}
	evnum++
	return

#include "sound.hsp"

#include "custom_tweaks.hsp"

#deffunc key_check int key_check_arg1
	if ( ginfo(2) == 0 ) {
		objsel 0
	}
	else {
		key = ""
		objprm 0, ""
		keylog = ""
		await 100
		return
	}
	if ( msgalert == 1 ) {
		if ( cfg_alert > 1 ) {
			repeat cfg_alert
				await 10
				locvar_key_check_p = 0
				repeat 106
					if ( cnt == 32 | cnt == 13 | (cnt >= 65 & cnt <= 90) | (cnt >= 96 & cnt <= 105) ) {
						getkey locvar_key_check_a, cnt
						if ( locvar_key_check_a ) {
							locvar_key_check_p = 1
							break
						}
					}
				loop
				if ( locvar_key_check_p == 0 ) {
					break
				}
			loop
			msgalert = 0
			keylog = ""
			objprm 0, ""
		}
	}
	key = ""
	if ( keylog != "" ) {
		keylog = strmid(keylog, 0, 1)
		if ( peek(keylog, 0) == 13 ) {
			keylog = key_enter
		}
		key = keylog
		keylog = ""
		objprm 0, ""
	}
	mousel = 0
	locvar_key_check_f = 0
	key_tab = 0
	key_escape = 0
	stick locvar_key_check_p, 15
	if ( locvar_key_check_p != 0 ) {
		if ( locvar_key_check_p == 128 ) {
			if ( keywait == 0 ) {
				key = key_cancel
				key_escape = 1
			}
		}
		if ( locvar_key_check_p == 1024 ) {
			key_tab = 1
			key = key_next
		}
	}
	else {
		getkey locvar_key_check_a, 12
		if ( locvar_key_check_a ) {
			key = key_wait
			locvar_key_check_f = 1
		}
		getkey locvar_key_check_a, 45
		if ( locvar_key_check_a ) {
			key = key_get
			locvar_key_check_f = 1
		}
		getkey locvar_key_check_a, 36
		if ( locvar_key_check_a ) {
			locvar_key_check_p = 3
		}
		getkey locvar_key_check_a, 33
		if ( locvar_key_check_a ) {
			locvar_key_check_p = 6
		}
		getkey locvar_key_check_a, 35
		if ( locvar_key_check_a ) {
			locvar_key_check_p = 9
		}
		getkey locvar_key_check_a, 34
		if ( locvar_key_check_a ) {
			locvar_key_check_p = 12
		}
	}
	getkey locvar_key_check_a, 17
	if ( locvar_key_check_a ) {
		key_ctrl = 1
	}
	else {
		key_ctrl = 0
	}
	getkey locvar_key_check_a, 18
	if ( locvar_key_check_a ) {
		key_alt = 1
	}
	else {
		key_alt = 0
	}
	getkey locvar_key_check_a, 16
	if ( locvar_key_check_a ) {
		keybd_wait = 100000
		key_shift = 1
		if ( keywait != 0 ) {
			if ( locvar_key_check_a == 0 ) {
				if ( key_shift == 0 ) {
					keywait = 0
				}
			}
		}
		if ( keywait == 0 ) {
			if ( locvar_key_check_a == 1 ) {
				key = key_cancel
				keywait = 1
			}
		}
	}
	else {
		keywait = 0
		key_shift = 0
	}
	if ( cfg_joypad ) {
		locvar_key_check_j = 0
		DIGETJOYSTATE locvar_key_check_j, 0
		HMMBITCHECK locvar_key_check_j, 0
		if ( stat ) {
			locvar_key_check_p += 2
		}
		HMMBITCHECK locvar_key_check_j, 1
		if ( stat ) {
			locvar_key_check_p += 8
		}
		HMMBITCHECK locvar_key_check_j, 2
		if ( stat ) {
			locvar_key_check_p += 1
		}
		HMMBITCHECK locvar_key_check_j, 3
		if ( stat ) {
			locvar_key_check_p += 4
		}
		locvar_key_check_a = 0
		repeat 12
			HMMBITCHECK locvar_key_check_j, 4 + cnt
			if ( stat ) {
				locvar_key_check_a = 1
				if ( jkey(cnt) == key_alter ) {
					key_alt = 1
				}
				if ( jkey(cnt) == key_cancel ) {
					key_shift = 1
					if ( locvar_key_check_p != 0 ) {
						keybd_wait = 100000
					}
				}
				if ( locvar_key_check_prevjoy != cnt ) {
					key = jkey(cnt)
					locvar_key_check_prevjoy = cnt
					if ( key == key_esc ) {
						key = key_cancel
						key_escape = 1
					}
					if ( key_check_arg1 == 0 ) {
						locvar_key_check_b = 0
						if ( key == key_fire ) {
							key = key_northeast
							locvar_key_check_b = 1
						}
						if ( key == key_target ) {
							key = key_northwest
							locvar_key_check_b = 1
						}
						if ( key == key_get ) {
							key = key_northeast
							locvar_key_check_b = 1
						}
						if ( key == key_alter ) {
							key = key_northwest
							locvar_key_check_b = 1
						}
						if ( locvar_key_check_b == 0 & key != key_enter & key != key_cancel & key != key_esc ) {
							key = key_identify
						}
					}
				}
			}
		loop
		if ( locvar_key_check_a == 0 ) {
			locvar_key_check_prevjoy = -1
		}
		else {
			if ( key_check_arg1 == 2 ) {
				return
			}
		}
	}
	if ( quickkeywait ) {
		if ( locvar_key_check_p != 0 ) {
			return
		}
		else {
			quickkeywait = 0
		}
	}
	if ( keybd_wait >= 100000 ) {
		if ( key_shift == 0 ) {
			keybd_wait = 1000
		}
	}
	if ( locvar_key_check_p == 1 ) {
		if ( key_alt == 0 ) {
			key = key_west
			locvar_key_check_f = 1
		}
	}
	if ( locvar_key_check_p == 2 ) {
		if ( key_alt == 0 ) {
			key = key_north
			locvar_key_check_f = 1
		}
	}
	if ( locvar_key_check_p == 4 ) {
		if ( key_alt == 0 ) {
			key = key_east
			locvar_key_check_f = 1
		}
	}
	if ( locvar_key_check_p == 8 ) {
		if ( key_alt == 0 ) {
			key = key_south
			locvar_key_check_f = 1
		}
	}
	if ( locvar_key_check_p == 3 ) {
		key = key_northwest
		locvar_key_check_f = 1
	}
	if ( locvar_key_check_p == 6 ) {
		key = key_northeast
		locvar_key_check_f = 1
	}
	if ( locvar_key_check_p == 9 ) {
		key = key_southwest
		locvar_key_check_f = 1
	}
	if ( locvar_key_check_p == 12 ) {
		key = key_southeast
		locvar_key_check_f = 1
	}
	if ( key_check_arg1 == 2 ) {
		return
	}
	if ( locvar_key_check_f ) {
		if ( locvar_key_check_keyactive != key ) {
			locvar_key_check_keyactive = key
		}
		if ( keybd_wait == 0 ) {
			locvar_key_check_keyactive = key
		}
		if ( key_check_arg1 == 1 ) {
			if ( keybd_attacking != 0 ) {
				if ( keybd_wait \ cfg_attackwait != 0 ) {
					key = ""
				}
			}
			else {
				if ( cfg_scroll == 0 ) {
					if ( keybd_wait < cfg_walkwait * cfg_startrun ) {
						if ( keybd_wait \ cfg_walkwait != 0 ) {
							key = ""
						}
					}
					else {
						running = 1
						if ( keybd_wait < 100000 ) {
							if ( keybd_wait \ cfg_runwait != 0 ) {
								key = ""
							}
						}
					}
				}
				else {
					if ( locvar_key_check_p == 0 ) {
						if ( keybd_wait < 10 ) {
							if ( keybd_wait != 0 ) {
								key = ""
							}
						}
					}
					else {
						if ( keybd_wait > cfg_startrun ) {
							if ( cfg_runscroll == 0 ) {
								if ( keybd_wait \ cfg_runwait != 0 ) {
									key = ""
								}
							}
							running = 1
						}
					}
				}
			}
		}
		else {
			if ( keybd_wait < 14 ) {
				if ( keybd_wait != 0 & keybd_wait != 7 ) {
					key = ""
				}
			}
			else {
				if ( keybd_wait < 1000 ) {
					if ( keybd_wait \ 2 != 1 ) {
						key = ""
					}
				}
			}
		}
		keybd_wait++
	}
	else {
		keybd_wait = 0
		keybd_attacking = 0
		running = 0
		locvar_key_check_keyactive = ""
	}
	repeat 10, 48
		getkey locvar_key_check_p, cnt
		if ( locvar_key_check_p ) {
			locvar_key_check_p = (cnt - 48) \ 10
			key = "sc"
			sc = cnt - 48 + (key_shift == 1 | key_ctrl == 1) * 10
			keybd_event cnt, 0, 2
			locvar_key_check_scon = 1
		}
	loop
	if ( locvar_key_check_scon ) {
		key = "sc"
		locvar_key_check_scon = 0
		keylog = ""
		objprm 0, ""
		return
	}
	if ( keyhalt != 0 ) {
		if ( key != "" | keybd_wait != 0 ) {
			key = ""
		}
		else {
			keyhalt = 0
		}
	}
	return

#deffunc keyrelease
	repeat
		await 30
		stick locvar_keyrelease_a, 768
		if ( locvar_keyrelease_a == 0 ) {
			key_check
			if ( key == "" ) {
				break
			}
		}
	loop
	return

#deffunc press int press_arg1
	repeat
		await 20
		key_check
		if ( press_arg1 == 0 ) {
			if ( key != "" ) {
				break
			}
		}
		if ( press_arg1 == 1 ) {
			if ( key == key_enter | key == key_cancel ) {
				break
			}
		}
	loop
	keyhalt = 1
	return

#deffunc bmes str bmes_arg1, int bmes_arg2, int bmes_arg3, int bmes_arg4
	locvar_bmes_pos_x = ginfo(22)
	locvar_bmes_pos_y = ginfo(23)
	locvar_bmes_mes_color = bmes_arg2, bmes_arg3, bmes_arg4
	repeat 3
		locvar_bmes_mes_y = cnt + locvar_bmes_pos_y - 1
		repeat 3
			pos locvar_bmes_pos_x - 1 + cnt, locvar_bmes_mes_y
			mes bmes_arg1
		loop
	loop
	color locvar_bmes_mes_color(0), locvar_bmes_mes_color(1), locvar_bmes_mes_color(2)
	pos locvar_bmes_pos_x, locvar_bmes_pos_y
	mes bmes_arg1
	return

#deffunc talk_conv var talk_conv_arg1, int talk_conv_arg2
	n@txtfunc = 0
	if ( jp ) {
		msgtemp@txtfunc = talk_conv_arg1
		talk_conv_arg1 = ""
		repeat 100
			len@txtfunc = strlen(msgtemp@txtfunc)
			p2@txtfunc = 0
			if ( len@txtfunc < talk_conv_arg2 ) {
				break
			}
			repeat len@txtfunc
				p@txtfunc = peek(msgtemp@txtfunc, p2@txtfunc)
				if ( p2@txtfunc > len@txtfunc ) {
					break
				}
				if ( p@txtfunc >= 129 & p@txtfunc <= 159 | p@txtfunc >= 224 & p@txtfunc <= 252 ) {
					p@txtfunc = 2
				}
				else {
					p@txtfunc = 1
				}
				p2@txtfunc += p@txtfunc
				if ( p2@txtfunc > talk_conv_arg2 ) {
					m@txtfunc = strmid(msgtemp@txtfunc, p2@txtfunc, 2)
					if ( m@txtfunc == "。" | m@txtfunc == "、" | m@txtfunc == "」" | m@txtfunc == "』" | m@txtfunc == "！" | m@txtfunc == "？" | m@txtfunc == "…" ) {
						p2@txtfunc += 2
					}
					talk_conv_arg1 += strmid(msgtemp@txtfunc, 0, p2@txtfunc) + "\n"
					n@txtfunc++
					msgtemp@txtfunc = strmid(msgtemp@txtfunc, p2@txtfunc, len@txtfunc - p2@txtfunc)
					break
				}
			loop
		loop
		talk_conv_arg1 += msgtemp@txtfunc
	}
	else {
		msgtemp@txtfunc = talk_conv_arg1
		talk_conv_arg1 = ""
		repeat 1000
			len@txtfunc = 0
			repeat 1000
				p@txtfunc = instr(msgtemp@txtfunc, 0, " ") + 1
				if ( p@txtfunc == 0 ) {
					break
				}

				/********** ANNA CUSTOM - BEGINNING **********/ // Fix linebreak when text contains newlines

				if ( instr(msgtemp@txtfunc, 0, "\n") != (-1) & scenemode == 0 ) {
					break
				}

				/********** ANNA CUSTOM - ENDING **********/

				if ( len@txtfunc + p@txtfunc > talk_conv_arg2 ) {
					talk_conv_arg1 += "\n"
					n@txtfunc++
					break
				}
				talk_conv_arg1 += strmid(msgtemp@txtfunc, 0, p@txtfunc)
				len@txtfunc += p@txtfunc
				msgtemp@txtfunc = strmid(msgtemp@txtfunc, p@txtfunc, strlen(msgtemp@txtfunc) - p@txtfunc)
			loop
			if ( p@txtfunc == 0 ) {
				break
			}
		loop
		talk_conv_arg1 += msgtemp@txtfunc
	}
	return n@txtfunc

#deffunc msg_write var msg_write_arg1
	repeat 1
		mp@txtfunc = instr(msg_write_arg1, 0, "♪")
		if ( mp@txtfunc != (-1) ) {
			mark@txtfunc = int(strmid(msg_write_arg1, mp@txtfunc + 2, 1))
			if ( jp ) {
				if ( mark@txtfunc == 0 ) {
					break
				}
			}
			msg_write_arg1 = strmid(msg_write_arg1, 0, mp@txtfunc) + "  " + strmid(msg_write_arg1, mp@txtfunc + 2 + (mark@txtfunc != 0), 9999)
			pos (msglen + mp@txtfunc) * inf_mesfont / 2 + inf_msgx + 7 + en * 3, (inf_msgline - 1) * inf_msgspace + inf_msgy + 5
			gmode 2
			gcopy 3, 600 + mark@txtfunc * 24, 360, 16, 16
			continue cnt
		}
	loop
	color tcol@txtfunc(0), tcol@txtfunc(1), tcol@txtfunc(2)
	pos msglen * inf_mesfont / 2 + inf_msgx + 6, (inf_msgline - 1) * inf_msgspace + inf_msgy + 6
	font lang(cfg_font1, cfg_font2), inf_mesfont - en * 2, 0
	mes msg_write_arg1
	return

#deffunc txtmore
	tmore@txtfunc = 1
	return

#deffunc txtcontinue
	tcontinue@txtfunc = 1
	return

#deffunc anime_halt
	key = ""
	objprm 0, ""
	keylog = ""
	redraw 0
	gmode 0
	gsel 3
	pos 672, 504
	gcopy 0, x@txtfunc, y@txtfunc, 120, 24
	gsel 0
	repeat 12
		redraw 0
		await 10
		pos x@txtfunc, y@txtfunc + 12 - cnt
		gzoom 120, cnt * 2 + 1, 3, 552, 504, 120, 22
		redraw 1
	loop
	press 1
	snd SOUNDLIST_OK1
	repeat 7
		redraw 0
		await 10
		pos x@txtfunc, y@txtfunc
		gcopy 3, 672, 504, 120, 24
		if ( cnt != 6 ) {
			pos x@txtfunc, y@txtfunc + cnt * 2
			gzoom 120, 22 - cnt * 4, 3, 552, 504, 120, 22
		}
		redraw 1
	loop
	redraw 0
	gmode 2
	return

#deffunc msg_halt
	x@txtfunc = windoww - 120
	y@txtfunc = windowh - 22
	anime_halt
	screenupdate = -1
	gosub *screen_draw
	return

#deffunc help_halt
	x@txtfunc = wx + dx - 140
	y@txtfunc = wy + dy - 1
	anime_halt
	return

#deffunc txtef int txtef_color
	tcol@txtfunc = 255 - c_col(0, txtef_color), 255 - c_col(1, txtef_color), 255 - c_col(2, txtef_color)
	if ( txtef_color == COLOR_YELLOW ) {
		tcolfix@txtfunc = 1
	}
	else {
		tcolfix@txtfunc = 0
	}
	return

#deffunc msg_newlog
	if ( cfg_exlog == 0 ) {
		return
	}
	gsel 8
	gmode 0
	pos 0, msgline \ inf_maxlog * inf_msgspace
	gcopy 0, inf_msgx, inf_msgy + 5 + inf_msgspace * 3 + en * 3, windoww - inf_msgx, inf_msgspace
	gsel 0
	return

#deffunc msg_newline
	msg_newlog
	msglen = 0
	msgline++
	if ( msgline >= inf_maxlog ) {
		msgline -= inf_maxlog
	}
	msg(msgline \ inf_maxlog) = ""
	p@txtfunc = (windoww - inf_msgx) / 192
	redraw 0
	gmode 0
	pos inf_msgx, inf_msgy + 5
	gcopy 0, inf_msgx, inf_msgy + 5 + inf_msgspace, windoww - inf_msgx, inf_msgspace * 3 + en * 3
	repeat p@txtfunc + 1
		if ( cnt == p@txtfunc ) {
			x@txtfunc = (windoww - inf_msgx) \ 192
		}
		else {
			x@txtfunc = 192
		}
		pos cnt * 192 + inf_msgx, inf_msgy + 5 + inf_msgspace * 3 + en * 2
		gcopy 3, 496, 536 + msgline \ 4 * inf_msgspace, x@txtfunc, inf_msgspace
	loop
	gmode 2
	msgtempprev = ""
	return

#deffunc txtnew
	if ( tnew == 0 ) {
		if ( strlen(msg(msgline \ inf_maxlog)) > 4 ) {
			msg_newline
			msglen = 2
		}
	}
	return

#deffunc msg_clear
	msg_len = 0
	msgtemp = ""
	repeat 3
		msg_newline
	loop
	return

#deffunc txt_conv
	redraw 0
	if ( msgtemp == "" ) {
		return
	}
	if ( tcopy ) {
		tcopy = 0
		txtcopy = "" + msgtemp
	}
	if ( tnew == 1 ) {
		if ( msg(msgline \ inf_maxlog) != "" ) {
			if ( cfg_msgtrans ) {
				p@txtfunc = (windoww - inf_msgx) / 192
				redraw 0
				gmode 4, , , cfg_msgtrans * 20
				repeat p@txtfunc + 1
					if ( cnt == p@txtfunc ) {
						x@txtfunc = (windoww - inf_msgx) \ 192
					}
					else {
						x@txtfunc = 192
					}
					pos cnt * 192 + inf_msgx, inf_msgy + 5
					gcopy 3, 496, 536, x@txtfunc, inf_msgspace * 4
				loop
			}
			msg_newline
			tnew = 0
			if ( cfg_msgaddtime ) {
				msgtemp = "[" + gdata(GDATA_MIN) + "] " + msgtemp
			}
			else {
				msglen = 2
			}
		}
	}
	if ( msgdup != 0 ) {
		if ( msgtempprev == msgtemp ) {
			return
		}
		msgtempprev = msgtemp
		msgdup = 0
	}
	if ( jp ) {
		if ( instr(msgtemp, 0, "「") != (-1) ) {
			if ( tcolfix@txtfunc == 0 ) {
				tcol@txtfunc = 210, 250, 160
			}
			else {
				tcolfix@txtfunc = 0
			}
		}
		repeat
			len@txtfunc = strlen(msgtemp)
			if ( msglen + 4 > inf_maxmsglen ) {
				if ( msgtemp != "" ) {
					msg_newline
				}
			}
			if ( msglen + len@txtfunc > inf_maxmsglen ) {
				p2@txtfunc = 0
				repeat
					p@txtfunc = peek(msgtemp, p2@txtfunc)
					p2@txtfunc++
					if ( p@txtfunc > 128 & p@txtfunc < 160 ) {
						p2@txtfunc++
					}
					if ( p@txtfunc > 223 & p@txtfunc < 253 ) {
						p2@txtfunc++
					}
					if ( p2@txtfunc + msglen > inf_maxmsglen ) {
						if ( p2@txtfunc + msglen > inf_maxmsglen + 2 ) {
							break
						}
						m@txtfunc = strmid(msgtemp, p2@txtfunc, 2)
						if ( m@txtfunc != "。" & m@txtfunc != "、" & m@txtfunc != "」" & m@txtfunc != "』" & m@txtfunc != "！" & m@txtfunc != "？" & m@txtfunc != "…" ) {
							break
						}
					}
				loop
				m@txtfunc = strmid(msgtemp, 0, p2@txtfunc)
				msg(msgline \ inf_maxlog) += m@txtfunc
				msg_write m@txtfunc
				msgtemp = strmid(msgtemp, p2@txtfunc, len@txtfunc - p2@txtfunc)
				if ( msgtemp == "" | msgtemp == " " ) {
					break
				}
				msg_newline
				continue
			}
			break
		loop
		msg(msgline \ inf_maxlog) += msgtemp
		msg_write msgtemp
		msglen += len@txtfunc
	}
	else {
		if ( tcontinue@txtfunc == 0 ) {
			b@txtfunc = peek(msgtemp, 0)
			if ( instr(msgtemp, 0, "\"") != (-1) ) {
				if ( tcolfix@txtfunc == 0 ) {
					tcol@txtfunc = 210, 250, 160
				}
				else {
					tcolfix@txtfunc = 0
				}
			}
			if ( b@txtfunc >= 97 & b@txtfunc <= 122 ) {
				poke msgtemp, 0, b@txtfunc - 32
			}
		}
		else {
			tcontinue@txtfunc = 0
		}
		msgtemp += " "
		repeat
			await
			p@txtfunc = instr(msgtemp, 0, " ") + 1
			if ( p@txtfunc == 0 ) {
				break
			}
			if ( msglen + p@txtfunc > inf_maxmsglen ) {
				msg_newline
				continue
			}
			mst@txtfunc = strmid(msgtemp, 0, p@txtfunc)
			msg(msgline \ inf_maxlog) += mst@txtfunc
			msg_write mst@txtfunc
			msglen += p@txtfunc
			msgtemp = strmid(msgtemp, p@txtfunc, strlen(msgtemp) - p@txtfunc)
		loop
		msg(msgline \ inf_maxlog) += msgtemp
		msg_write msgtemp
		msglen += strlen(msgtemp)
	}
	return

#defcfunc name int name_arg1
	if ( name_arg1 == CHARA_PLAYER ) {
		if ( gdata(GDATA_TEMPORARY_FLAGS) == 7777 ) {
			return cdatan(CDATAN_NAME, CHARA_PLAYER)
		}
		return lang("あなた", "you")
	}
	if ( synccheck(name_arg1, -1) == 0 ) {
		return lang("何か", "something")
	}
	if ( cdata(CDATA_CONDITION_BLIND, CHARA_PLAYER) != 0 | (cbit(CHARA_BIT_INVISIBLE, name_arg1) == 1 & cbit(CHARA_BIT_SEE_INVISIBLE, CHARA_PLAYER) == 0 & cdata(CDATA_CONDITION_WET, name_arg1) == 0) ) {
		return lang("何か", "something")
	}
	if ( en ) {
		locvar_name_s = strmid(cdatan(CDATAN_NAME, name_arg1), 0, 1)
		if ( locvar_name_s == "\"" | locvar_name_s == "<" ) {
			return cdatan(CDATAN_NAME, name_arg1)
		}
		if ( cbit(CHARA_BIT_HAS_NAME, name_arg1) == 0 ) {
			return "the " + cdatan(CDATAN_NAME, name_arg1)
		}
	}
	return cdatan(CDATAN_NAME, name_arg1)

#defcfunc aln int aln_charid
	if ( aln_charid == CHARA_PLAYER ) {
		return ""
	}
	if ( synccheck(aln_charid, -1) == 0 ) {
		return "それは"
	}
	return "" + cdatan(CDATAN_NAME, aln_charid) + "は"

#defcfunc npcn int npcn_charid
	if ( npcn_charid == CHARA_PLAYER ) {
		return ""
	}
	if ( synccheck(npcn_charid, -1) == 0 ) {
		return "それは"
	}
	return "" + cdatan(CDATAN_NAME, npcn_charid) + "は"

#defcfunc _s int _s_charid, int _s_arg2
	if ( _s_charid < CHARA_PLAYER | _s_charid >= MAX_CHARA_TOTAL ) {
		if ( _s_arg2 ) {
			return "es"
		}
		else {
			return "s"
		}
	}
	if ( _s_charid == CHARA_PLAYER ) {
		return ""
	}
	if ( _s_arg2 ) {
		return "es"
	}
	else {
		return "s"
	}

#defcfunc _s2 int _s2_arg1
	if ( _s2_arg1 > 1 ) {
		return ""
	}
	else {
		return "s"
	}

#defcfunc is2 int is2_arg1
	if ( is2_arg1 > 1 ) {
		return "are"
	}
	else {
		return "is"
	}

#defcfunc is int is_charid
	if ( is_charid < CHARA_PLAYER | is_charid >= MAX_CHARA_TOTAL ) {
		return "is"
	}
	if ( is_charid == CHARA_PLAYER ) {
		return "are"
	}
	return "is"

#defcfunc was int was_charid
	if ( was_charid < CHARA_PLAYER | was_charid >= MAX_CHARA_TOTAL ) {
		return "was"
	}
	if ( was_charid == CHARA_PLAYER ) {
		return "were"
	}
	return "was"

#defcfunc have int have_charid
	if ( have_charid < CHARA_PLAYER | have_charid >= MAX_CHARA_TOTAL ) {
		return "has"
	}
	if ( have_charid == CHARA_PLAYER ) {
		return "have"
	}
	return "has"

#defcfunc does int does_arg1
	if ( does_arg1 == 1 ) {
		return "do"
	}
	else {
		return "does"
	}

#defcfunc he int he_charid, int he_arg2
	if ( he_arg2 ) {
		if ( cdatan(CDATAN_NEWSEX, he_charid) == lang("男性", "male") | cdatan(CDATAN_NEWSEX, he_charid) == lang("なし", "none") ) {
			return lang("彼", "he")
		}
		if ( cdatan(CDATAN_NEWSEX, he_charid) == lang("自称男性", "trans-male") ) {
			return lang("彼？", "he?")
		}
		if ( cdatan(CDATAN_NEWSEX, he_charid) == lang("女性", "female") | cdatan(CDATAN_NEWSEX, he_charid) == lang("両性具有", "hermaphrodite") ) {
			return lang("彼女", "she")
		}
		if ( cdatan(CDATAN_NEWSEX, he_charid) == lang("自称女性", "trans-female") ) {
			return lang("彼女？", "she?")
		}
		if ( cdata(CDATA_SEX, he_charid) == 0 ) {
			return lang("彼", "he")
		}
		else {
			return lang("彼女", "she")
		}
	}
	if ( he_charid < CHARA_PLAYER | he_charid >= MAX_CHARA_TOTAL ) {
		return "it"
	}
	if ( synccheck(he_charid, -1) == 0 ) {
		return "it"
	}
	if ( he_charid == CHARA_PLAYER ) {
		return "you"
	}
	if ( cdata(CDATA_SEX, he_charid) == 0 ) {
		return "he"
	}
	return "she"

/********** ANNA/BLOODYSHADE CUSTOM - BEGINNING **********/

#defcfunc _s3 int _s3_num
	if ( _s3_num > 1 ) {
		return "s"
	}

	return ""

#defcfunc his2 int EntityID
	if ( EntityID == CHARA_PLAYER ) {
		return "your"
	}

	return name(EntityID)

#defcfunc him2 int him2_EntityID
	him2_entity_sex = cdata(CDATA_SEX, him2_EntityID)
	him2_entity_sexadv = cdatan(CDATAN_NEWSEX, him2_EntityID)

	switch him2_entity_sexadv
		case "男性"
		case "male"
		case "なし"
		case "none"
			return "him"
			swbreak
		case "女性"
		case "female"
		case "両性具有"
		case "hermaphrodite"
			return "her"
			swbreak
		case "自称男性"
		case "trans-male"
			return "him?"
			swbreak
		case "自称女性"
		case "trans-female"
			return "her?"
			swbreak
		default
			swbreak
	swend

	if ( him2_entity_sex == 0 ) {
		return "him"
	}

	return "her"

/********** ANNA/BLOODYSHADE CUSTOM - ENDING **********/

#defcfunc his int his_charid, int his_arg2
	if ( his_arg2 ) {
		if ( jp ) {
			if ( his_charid == CHARA_PLAYER ) {
				return "あなたの"
			}
		}
		if ( cdatan(CDATAN_NEWSEX, his_charid) == lang("男性", "male") | cdatan(CDATAN_NEWSEX, his_charid) == lang("なし", "none") ) {
			return lang("彼の", "his")
		}
		if ( cdatan(CDATAN_NEWSEX, his_charid) == lang("自称男性", "trans-male") ) {
			return lang("彼？の", "his?")
		}
		if ( cdatan(CDATAN_NEWSEX, his_charid) == lang("女性", "female") | cdatan(CDATAN_NEWSEX, his_charid) == lang("両性具有", "hermaphrodite") ) {
			return lang("彼女の", "her")
		}
		if ( cdatan(CDATAN_NEWSEX, his_charid) == lang("自称女性", "trans-female") ) {
			return lang("彼女？の", "her?")
		}
		if ( jp ) {
			if ( his_charid == CHARA_PLAYER ) {
				return "あなたの"
			}
			else {
				if ( cdata(CDATA_SEX, his_charid) == 0 ) {
					return "彼の"
				}
				else {
					return "彼女の"
				}
			}
		}
		if ( his_charid == CHARA_PLAYER ) {
			return "your"
		}
		else {
			if ( cdata(CDATA_SEX, his_charid) == 0 ) {
				return "his"
			}
			else {
				return "her"
			}
		}
	}
	if ( his_charid < CHARA_PLAYER | his_charid >= MAX_CHARA_TOTAL ) {
		return "its"
	}
	if ( synccheck(his_charid, -1) == 0 ) {
		return "its"
	}
	if ( his_charid == CHARA_PLAYER ) {
		return "your"
	}
	if ( cdata(CDATA_SEX, his_charid) == 0 ) {
		return "his"
	}
	return "her"

#defcfunc him int him_charid, int him_arg2
	if ( him_arg2 ) {
		if ( cdatan(CDATAN_NEWSEX, him_charid) == lang("男性", "male") | cdatan(CDATAN_NEWSEX, him_charid) == lang("なし", "none") ) {
			return lang("彼", "he")
		}
		if ( cdatan(CDATAN_NEWSEX, him_charid) == lang("自称男性", "trans-male") ) {
			return lang("彼？", "he?")
		}
		if ( cdatan(CDATAN_NEWSEX, him_charid) == lang("女性", "female") | cdatan(CDATAN_NEWSEX, him_charid) == lang("両性具有", "hermaphrodite") ) {
			return lang("彼女", "she")
		}
		if ( cdatan(CDATAN_NEWSEX, him_charid) == lang("自称女性", "trans-female") ) {
			return lang("彼女？", "she?")
		}
		if ( cdata(CDATA_SEX, him_charid) == 0 ) {
			return lang("彼", "him")
		}
		else {
			return lang("彼女", "her")
		}
	}
	if ( him_charid < CHARA_PLAYER | him_charid >= MAX_CHARA_TOTAL ) {
		return "it"
	}
	if ( synccheck(him_charid, -1) == 0 ) {
		return "it"
	}
	if ( him_charid == CHARA_PLAYER ) {
		return "yourself"
	}
	if ( cdata(CDATA_SEX, him_charid) == 0 ) {
		return "him"
	}
	return "her"

/********** ANNA CUSTOM - BEGINNING **********/

#defcfunc your2 int EntityID2
	if ( EntityID2 == CHARA_PLAYER ) {
		return ""
	}
	return "'s"

/********** ANNA CUSTOM - ENDING **********/

#defcfunc your int your_charid, int
	if ( your_charid < CHARA_PLAYER | your_charid >= MAX_CHARA_TOTAL ) {
		return "'s"
	}
	if ( your_charid == CHARA_PLAYER ) {
		return "r"
	}
	return "'s"

#defcfunc yourself int yourself_charid
	if ( yourself_charid < CHARA_PLAYER | yourself_charid >= MAX_CHARA_TOTAL ) {
		return "itself"
	}
	if ( synccheck(yourself_charid, -1) == 0 ) {
		return "itself"
	}
	if ( yourself_charid == CHARA_PLAYER ) {
		return "yourself"
	}
	if ( cdata(CDATA_SEX, yourself_charid) == 0 ) {
		return "himself"
	}
	return "herself"

#deffunc txt_check int txt_check_arg1
	txtvalid = -1
	if ( txt_check_arg1 == 0 ) {
		if ( cc >= CHARA_PLAYER ) {
			if ( synccheck(cc, -1) | cc == CHARA_PLAYER ) {
				txtvalid = 0
				return
			}
		}
	}
	if ( txt_check_arg1 == 1 ) {
		if ( tc >= CHARA_PLAYER ) {
			if ( synccheck(tc, -1) | tc == CHARA_PLAYER ) {
				txtvalid = 0
				return
			}
		}
	}
	if ( txt_check_arg1 == 2 ) {
		if ( cc == CHARA_PLAYER | cdata(CDATA_RELATION, cc) == 10 ) {
			txtvalid = 0
			return
		}
	}
	if ( txt_check_arg1 == 3 ) {
		if ( cc > CHARA_PLAYER ) {
			if ( synccheck(cc, -1) ) {
				txtvalid = 0
				return
			}
		}
	}
	if ( txt_check_arg1 == 4 ) {
		if ( tc == CHARA_PLAYER ) {
			txtvalid = 0
			return
		}
	}
	if ( txt_check_arg1 == 5 ) {
		if ( tc > CHARA_PLAYER ) {
			if ( synccheck(tc, -1) ) {
				txtvalid = 0
			}
		}
	}
	return

#deffunc txt_select str txt_select_arg1, str txt_select_arg2, str txt_select_arg3, str txt_select_arg4, str txt_select_arg5, str txt_select_arg6, str txt_select_arg7, str txt_select_arg8, str txt_select_arg9
	if ( txtvalid == (-1) ) {
		txtvalid = 0
		return
	}
	if ( hear != 0 ) {
		snd hear
		hear = 0
	}
	if ( txtc == 0 ) {
		msgtemp = txt_select_arg1
		txt_conv
	}
	else {
		if ( txtc == 1 ) {
			msgtemp = txt_select_arg2
			txt_conv
		}
		else {
			if ( txtc == 2 ) {
				msgtemp = txt_select_arg3
				txt_conv
			}
			else {
				if ( txtc == 3 ) {
					msgtemp = txt_select_arg4
					txt_conv
				}
				else {
					if ( txtc == 4 ) {
						msgtemp = txt_select_arg5
						txt_conv
					}
					else {
						if ( txtc == 5 ) {
							msgtemp = txt_select_arg6
							txt_conv
						}
						else {
							if ( txtc == 6 ) {
								msgtemp = txt_select_arg7
								txt_conv
							}
							else {
								if ( txtc == 7 ) {
									msgtemp = txt_select_arg8
									txt_conv
								}
								else {
									msgtemp = txt_select_arg9
									txt_conv
								}
							}
						}
					}
				}
			}
		}
	}
	return

#defcfunc cnvfix int cnvfix_arg1
	if ( cnvfix_arg1 >= 0 ) {
		return "+" + cnvfix_arg1
	}
	return "" + cnvfix_arg1

#deffunc stxt int stxt_arg1, str stxt_arg2
	if ( stxt_arg1 == 0 | (synccheck(stxt_arg1, -1) & cdata(CDATA_CONDITION_BLIND, CHARA_PLAYER) == 0) ) {
		txt stxt_arg2
	}
	return

#defcfunc cnvdate int cnvdate_arg1, int cnvdate_arg2
	locvar_cnvdate_p = cnvdate_arg1
	locvar_cnvdate_hour = cnvdate_arg1 \ 24
	locvar_cnvdate_day = cnvdate_arg1 / 24 \ 30
	if ( locvar_cnvdate_day == 0 ) {
		locvar_cnvdate_day = 30
		locvar_cnvdate_p -= 24 * 30
	}
	locvar_cnvdate_month = locvar_cnvdate_p / 24 / 30 \ 12
	if ( locvar_cnvdate_month == 0 ) {
		locvar_cnvdate_month = 12
		locvar_cnvdate_p -= 24 * 30 * 12
	}
	locvar_cnvdate_year = locvar_cnvdate_p / 24 / 30 / 12
	locvar_cnvdate_s = "" + locvar_cnvdate_year + lang("年", " ") + locvar_cnvdate_month + lang("月", "/") + locvar_cnvdate_day + lang("日", " ")
	if ( cnvdate_arg2 == 1 ) {
		locvar_cnvdate_s += "" + locvar_cnvdate_hour + lang("時", "h")
	}
	return locvar_cnvdate_s

#defcfunc cnvplaytime int cnvplaytime_arg1
	return "" + cnvplaytime_arg1 / 60 / 60 + lang("時間", ":") + cnvplaytime_arg1 / 60 \ 60 + lang("分", ":") + cnvplaytime_arg1 \ 60 + lang("秒", " Sec")

#defcfunc roundmargin int roundmargin_arg1, int roundmargin_arg2
	if ( roundmargin_arg1 > roundmargin_arg2 ) {
		return roundmargin_arg1 - rnd(roundmargin_arg1 - roundmargin_arg2)
	}
	if ( roundmargin_arg1 < roundmargin_arg2 ) {
		return roundmargin_arg1 + rnd(roundmargin_arg2 - roundmargin_arg1)
	}
	return roundmargin_arg1

#deffunc at int at_waittime
	if ( cc == CHARA_PLAYER ) {
		autoturn = 1
		if ( cfg_autoturn == 0 ) {
			await at_waittime
			scrturn++
		}
		if ( cfg_autoturn != 2 | firstautoturn == 1 ) {
			screenupdate = -1
			gosub *screen_draw
		}
		if ( cfg_autoturn == 0 ) {
			redraw 1
		}
	}
	return

#include "text.hsp"

*system_init

	/********** ANNA / BLOODYSHADE CUSTOM - BEGINNING **********/

    gosub *ErrorMsgInit

	dim dblist_dup_card, MAX_DB, 2
	dim dblist_dup_fig, MAX_DB, 2

	// Custom AI Declarations
	dim ItemHighlight, 1500
	dim CustomVal, 1200, 250
	dim EnemyAI, 250, 1000
	dim AIData, 125, 15
	dim TweakData, 100, 5
	sdim AITextData, 30, 15, 7
	dim PlaceholderMoveList, 20
	sdim AIStatusNames, 30, 25, 2
	dim StatusOffsets, 25
	AIStatusNames(0, 0) = "Afraid", "Atrophy", "Bind", "Bleeding", "Blind", "Brainwash", "Chills", "Confused", "Dim", "Fury", "Gravity", "Insane", "Jiu-Jitsu", "Metal", "MPoison", "Oil", "Paralyzed", "Poisoned", "Sleep", "Wet", "Wince", "NULL"
	StatusOffsets(0) = CDATA_CONDITION_FEAR, CDATA_CONDITION_ATROPHY, CDATA_CONDITION_BIND, CDATA_CONDITION_BLEED, CDATA_CONDITION_BLIND, CDATA_CONDITION_BRAINWASH, CDATA_CONDITION_CHILLS, CDATA_CONDITION_CONFUSE, CDATA_CONDITION_DIM, CDATA_CONDITION_ANGRY, CDATA_CONDITION_GRAVITY, CDATA_CONDITION_INSANE, CDATA_CONDITION_JIU_JITSU, CDATA_CONDITION_METAL, CDATA_CONDITION_MPOISON, CDATA_CONDITION_OIL, CDATA_CONDITION_PARALYZE, CDATA_CONDITION_POISON, CDATA_CONDITION_SLEEP, CDATA_CONDITION_WET, CDATA_CONDITION_WINCE
	AITextData(0, 0) = "Not Set", "Attack (Melee)", "Attack (Ranged)", "Move (Away)", "Move (Forward)", "And", "NULL"
	AITextData(0, 1) = "Not Set", "Self", "Target", "Ally", "Player", "NULL"
	AITextData(0, 2) = "Not Set", "HP", "MP", "Distance", "Buff", "Gauge", "Class", "Status", "NULL"
	AITextData(0, 3) = "Not Set", "<", ">", "=", "!=", ">=", "<=", "NULL"
	AITextData(0, 4) = "10", "20", "25", "30", "40", "50", "60", "70", "75", "80", "90", "100", "NULL"
	AITextData(0, 5) = "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "NULL"
	AITextData(0, 6) = "warrior", "thief", "wizard", "farmer", "predator", "archer", "warmage", "tourist", "pianist", "gunner", "priest", "claymore", "NULL"

	/********** ANNA / BLOODYSHADE CUSTOM - ENDING **********/

	tmset
	time_warn = timeGetTime() / 1000
	time_begin = timeGetTime() / 1000
	procid = (procid + 1) \ 4
	proclist(procid) = "system_init" + " ct:" + ct
	exist exedir + "config.txt"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "config.txt", exedir + "config.txt"
	}
	exist exedir + "user\\export.txt"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "export.txt", exedir + "user\\export.txt"
	}
	exist exedir + "user\\lastwords.txt"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "lastwords.txt", exedir + "user\\lastwords.txt"
	}
	exist exedir + "user\\lastwords-e.txt"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "lastwords-e.txt", exedir + "user\\lastwords-e.txt"
	}
	exist exedir + "user\\music\\musiclist.txt"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "musiclist.txt", exedir + "user\\music\\musiclist.txt"
	}
	exist exedir + "user\\graphic\\face1.bmp"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "face1.bmp", exedir + "user\\graphic\\face1.bmp"
	}
	gosub *mutexobj
	sdim s, 160, 40
	dim p, 100
	dim rtval, 10
	sdim rtvaln, 50, 10
	sdim key_select, 2, 20
	sdim buff, 10000
	gosub *config_init
	gosub *config_loadCore
	gosub *config_load
	gosub *screen_init
	if ( cfg_fullscreen ) {
		chgdisp 1, windoww, windowh
		bgscr 0, windoww, windowh, 0, 0
		width windoww, windowh, 0, 0
	}
	else {
		screen 0, windoww, windowh, 0, windowx, windowy
	}
	gsel 0
	redraw 0
	color 0
	boxf
	redraw 1
	onkey gosub *esc_check
	onkey 0
	onexit goto *exit_game
	buffer 3, 1440, 800
	picload exedir + "\\graphic\\interface" + devfile + ".bmp", 1
	buffer 4, windoww, windowh
	cfg_exlog = 1
	if ( cfg_exlog ) {
		buffer 8, windoww, windowh
		p = windoww / 192
		repeat inf_maxlog
			cnt2 = cnt
			repeat p + 1
				if ( cnt == p ) {
					x = (windoww - inf_msgx) \ 192
				}
				else {
					x = 192
				}
				pos cnt * 192, cnt2 * inf_msgspace
				gcopy 3, 496, 536 + cnt2 \ 4 * inf_msgspace, x, inf_msgspace
			loop
		loop
		gsel 0
	}
	procid = (procid + 1) \ 4
	proclist(procid) = "Init buffer" + " ct:" + ct
	folder = exedir + "user\\graphic\\"
	buffer 1, SPRITE_SHEET_COLS_ITEM * SPRITE_SIZE_ITEM, SPRITE_SHEET_ROWS_ITEM * SPRITE_SIZE_ITEM
	picload exedir + "\\graphic\\item" + devfile + ".bmp", 1
	if ( inf_tiles != SPRITE_SIZE_ITEM ) {
		pos 0, 0
		gzoom SPRITE_SHEET_COLS_ITEM * inf_tiles, SPRITE_SHEET_ROWS_ITEM * inf_tiles, 1, 0, 0, SPRITE_SHEET_COLS_ITEM * SPRITE_SIZE_ITEM, SPRITE_SHEET_ROWS_ITEM * SPRITE_SIZE_ITEM
	}
	buffer 2, SPRITE_SHEET_COLS_ITEM * inf_tiles, SPRITE_SHEET_ROWS_ITEM * inf_tiles
	buffer 6, SPRITE_SHEET_COLS_ITEM * inf_tiles, SPRITE_SHEET_ROWS_ITEM * inf_tiles
	buffer 7, 24, 24
	buffer 9, 24, 24
	procid = (procid + 1) \ 4
	proclist(procid) = "dim" + " ct:" + ct
	dim initeq, 2, 50
	dup eqhelm, initeq(0, 0)
	dup eqweapon1, initeq(0, 1)
	dup eqshield, initeq(0, 2)
	dup eqrange, initeq(0, 3)
	dup eqammo, initeq(0, 4)
	dup eqweapon2, initeq(0, 5)
	dup eqarmor, initeq(0, 6)
	dup eqglove, initeq(0, 7)
	dup eqboots, initeq(0, 8)
	dup eqcloack, initeq(0, 9)
	dup eqgirdle, initeq(0, 10)
	dup eqring1, initeq(0, 11)
	dup eqring2, initeq(0, 12)
	dup eqamulet1, initeq(0, 13)
	dup eqamulet2, initeq(0, 14)
	dim cmapdata, 5, 400
	dim fixeditemenc, 10 * 2
	dim dir, 5
	dim dblist, 2, MAX_DB
	dim unlist, MAX_DB
	sdim csv, 1000, 40
	sdim filemod
	sdim csvbuff, 10000
	sdim csvidx, 100, 40
	sdim inputlog, 100
	sdim key, 20
	sdim keylog, 20
	sdim msg, 120, inf_maxlog
	sdim msgtemp, 1000
	sdim msgref, 200
	sdim randn1, 30, 20
	sdim randn2, 30, 20
	sdim select, 200
	dim n, 40
	dim rtval, 10
	dim list, 3, 500
	sdim listn, 40, 2, 500
	dim invctrl, 2
	sdim promptl, 50, 3, 20
	sdim description, 1000, 3
	sdim file, 1000
	sdim folder, 1000
	sdim msgtempprev
	dim mef, 9, 200
	dim adata, 40, 500
	dim qdata, QDATA_MAX_SIZE, QDATA_MAX_CLIENT
	sdim qname, QNAME_MAX_SIZE, QDATA_MAX_CLIENT
	dim gdata, 1000
	dim genetemp, 1000
	sdim gdatan, 40, MAX_GDATAN
	dim mdatatmp, 100
	dim mdata, 100
	sdim mdatan, 20, MAX_MDATAN
	sdim cdatan, 40, MAX_CDATAN, MAX_CHARA_TOTAL
	sdim s1, 1000
	dim cdata, MAX_CHARA_DATA, MAX_CHARA_TOTAL
	dim sdata, MAX_SKILL_DATA, MAX_CHARA_TOTAL
	dim spell, MAX_SPELL_COUNT
	dim spells, MAX_SPELL_COUNT
	dim spact, MAX_SPACT_COUNT
	dim mat, MAX_MATERIAL_COUNT
	dim inv, INV_ITEM_MAX, MAX_INV_DATA
	dim trait, 500
	dim itemmemory, 3, MAX_DB
	dim npcmemory, 2, MAX_DB
	dim recipememory, 1599
	dim invmark, 35
	dim commark, 3
	dim feat, 5
	sdim iname, 40
	dim val, 10
	sdim valn, 50, 10
	dim dirchk, 3, 2
	dirchk(0, 0) = -1, 0, 1
	dirchk(0, 1) = 1, 0, -1
	dim chatval, 5
	dim evlist, 10
	dim matneed, 20
	dim pcc, 30, 20
	maxrain = windoww * windowh / 3500
	dim rainx, maxrain * 2
	dim rainy, maxrain * 2
	sdim fltnrace
	dim card, 4, 1000
	dim deck, 1000
	gosub *sRefDefine
	gosub *bRefDefine
	gosub *mRefDefine
	dim rdata, 30, 20
	dup roomexist, rdata(0, 0)
	dup roomx, rdata(0, 1)
	dup roomy, rdata(0, 2)
	dup roomwidth, rdata(0, 3)
	dup roomheight, rdata(0, 4)
	dup roomexit, rdata(0, 5)
	dup roomexitmax, rdata(0, 6)
	dup roomentrancex, rdata(0, 7)
	dup roomentrancey, rdata(0, 8)
	dim idata, 8
	dim dirxy, 2, 4
	dirxy(0, 3) = 0, -1
	dirxy(0, 0) = 0, 1
	dirxy(0, 1) = -1, 0
	dirxy(0, 2) = 1, 0
	dim c_col, 3, MAX_COLOR
	c_col(0, 0) = 0, 0, 0
	c_col(0, 2) = 80, 0, 80
	c_col(0, 3) = 0, 100, 100
	c_col(0, 4) = 80, 80, 0
	c_col(0, 6) = 0, 40, 80
	c_col(0, 5) = 0, 0, 80
	c_col(0, 7) = 100, 101, 102
	c_col(0, 8) = 70, 100, 40
	c_col(0, 9) = 100, 50, 50
	c_col(0, 10) = 0, 60, 70
	c_col(0, 11) = 20, 40, 100
	c_col(0, 12) = 10, 10, 10
	c_col(0, 13) = 30, 40, 70
	c_col(0, 14) = 150, 20, 150
	c_col(0, 15) = 50, 50, 50
	c_col(0, 16) = 0, 30, 30
	c_col(0, 17) = 30, 30, 0
	c_col(0, 18) = 30, 60, 0
	c_col(0, 19) = 40, 0, 40
	c_col(0, 20) = 45, 5, 95
	c_col(0, 21) = 255, 100, 1
	c_col(0, 22) = 0, 200, 200
	c_col(0, 23) = 90, 60, 250
	c_col(0, 24) = 150, 150, 150
	c_col(0, 25) = 0, 0, 200
	c_col(0, 26) = 90, 110, 130
	c_col(0, 27) = 80, 150, 0
	c_col(0, 28) = 180, 180, 180
	c_col(0, 29) = 230, 230, 230
	dim dirchk, 3, 2
	dirchk(0, 0) = -1, 0, 1
	dirchk(0, 1) = 1, 0, -1
	dim val_skill, 5
	sdim valn_skill, 40, 3
	dim cs_posbk, 4
	dim floorstack, 400
	sdim key_list, 2, 20
	sdim playerheader, 100
	sdim artifactlocation
	sdim newsbuff
	sdim soundfile, 30, SOUNDLIST_MAX
	sdim musicfile, 30, MUSICLIST_MAX + 5
	dim slight, inf_screenw + 4, inf_screenh + 4
	dim slightbk, inf_screenw + 4, inf_screenh + 4
	gsel 3
	gmode 0
	redraw 0
	color 1, 1, 1
	font lang(cfg_font1, cfg_font2), 15 - en * 2, 0
	repeat 18
		pos cnt * 24 + 72, 30
		gcopy 3, 0, 30, 24, 18
		pos cnt * 24 + 77, 31
		color 50, 60, 80
		bmes key_select(cnt), 250, 240, 230
	loop
	gsel 0
	gmode 2
	text_set
	notesel msg_log
	repeat inf_maxlog - 2
		noteadd ""
	loop
	noteadd lang("■メッセージログ", "<Message Log>")
	noteadd lang("過去の20行分のメッセージが表示されます。", "Past 20 message lines are logged.")
	fmode = 10
	gosub *game_ctrlFile
	tc = CHARA_PLAYER
	tcol@txtfunc = 255, 255, 255
	invctrl = 0, 0
	pos -40, -40
	mesbox keylog, 0, 0, 1, 10
	sdim buffboard
	notesel buffboard
	noteload exedir + "data\\board.txt"
	sdim filter_item
	sdim rffilter_item
	sdim ioriginalnameref
	sdim ioriginalnameref2
	sdim iknownnameref
	sdim ialphanameref
	dim irandomname, MAX_DB
	dim icolref
	dim keybd_st, 256
	dim trate, 9
	sdim filtern
	sdim filter_creature
	sdim netbuf, 20000
	gosub *del_userNpc
	gosub *del_userTemp
	gosub *db_setFilterRace
	gosub *db_setFilterCreature
	gosub *db_setFilterItem
	gosub *chip_init
	gosub *building_init
	gosub *setArea
	gosub *setCellObj
	gosub *random_titleInit
	gdata(GDATA_RAND_SEED_A) = rnd(800) + 2
	gdata(GDATA_RAND_SEED_B) = rnd(200) + 2
	gosub *god_init
	gosub *db_setItem
	gosub *trait_init
	gosub *rank_init
	gosub *politics_init
	gosub *item_materialInit
	gosub *item_egoInit
	gosub *item_encInit
	gosub *item_fltInit
	gosub *item_foodInit
	gosub *recipe_init
	gosub *fish_init
	gosub *map_randNameInit
	gosub *setHome
	gosub *userNpc_update
	if ( cfg_music == 1 ) {
		DMINIT
		if ( stat == 0 ) {
			cfg_music = 2
		}
	}
	if ( cfg_sound == 1 ) {
		DSINIT
		if ( stat == 0 ) {
			cfg_sound = 2
		}
	}
	if ( cfg_joypad == 1 ) {
		DIINIT
		DIGETJOYNUM
		if ( stat == 0 ) {
			cfg_joypad = 0
		}
	}
	gosub *sound_init
	gosub *music_init
	mainskill = SKILL_NORMAL_EVASION, SKILL_WEAPON_MARTIAL_ARTS, SKILL_WEAPON_BOW
	dim cycle, 15, 5
	sdim cyclekey, 5, 15
	cycle(0, 0) = 1, 2, 5, 7, 8, 9, 14, 15, 17, 26, -1
	cycle(0, 1) = 1, 5, 7, 8, 14, -1
	cycle(0, 2) = 10, 25, -1
	cycle(0, 3) = 22, 24, -1
	cycle(0, 4) = 2, -1
	cyclemax = 9, 4, 1, 1, 0
	shadowmap = 0, 9, 10, 5, 12, 7, 0, 1, 11, 0, 6, 3, 8, 4, 2, 0, 0
	lastctrl = 1
	dim invicon, 40
	sdim invkey, 4, 40
	invkey = "", "" + key_inventory, "" + key_drop, "", "", "" + key_eat, "", "" + key_read, "" + key_drink, "" + key_zap, "", "", "", "", "" + key_use, "" + key_open, "", "" + key_dip
	invkey(26) = "" + key_throw
	invicon = -1, 7, 8, -1, -1, 2, -1, 3, 0, 1, 17, -1, -1, -1, 5, 4, -1, 6, -1, -1, -1, -1, 17, -1, 17, 17, 18, -1, -1, -1, -1, -1, -1, -1, -1
	if ( cfg_autonumlock ) {
		GetKeyboardState keybd_st
		if ( peek(keybd_st, 144) == 1 ) {
			keybd_event 144
			keybd_event 144, 0, 2
		}
	}
	goto *game_init

*ErrorMsgInit
    sdim ErrorMsg, 2, 42

    ErrorMsg(0, 0) = "",                                            ""
    ErrorMsg(0, 1) = "システムエラーが発生しました",                "Unknown system error"
    ErrorMsg(0, 2) = "文法が間違っています",                        "Syntax error"
    ErrorMsg(0, 3) = "パラメータの値が異常です",                    "Illegal function call"
    ErrorMsg(0, 4) = "計算式でエラーが発生しました",                "Wrong expression"
    ErrorMsg(0, 5) = "パラメータの省略はできません",                "Default parameter not allowed"
    ErrorMsg(0, 6) = "パラメータの型が違います",                    "Type mismatch"
    ErrorMsg(0, 7) = "配列の要素が無効です",                        "Array overflow"
    ErrorMsg(0, 8) = "有効なラベルが指定されていません",            "Not a label object"
    ErrorMsg(0, 9) = "サブルーチンやループのネストが深すぎます",    "Too many nesting"
    ErrorMsg(0, 10) = "サブルーチン外のreturnは無効です",           "Return without gosub"
    ErrorMsg(0, 11) = "repeat外でのloopは無効です",                 "Loop without repeat"
    ErrorMsg(0, 12) = "ファイルが見つからないか無効な名前です",     "File I/O error"
    ErrorMsg(0, 13) = "画像ファイルがありません",                   "Picture file missing"
    ErrorMsg(0, 14) = "外部ファイル呼び出し中のエラーです",         "External execute error"
    ErrorMsg(0, 15) = "計算式でカッコの記述が違います",             "Priority error"
    ErrorMsg(0, 16) = "パラメータの数が多すぎます",                 "Too many parameters"
    ErrorMsg(0, 17) = "文字列式で扱える文字数を越えました",         "Temporary buffer overflow"
    ErrorMsg(0, 18) = "代入できない変数名を指定しています",         "Wrong valiable name"
    ErrorMsg(0, 19) = "0で除算しました",                            "Divided by zero"
    ErrorMsg(0, 20) = "バッファオーバーフローが発生しました",       "Buffer Overflow"
    ErrorMsg(0, 21) = "サポートされない機能を選択しました",         "Unsupported function"
    ErrorMsg(0, 22) = "計算式のカッコが深すぎます",                 "Expression too complex"
    ErrorMsg(0, 23) = "変数名が指定されていません",                 "Variable required"
    ErrorMsg(0, 24) = "整数以外が指定されています",                 "Integer value required"
    ErrorMsg(0, 25) = "配列の要素書式が間違っています",             "Bad array expression"
    ErrorMsg(0, 26) = "メモリの確保ができませんでした",             "Out of memory"
    ErrorMsg(0, 27) = "タイプの初期化に失敗しました",               "Type initalization failed"
    ErrorMsg(0, 28) = "関数に引数が設定されていません",             "No Function parameters"
    ErrorMsg(0, 29) = "スタック領域のオーバーフローです",           "Stack overflow"
    ErrorMsg(0, 30) = "無効な名前がパラメーターに指定されています", "Invalid parameter name"
    ErrorMsg(0, 31) = "異なる型を持つ配列変数に代入しました",       "Invalid type of array"
    ErrorMsg(0, 32) = "関数のパラメーター記述が不正です",           "Invalid function parameter"
    ErrorMsg(0, 33) = "オブジェクト数が多すぎます",                 "Too many window objects"
    ErrorMsg(0, 34) = "配列・関数として使用できない型です",         "Invalid Array/Function"
    ErrorMsg(0, 35) = "モジュール変数が指定されていません",         "Structure required"
    ErrorMsg(0, 36) = "モジュール変数の指定が無効です",             "Illegal structure call"
    ErrorMsg(0, 37) = "変数型の変換に失敗しました",                 "Invalid type of variable"
    ErrorMsg(0, 38) = "外部DLLの呼び出しに失敗しました",            "DLL call failed"
    ErrorMsg(0, 39) = "外部オブジェクトの呼び出しに失敗しました",   "External COM call failed"
    ErrorMsg(0, 40) = "関数の戻り値が設定されていません。",         "No function result"
    ErrorMsg(0, 41) = "関数を命令として記述しています。",           "Invalid syntax for function"

    return

*exit_game
	if ( cfg_music == 1 ) {
		DMEND
	}
	if ( cfg_sound == 1 ) {
		DSEND
	}
	if ( ieopen ) {
		delcom ie_event
		delcom ie
	}
	if ( cfg_autonumlock ) {
		keybd_event 144
		keybd_event 144, 0, 2
	}
	if ( mutex_handle != 0 ) {
		CloseHandle mutex_handle
	}
	end

*exit_game_error
	if ( errorhack > 1 ) {
		goto *exit_game
	}
	else {
		errorhack++
	}
	buf = "HspError " + wparam + " WinError " + GetLastError() + " Line " + lparam + " Ver " + int(double("3.21") * 1000) + " Mode " + mode + "\n"
	buf += "Message (JP): " + ErrorMsg(0, wparam) + "\n"
	buf += "Message (EN): " + ErrorMsg(1, wparam) + "\n"
	buf += "efId " + efid + " efP " + efp + " Area " + gdata(GDATA_AREA) + "/" + gdata(GDATA_LEVEL) + "\n"
	buf += "ci "
	if ( ci < SIZE_INV1 ) {
		buf += "0"
		if ( ci >= 0 ) {
			buf += "#" + inv(INV_ITEM_ID, ci)
		}
	}
	if ( ci >= RANGE_INV2 ) {
		buf += "-1"
		if ( ci < MAX_INV_DATA ) {
			buf += "#" + inv(INV_ITEM_ID, ci)
		}
	}
	if ( ci >= SIZE_INV1 ) {
		if ( ci < RANGE_INV2 ) {
			buf += "" + ((ci - SIZE_INV1) / SIZE_INV2 + 1)
			buf += "#" + inv(INV_ITEM_ID, ci)
		}
	}
	buf += " ti "
	if ( ti < SIZE_INV1 ) {
		buf += "0"
		if ( ti >= 0 ) {
			buf += "#" + inv(INV_ITEM_ID, ti)
		}
	}
	if ( ti >= RANGE_INV2 ) {
		buf += "-1"
		if ( ti < MAX_INV_DATA ) {
			buf += "#" + inv(INV_ITEM_ID, ti)
		}
	}
	if ( ti >= SIZE_INV1 ) {
		if ( ti < RANGE_INV2 ) {
			buf += "" + ((ti - SIZE_INV1) / SIZE_INV2 + 1)
			buf += "#" + inv(INV_ITEM_ID, ti)
		}
	}
	buf += " cc " + cc
	if ( cc >= CHARA_PLAYER & cc < MAX_CHARA_TOTAL ) {
		buf += "#" + cdata(CDATA_ID, cc)
	}
	buf += " tc " + tc
	if ( tc >= CHARA_PLAYER & tc < MAX_CHARA_TOTAL ) {
		buf += "#" + cdata(CDATA_ID, tc)
	}
	buf += " rc " + rc
	if ( rc >= CHARA_PLAYER & rc < MAX_CHARA_TOTAL ) {
		buf += "#" + cdata(CDATA_ID, rc)
	}
	buf += "\n"
	repeat 4
		buf += "" + (3 - cnt) + ". " + proclist((procid + cnt + 1) \ 4) + "\n"
	loop
	repeat MAX_CHARA_TOTAL
		if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
			continue
		}
		if ( cdata(CDATA_X, cnt) < 0 | cdata(CDATA_X, cnt) >= mdata(MDATA_WIDTH) | cdata(CDATA_Y, cnt) < 0 | cdata(CDATA_Y, cnt) >= mdata(MDATA_HEIGHT) ) {
			buf += "* invalid chara position " + cnt + "#" + cdata(CDATA_ID, cnt) + "(" + cdata(CDATA_X, cnt) + "/" + cdata(CDATA_Y, cnt) + ") max(" + mdata(MDATA_WIDTH) + "/" + mdata(MDATA_HEIGHT) + ")\n"
		}
	loop
	repeat MAX_MAP_INV, RANGE_INV2
		if ( mode == MODELIST_SHOP ) {
			break
		}
		if ( inv(INV_ITEM_NUM, cnt) <= 0 ) {
			continue
		}
		if ( inv(INV_ITEM_X, cnt) < 0 | inv(INV_ITEM_X, cnt) >= mdata(MDATA_WIDTH) | inv(INV_ITEM_Y, cnt) < 0 | inv(INV_ITEM_Y, cnt) >= mdata(MDATA_HEIGHT) ) {
			buf += "* invalid item position " + cnt + "#" + inv(INV_ITEM_ID, cnt) + "(" + inv(INV_ITEM_X, cnt) + "/" + inv(INV_ITEM_Y, cnt) + ") max(" + mdata(MDATA_WIDTH) + "/" + mdata(MDATA_HEIGHT) + ")\n"
		}
	loop
	if ( characreatehack ) {
		buf += "* error in function:chara_create:#" + (characreatehack - 1) + "\n"
	}
	if ( itemcreatehack ) {
		buf += "* error in function:item_create:#" + (itemcreatehack - 1) + "\n"
	}
	if ( chararefreshhack ) {
		buf += "* error in function:charaRefresh\n"
	}
	if ( itemnamehack ) {
		buf += "* error in function:itemName:#" + (itemnamehack - 1) + "\n"
	}
	if ( screendrawhack ) {
		buf += "* error in function:screen_draw:" + screendrawhack + "\n"
	}
	if ( gdata(GDATA_AREA) == AREA_SHOW_HOUSE ) {
		buf += "* (possibly)invalid show room:#" + usermapid + "\n"
	}
	if ( ci < 0 ) {
		buf += "* ci is below 0\n"
	}
	if ( ci >= MAX_INV_DATA ) {
		buf += "* ci is above max\n"
	}
	if ( ti < 0 ) {
		buf += "* ti is below 0\n"
	}
	if ( ti >= MAX_INV_DATA ) {
		buf += "* ti is above max\n"
	}
	if ( cc < CHARA_PLAYER ) {
		buf += "* cc is below 0\n"
	}
	if ( cc >= MAX_CHARA_TOTAL ) {
		buf += "* cc is above max\n"
	}
	if ( tc < CHARA_PLAYER ) {
		buf += "* tc is below 0\n"
	}
	if ( tc >= MAX_CHARA_TOTAL ) {
		buf += "* tc is above max\n"
	}
	if ( rc < CHARA_PLAYER ) {
		buf += "* rc is below 0\n"
	}
	if ( rc >= MAX_CHARA_TOTAL ) {
		buf += "* rc is above max\n"
	}
	buf += lang("\n\nどのようなことをしてエラーが出たのか、再現性の有無、状況のわかるスクリーンショット、本家開発版との比較結果などの情報を確認・整理してください。そのうえでElona板の開発スレにバグ報告用テンプレに沿って報告して頂けると、原因の特定ができて助かります。起きたことを簡潔に述べる、エラー文のみを報告する、程度では解決する見込みはほとんどありません。", "\n\nPlease check and organize the information as to what kind of thing you were doing when the error occurred, if it is reproducible, screenshot showing the problem, comparison of the results from the vanilla version. In addition, if you can use the bug reporting template on the Elona board development thread, it would help identify the cause and will be saved for reference. There is little chance it will be solved if you provide very little information or just the error code.")
	notesel buf
	notesave exedir + "error.txt"
	exec exedir + "error.txt", 16
	goto *exit_game

